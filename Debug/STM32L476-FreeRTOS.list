
STM32L476-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd8  08003dd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003dd8  08003dd8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dd8  08003dd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ddc  08003ddc  00013ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000154c  20000070  08003e50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  08003e50  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e763  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000259e  00000000  00000000  0002e846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00030de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b5c  00000000  00000000  00031cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287dd  00000000  00000000  0003281c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a87  00000000  00000000  0005aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f659d  00000000  00000000  0006ba80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000429c  00000000  00000000  00162020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001662bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d38 	.word	0x08003d38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003d38 	.word	0x08003d38

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	2000012c 	.word	0x2000012c

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fadd 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f845 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f895 	bl	8000340 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  xStatus = xTaskCreate(task1, "task1", 200, "Hello World Task 1", 2, &xTask1);
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	9301      	str	r3, [sp, #4]
 800021c:	2302      	movs	r3, #2
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <main+0x80>)
 8000222:	22c8      	movs	r2, #200	; 0xc8
 8000224:	4918      	ldr	r1, [pc, #96]	; (8000288 <main+0x84>)
 8000226:	4819      	ldr	r0, [pc, #100]	; (800028c <main+0x88>)
 8000228:	f001 ff9f 	bl	800216a <xTaskCreate>
 800022c:	6178      	str	r0, [r7, #20]
  configASSERT(xStatus == pdPASS);
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d00a      	beq.n	800024a <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000238:	f383 8811 	msr	BASEPRI, r3
 800023c:	f3bf 8f6f 	isb	sy
 8000240:	f3bf 8f4f 	dsb	sy
 8000244:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000246:	bf00      	nop
 8000248:	e7fe      	b.n	8000248 <main+0x44>

  xStatus = xTaskCreate(task2, "task2", 200, "Hello World Task 2", 2, &xTask2);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	9301      	str	r3, [sp, #4]
 800024e:	2302      	movs	r3, #2
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <main+0x8c>)
 8000254:	22c8      	movs	r2, #200	; 0xc8
 8000256:	490f      	ldr	r1, [pc, #60]	; (8000294 <main+0x90>)
 8000258:	480f      	ldr	r0, [pc, #60]	; (8000298 <main+0x94>)
 800025a:	f001 ff86 	bl	800216a <xTaskCreate>
 800025e:	6178      	str	r0, [r7, #20]
  configASSERT(xStatus == pdPASS);
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d00a      	beq.n	800027c <main+0x78>
        __asm volatile
 8000266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800026a:	f383 8811 	msr	BASEPRI, r3
 800026e:	f3bf 8f6f 	isb	sy
 8000272:	f3bf 8f4f 	dsb	sy
 8000276:	60fb      	str	r3, [r7, #12]
    }
 8000278:	bf00      	nop
 800027a:	e7fe      	b.n	800027a <main+0x76>

  // start the freeRTOS scheduler
   vTaskStartScheduler();
 800027c:	f002 f8e0 	bl	8002440 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000280:	e7fe      	b.n	8000280 <main+0x7c>
 8000282:	bf00      	nop
 8000284:	08003d50 	.word	0x08003d50
 8000288:	08003d64 	.word	0x08003d64
 800028c:	08000431 	.word	0x08000431
 8000290:	08003d6c 	.word	0x08003d6c
 8000294:	08003d80 	.word	0x08003d80
 8000298:	08000455 	.word	0x08000455

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b096      	sub	sp, #88	; 0x58
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	2244      	movs	r2, #68	; 0x44
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 fa30 	bl	8003710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	463b      	mov	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002c2:	f000 fd73 	bl	8000dac <HAL_PWREx_ControlVoltageScaling>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002cc:	f000 f8e6 	bl	800049c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d0:	2302      	movs	r3, #2
 80002d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	2310      	movs	r3, #16
 80002dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e2:	2302      	movs	r3, #2
 80002e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002ea:	230a      	movs	r3, #10
 80002ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ee:	2307      	movs	r3, #7
 80002f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f2:	2302      	movs	r3, #2
 80002f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f6:	2302      	movs	r3, #2
 80002f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fdaa 	bl	8000e58 <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800030a:	f000 f8c7 	bl	800049c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	2303      	movs	r3, #3
 8000314:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000322:	463b      	mov	r3, r7
 8000324:	2104      	movs	r1, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f001 f972 	bl	8001610 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000332:	f000 f8b3 	bl	800049c <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3758      	adds	r7, #88	; 0x58
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08a      	sub	sp, #40	; 0x28
 8000344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	f107 0314 	add.w	r3, r7, #20
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000356:	4b34      	ldr	r3, [pc, #208]	; (8000428 <MX_GPIO_Init+0xe8>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	4a33      	ldr	r2, [pc, #204]	; (8000428 <MX_GPIO_Init+0xe8>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000362:	4b31      	ldr	r3, [pc, #196]	; (8000428 <MX_GPIO_Init+0xe8>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	f003 0304 	and.w	r3, r3, #4
 800036a:	613b      	str	r3, [r7, #16]
 800036c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800036e:	4b2e      	ldr	r3, [pc, #184]	; (8000428 <MX_GPIO_Init+0xe8>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a2d      	ldr	r2, [pc, #180]	; (8000428 <MX_GPIO_Init+0xe8>)
 8000374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b2b      	ldr	r3, [pc, #172]	; (8000428 <MX_GPIO_Init+0xe8>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b28      	ldr	r3, [pc, #160]	; (8000428 <MX_GPIO_Init+0xe8>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	4a27      	ldr	r2, [pc, #156]	; (8000428 <MX_GPIO_Init+0xe8>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000392:	4b25      	ldr	r3, [pc, #148]	; (8000428 <MX_GPIO_Init+0xe8>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b22      	ldr	r3, [pc, #136]	; (8000428 <MX_GPIO_Init+0xe8>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	4a21      	ldr	r2, [pc, #132]	; (8000428 <MX_GPIO_Init+0xe8>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <MX_GPIO_Init+0xe8>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2120      	movs	r1, #32
 80003ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003be:	f000 fccf 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	4619      	mov	r1, r3
 80003d8:	4814      	ldr	r0, [pc, #80]	; (800042c <MX_GPIO_Init+0xec>)
 80003da:	f000 fb17 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003de:	230c      	movs	r3, #12
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003ea:	2303      	movs	r3, #3
 80003ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003ee:	2307      	movs	r3, #7
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	4619      	mov	r1, r3
 80003f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fc:	f000 fb06 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000400:	2320      	movs	r3, #32
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2300      	movs	r3, #0
 800040e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	4619      	mov	r1, r3
 8000416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041a:	f000 faf7 	bl	8000a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041e:	bf00      	nop
 8000420:	3728      	adds	r7, #40	; 0x28
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	48000800 	.word	0x48000800

08000430 <task1>:

/* USER CODE BEGIN 4 */

static void task1(void* pvParameters)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)pvParameters);
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f003 f889 	bl	8003550 <puts>
		taskYIELD();
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <task1+0x20>)
 8000440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	f3bf 8f4f 	dsb	sy
 800044a:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)pvParameters);
 800044e:	e7f3      	b.n	8000438 <task1+0x8>
 8000450:	e000ed04 	.word	0xe000ed04

08000454 <task2>:
	}
}

static void task2(void* pvParameters)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)pvParameters);
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f003 f877 	bl	8003550 <puts>
		taskYIELD();
 8000462:	4b04      	ldr	r3, [pc, #16]	; (8000474 <task2+0x20>)
 8000464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	f3bf 8f4f 	dsb	sy
 800046e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)pvParameters);
 8000472:	e7f3      	b.n	800045c <task2+0x8>
 8000474:	e000ed04 	.word	0xe000ed04

08000478 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d101      	bne.n	800048e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800048a:	f000 f9bd 	bl	8000808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40001000 	.word	0x40001000

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x44>)
 80004b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_MspInit+0x44>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_MspInit+0x44>)
 80004bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_MspInit+0x44>)
 80004c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_MspInit+0x44>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	6593      	str	r3, [r2, #88]	; 0x58
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_MspInit+0x44>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08e      	sub	sp, #56	; 0x38
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004f8:	2300      	movs	r3, #0
 80004fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004fe:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <HAL_InitTick+0xe0>)
 8000500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000502:	4a33      	ldr	r2, [pc, #204]	; (80005d0 <HAL_InitTick+0xe0>)
 8000504:	f043 0310 	orr.w	r3, r3, #16
 8000508:	6593      	str	r3, [r2, #88]	; 0x58
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <HAL_InitTick+0xe0>)
 800050c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800050e:	f003 0310 	and.w	r3, r3, #16
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000516:	f107 0210 	add.w	r2, r7, #16
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	4611      	mov	r1, r2
 8000520:	4618      	mov	r0, r3
 8000522:	f001 fa23 	bl	800196c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000526:	6a3b      	ldr	r3, [r7, #32]
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800052a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800052c:	2b00      	cmp	r3, #0
 800052e:	d103      	bne.n	8000538 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000530:	f001 fa06 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 8000534:	6378      	str	r0, [r7, #52]	; 0x34
 8000536:	e004      	b.n	8000542 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000538:	f001 fa02 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 800053c:	4603      	mov	r3, r0
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000544:	4a23      	ldr	r2, [pc, #140]	; (80005d4 <HAL_InitTick+0xe4>)
 8000546:	fba2 2303 	umull	r2, r3, r2, r3
 800054a:	0c9b      	lsrs	r3, r3, #18
 800054c:	3b01      	subs	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <HAL_InitTick+0xe8>)
 8000552:	4a22      	ldr	r2, [pc, #136]	; (80005dc <HAL_InitTick+0xec>)
 8000554:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <HAL_InitTick+0xe8>)
 8000558:	f240 32e7 	movw	r2, #999	; 0x3e7
 800055c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800055e:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <HAL_InitTick+0xe8>)
 8000560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000562:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <HAL_InitTick+0xe8>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056a:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <HAL_InitTick+0xe8>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <HAL_InitTick+0xe8>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000576:	4818      	ldr	r0, [pc, #96]	; (80005d8 <HAL_InitTick+0xe8>)
 8000578:	f001 fa8a 	bl	8001a90 <HAL_TIM_Base_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000586:	2b00      	cmp	r3, #0
 8000588:	d11b      	bne.n	80005c2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800058a:	4813      	ldr	r0, [pc, #76]	; (80005d8 <HAL_InitTick+0xe8>)
 800058c:	f001 fae2 	bl	8001b54 <HAL_TIM_Base_Start_IT>
 8000590:	4603      	mov	r3, r0
 8000592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000596:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800059a:	2b00      	cmp	r3, #0
 800059c:	d111      	bne.n	80005c2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800059e:	2036      	movs	r0, #54	; 0x36
 80005a0:	f000 fa26 	bl	80009f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b0f      	cmp	r3, #15
 80005a8:	d808      	bhi.n	80005bc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80005aa:	2200      	movs	r2, #0
 80005ac:	6879      	ldr	r1, [r7, #4]
 80005ae:	2036      	movs	r0, #54	; 0x36
 80005b0:	f000 fa02 	bl	80009b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <HAL_InitTick+0xf0>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	e002      	b.n	80005c2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3738      	adds	r7, #56	; 0x38
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000
 80005d4:	431bde83 	.word	0x431bde83
 80005d8:	2000032c 	.word	0x2000032c
 80005dc:	40001000 	.word	0x40001000
 80005e0:	20000004 	.word	0x20000004

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <TIM6_DAC_IRQHandler+0x10>)
 8000616:	f001 fb0d 	bl	8001c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000032c 	.word	0x2000032c

08000624 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <ITM_SendChar+0x48>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <ITM_SendChar+0x48>)
 8000634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000638:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <ITM_SendChar+0x4c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <ITM_SendChar+0x4c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000646:	bf00      	nop
 8000648:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f8      	beq.n	8000648 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000656:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	6013      	str	r3, [r2, #0]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000edfc 	.word	0xe000edfc
 8000670:	e0000e00 	.word	0xe0000e00

08000674 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e00a      	b.n	800069c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000686:	f3af 8000 	nop.w
 800068a:	4601      	mov	r1, r0
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	60ba      	str	r2, [r7, #8]
 8000692:	b2ca      	uxtb	r2, r1
 8000694:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dbf0      	blt.n	8000686 <_read+0x12>
  }

  return len;
 80006a4:	687b      	ldr	r3, [r7, #4]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	e009      	b.n	80006d4 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	60ba      	str	r2, [r7, #8]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffab 	bl	8000624 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbf1      	blt.n	80006c0 <_write+0x12>
  }
  return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_close>:

int _close(int file)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800070e:	605a      	str	r2, [r3, #4]
  return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <_isatty>:

int _isatty(int file)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000778:	f7ff ffea 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a2:	f003 f859 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a6:	f7ff fd2d 	bl	8000204 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b8:	08003de0 	.word	0x08003de0
  ldr r2, =_sbss
 80007bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007c0:	200015bc 	.word	0x200015bc

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_Init+0x3c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <HAL_Init+0x3c>)
 80007d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007de:	2003      	movs	r0, #3
 80007e0:	f000 f8df 	bl	80009a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e4:	200f      	movs	r0, #15
 80007e6:	f7ff fe83 	bl	80004f0 <HAL_InitTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	e001      	b.n	80007fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007f6:	f7ff fe57 	bl	80004a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007fa:	79fb      	ldrb	r3, [r7, #7]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x20>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_IncTick+0x24>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008
 800082c:	20000378 	.word	0x20000378

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000378 	.word	0x20000378

08000848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	60d3      	str	r3, [r2, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	f003 0307 	and.w	r3, r3, #7
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db0b      	blt.n	80008d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 021f 	and.w	r2, r3, #31
 80008c4:	4907      	ldr	r1, [pc, #28]	; (80008e4 <__NVIC_EnableIRQ+0x38>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	095b      	lsrs	r3, r3, #5
 80008cc:	2001      	movs	r0, #1
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100

080008e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db0a      	blt.n	8000912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <__NVIC_SetPriority+0x4c>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	440b      	add	r3, r1
 800090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000910:	e00a      	b.n	8000928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4908      	ldr	r1, [pc, #32]	; (8000938 <__NVIC_SetPriority+0x50>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	3b04      	subs	r3, #4
 8000920:	0112      	lsls	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	440b      	add	r3, r1
 8000926:	761a      	strb	r2, [r3, #24]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093c:	b480      	push	{r7}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f1c3 0307 	rsb	r3, r3, #7
 8000956:	2b04      	cmp	r3, #4
 8000958:	bf28      	it	cs
 800095a:	2304      	movcs	r3, #4
 800095c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3304      	adds	r3, #4
 8000962:	2b06      	cmp	r3, #6
 8000964:	d902      	bls.n	800096c <NVIC_EncodePriority+0x30>
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3b03      	subs	r3, #3
 800096a:	e000      	b.n	800096e <NVIC_EncodePriority+0x32>
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	f04f 32ff 	mov.w	r2, #4294967295
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43da      	mvns	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000984:	f04f 31ff 	mov.w	r1, #4294967295
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43d9      	mvns	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	4313      	orrs	r3, r2
         );
}
 8000996:	4618      	mov	r0, r3
 8000998:	3724      	adds	r7, #36	; 0x24
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff4c 	bl	8000848 <__NVIC_SetPriorityGrouping>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009ca:	f7ff ff61 	bl	8000890 <__NVIC_GetPriorityGrouping>
 80009ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	f7ff ffb1 	bl	800093c <NVIC_EncodePriority>
 80009da:	4602      	mov	r2, r0
 80009dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff80 	bl	80008e8 <__NVIC_SetPriority>
}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff54 	bl	80008ac <__NVIC_EnableIRQ>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e17f      	b.n	8000d1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 8171 	beq.w	8000d16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d005      	beq.n	8000a4c <HAL_GPIO_Init+0x40>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0303 	and.w	r3, r3, #3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d130      	bne.n	8000aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2203      	movs	r2, #3
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a82:	2201      	movs	r2, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	f003 0201 	and.w	r2, r3, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d118      	bne.n	8000aec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	f003 0201 	and.w	r2, r3, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d017      	beq.n	8000b28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	2203      	movs	r2, #3
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d123      	bne.n	8000b7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	08da      	lsrs	r2, r3, #3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3208      	adds	r2, #8
 8000b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f003 0307 	and.w	r3, r3, #7
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	691a      	ldr	r2, [r3, #16]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	08da      	lsrs	r2, r3, #3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3208      	adds	r2, #8
 8000b76:	6939      	ldr	r1, [r7, #16]
 8000b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0203 	and.w	r2, r3, #3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 80ac 	beq.w	8000d16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b5f      	ldr	r3, [pc, #380]	; (8000d3c <HAL_GPIO_Init+0x330>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	4a5e      	ldr	r2, [pc, #376]	; (8000d3c <HAL_GPIO_Init+0x330>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bca:	4b5c      	ldr	r3, [pc, #368]	; (8000d3c <HAL_GPIO_Init+0x330>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd6:	4a5a      	ldr	r2, [pc, #360]	; (8000d40 <HAL_GPIO_Init+0x334>)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3302      	adds	r3, #2
 8000bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	220f      	movs	r2, #15
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c00:	d025      	beq.n	8000c4e <HAL_GPIO_Init+0x242>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a4f      	ldr	r2, [pc, #316]	; (8000d44 <HAL_GPIO_Init+0x338>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d01f      	beq.n	8000c4a <HAL_GPIO_Init+0x23e>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a4e      	ldr	r2, [pc, #312]	; (8000d48 <HAL_GPIO_Init+0x33c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d019      	beq.n	8000c46 <HAL_GPIO_Init+0x23a>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a4d      	ldr	r2, [pc, #308]	; (8000d4c <HAL_GPIO_Init+0x340>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0x236>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a4c      	ldr	r2, [pc, #304]	; (8000d50 <HAL_GPIO_Init+0x344>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d00d      	beq.n	8000c3e <HAL_GPIO_Init+0x232>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a4b      	ldr	r2, [pc, #300]	; (8000d54 <HAL_GPIO_Init+0x348>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d007      	beq.n	8000c3a <HAL_GPIO_Init+0x22e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a4a      	ldr	r2, [pc, #296]	; (8000d58 <HAL_GPIO_Init+0x34c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_GPIO_Init+0x22a>
 8000c32:	2306      	movs	r3, #6
 8000c34:	e00c      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c36:	2307      	movs	r3, #7
 8000c38:	e00a      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	e008      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c3e:	2304      	movs	r3, #4
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c42:	2303      	movs	r3, #3
 8000c44:	e004      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e002      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	f002 0203 	and.w	r2, r2, #3
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4093      	lsls	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c60:	4937      	ldr	r1, [pc, #220]	; (8000d40 <HAL_GPIO_Init+0x334>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c92:	4a32      	ldr	r2, [pc, #200]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cbc:	4a27      	ldr	r2, [pc, #156]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce6:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_GPIO_Init+0x350>)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa22 f303 	lsr.w	r3, r2, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f47f ae78 	bne.w	8000a1c <HAL_GPIO_Init+0x10>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	48001000 	.word	0x48001000
 8000d54:	48001400 	.word	0x48001400
 8000d58:	48001800 	.word	0x48001800
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d70:	787b      	ldrb	r3, [r7, #1]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d76:	887a      	ldrh	r2, [r7, #2]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40007000 	.word	0x40007000

08000dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dba:	d130      	bne.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc8:	d038      	beq.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2232      	movs	r2, #50	; 0x32
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df0:	e002      	b.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e04:	d102      	bne.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f2      	bne.n	8000df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e18:	d110      	bne.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e00f      	b.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2a:	d007      	beq.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e34:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40007000 	.word	0x40007000
 8000e50:	20000000 	.word	0x20000000
 8000e54:	431bde83 	.word	0x431bde83

08000e58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e3ca      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e6a:	4b97      	ldr	r3, [pc, #604]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e74:	4b94      	ldr	r3, [pc, #592]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80e4 	beq.w	8001054 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d007      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x4a>
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b0c      	cmp	r3, #12
 8000e96:	f040 808b 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	f040 8087 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ea2:	4b89      	ldr	r3, [pc, #548]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_RCC_OscConfig+0x62>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e3a2      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1a      	ldr	r2, [r3, #32]
 8000ebe:	4b82      	ldr	r3, [pc, #520]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x7c>
 8000eca:	4b7f      	ldr	r3, [pc, #508]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ed2:	e005      	b.n	8000ee0 <HAL_RCC_OscConfig+0x88>
 8000ed4:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d223      	bcs.n	8000f2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fd71 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e383      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef8:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000efe:	f043 0308 	orr.w	r3, r3, #8
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	496d      	ldr	r1, [pc, #436]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f16:	4b6c      	ldr	r3, [pc, #432]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	4968      	ldr	r1, [pc, #416]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	604b      	str	r3, [r1, #4]
 8000f2a:	e025      	b.n	8000f78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2c:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4960      	ldr	r1, [pc, #384]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4a:	4b5f      	ldr	r3, [pc, #380]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	495b      	ldr	r1, [pc, #364]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d109      	bne.n	8000f78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fd31 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e343      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f78:	f000 fc4a 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	4950      	ldr	r1, [pc, #320]	; (80010cc <HAL_RCC_OscConfig+0x274>)
 8000f8a:	5ccb      	ldrb	r3, [r1, r3]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_RCC_OscConfig+0x278>)
 8000f96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f98:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <HAL_RCC_OscConfig+0x27c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff faa7 	bl	80004f0 <HAL_InitTick>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d052      	beq.n	8001052 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	e327      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d032      	beq.n	800101e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fb8:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a42      	ldr	r2, [pc, #264]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc34 	bl	8000830 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fc30 	bl	8000830 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e310      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a36      	ldr	r2, [pc, #216]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4931      	ldr	r1, [pc, #196]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	492c      	ldr	r1, [pc, #176]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
 800101c:	e01a      	b.n	8001054 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800102a:	f7ff fc01 	bl	8000830 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001032:	f7ff fbfd 	bl	8000830 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e2dd      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f0      	bne.n	8001032 <HAL_RCC_OscConfig+0x1da>
 8001050:	e000      	b.n	8001054 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001052:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d074      	beq.n	800114a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b08      	cmp	r3, #8
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x21a>
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d10e      	bne.n	800108a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d10b      	bne.n	800108a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d064      	beq.n	8001148 <HAL_RCC_OscConfig+0x2f0>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d160      	bne.n	8001148 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e2ba      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x24a>
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e026      	b.n	80010f0 <HAL_RCC_OscConfig+0x298>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010aa:	d115      	bne.n	80010d8 <HAL_RCC_OscConfig+0x280>
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a02      	ldr	r2, [pc, #8]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e014      	b.n	80010f0 <HAL_RCC_OscConfig+0x298>
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	08003d90 	.word	0x08003d90
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004
 80010d8:	4ba0      	ldr	r3, [pc, #640]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a9f      	ldr	r2, [pc, #636]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b9d      	ldr	r3, [pc, #628]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a9c      	ldr	r2, [pc, #624]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb9a 	bl	8000830 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fb96 	bl	8000830 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e276      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001112:	4b92      	ldr	r3, [pc, #584]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x2a8>
 800111e:	e014      	b.n	800114a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fb86 	bl	8000830 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fb82 	bl	8000830 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e262      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113a:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x2d0>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d060      	beq.n	8001218 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b04      	cmp	r3, #4
 800115a:	d005      	beq.n	8001168 <HAL_RCC_OscConfig+0x310>
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d119      	bne.n	8001196 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d116      	bne.n	8001196 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001168:	4b7c      	ldr	r3, [pc, #496]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_OscConfig+0x328>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e23f      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b76      	ldr	r3, [pc, #472]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	061b      	lsls	r3, r3, #24
 800118e:	4973      	ldr	r1, [pc, #460]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001194:	e040      	b.n	8001218 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d023      	beq.n	80011e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119e:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6e      	ldr	r2, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fb41 	bl	8000830 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fb3d 	bl	8000830 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e21d      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c4:	4b65      	ldr	r3, [pc, #404]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b62      	ldr	r3, [pc, #392]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	495f      	ldr	r1, [pc, #380]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	e018      	b.n	8001218 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5c      	ldr	r2, [pc, #368]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80011ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fb1d 	bl	8000830 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fb19 	bl	8000830 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1f9      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d03c      	beq.n	800129e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01c      	beq.n	8001266 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800122e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001232:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff faf8 	bl	8000830 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff faf4 	bl	8000830 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e1d4      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0ef      	beq.n	8001244 <HAL_RCC_OscConfig+0x3ec>
 8001264:	e01b      	b.n	800129e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126c:	4a3b      	ldr	r2, [pc, #236]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001276:	f7ff fadb 	bl	8000830 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff fad7 	bl	8000830 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1b7      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1ef      	bne.n	800127e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80a6 	beq.w	80013f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x504>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d4:	2301      	movs	r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d118      	bne.n	8001316 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fa9e 	bl	8000830 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f8:	f7ff fa9a 	bl	8000830 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e17a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x508>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_RCC_OscConfig+0x4d8>
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800132e:	e029      	b.n	8001384 <HAL_RCC_OscConfig+0x52c>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b05      	cmp	r3, #5
 8001336:	d115      	bne.n	8001364 <HAL_RCC_OscConfig+0x50c>
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800133a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <HAL_RCC_OscConfig+0x504>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134e:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_RCC_OscConfig+0x504>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001358:	e014      	b.n	8001384 <HAL_RCC_OscConfig+0x52c>
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	40007000 	.word	0x40007000
 8001364:	4b9c      	ldr	r3, [pc, #624]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136a:	4a9b      	ldr	r2, [pc, #620]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001374:	4b98      	ldr	r3, [pc, #608]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137a:	4a97      	ldr	r2, [pc, #604]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d016      	beq.n	80013ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fa50 	bl	8000830 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff fa4c 	bl	8000830 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e12a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013aa:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ed      	beq.n	8001394 <HAL_RCC_OscConfig+0x53c>
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff fa39 	bl	8000830 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fa35 	bl	8000830 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e113      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d8:	4b7f      	ldr	r3, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ed      	bne.n	80013c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ec:	4b7a      	ldr	r3, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	4a79      	ldr	r2, [pc, #484]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80fe 	beq.w	80015fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	2b02      	cmp	r3, #2
 8001408:	f040 80d0 	bne.w	80015ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800140c:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	429a      	cmp	r2, r3
 800141e:	d130      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	3b01      	subs	r3, #1
 800142c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	429a      	cmp	r2, r3
 8001430:	d127      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800143e:	429a      	cmp	r2, r3
 8001440:	d11f      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800144c:	2a07      	cmp	r2, #7
 800144e:	bf14      	ite	ne
 8001450:	2201      	movne	r2, #1
 8001452:	2200      	moveq	r2, #0
 8001454:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001456:	4293      	cmp	r3, r2
 8001458:	d113      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d109      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	3b01      	subs	r3, #1
 800147c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d06e      	beq.n	8001560 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d069      	beq.n	800155c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0ad      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014a4:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b0:	f7ff f9be 	bl	8000830 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f9ba 	bl	8000830 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e09a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <HAL_RCC_OscConfig+0x784>)
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014e6:	3a01      	subs	r2, #1
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014f0:	0212      	lsls	r2, r2, #8
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014f8:	0852      	lsrs	r2, r2, #1
 80014fa:	3a01      	subs	r2, #1
 80014fc:	0552      	lsls	r2, r2, #21
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	3a01      	subs	r2, #1
 8001508:	0652      	lsls	r2, r2, #25
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001510:	0912      	lsrs	r2, r2, #4
 8001512:	0452      	lsls	r2, r2, #17
 8001514:	430a      	orrs	r2, r1
 8001516:	4930      	ldr	r1, [pc, #192]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001518:	4313      	orrs	r3, r2
 800151a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001526:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001534:	f7ff f97c 	bl	8000830 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff f978 	bl	8000830 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e058      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155a:	e050      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e04f      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d148      	bne.n	80015fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001584:	f7ff f954 	bl	8000830 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff f950 	bl	8000830 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e030      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x734>
 80015aa:	e028      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d023      	beq.n	80015fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff f937 	bl	8000830 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c4:	e00c      	b.n	80015e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff f933 	bl	8000830 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d905      	bls.n	80015e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e013      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1ec      	bne.n	80015c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4905      	ldr	r1, [pc, #20]	; (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_RCC_OscConfig+0x7b4>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e001      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	feeefffc 	.word	0xfeeefffc

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0e7      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b75      	ldr	r3, [pc, #468]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d910      	bls.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4970      	ldr	r1, [pc, #448]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b6e      	ldr	r3, [pc, #440]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cf      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d010      	beq.n	8001682 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800166c:	429a      	cmp	r2, r3
 800166e:	d908      	bls.n	8001682 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001670:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4960      	ldr	r1, [pc, #384]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d04c      	beq.n	8001728 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001696:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0a6      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ae:	4b54      	ldr	r3, [pc, #336]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d115      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e09a      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c6:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e08e      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e086      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4943      	ldr	r1, [pc, #268]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016f8:	f7ff f89a 	bl	8000830 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff f896 	bl	8000830 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	; 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e06e      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d010      	beq.n	8001756 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001740:	429a      	cmp	r2, r3
 8001742:	d208      	bcs.n	8001756 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	492b      	ldr	r1, [pc, #172]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d210      	bcs.n	8001786 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 0207 	bic.w	r2, r3, #7
 800176c:	4923      	ldr	r1, [pc, #140]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e036      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4918      	ldr	r1, [pc, #96]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4910      	ldr	r1, [pc, #64]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c4:	f000 f824 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	490b      	ldr	r1, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x1f4>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1f8>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1fc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fe81 	bl	80004f0 <HAL_InitTick>
 80017ee:	4603      	mov	r3, r0
 80017f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80017f2:	7afb      	ldrb	r3, [r7, #11]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40022000 	.word	0x40022000
 8001800:	40021000 	.word	0x40021000
 8001804:	08003d90 	.word	0x08003d90
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x34>
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d121      	bne.n	8001882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d11e      	bne.n	8001882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001844:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001850:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e005      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800186c:	4a2b      	ldr	r2, [pc, #172]	; (800191c <HAL_RCC_GetSysClockFreq+0x10c>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b04      	cmp	r3, #4
 8001886:	d102      	bne.n	800188e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_GetSysClockFreq+0x110>)
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	e004      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d101      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_RCC_GetSysClockFreq+0x114>)
 8001896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d134      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d003      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xac>
 80018b4:	e005      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_RCC_GetSysClockFreq+0x110>)
 80018b8:	617b      	str	r3, [r7, #20]
      break;
 80018ba:	e005      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_GetSysClockFreq+0x114>)
 80018be:	617b      	str	r3, [r7, #20]
      break;
 80018c0:	e002      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	617b      	str	r3, [r7, #20]
      break;
 80018c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	3301      	adds	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	fb03 f202 	mul.w	r2, r3, r2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	0e5b      	lsrs	r3, r3, #25
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	3301      	adds	r3, #1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001908:	69bb      	ldr	r3, [r7, #24]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	08003da8 	.word	0x08003da8
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200

08001928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_RCC_GetHCLKFreq+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001944:	f7ff fff0 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4904      	ldr	r1, [pc, #16]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	08003da0 	.word	0x08003da0

0800196c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	220f      	movs	r2, #15
 800197a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_RCC_GetClockConfig+0x60>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0207 	and.w	r2, r3, #7
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40022000 	.word	0x40022000

080019d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019e8:	f7ff f9d2 	bl	8000d90 <HAL_PWREx_GetVoltageRange>
 80019ec:	6178      	str	r0, [r7, #20]
 80019ee:	e014      	b.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	; 0x58
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a08:	f7ff f9c2 	bl	8000d90 <HAL_PWREx_GetVoltageRange>
 8001a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d10b      	bne.n	8001a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b80      	cmp	r3, #128	; 0x80
 8001a26:	d919      	bls.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a2c:	d902      	bls.n	8001a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a2e:	2302      	movs	r3, #2
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	e013      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e010      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b80      	cmp	r3, #128	; 0x80
 8001a3e:	d902      	bls.n	8001a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a40:	2303      	movs	r3, #3
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e00a      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	d102      	bne.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	e004      	b.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b70      	cmp	r3, #112	; 0x70
 8001a56:	d101      	bne.n	8001a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a58:	2301      	movs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 0207 	bic.w	r2, r3, #7
 8001a64:	4909      	ldr	r1, [pc, #36]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e049      	b.n	8001b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f841 	bl	8001b3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3304      	adds	r3, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f000 f9da 	bl	8001e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e04f      	b.n	8001c0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01d      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b96:	d018      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <HAL_TIM_Base_Start_IT+0xc8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00e      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d004      	beq.n	8001bca <HAL_TIM_Base_Start_IT+0x76>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_TIM_Base_Start_IT+0xd8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d115      	bne.n	8001bf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d015      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d011      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf4:	e008      	b.n	8001c08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e000      	b.n	8001c0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012c00 	.word	0x40012c00
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40000800 	.word	0x40000800
 8001c24:	40000c00 	.word	0x40000c00
 8001c28:	40013400 	.word	0x40013400
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	00010007 	.word	0x00010007

08001c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0202 	mvn.w	r2, #2
 8001c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8e4 	bl	8001e4c <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8d6 	bl	8001e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8e7 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0204 	mvn.w	r2, #4
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8be 	bl	8001e4c <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8b0 	bl	8001e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8c1 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0208 	mvn.w	r2, #8
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f898 	bl	8001e4c <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f88a 	bl	8001e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f89b 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d020      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0210 	mvn.w	r2, #16
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2208      	movs	r2, #8
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f872 	bl	8001e4c <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f864 	bl	8001e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f875 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0201 	mvn.w	r2, #1
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fb6c 	bl	8000478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f906 	bl	8001fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8fe 	bl	8001fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f834 	bl	8001e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0220 	mvn.w	r2, #32
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8c6 	bl	8001fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <TIM_Base_SetConfig+0x114>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea6:	d00f      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3d      	ldr	r2, [pc, #244]	; (8001fa0 <TIM_Base_SetConfig+0x118>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00b      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3c      	ldr	r2, [pc, #240]	; (8001fa4 <TIM_Base_SetConfig+0x11c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d007      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3b      	ldr	r2, [pc, #236]	; (8001fa8 <TIM_Base_SetConfig+0x120>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <TIM_Base_SetConfig+0x124>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d108      	bne.n	8001eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <TIM_Base_SetConfig+0x114>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d01b      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2c      	ldr	r2, [pc, #176]	; (8001fa0 <TIM_Base_SetConfig+0x118>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d017      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <TIM_Base_SetConfig+0x11c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <TIM_Base_SetConfig+0x120>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00f      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a29      	ldr	r2, [pc, #164]	; (8001fac <TIM_Base_SetConfig+0x124>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <TIM_Base_SetConfig+0x128>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <TIM_Base_SetConfig+0x12c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <TIM_Base_SetConfig+0x9a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <TIM_Base_SetConfig+0x130>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d108      	bne.n	8001f34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <TIM_Base_SetConfig+0x114>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00f      	beq.n	8001f80 <TIM_Base_SetConfig+0xf8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <TIM_Base_SetConfig+0x124>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00b      	beq.n	8001f80 <TIM_Base_SetConfig+0xf8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <TIM_Base_SetConfig+0x128>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <TIM_Base_SetConfig+0xf8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a10      	ldr	r2, [pc, #64]	; (8001fb4 <TIM_Base_SetConfig+0x12c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <TIM_Base_SetConfig+0xf8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <TIM_Base_SetConfig+0x130>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d103      	bne.n	8001f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	615a      	str	r2, [r3, #20]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40000800 	.word	0x40000800
 8001fa8:	40000c00 	.word	0x40000c00
 8001fac:	40013400 	.word	0x40013400
 8001fb0:	40014000 	.word	0x40014000
 8001fb4:	40014400 	.word	0x40014400
 8001fb8:	40014800 	.word	0x40014800

08001fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f103 0208 	add.w	r2, r3, #8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 0208 	add.w	r2, r3, #8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f103 0208 	add.w	r2, r3, #8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6892      	ldr	r2, [r2, #8]
 8002068:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6852      	ldr	r2, [r2, #4]
 8002072:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	d103      	bne.n	8002086 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1e5a      	subs	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b08e      	sub	sp, #56	; 0x38
 80020aa:	af04      	add	r7, sp, #16
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 80020b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10a      	bne.n	80020d0 <xTaskCreateStatic+0x2a>
        __asm volatile
 80020ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020be:	f383 8811 	msr	BASEPRI, r3
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	623b      	str	r3, [r7, #32]
    }
 80020cc:	bf00      	nop
 80020ce:	e7fe      	b.n	80020ce <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80020d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <xTaskCreateStatic+0x46>
        __asm volatile
 80020d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020da:	f383 8811 	msr	BASEPRI, r3
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f3bf 8f4f 	dsb	sy
 80020e6:	61fb      	str	r3, [r7, #28]
    }
 80020e8:	bf00      	nop
 80020ea:	e7fe      	b.n	80020ea <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80020ec:	23a0      	movs	r3, #160	; 0xa0
 80020ee:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2ba0      	cmp	r3, #160	; 0xa0
 80020f4:	d00a      	beq.n	800210c <xTaskCreateStatic+0x66>
        __asm volatile
 80020f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fa:	f383 8811 	msr	BASEPRI, r3
 80020fe:	f3bf 8f6f 	isb	sy
 8002102:	f3bf 8f4f 	dsb	sy
 8002106:	61bb      	str	r3, [r7, #24]
    }
 8002108:	bf00      	nop
 800210a:	e7fe      	b.n	800210a <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800210c:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <xTaskCreateStatic+0xb6>
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	2b00      	cmp	r3, #0
 8002118:	d020      	beq.n	800215c <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800211e:	22a0      	movs	r2, #160	; 0xa0
 8002120:	2100      	movs	r1, #0
 8002122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002124:	f001 faf4 	bl	8003710 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800212c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	2202      	movs	r2, #2
 8002132:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002136:	2300      	movs	r3, #0
 8002138:	9303      	str	r3, [sp, #12]
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f856 	bl	8002200 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002156:	f000 f8ef 	bl	8002338 <prvAddNewTaskToReadyList>
 800215a:	e001      	b.n	8002160 <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8002160:	697b      	ldr	r3, [r7, #20]
    }
 8002162:	4618      	mov	r0, r3
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800216a:	b580      	push	{r7, lr}
 800216c:	b08c      	sub	sp, #48	; 0x30
 800216e:	af04      	add	r7, sp, #16
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4613      	mov	r3, r2
 8002178:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4618      	mov	r0, r3
 8002180:	f000 ff04 	bl	8002f8c <pvPortMalloc>
 8002184:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800218c:	20a0      	movs	r0, #160	; 0xa0
 800218e:	f000 fefd 	bl	8002f8c <pvPortMalloc>
 8002192:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800219a:	22a0      	movs	r2, #160	; 0xa0
 800219c:	2100      	movs	r1, #0
 800219e:	69f8      	ldr	r0, [r7, #28]
 80021a0:	f001 fab6 	bl	8003710 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
 80021aa:	e005      	b.n	80021b8 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80021ac:	6978      	ldr	r0, [r7, #20]
 80021ae:	f000 ffa7 	bl	8003100 <vPortFree>
 80021b2:	e001      	b.n	80021b8 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d017      	beq.n	80021ee <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021c6:	88fa      	ldrh	r2, [r7, #6]
 80021c8:	2300      	movs	r3, #0
 80021ca:	9303      	str	r3, [sp, #12]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	9302      	str	r3, [sp, #8]
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f80f 	bl	8002200 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021e2:	69f8      	ldr	r0, [r7, #28]
 80021e4:	f000 f8a8 	bl	8002338 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	e002      	b.n	80021f4 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021f4:	69bb      	ldr	r3, [r7, #24]
    }
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002218:	3b01      	subs	r3, #1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f023 0307 	bic.w	r3, r3, #7
 8002226:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <prvInitialiseNewTask+0x48>
        __asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	617b      	str	r3, [r7, #20]
    }
 8002244:	bf00      	nop
 8002246:	e7fe      	b.n	8002246 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01e      	beq.n	800228c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e012      	b.n	800227a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	4413      	add	r3, r2
 800225a:	7819      	ldrb	r1, [r3, #0]
 800225c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	3334      	adds	r3, #52	; 0x34
 8002264:	460a      	mov	r2, r1
 8002266:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	4413      	add	r3, r2
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	2b0f      	cmp	r3, #15
 800227e:	d9e9      	bls.n	8002254 <prvInitialiseNewTask+0x54>
 8002280:	e000      	b.n	8002284 <prvInitialiseNewTask+0x84>
            {
                break;
 8002282:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	2b06      	cmp	r3, #6
 8002290:	d90a      	bls.n	80022a8 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8002292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	613b      	str	r3, [r7, #16]
    }
 80022a4:	bf00      	nop
 80022a6:	e7fe      	b.n	80022a6 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d901      	bls.n	80022b2 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022ae:	2306      	movs	r3, #6
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80022b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	3304      	adds	r3, #4
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff feb8 	bl	8002038 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	3318      	adds	r3, #24
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff feb3 	bl	8002038 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	f1c3 0207 	rsb	r2, r3, #7
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	334c      	adds	r3, #76	; 0x4c
 80022ec:	224c      	movs	r2, #76	; 0x4c
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 fa0d 	bl	8003710 <memset>
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <prvInitialiseNewTask+0x12c>)
 80022fa:	651a      	str	r2, [r3, #80]	; 0x50
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <prvInitialiseNewTask+0x130>)
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <prvInitialiseNewTask+0x134>)
 8002306:	659a      	str	r2, [r3, #88]	; 0x58
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	69b8      	ldr	r0, [r7, #24]
 800230e:	f000 fc2b 	bl	8002b68 <pxPortInitialiseStack>
 8002312:	4602      	mov	r2, r0
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002322:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000146c 	.word	0x2000146c
 8002330:	200014d4 	.word	0x200014d4
 8002334:	2000153c 	.word	0x2000153c

08002338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002340:	f000 fd42 	bl	8002dc8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002344:	4b38      	ldr	r3, [pc, #224]	; (8002428 <prvAddNewTaskToReadyList+0xf0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	4a37      	ldr	r2, [pc, #220]	; (8002428 <prvAddNewTaskToReadyList+0xf0>)
 800234c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800234e:	4b37      	ldr	r3, [pc, #220]	; (800242c <prvAddNewTaskToReadyList+0xf4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002356:	4a35      	ldr	r2, [pc, #212]	; (800242c <prvAddNewTaskToReadyList+0xf4>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <prvAddNewTaskToReadyList+0xf0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d110      	bne.n	8002386 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002364:	f000 fb3e 	bl	80029e4 <prvInitialiseTaskLists>
 8002368:	e00d      	b.n	8002386 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <prvAddNewTaskToReadyList+0xf8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002372:	4b2e      	ldr	r3, [pc, #184]	; (800242c <prvAddNewTaskToReadyList+0xf4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	429a      	cmp	r2, r3
 800237e:	d802      	bhi.n	8002386 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002380:	4a2a      	ldr	r2, [pc, #168]	; (800242c <prvAddNewTaskToReadyList+0xf4>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002386:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <prvAddNewTaskToReadyList+0xfc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	4a29      	ldr	r2, [pc, #164]	; (8002434 <prvAddNewTaskToReadyList+0xfc>)
 800238e:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	2201      	movs	r2, #1
 8002396:	409a      	lsls	r2, r3
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <prvAddNewTaskToReadyList+0x100>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4313      	orrs	r3, r2
 800239e:	4a26      	ldr	r2, [pc, #152]	; (8002438 <prvAddNewTaskToReadyList+0x100>)
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a6:	4925      	ldr	r1, [pc, #148]	; (800243c <prvAddNewTaskToReadyList+0x104>)
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3304      	adds	r3, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	3204      	adds	r2, #4
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1d1a      	adds	r2, r3, #4
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4a15      	ldr	r2, [pc, #84]	; (800243c <prvAddNewTaskToReadyList+0x104>)
 80023e6:	441a      	add	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	615a      	str	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	4912      	ldr	r1, [pc, #72]	; (800243c <prvAddNewTaskToReadyList+0x104>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	480e      	ldr	r0, [pc, #56]	; (800243c <prvAddNewTaskToReadyList+0x104>)
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4403      	add	r3, r0
 800240c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800240e:	f000 fd0b 	bl	8002e28 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <prvAddNewTaskToReadyList+0xf8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <prvAddNewTaskToReadyList+0xe6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <prvAddNewTaskToReadyList+0xf4>)
 800241c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000047c 	.word	0x2000047c
 800242c:	2000037c 	.word	0x2000037c
 8002430:	20000488 	.word	0x20000488
 8002434:	20000498 	.word	0x20000498
 8002438:	20000484 	.word	0x20000484
 800243c:	20000380 	.word	0x20000380

08002440 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800244e:	463a      	mov	r2, r7
 8002450:	1d39      	adds	r1, r7, #4
 8002452:	f107 0308 	add.w	r3, r7, #8
 8002456:	4618      	mov	r0, r3
 8002458:	f7fd feba 	bl	80001d0 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800245c:	6839      	ldr	r1, [r7, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	9202      	str	r2, [sp, #8]
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	2300      	movs	r3, #0
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2300      	movs	r3, #0
 800246c:	460a      	mov	r2, r1
 800246e:	4922      	ldr	r1, [pc, #136]	; (80024f8 <vTaskStartScheduler+0xb8>)
 8002470:	4822      	ldr	r0, [pc, #136]	; (80024fc <vTaskStartScheduler+0xbc>)
 8002472:	f7ff fe18 	bl	80020a6 <xTaskCreateStatic>
 8002476:	4603      	mov	r3, r0
 8002478:	4a21      	ldr	r2, [pc, #132]	; (8002500 <vTaskStartScheduler+0xc0>)
 800247a:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800247c:	4b20      	ldr	r3, [pc, #128]	; (8002500 <vTaskStartScheduler+0xc0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8002484:	2301      	movs	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e001      	b.n	800248e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d11b      	bne.n	80024cc <vTaskStartScheduler+0x8c>
        __asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	613b      	str	r3, [r7, #16]
    }
 80024a6:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <vTaskStartScheduler+0xc4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	334c      	adds	r3, #76	; 0x4c
 80024ae:	4a16      	ldr	r2, [pc, #88]	; (8002508 <vTaskStartScheduler+0xc8>)
 80024b0:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <vTaskStartScheduler+0xcc>)
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <vTaskStartScheduler+0xd0>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <vTaskStartScheduler+0xd4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80024c6:	f000 fbdd 	bl	8002c84 <xPortStartScheduler>
 80024ca:	e00e      	b.n	80024ea <vTaskStartScheduler+0xaa>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d10a      	bne.n	80024ea <vTaskStartScheduler+0xaa>
        __asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	60fb      	str	r3, [r7, #12]
    }
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <vTaskStartScheduler+0xa8>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <vTaskStartScheduler+0xd8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	08003d88 	.word	0x08003d88
 80024fc:	080029c1 	.word	0x080029c1
 8002500:	200004a0 	.word	0x200004a0
 8002504:	2000037c 	.word	0x2000037c
 8002508:	2000006c 	.word	0x2000006c
 800250c:	2000049c 	.word	0x2000049c
 8002510:	20000488 	.word	0x20000488
 8002514:	20000480 	.word	0x20000480
 8002518:	2000000c 	.word	0x2000000c

0800251c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <vTaskSuspendAll+0x18>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a03      	ldr	r2, [pc, #12]	; (8002534 <vTaskSuspendAll+0x18>)
 8002528:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	200004a4 	.word	0x200004a4

08002538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002546:	4b6b      	ldr	r3, [pc, #428]	; (80026f4 <xTaskResumeAll+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <xTaskResumeAll+0x2c>
        __asm volatile
 800254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	607b      	str	r3, [r7, #4]
    }
 8002560:	bf00      	nop
 8002562:	e7fe      	b.n	8002562 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002564:	f000 fc30 	bl	8002dc8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002568:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <xTaskResumeAll+0x1bc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3b01      	subs	r3, #1
 800256e:	4a61      	ldr	r2, [pc, #388]	; (80026f4 <xTaskResumeAll+0x1bc>)
 8002570:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002572:	4b60      	ldr	r3, [pc, #384]	; (80026f4 <xTaskResumeAll+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80b4 	bne.w	80026e4 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <xTaskResumeAll+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80af 	beq.w	80026e4 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002586:	e08a      	b.n	800269e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002588:	4b5c      	ldr	r3, [pc, #368]	; (80026fc <xTaskResumeAll+0x1c4>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	6a12      	ldr	r2, [r2, #32]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	69d2      	ldr	r2, [r2, #28]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3318      	adds	r3, #24
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d103      	bne.n	80025be <xTaskResumeAll+0x86>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	6a1a      	ldr	r2, [r3, #32]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2200      	movs	r2, #0
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	68d2      	ldr	r2, [r2, #12]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	6892      	ldr	r2, [r2, #8]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	3304      	adds	r3, #4
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d103      	bne.n	80025fc <xTaskResumeAll+0xc4>
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	2201      	movs	r2, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <xTaskResumeAll+0x1c8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4313      	orrs	r3, r2
 800261a:	4a39      	ldr	r2, [pc, #228]	; (8002700 <xTaskResumeAll+0x1c8>)
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	4938      	ldr	r1, [pc, #224]	; (8002704 <xTaskResumeAll+0x1cc>)
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3304      	adds	r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	3204      	adds	r2, #4
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	1d1a      	adds	r2, r3, #4
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4a28      	ldr	r2, [pc, #160]	; (8002704 <xTaskResumeAll+0x1cc>)
 8002662:	441a      	add	r2, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	615a      	str	r2, [r3, #20]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266c:	4925      	ldr	r1, [pc, #148]	; (8002704 <xTaskResumeAll+0x1cc>)
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	1c59      	adds	r1, r3, #1
 800267c:	4821      	ldr	r0, [pc, #132]	; (8002704 <xTaskResumeAll+0x1cc>)
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4403      	add	r3, r0
 8002688:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <xTaskResumeAll+0x1d0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	429a      	cmp	r2, r3
 8002696:	d302      	bcc.n	800269e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <xTaskResumeAll+0x1d4>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <xTaskResumeAll+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f47f af70 	bne.w	8002588 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026ae:	f000 fa3f 	bl	8002b30 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <xTaskResumeAll+0x1d8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026be:	f000 f829 	bl	8002714 <xTaskIncrementTick>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <xTaskResumeAll+0x1d4>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f1      	bne.n	80026be <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <xTaskResumeAll+0x1d8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <xTaskResumeAll+0x1d4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026e4:	f000 fba0 	bl	8002e28 <vPortExitCritical>

    return xAlreadyYielded;
 80026e8:	697b      	ldr	r3, [r7, #20]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200004a4 	.word	0x200004a4
 80026f8:	2000047c 	.word	0x2000047c
 80026fc:	2000043c 	.word	0x2000043c
 8002700:	20000484 	.word	0x20000484
 8002704:	20000380 	.word	0x20000380
 8002708:	2000037c 	.word	0x2000037c
 800270c:	20000490 	.word	0x20000490
 8002710:	2000048c 	.word	0x2000048c

08002714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800271e:	4b6e      	ldr	r3, [pc, #440]	; (80028d8 <xTaskIncrementTick+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 80cd 	bne.w	80028c2 <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002728:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <xTaskIncrementTick+0x1c8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002730:	4a6a      	ldr	r2, [pc, #424]	; (80028dc <xTaskIncrementTick+0x1c8>)
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d120      	bne.n	800277e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <xTaskIncrementTick+0x1cc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <xTaskIncrementTick+0x48>
        __asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	607b      	str	r3, [r7, #4]
    }
 8002758:	bf00      	nop
 800275a:	e7fe      	b.n	800275a <xTaskIncrementTick+0x46>
 800275c:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <xTaskIncrementTick+0x1cc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	4b60      	ldr	r3, [pc, #384]	; (80028e4 <xTaskIncrementTick+0x1d0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5e      	ldr	r2, [pc, #376]	; (80028e0 <xTaskIncrementTick+0x1cc>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4a5e      	ldr	r2, [pc, #376]	; (80028e4 <xTaskIncrementTick+0x1d0>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <xTaskIncrementTick+0x1d4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <xTaskIncrementTick+0x1d4>)
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	f000 f9d9 	bl	8002b30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800277e:	4b5b      	ldr	r3, [pc, #364]	; (80028ec <xTaskIncrementTick+0x1d8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	429a      	cmp	r2, r3
 8002786:	f0c0 80a1 	bcc.w	80028cc <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800278a:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <xTaskIncrementTick+0x1cc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d104      	bne.n	800279e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002794:	4b55      	ldr	r3, [pc, #340]	; (80028ec <xTaskIncrementTick+0x1d8>)
 8002796:	f04f 32ff 	mov.w	r2, #4294967295
 800279a:	601a      	str	r2, [r3, #0]
                    break;
 800279c:	e096      	b.n	80028cc <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800279e:	4b50      	ldr	r3, [pc, #320]	; (80028e0 <xTaskIncrementTick+0x1cc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80027ae:	6a3a      	ldr	r2, [r7, #32]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d203      	bcs.n	80027be <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80027b6:	4a4d      	ldr	r2, [pc, #308]	; (80028ec <xTaskIncrementTick+0x1d8>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80027bc:	e086      	b.n	80028cc <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	68d2      	ldr	r2, [r2, #12]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	6892      	ldr	r2, [r2, #8]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	3304      	adds	r3, #4
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d103      	bne.n	80027ec <xTaskIncrementTick+0xd8>
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1e5a      	subs	r2, r3, #1
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01e      	beq.n	8002842 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	6a12      	ldr	r2, [r2, #32]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	69d2      	ldr	r2, [r2, #28]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	3318      	adds	r3, #24
 8002826:	429a      	cmp	r2, r3
 8002828:	d103      	bne.n	8002832 <xTaskIncrementTick+0x11e>
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2200      	movs	r2, #0
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	2201      	movs	r2, #1
 8002848:	409a      	lsls	r2, r3
 800284a:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <xTaskIncrementTick+0x1dc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <xTaskIncrementTick+0x1dc>)
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	4926      	ldr	r1, [pc, #152]	; (80028f4 <xTaskIncrementTick+0x1e0>)
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3304      	adds	r3, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	3204      	adds	r2, #4
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	1d1a      	adds	r2, r3, #4
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4a17      	ldr	r2, [pc, #92]	; (80028f4 <xTaskIncrementTick+0x1e0>)
 8002898:	441a      	add	r2, r3
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	615a      	str	r2, [r3, #20]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	4914      	ldr	r1, [pc, #80]	; (80028f4 <xTaskIncrementTick+0x1e0>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1c59      	adds	r1, r3, #1
 80028b2:	4810      	ldr	r0, [pc, #64]	; (80028f4 <xTaskIncrementTick+0x1e0>)
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4403      	add	r3, r0
 80028be:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028c0:	e763      	b.n	800278a <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <xTaskIncrementTick+0x1e4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <xTaskIncrementTick+0x1e4>)
 80028ca:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200004a4 	.word	0x200004a4
 80028dc:	20000480 	.word	0x20000480
 80028e0:	20000434 	.word	0x20000434
 80028e4:	20000438 	.word	0x20000438
 80028e8:	20000494 	.word	0x20000494
 80028ec:	2000049c 	.word	0x2000049c
 80028f0:	20000484 	.word	0x20000484
 80028f4:	20000380 	.word	0x20000380
 80028f8:	2000048c 	.word	0x2000048c

080028fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <vTaskSwitchContext+0xac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <vTaskSwitchContext+0xb0>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002910:	e044      	b.n	800299c <vTaskSwitchContext+0xa0>
        xYieldPending = pdFALSE;
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <vTaskSwitchContext+0xb0>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <vTaskSwitchContext+0xb4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	f1c3 031f 	rsb	r3, r3, #31
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	4921      	ldr	r1, [pc, #132]	; (80029b4 <vTaskSwitchContext+0xb8>)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10a      	bne.n	8002958 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	607b      	str	r3, [r7, #4]
    }
 8002954:	bf00      	nop
 8002956:	e7fe      	b.n	8002956 <vTaskSwitchContext+0x5a>
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <vTaskSwitchContext+0xb8>)
 8002964:	4413      	add	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	3308      	adds	r3, #8
 800297a:	429a      	cmp	r2, r3
 800297c:	d104      	bne.n	8002988 <vTaskSwitchContext+0x8c>
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <vTaskSwitchContext+0xbc>)
 8002990:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <vTaskSwitchContext+0xbc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	334c      	adds	r3, #76	; 0x4c
 8002998:	4a08      	ldr	r2, [pc, #32]	; (80029bc <vTaskSwitchContext+0xc0>)
 800299a:	6013      	str	r3, [r2, #0]
}
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	200004a4 	.word	0x200004a4
 80029ac:	20000490 	.word	0x20000490
 80029b0:	20000484 	.word	0x20000484
 80029b4:	20000380 	.word	0x20000380
 80029b8:	2000037c 	.word	0x2000037c
 80029bc:	2000006c 	.word	0x2000006c

080029c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029c8:	f000 f84c 	bl	8002a64 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <prvIdleTask+0x20>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029dc:	e7f4      	b.n	80029c8 <prvIdleTask+0x8>
 80029de:	bf00      	nop
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	e00c      	b.n	8002a0a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <prvInitialiseTaskLists+0x60>)
 80029fc:	4413      	add	r3, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fafa 	bl	8001ff8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3301      	adds	r3, #1
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d9ef      	bls.n	80029f0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a10:	480d      	ldr	r0, [pc, #52]	; (8002a48 <prvInitialiseTaskLists+0x64>)
 8002a12:	f7ff faf1 	bl	8001ff8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a16:	480d      	ldr	r0, [pc, #52]	; (8002a4c <prvInitialiseTaskLists+0x68>)
 8002a18:	f7ff faee 	bl	8001ff8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a1c:	480c      	ldr	r0, [pc, #48]	; (8002a50 <prvInitialiseTaskLists+0x6c>)
 8002a1e:	f7ff faeb 	bl	8001ff8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002a22:	480c      	ldr	r0, [pc, #48]	; (8002a54 <prvInitialiseTaskLists+0x70>)
 8002a24:	f7ff fae8 	bl	8001ff8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002a28:	480b      	ldr	r0, [pc, #44]	; (8002a58 <prvInitialiseTaskLists+0x74>)
 8002a2a:	f7ff fae5 	bl	8001ff8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <prvInitialiseTaskLists+0x78>)
 8002a30:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <prvInitialiseTaskLists+0x64>)
 8002a32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <prvInitialiseTaskLists+0x7c>)
 8002a36:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <prvInitialiseTaskLists+0x68>)
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000380 	.word	0x20000380
 8002a48:	2000040c 	.word	0x2000040c
 8002a4c:	20000420 	.word	0x20000420
 8002a50:	2000043c 	.word	0x2000043c
 8002a54:	20000450 	.word	0x20000450
 8002a58:	20000468 	.word	0x20000468
 8002a5c:	20000434 	.word	0x20000434
 8002a60:	20000438 	.word	0x20000438

08002a64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a6a:	e019      	b.n	8002aa0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002a6c:	f000 f9ac 	bl	8002dc8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <prvCheckTasksWaitingTermination+0x50>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fae8 	bl	8002052 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <prvCheckTasksWaitingTermination+0x54>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <prvCheckTasksWaitingTermination+0x54>)
 8002a8a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <prvCheckTasksWaitingTermination+0x58>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <prvCheckTasksWaitingTermination+0x58>)
 8002a94:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002a96:	f000 f9c7 	bl	8002e28 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f810 	bl	8002ac0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <prvCheckTasksWaitingTermination+0x58>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e1      	bne.n	8002a6c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000450 	.word	0x20000450
 8002ab8:	2000047c 	.word	0x2000047c
 8002abc:	20000464 	.word	0x20000464

08002ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <prvDeleteTCB+0x6c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	334c      	adds	r3, #76	; 0x4c
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fe36 	bl	8003740 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fb0c 	bl	8003100 <vPortFree>
                vPortFree( pxTCB );
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fb09 	bl	8003100 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002aee:	e018      	b.n	8002b22 <prvDeleteTCB+0x62>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d103      	bne.n	8002b02 <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fb00 	bl	8003100 <vPortFree>
    }
 8002b00:	e00f      	b.n	8002b22 <prvDeleteTCB+0x62>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d00a      	beq.n	8002b22 <prvDeleteTCB+0x62>
        __asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	60fb      	str	r3, [r7, #12]
    }
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <prvDeleteTCB+0x60>
    }
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000037c 	.word	0x2000037c

08002b30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <prvResetNextTaskUnblockTime+0x30>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d104      	bne.n	8002b48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <prvResetNextTaskUnblockTime+0x34>)
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b46:	e005      	b.n	8002b54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <prvResetNextTaskUnblockTime+0x30>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <prvResetNextTaskUnblockTime+0x34>)
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000434 	.word	0x20000434
 8002b64:	2000049c 	.word	0x2000049c

08002b68 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3b04      	subs	r3, #4
 8002b78:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3b04      	subs	r3, #4
 8002b86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f023 0201 	bic.w	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3b04      	subs	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b98:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <pxPortInitialiseStack+0x64>)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3b14      	subs	r3, #20
 8002ba2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3b04      	subs	r3, #4
 8002bae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f06f 0202 	mvn.w	r2, #2
 8002bb6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3b20      	subs	r3, #32
 8002bbc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	08002bd1 	.word	0x08002bd1

08002bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <prvTaskExitError+0x54>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d00a      	beq.n	8002bfa <prvTaskExitError+0x2a>
        __asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	60fb      	str	r3, [r7, #12]
    }
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <prvTaskExitError+0x28>
        __asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	60bb      	str	r3, [r7, #8]
    }
 8002c0c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c0e:	bf00      	nop
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0fc      	beq.n	8002c10 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	20000010 	.word	0x20000010
	...

08002c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <pxCurrentTCBConst2>)
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	6808      	ldr	r0, [r1, #0]
 8002c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3a:	f380 8809 	msr	PSP, r0
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f380 8811 	msr	BASEPRI, r0
 8002c4a:	4770      	bx	lr
 8002c4c:	f3af 8000 	nop.w

08002c50 <pxCurrentTCBConst2>:
 8002c50:	2000037c 	.word	0x2000037c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop

08002c58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c58:	4808      	ldr	r0, [pc, #32]	; (8002c7c <prvPortStartFirstTask+0x24>)
 8002c5a:	6800      	ldr	r0, [r0, #0]
 8002c5c:	6800      	ldr	r0, [r0, #0]
 8002c5e:	f380 8808 	msr	MSP, r0
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f380 8814 	msr	CONTROL, r0
 8002c6a:	b662      	cpsie	i
 8002c6c:	b661      	cpsie	f
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	df00      	svc	0
 8002c78:	bf00      	nop
 8002c7a:	0000      	.short	0x0000
 8002c7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop

08002c84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <xPortStartScheduler+0x120>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a46      	ldr	r2, [pc, #280]	; (8002da8 <xPortStartScheduler+0x124>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10a      	bne.n	8002caa <xPortStartScheduler+0x26>
        __asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	613b      	str	r3, [r7, #16]
    }
 8002ca6:	bf00      	nop
 8002ca8:	e7fe      	b.n	8002ca8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <xPortStartScheduler+0x120>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3f      	ldr	r2, [pc, #252]	; (8002dac <xPortStartScheduler+0x128>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10a      	bne.n	8002cca <xPortStartScheduler+0x46>
        __asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	60fb      	str	r3, [r7, #12]
    }
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cca:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <xPortStartScheduler+0x12c>)
 8002ccc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	22ff      	movs	r2, #255	; 0xff
 8002cda:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <xPortStartScheduler+0x130>)
 8002cf0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <xPortStartScheduler+0x134>)
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cf8:	e009      	b.n	8002d0e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <xPortStartScheduler+0x134>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	4a2d      	ldr	r2, [pc, #180]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d02:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	2b80      	cmp	r3, #128	; 0x80
 8002d18:	d0ef      	beq.n	8002cfa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d1a:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1c3 0307 	rsb	r3, r3, #7
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00a      	beq.n	8002d3c <xPortStartScheduler+0xb8>
        __asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	60bb      	str	r3, [r7, #8]
    }
 8002d38:	bf00      	nop
 8002d3a:	e7fe      	b.n	8002d3a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d44:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d50:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <xPortStartScheduler+0x138>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <xPortStartScheduler+0x138>)
 8002d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d64:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <xPortStartScheduler+0x138>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <xPortStartScheduler+0x138>)
 8002d6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d70:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d72:	f000 f8db 	bl	8002f2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <xPortStartScheduler+0x13c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d7c:	f000 f8fa 	bl	8002f74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d80:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <xPortStartScheduler+0x140>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <xPortStartScheduler+0x140>)
 8002d86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d8a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d8c:	f7ff ff64 	bl	8002c58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d90:	f7ff fdb4 	bl	80028fc <vTaskSwitchContext>
    prvTaskExitError();
 8002d94:	f7ff ff1c 	bl	8002bd0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00
 8002da8:	410fc271 	.word	0x410fc271
 8002dac:	410fc270 	.word	0x410fc270
 8002db0:	e000e400 	.word	0xe000e400
 8002db4:	200004a8 	.word	0x200004a8
 8002db8:	200004ac 	.word	0x200004ac
 8002dbc:	e000ed20 	.word	0xe000ed20
 8002dc0:	20000010 	.word	0x20000010
 8002dc4:	e000ef34 	.word	0xe000ef34

08002dc8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
        __asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	607b      	str	r3, [r7, #4]
    }
 8002de0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <vPortEnterCritical+0x58>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	4a0d      	ldr	r2, [pc, #52]	; (8002e20 <vPortEnterCritical+0x58>)
 8002dea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <vPortEnterCritical+0x58>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d10f      	bne.n	8002e14 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <vPortEnterCritical+0x5c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <vPortEnterCritical+0x4c>
        __asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	603b      	str	r3, [r7, #0]
    }
 8002e10:	bf00      	nop
 8002e12:	e7fe      	b.n	8002e12 <vPortEnterCritical+0x4a>
    }
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	20000010 	.word	0x20000010
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <vPortExitCritical+0x50>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <vPortExitCritical+0x24>
        __asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	607b      	str	r3, [r7, #4]
    }
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <vPortExitCritical+0x50>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <vPortExitCritical+0x50>)
 8002e54:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <vPortExitCritical+0x50>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <vPortExitCritical+0x42>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e68:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000010 	.word	0x20000010
 8002e7c:	00000000 	.word	0x00000000

08002e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e80:	f3ef 8009 	mrs	r0, PSP
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <pxCurrentTCBConst>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	f01e 0f10 	tst.w	lr, #16
 8002e90:	bf08      	it	eq
 8002e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9a:	6010      	str	r0, [r2, #0]
 8002e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ea4:	f380 8811 	msr	BASEPRI, r0
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f7ff fd24 	bl	80028fc <vTaskSwitchContext>
 8002eb4:	f04f 0000 	mov.w	r0, #0
 8002eb8:	f380 8811 	msr	BASEPRI, r0
 8002ebc:	bc09      	pop	{r0, r3}
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	6808      	ldr	r0, [r1, #0]
 8002ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec6:	f01e 0f10 	tst.w	lr, #16
 8002eca:	bf08      	it	eq
 8002ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ed0:	f380 8809 	msr	PSP, r0
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	f3af 8000 	nop.w

08002ee0 <pxCurrentTCBConst>:
 8002ee0:	2000037c 	.word	0x2000037c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop

08002ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
        __asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	607b      	str	r3, [r7, #4]
    }
 8002f00:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f02:	f7ff fc07 	bl	8002714 <xTaskIncrementTick>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <SysTick_Handler+0x40>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	2300      	movs	r3, #0
 8002f16:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f383 8811 	msr	BASEPRI, r3
    }
 8002f1e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <vPortSetupTimerInterrupt+0x34>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <vPortSetupTimerInterrupt+0x38>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <vPortSetupTimerInterrupt+0x3c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <vPortSetupTimerInterrupt+0x40>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <vPortSetupTimerInterrupt+0x44>)
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <vPortSetupTimerInterrupt+0x34>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010
 8002f64:	e000e018 	.word	0xe000e018
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	10624dd3 	.word	0x10624dd3
 8002f70:	e000e014 	.word	0xe000e014

08002f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f84 <vPortEnableVFP+0x10>
 8002f78:	6801      	ldr	r1, [r0, #0]
 8002f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f7e:	6001      	str	r1, [r0, #0]
 8002f80:	4770      	bx	lr
 8002f82:	0000      	.short	0x0000
 8002f84:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop

08002f8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002f98:	f7ff fac0 	bl	800251c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <pvPortMalloc+0x160>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002fa4:	f000 f908 	bl	80031b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d012      	beq.n	8002fd4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002fae:	2208      	movs	r2, #8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	3308      	adds	r3, #8
 8002fba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d804      	bhi.n	8002fd0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4413      	add	r3, r2
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	e001      	b.n	8002fd4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	db70      	blt.n	80030bc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d06d      	beq.n	80030bc <pvPortMalloc+0x130>
 8002fe0:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <pvPortMalloc+0x164>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d868      	bhi.n	80030bc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002fea:	4b42      	ldr	r3, [pc, #264]	; (80030f4 <pvPortMalloc+0x168>)
 8002fec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <pvPortMalloc+0x168>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ff4:	e004      	b.n	8003000 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d903      	bls.n	8003012 <pvPortMalloc+0x86>
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f1      	bne.n	8002ff6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003012:	4b36      	ldr	r3, [pc, #216]	; (80030ec <pvPortMalloc+0x160>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003018:	429a      	cmp	r2, r3
 800301a:	d04f      	beq.n	80030bc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2208      	movs	r2, #8
 8003022:	4413      	add	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	1ad2      	subs	r2, r2, r3
 8003036:	2308      	movs	r3, #8
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	429a      	cmp	r2, r3
 800303c:	d91f      	bls.n	800307e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4413      	add	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <pvPortMalloc+0xda>
        __asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	613b      	str	r3, [r7, #16]
    }
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	1ad2      	subs	r2, r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003078:	6978      	ldr	r0, [r7, #20]
 800307a:	f000 f8f9 	bl	8003270 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <pvPortMalloc+0x164>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <pvPortMalloc+0x164>)
 800308a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <pvPortMalloc+0x164>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <pvPortMalloc+0x16c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d203      	bcs.n	80030a0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <pvPortMalloc+0x164>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <pvPortMalloc+0x16c>)
 800309e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <pvPortMalloc+0x170>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	4a10      	ldr	r2, [pc, #64]	; (80030fc <pvPortMalloc+0x170>)
 80030ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030bc:	f7ff fa3c 	bl	8002538 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <pvPortMalloc+0x154>
        __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	60fb      	str	r3, [r7, #12]
    }
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <pvPortMalloc+0x152>
    return pvReturn;
 80030e0:	69fb      	ldr	r3, [r7, #28]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3728      	adds	r7, #40	; 0x28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20001458 	.word	0x20001458
 80030f0:	2000145c 	.word	0x2000145c
 80030f4:	20001450 	.word	0x20001450
 80030f8:	20001460 	.word	0x20001460
 80030fc:	20001464 	.word	0x20001464

08003100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d049      	beq.n	80031a6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003112:	2308      	movs	r3, #8
 8003114:	425b      	negs	r3, r3
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4413      	add	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <vPortFree+0x3e>
        __asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	60fb      	str	r3, [r7, #12]
    }
 800313a:	bf00      	nop
 800313c:	e7fe      	b.n	800313c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <vPortFree+0x5c>
        __asm volatile
 8003146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	60bb      	str	r3, [r7, #8]
    }
 8003158:	bf00      	nop
 800315a:	e7fe      	b.n	800315a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	0fdb      	lsrs	r3, r3, #31
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01c      	beq.n	80031a6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d118      	bne.n	80031a6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003180:	f7ff f9cc 	bl	800251c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <vPortFree+0xb0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4413      	add	r3, r2
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <vPortFree+0xb0>)
 8003190:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003192:	6938      	ldr	r0, [r7, #16]
 8003194:	f000 f86c 	bl	8003270 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <vPortFree+0xb4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <vPortFree+0xb4>)
 80031a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031a2:	f7ff f9c9 	bl	8002538 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	2000145c 	.word	0x2000145c
 80031b4:	20001468 	.word	0x20001468

080031b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031be:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80031c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <prvHeapInit+0xa4>)
 80031c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3307      	adds	r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0307 	bic.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	4a1d      	ldr	r2, [pc, #116]	; (800325c <prvHeapInit+0xa4>)
 80031e8:	4413      	add	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031f0:	4a1b      	ldr	r2, [pc, #108]	; (8003260 <prvHeapInit+0xa8>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80031f6:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <prvHeapInit+0xa8>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4413      	add	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003204:	2208      	movs	r2, #8
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0307 	bic.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <prvHeapInit+0xac>)
 8003218:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <prvHeapInit+0xac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <prvHeapInit+0xac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <prvHeapInit+0xac>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a08      	ldr	r2, [pc, #32]	; (8003268 <prvHeapInit+0xb0>)
 8003246:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a07      	ldr	r2, [pc, #28]	; (800326c <prvHeapInit+0xb4>)
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	200004b0 	.word	0x200004b0
 8003260:	20001450 	.word	0x20001450
 8003264:	20001458 	.word	0x20001458
 8003268:	20001460 	.word	0x20001460
 800326c:	2000145c 	.word	0x2000145c

08003270 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <prvInsertBlockIntoFreeList+0xac>)
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e002      	b.n	8003284 <prvInsertBlockIntoFreeList+0x14>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	429a      	cmp	r2, r3
 800328c:	d8f7      	bhi.n	800327e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4413      	add	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d108      	bne.n	80032b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	441a      	add	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	441a      	add	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d118      	bne.n	80032f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <prvInsertBlockIntoFreeList+0xb0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d00d      	beq.n	80032ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e008      	b.n	8003300 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <prvInsertBlockIntoFreeList+0xb0>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e003      	b.n	8003300 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d002      	beq.n	800330e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20001450 	.word	0x20001450
 8003320:	20001458 	.word	0x20001458

08003324 <std>:
 8003324:	2300      	movs	r3, #0
 8003326:	b510      	push	{r4, lr}
 8003328:	4604      	mov	r4, r0
 800332a:	e9c0 3300 	strd	r3, r3, [r0]
 800332e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003332:	6083      	str	r3, [r0, #8]
 8003334:	8181      	strh	r1, [r0, #12]
 8003336:	6643      	str	r3, [r0, #100]	; 0x64
 8003338:	81c2      	strh	r2, [r0, #14]
 800333a:	6183      	str	r3, [r0, #24]
 800333c:	4619      	mov	r1, r3
 800333e:	2208      	movs	r2, #8
 8003340:	305c      	adds	r0, #92	; 0x5c
 8003342:	f000 f9e5 	bl	8003710 <memset>
 8003346:	4b0d      	ldr	r3, [pc, #52]	; (800337c <std+0x58>)
 8003348:	6263      	str	r3, [r4, #36]	; 0x24
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <std+0x5c>)
 800334c:	62a3      	str	r3, [r4, #40]	; 0x28
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <std+0x60>)
 8003350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <std+0x64>)
 8003354:	6323      	str	r3, [r4, #48]	; 0x30
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <std+0x68>)
 8003358:	6224      	str	r4, [r4, #32]
 800335a:	429c      	cmp	r4, r3
 800335c:	d006      	beq.n	800336c <std+0x48>
 800335e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003362:	4294      	cmp	r4, r2
 8003364:	d002      	beq.n	800336c <std+0x48>
 8003366:	33d0      	adds	r3, #208	; 0xd0
 8003368:	429c      	cmp	r4, r3
 800336a:	d105      	bne.n	8003378 <std+0x54>
 800336c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003374:	f000 ba94 	b.w	80038a0 <__retarget_lock_init_recursive>
 8003378:	bd10      	pop	{r4, pc}
 800337a:	bf00      	nop
 800337c:	08003561 	.word	0x08003561
 8003380:	08003583 	.word	0x08003583
 8003384:	080035bb 	.word	0x080035bb
 8003388:	080035df 	.word	0x080035df
 800338c:	2000146c 	.word	0x2000146c

08003390 <stdio_exit_handler>:
 8003390:	4a02      	ldr	r2, [pc, #8]	; (800339c <stdio_exit_handler+0xc>)
 8003392:	4903      	ldr	r1, [pc, #12]	; (80033a0 <stdio_exit_handler+0x10>)
 8003394:	4803      	ldr	r0, [pc, #12]	; (80033a4 <stdio_exit_handler+0x14>)
 8003396:	f000 b869 	b.w	800346c <_fwalk_sglue>
 800339a:	bf00      	nop
 800339c:	20000014 	.word	0x20000014
 80033a0:	08003ba5 	.word	0x08003ba5
 80033a4:	20000020 	.word	0x20000020

080033a8 <cleanup_stdio>:
 80033a8:	6841      	ldr	r1, [r0, #4]
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <cleanup_stdio+0x34>)
 80033ac:	4299      	cmp	r1, r3
 80033ae:	b510      	push	{r4, lr}
 80033b0:	4604      	mov	r4, r0
 80033b2:	d001      	beq.n	80033b8 <cleanup_stdio+0x10>
 80033b4:	f000 fbf6 	bl	8003ba4 <_fflush_r>
 80033b8:	68a1      	ldr	r1, [r4, #8]
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <cleanup_stdio+0x38>)
 80033bc:	4299      	cmp	r1, r3
 80033be:	d002      	beq.n	80033c6 <cleanup_stdio+0x1e>
 80033c0:	4620      	mov	r0, r4
 80033c2:	f000 fbef 	bl	8003ba4 <_fflush_r>
 80033c6:	68e1      	ldr	r1, [r4, #12]
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <cleanup_stdio+0x3c>)
 80033ca:	4299      	cmp	r1, r3
 80033cc:	d004      	beq.n	80033d8 <cleanup_stdio+0x30>
 80033ce:	4620      	mov	r0, r4
 80033d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d4:	f000 bbe6 	b.w	8003ba4 <_fflush_r>
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	bf00      	nop
 80033dc:	2000146c 	.word	0x2000146c
 80033e0:	200014d4 	.word	0x200014d4
 80033e4:	2000153c 	.word	0x2000153c

080033e8 <global_stdio_init.part.0>:
 80033e8:	b510      	push	{r4, lr}
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <global_stdio_init.part.0+0x30>)
 80033ec:	4c0b      	ldr	r4, [pc, #44]	; (800341c <global_stdio_init.part.0+0x34>)
 80033ee:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <global_stdio_init.part.0+0x38>)
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	4620      	mov	r0, r4
 80033f4:	2200      	movs	r2, #0
 80033f6:	2104      	movs	r1, #4
 80033f8:	f7ff ff94 	bl	8003324 <std>
 80033fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003400:	2201      	movs	r2, #1
 8003402:	2109      	movs	r1, #9
 8003404:	f7ff ff8e 	bl	8003324 <std>
 8003408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800340c:	2202      	movs	r2, #2
 800340e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003412:	2112      	movs	r1, #18
 8003414:	f7ff bf86 	b.w	8003324 <std>
 8003418:	200015a4 	.word	0x200015a4
 800341c:	2000146c 	.word	0x2000146c
 8003420:	08003391 	.word	0x08003391

08003424 <__sfp_lock_acquire>:
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <__sfp_lock_acquire+0x8>)
 8003426:	f000 ba3c 	b.w	80038a2 <__retarget_lock_acquire_recursive>
 800342a:	bf00      	nop
 800342c:	200015ad 	.word	0x200015ad

08003430 <__sfp_lock_release>:
 8003430:	4801      	ldr	r0, [pc, #4]	; (8003438 <__sfp_lock_release+0x8>)
 8003432:	f000 ba37 	b.w	80038a4 <__retarget_lock_release_recursive>
 8003436:	bf00      	nop
 8003438:	200015ad 	.word	0x200015ad

0800343c <__sinit>:
 800343c:	b510      	push	{r4, lr}
 800343e:	4604      	mov	r4, r0
 8003440:	f7ff fff0 	bl	8003424 <__sfp_lock_acquire>
 8003444:	6a23      	ldr	r3, [r4, #32]
 8003446:	b11b      	cbz	r3, 8003450 <__sinit+0x14>
 8003448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800344c:	f7ff bff0 	b.w	8003430 <__sfp_lock_release>
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <__sinit+0x28>)
 8003452:	6223      	str	r3, [r4, #32]
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <__sinit+0x2c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f5      	bne.n	8003448 <__sinit+0xc>
 800345c:	f7ff ffc4 	bl	80033e8 <global_stdio_init.part.0>
 8003460:	e7f2      	b.n	8003448 <__sinit+0xc>
 8003462:	bf00      	nop
 8003464:	080033a9 	.word	0x080033a9
 8003468:	200015a4 	.word	0x200015a4

0800346c <_fwalk_sglue>:
 800346c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003470:	4607      	mov	r7, r0
 8003472:	4688      	mov	r8, r1
 8003474:	4614      	mov	r4, r2
 8003476:	2600      	movs	r6, #0
 8003478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800347c:	f1b9 0901 	subs.w	r9, r9, #1
 8003480:	d505      	bpl.n	800348e <_fwalk_sglue+0x22>
 8003482:	6824      	ldr	r4, [r4, #0]
 8003484:	2c00      	cmp	r4, #0
 8003486:	d1f7      	bne.n	8003478 <_fwalk_sglue+0xc>
 8003488:	4630      	mov	r0, r6
 800348a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800348e:	89ab      	ldrh	r3, [r5, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d907      	bls.n	80034a4 <_fwalk_sglue+0x38>
 8003494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003498:	3301      	adds	r3, #1
 800349a:	d003      	beq.n	80034a4 <_fwalk_sglue+0x38>
 800349c:	4629      	mov	r1, r5
 800349e:	4638      	mov	r0, r7
 80034a0:	47c0      	blx	r8
 80034a2:	4306      	orrs	r6, r0
 80034a4:	3568      	adds	r5, #104	; 0x68
 80034a6:	e7e9      	b.n	800347c <_fwalk_sglue+0x10>

080034a8 <_puts_r>:
 80034a8:	6a03      	ldr	r3, [r0, #32]
 80034aa:	b570      	push	{r4, r5, r6, lr}
 80034ac:	6884      	ldr	r4, [r0, #8]
 80034ae:	4605      	mov	r5, r0
 80034b0:	460e      	mov	r6, r1
 80034b2:	b90b      	cbnz	r3, 80034b8 <_puts_r+0x10>
 80034b4:	f7ff ffc2 	bl	800343c <__sinit>
 80034b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ba:	07db      	lsls	r3, r3, #31
 80034bc:	d405      	bmi.n	80034ca <_puts_r+0x22>
 80034be:	89a3      	ldrh	r3, [r4, #12]
 80034c0:	0598      	lsls	r0, r3, #22
 80034c2:	d402      	bmi.n	80034ca <_puts_r+0x22>
 80034c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034c6:	f000 f9ec 	bl	80038a2 <__retarget_lock_acquire_recursive>
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	0719      	lsls	r1, r3, #28
 80034ce:	d513      	bpl.n	80034f8 <_puts_r+0x50>
 80034d0:	6923      	ldr	r3, [r4, #16]
 80034d2:	b18b      	cbz	r3, 80034f8 <_puts_r+0x50>
 80034d4:	3e01      	subs	r6, #1
 80034d6:	68a3      	ldr	r3, [r4, #8]
 80034d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034dc:	3b01      	subs	r3, #1
 80034de:	60a3      	str	r3, [r4, #8]
 80034e0:	b9e9      	cbnz	r1, 800351e <_puts_r+0x76>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da2e      	bge.n	8003544 <_puts_r+0x9c>
 80034e6:	4622      	mov	r2, r4
 80034e8:	210a      	movs	r1, #10
 80034ea:	4628      	mov	r0, r5
 80034ec:	f000 f87b 	bl	80035e6 <__swbuf_r>
 80034f0:	3001      	adds	r0, #1
 80034f2:	d007      	beq.n	8003504 <_puts_r+0x5c>
 80034f4:	250a      	movs	r5, #10
 80034f6:	e007      	b.n	8003508 <_puts_r+0x60>
 80034f8:	4621      	mov	r1, r4
 80034fa:	4628      	mov	r0, r5
 80034fc:	f000 f8b0 	bl	8003660 <__swsetup_r>
 8003500:	2800      	cmp	r0, #0
 8003502:	d0e7      	beq.n	80034d4 <_puts_r+0x2c>
 8003504:	f04f 35ff 	mov.w	r5, #4294967295
 8003508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800350a:	07da      	lsls	r2, r3, #31
 800350c:	d405      	bmi.n	800351a <_puts_r+0x72>
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	059b      	lsls	r3, r3, #22
 8003512:	d402      	bmi.n	800351a <_puts_r+0x72>
 8003514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003516:	f000 f9c5 	bl	80038a4 <__retarget_lock_release_recursive>
 800351a:	4628      	mov	r0, r5
 800351c:	bd70      	pop	{r4, r5, r6, pc}
 800351e:	2b00      	cmp	r3, #0
 8003520:	da04      	bge.n	800352c <_puts_r+0x84>
 8003522:	69a2      	ldr	r2, [r4, #24]
 8003524:	429a      	cmp	r2, r3
 8003526:	dc06      	bgt.n	8003536 <_puts_r+0x8e>
 8003528:	290a      	cmp	r1, #10
 800352a:	d004      	beq.n	8003536 <_puts_r+0x8e>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	6022      	str	r2, [r4, #0]
 8003532:	7019      	strb	r1, [r3, #0]
 8003534:	e7cf      	b.n	80034d6 <_puts_r+0x2e>
 8003536:	4622      	mov	r2, r4
 8003538:	4628      	mov	r0, r5
 800353a:	f000 f854 	bl	80035e6 <__swbuf_r>
 800353e:	3001      	adds	r0, #1
 8003540:	d1c9      	bne.n	80034d6 <_puts_r+0x2e>
 8003542:	e7df      	b.n	8003504 <_puts_r+0x5c>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	250a      	movs	r5, #10
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	6022      	str	r2, [r4, #0]
 800354c:	701d      	strb	r5, [r3, #0]
 800354e:	e7db      	b.n	8003508 <_puts_r+0x60>

08003550 <puts>:
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <puts+0xc>)
 8003552:	4601      	mov	r1, r0
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	f7ff bfa7 	b.w	80034a8 <_puts_r>
 800355a:	bf00      	nop
 800355c:	2000006c 	.word	0x2000006c

08003560 <__sread>:
 8003560:	b510      	push	{r4, lr}
 8003562:	460c      	mov	r4, r1
 8003564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003568:	f000 f952 	bl	8003810 <_read_r>
 800356c:	2800      	cmp	r0, #0
 800356e:	bfab      	itete	ge
 8003570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003572:	89a3      	ldrhlt	r3, [r4, #12]
 8003574:	181b      	addge	r3, r3, r0
 8003576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800357a:	bfac      	ite	ge
 800357c:	6563      	strge	r3, [r4, #84]	; 0x54
 800357e:	81a3      	strhlt	r3, [r4, #12]
 8003580:	bd10      	pop	{r4, pc}

08003582 <__swrite>:
 8003582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003586:	461f      	mov	r7, r3
 8003588:	898b      	ldrh	r3, [r1, #12]
 800358a:	05db      	lsls	r3, r3, #23
 800358c:	4605      	mov	r5, r0
 800358e:	460c      	mov	r4, r1
 8003590:	4616      	mov	r6, r2
 8003592:	d505      	bpl.n	80035a0 <__swrite+0x1e>
 8003594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003598:	2302      	movs	r3, #2
 800359a:	2200      	movs	r2, #0
 800359c:	f000 f926 	bl	80037ec <_lseek_r>
 80035a0:	89a3      	ldrh	r3, [r4, #12]
 80035a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035aa:	81a3      	strh	r3, [r4, #12]
 80035ac:	4632      	mov	r2, r6
 80035ae:	463b      	mov	r3, r7
 80035b0:	4628      	mov	r0, r5
 80035b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035b6:	f000 b93d 	b.w	8003834 <_write_r>

080035ba <__sseek>:
 80035ba:	b510      	push	{r4, lr}
 80035bc:	460c      	mov	r4, r1
 80035be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c2:	f000 f913 	bl	80037ec <_lseek_r>
 80035c6:	1c43      	adds	r3, r0, #1
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	bf15      	itete	ne
 80035cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80035ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035d6:	81a3      	strheq	r3, [r4, #12]
 80035d8:	bf18      	it	ne
 80035da:	81a3      	strhne	r3, [r4, #12]
 80035dc:	bd10      	pop	{r4, pc}

080035de <__sclose>:
 80035de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e2:	f000 b89d 	b.w	8003720 <_close_r>

080035e6 <__swbuf_r>:
 80035e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e8:	460e      	mov	r6, r1
 80035ea:	4614      	mov	r4, r2
 80035ec:	4605      	mov	r5, r0
 80035ee:	b118      	cbz	r0, 80035f8 <__swbuf_r+0x12>
 80035f0:	6a03      	ldr	r3, [r0, #32]
 80035f2:	b90b      	cbnz	r3, 80035f8 <__swbuf_r+0x12>
 80035f4:	f7ff ff22 	bl	800343c <__sinit>
 80035f8:	69a3      	ldr	r3, [r4, #24]
 80035fa:	60a3      	str	r3, [r4, #8]
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	071a      	lsls	r2, r3, #28
 8003600:	d525      	bpl.n	800364e <__swbuf_r+0x68>
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	b31b      	cbz	r3, 800364e <__swbuf_r+0x68>
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	6922      	ldr	r2, [r4, #16]
 800360a:	1a98      	subs	r0, r3, r2
 800360c:	6963      	ldr	r3, [r4, #20]
 800360e:	b2f6      	uxtb	r6, r6
 8003610:	4283      	cmp	r3, r0
 8003612:	4637      	mov	r7, r6
 8003614:	dc04      	bgt.n	8003620 <__swbuf_r+0x3a>
 8003616:	4621      	mov	r1, r4
 8003618:	4628      	mov	r0, r5
 800361a:	f000 fac3 	bl	8003ba4 <_fflush_r>
 800361e:	b9e0      	cbnz	r0, 800365a <__swbuf_r+0x74>
 8003620:	68a3      	ldr	r3, [r4, #8]
 8003622:	3b01      	subs	r3, #1
 8003624:	60a3      	str	r3, [r4, #8]
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	6022      	str	r2, [r4, #0]
 800362c:	701e      	strb	r6, [r3, #0]
 800362e:	6962      	ldr	r2, [r4, #20]
 8003630:	1c43      	adds	r3, r0, #1
 8003632:	429a      	cmp	r2, r3
 8003634:	d004      	beq.n	8003640 <__swbuf_r+0x5a>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	07db      	lsls	r3, r3, #31
 800363a:	d506      	bpl.n	800364a <__swbuf_r+0x64>
 800363c:	2e0a      	cmp	r6, #10
 800363e:	d104      	bne.n	800364a <__swbuf_r+0x64>
 8003640:	4621      	mov	r1, r4
 8003642:	4628      	mov	r0, r5
 8003644:	f000 faae 	bl	8003ba4 <_fflush_r>
 8003648:	b938      	cbnz	r0, 800365a <__swbuf_r+0x74>
 800364a:	4638      	mov	r0, r7
 800364c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800364e:	4621      	mov	r1, r4
 8003650:	4628      	mov	r0, r5
 8003652:	f000 f805 	bl	8003660 <__swsetup_r>
 8003656:	2800      	cmp	r0, #0
 8003658:	d0d5      	beq.n	8003606 <__swbuf_r+0x20>
 800365a:	f04f 37ff 	mov.w	r7, #4294967295
 800365e:	e7f4      	b.n	800364a <__swbuf_r+0x64>

08003660 <__swsetup_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	4b2a      	ldr	r3, [pc, #168]	; (800370c <__swsetup_r+0xac>)
 8003664:	4605      	mov	r5, r0
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	460c      	mov	r4, r1
 800366a:	b118      	cbz	r0, 8003674 <__swsetup_r+0x14>
 800366c:	6a03      	ldr	r3, [r0, #32]
 800366e:	b90b      	cbnz	r3, 8003674 <__swsetup_r+0x14>
 8003670:	f7ff fee4 	bl	800343c <__sinit>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800367a:	0718      	lsls	r0, r3, #28
 800367c:	d422      	bmi.n	80036c4 <__swsetup_r+0x64>
 800367e:	06d9      	lsls	r1, r3, #27
 8003680:	d407      	bmi.n	8003692 <__swsetup_r+0x32>
 8003682:	2309      	movs	r3, #9
 8003684:	602b      	str	r3, [r5, #0]
 8003686:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	e034      	b.n	80036fc <__swsetup_r+0x9c>
 8003692:	0758      	lsls	r0, r3, #29
 8003694:	d512      	bpl.n	80036bc <__swsetup_r+0x5c>
 8003696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003698:	b141      	cbz	r1, 80036ac <__swsetup_r+0x4c>
 800369a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800369e:	4299      	cmp	r1, r3
 80036a0:	d002      	beq.n	80036a8 <__swsetup_r+0x48>
 80036a2:	4628      	mov	r0, r5
 80036a4:	f000 f900 	bl	80038a8 <_free_r>
 80036a8:	2300      	movs	r3, #0
 80036aa:	6363      	str	r3, [r4, #52]	; 0x34
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	2300      	movs	r3, #0
 80036b6:	6063      	str	r3, [r4, #4]
 80036b8:	6923      	ldr	r3, [r4, #16]
 80036ba:	6023      	str	r3, [r4, #0]
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	f043 0308 	orr.w	r3, r3, #8
 80036c2:	81a3      	strh	r3, [r4, #12]
 80036c4:	6923      	ldr	r3, [r4, #16]
 80036c6:	b94b      	cbnz	r3, 80036dc <__swsetup_r+0x7c>
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d2:	d003      	beq.n	80036dc <__swsetup_r+0x7c>
 80036d4:	4621      	mov	r1, r4
 80036d6:	4628      	mov	r0, r5
 80036d8:	f000 fab2 	bl	8003c40 <__smakebuf_r>
 80036dc:	89a0      	ldrh	r0, [r4, #12]
 80036de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036e2:	f010 0301 	ands.w	r3, r0, #1
 80036e6:	d00a      	beq.n	80036fe <__swsetup_r+0x9e>
 80036e8:	2300      	movs	r3, #0
 80036ea:	60a3      	str	r3, [r4, #8]
 80036ec:	6963      	ldr	r3, [r4, #20]
 80036ee:	425b      	negs	r3, r3
 80036f0:	61a3      	str	r3, [r4, #24]
 80036f2:	6923      	ldr	r3, [r4, #16]
 80036f4:	b943      	cbnz	r3, 8003708 <__swsetup_r+0xa8>
 80036f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036fa:	d1c4      	bne.n	8003686 <__swsetup_r+0x26>
 80036fc:	bd38      	pop	{r3, r4, r5, pc}
 80036fe:	0781      	lsls	r1, r0, #30
 8003700:	bf58      	it	pl
 8003702:	6963      	ldrpl	r3, [r4, #20]
 8003704:	60a3      	str	r3, [r4, #8]
 8003706:	e7f4      	b.n	80036f2 <__swsetup_r+0x92>
 8003708:	2000      	movs	r0, #0
 800370a:	e7f7      	b.n	80036fc <__swsetup_r+0x9c>
 800370c:	2000006c 	.word	0x2000006c

08003710 <memset>:
 8003710:	4402      	add	r2, r0
 8003712:	4603      	mov	r3, r0
 8003714:	4293      	cmp	r3, r2
 8003716:	d100      	bne.n	800371a <memset+0xa>
 8003718:	4770      	bx	lr
 800371a:	f803 1b01 	strb.w	r1, [r3], #1
 800371e:	e7f9      	b.n	8003714 <memset+0x4>

08003720 <_close_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4d06      	ldr	r5, [pc, #24]	; (800373c <_close_r+0x1c>)
 8003724:	2300      	movs	r3, #0
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	f7fc ffdb 	bl	80006e6 <_close>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_close_r+0x1a>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_close_r+0x1a>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	200015a8 	.word	0x200015a8

08003740 <_reclaim_reent>:
 8003740:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <_reclaim_reent+0xa8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4283      	cmp	r3, r0
 8003746:	b570      	push	{r4, r5, r6, lr}
 8003748:	4604      	mov	r4, r0
 800374a:	d04b      	beq.n	80037e4 <_reclaim_reent+0xa4>
 800374c:	69c3      	ldr	r3, [r0, #28]
 800374e:	b143      	cbz	r3, 8003762 <_reclaim_reent+0x22>
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d144      	bne.n	80037e0 <_reclaim_reent+0xa0>
 8003756:	69e3      	ldr	r3, [r4, #28]
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	b111      	cbz	r1, 8003762 <_reclaim_reent+0x22>
 800375c:	4620      	mov	r0, r4
 800375e:	f000 f8a3 	bl	80038a8 <_free_r>
 8003762:	6961      	ldr	r1, [r4, #20]
 8003764:	b111      	cbz	r1, 800376c <_reclaim_reent+0x2c>
 8003766:	4620      	mov	r0, r4
 8003768:	f000 f89e 	bl	80038a8 <_free_r>
 800376c:	69e1      	ldr	r1, [r4, #28]
 800376e:	b111      	cbz	r1, 8003776 <_reclaim_reent+0x36>
 8003770:	4620      	mov	r0, r4
 8003772:	f000 f899 	bl	80038a8 <_free_r>
 8003776:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003778:	b111      	cbz	r1, 8003780 <_reclaim_reent+0x40>
 800377a:	4620      	mov	r0, r4
 800377c:	f000 f894 	bl	80038a8 <_free_r>
 8003780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003782:	b111      	cbz	r1, 800378a <_reclaim_reent+0x4a>
 8003784:	4620      	mov	r0, r4
 8003786:	f000 f88f 	bl	80038a8 <_free_r>
 800378a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800378c:	b111      	cbz	r1, 8003794 <_reclaim_reent+0x54>
 800378e:	4620      	mov	r0, r4
 8003790:	f000 f88a 	bl	80038a8 <_free_r>
 8003794:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003796:	b111      	cbz	r1, 800379e <_reclaim_reent+0x5e>
 8003798:	4620      	mov	r0, r4
 800379a:	f000 f885 	bl	80038a8 <_free_r>
 800379e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80037a0:	b111      	cbz	r1, 80037a8 <_reclaim_reent+0x68>
 80037a2:	4620      	mov	r0, r4
 80037a4:	f000 f880 	bl	80038a8 <_free_r>
 80037a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80037aa:	b111      	cbz	r1, 80037b2 <_reclaim_reent+0x72>
 80037ac:	4620      	mov	r0, r4
 80037ae:	f000 f87b 	bl	80038a8 <_free_r>
 80037b2:	6a23      	ldr	r3, [r4, #32]
 80037b4:	b1b3      	cbz	r3, 80037e4 <_reclaim_reent+0xa4>
 80037b6:	4620      	mov	r0, r4
 80037b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80037bc:	4718      	bx	r3
 80037be:	5949      	ldr	r1, [r1, r5]
 80037c0:	b941      	cbnz	r1, 80037d4 <_reclaim_reent+0x94>
 80037c2:	3504      	adds	r5, #4
 80037c4:	69e3      	ldr	r3, [r4, #28]
 80037c6:	2d80      	cmp	r5, #128	; 0x80
 80037c8:	68d9      	ldr	r1, [r3, #12]
 80037ca:	d1f8      	bne.n	80037be <_reclaim_reent+0x7e>
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 f86b 	bl	80038a8 <_free_r>
 80037d2:	e7c0      	b.n	8003756 <_reclaim_reent+0x16>
 80037d4:	680e      	ldr	r6, [r1, #0]
 80037d6:	4620      	mov	r0, r4
 80037d8:	f000 f866 	bl	80038a8 <_free_r>
 80037dc:	4631      	mov	r1, r6
 80037de:	e7ef      	b.n	80037c0 <_reclaim_reent+0x80>
 80037e0:	2500      	movs	r5, #0
 80037e2:	e7ef      	b.n	80037c4 <_reclaim_reent+0x84>
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
 80037e6:	bf00      	nop
 80037e8:	2000006c 	.word	0x2000006c

080037ec <_lseek_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4d07      	ldr	r5, [pc, #28]	; (800380c <_lseek_r+0x20>)
 80037f0:	4604      	mov	r4, r0
 80037f2:	4608      	mov	r0, r1
 80037f4:	4611      	mov	r1, r2
 80037f6:	2200      	movs	r2, #0
 80037f8:	602a      	str	r2, [r5, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	f7fc ff9a 	bl	8000734 <_lseek>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d102      	bne.n	800380a <_lseek_r+0x1e>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	b103      	cbz	r3, 800380a <_lseek_r+0x1e>
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	bd38      	pop	{r3, r4, r5, pc}
 800380c:	200015a8 	.word	0x200015a8

08003810 <_read_r>:
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	4d07      	ldr	r5, [pc, #28]	; (8003830 <_read_r+0x20>)
 8003814:	4604      	mov	r4, r0
 8003816:	4608      	mov	r0, r1
 8003818:	4611      	mov	r1, r2
 800381a:	2200      	movs	r2, #0
 800381c:	602a      	str	r2, [r5, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	f7fc ff28 	bl	8000674 <_read>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	d102      	bne.n	800382e <_read_r+0x1e>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	b103      	cbz	r3, 800382e <_read_r+0x1e>
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	200015a8 	.word	0x200015a8

08003834 <_write_r>:
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	4d07      	ldr	r5, [pc, #28]	; (8003854 <_write_r+0x20>)
 8003838:	4604      	mov	r4, r0
 800383a:	4608      	mov	r0, r1
 800383c:	4611      	mov	r1, r2
 800383e:	2200      	movs	r2, #0
 8003840:	602a      	str	r2, [r5, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	f7fc ff33 	bl	80006ae <_write>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d102      	bne.n	8003852 <_write_r+0x1e>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	b103      	cbz	r3, 8003852 <_write_r+0x1e>
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	bd38      	pop	{r3, r4, r5, pc}
 8003854:	200015a8 	.word	0x200015a8

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4d0d      	ldr	r5, [pc, #52]	; (8003890 <__libc_init_array+0x38>)
 800385c:	4c0d      	ldr	r4, [pc, #52]	; (8003894 <__libc_init_array+0x3c>)
 800385e:	1b64      	subs	r4, r4, r5
 8003860:	10a4      	asrs	r4, r4, #2
 8003862:	2600      	movs	r6, #0
 8003864:	42a6      	cmp	r6, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	4d0b      	ldr	r5, [pc, #44]	; (8003898 <__libc_init_array+0x40>)
 800386a:	4c0c      	ldr	r4, [pc, #48]	; (800389c <__libc_init_array+0x44>)
 800386c:	f000 fa64 	bl	8003d38 <_init>
 8003870:	1b64      	subs	r4, r4, r5
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	2600      	movs	r6, #0
 8003876:	42a6      	cmp	r6, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003880:	4798      	blx	r3
 8003882:	3601      	adds	r6, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f855 3b04 	ldr.w	r3, [r5], #4
 800388a:	4798      	blx	r3
 800388c:	3601      	adds	r6, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	08003dd8 	.word	0x08003dd8
 8003894:	08003dd8 	.word	0x08003dd8
 8003898:	08003dd8 	.word	0x08003dd8
 800389c:	08003ddc 	.word	0x08003ddc

080038a0 <__retarget_lock_init_recursive>:
 80038a0:	4770      	bx	lr

080038a2 <__retarget_lock_acquire_recursive>:
 80038a2:	4770      	bx	lr

080038a4 <__retarget_lock_release_recursive>:
 80038a4:	4770      	bx	lr
	...

080038a8 <_free_r>:
 80038a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038aa:	2900      	cmp	r1, #0
 80038ac:	d044      	beq.n	8003938 <_free_r+0x90>
 80038ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b2:	9001      	str	r0, [sp, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f1a1 0404 	sub.w	r4, r1, #4
 80038ba:	bfb8      	it	lt
 80038bc:	18e4      	addlt	r4, r4, r3
 80038be:	f000 f8df 	bl	8003a80 <__malloc_lock>
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <_free_r+0x94>)
 80038c4:	9801      	ldr	r0, [sp, #4]
 80038c6:	6813      	ldr	r3, [r2, #0]
 80038c8:	b933      	cbnz	r3, 80038d8 <_free_r+0x30>
 80038ca:	6063      	str	r3, [r4, #4]
 80038cc:	6014      	str	r4, [r2, #0]
 80038ce:	b003      	add	sp, #12
 80038d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038d4:	f000 b8da 	b.w	8003a8c <__malloc_unlock>
 80038d8:	42a3      	cmp	r3, r4
 80038da:	d908      	bls.n	80038ee <_free_r+0x46>
 80038dc:	6825      	ldr	r5, [r4, #0]
 80038de:	1961      	adds	r1, r4, r5
 80038e0:	428b      	cmp	r3, r1
 80038e2:	bf01      	itttt	eq
 80038e4:	6819      	ldreq	r1, [r3, #0]
 80038e6:	685b      	ldreq	r3, [r3, #4]
 80038e8:	1949      	addeq	r1, r1, r5
 80038ea:	6021      	streq	r1, [r4, #0]
 80038ec:	e7ed      	b.n	80038ca <_free_r+0x22>
 80038ee:	461a      	mov	r2, r3
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b10b      	cbz	r3, 80038f8 <_free_r+0x50>
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	d9fa      	bls.n	80038ee <_free_r+0x46>
 80038f8:	6811      	ldr	r1, [r2, #0]
 80038fa:	1855      	adds	r5, r2, r1
 80038fc:	42a5      	cmp	r5, r4
 80038fe:	d10b      	bne.n	8003918 <_free_r+0x70>
 8003900:	6824      	ldr	r4, [r4, #0]
 8003902:	4421      	add	r1, r4
 8003904:	1854      	adds	r4, r2, r1
 8003906:	42a3      	cmp	r3, r4
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	d1e0      	bne.n	80038ce <_free_r+0x26>
 800390c:	681c      	ldr	r4, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	6053      	str	r3, [r2, #4]
 8003912:	440c      	add	r4, r1
 8003914:	6014      	str	r4, [r2, #0]
 8003916:	e7da      	b.n	80038ce <_free_r+0x26>
 8003918:	d902      	bls.n	8003920 <_free_r+0x78>
 800391a:	230c      	movs	r3, #12
 800391c:	6003      	str	r3, [r0, #0]
 800391e:	e7d6      	b.n	80038ce <_free_r+0x26>
 8003920:	6825      	ldr	r5, [r4, #0]
 8003922:	1961      	adds	r1, r4, r5
 8003924:	428b      	cmp	r3, r1
 8003926:	bf04      	itt	eq
 8003928:	6819      	ldreq	r1, [r3, #0]
 800392a:	685b      	ldreq	r3, [r3, #4]
 800392c:	6063      	str	r3, [r4, #4]
 800392e:	bf04      	itt	eq
 8003930:	1949      	addeq	r1, r1, r5
 8003932:	6021      	streq	r1, [r4, #0]
 8003934:	6054      	str	r4, [r2, #4]
 8003936:	e7ca      	b.n	80038ce <_free_r+0x26>
 8003938:	b003      	add	sp, #12
 800393a:	bd30      	pop	{r4, r5, pc}
 800393c:	200015b0 	.word	0x200015b0

08003940 <sbrk_aligned>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4e0e      	ldr	r6, [pc, #56]	; (800397c <sbrk_aligned+0x3c>)
 8003944:	460c      	mov	r4, r1
 8003946:	6831      	ldr	r1, [r6, #0]
 8003948:	4605      	mov	r5, r0
 800394a:	b911      	cbnz	r1, 8003952 <sbrk_aligned+0x12>
 800394c:	f000 f9d6 	bl	8003cfc <_sbrk_r>
 8003950:	6030      	str	r0, [r6, #0]
 8003952:	4621      	mov	r1, r4
 8003954:	4628      	mov	r0, r5
 8003956:	f000 f9d1 	bl	8003cfc <_sbrk_r>
 800395a:	1c43      	adds	r3, r0, #1
 800395c:	d00a      	beq.n	8003974 <sbrk_aligned+0x34>
 800395e:	1cc4      	adds	r4, r0, #3
 8003960:	f024 0403 	bic.w	r4, r4, #3
 8003964:	42a0      	cmp	r0, r4
 8003966:	d007      	beq.n	8003978 <sbrk_aligned+0x38>
 8003968:	1a21      	subs	r1, r4, r0
 800396a:	4628      	mov	r0, r5
 800396c:	f000 f9c6 	bl	8003cfc <_sbrk_r>
 8003970:	3001      	adds	r0, #1
 8003972:	d101      	bne.n	8003978 <sbrk_aligned+0x38>
 8003974:	f04f 34ff 	mov.w	r4, #4294967295
 8003978:	4620      	mov	r0, r4
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	200015b4 	.word	0x200015b4

08003980 <_malloc_r>:
 8003980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003984:	1ccd      	adds	r5, r1, #3
 8003986:	f025 0503 	bic.w	r5, r5, #3
 800398a:	3508      	adds	r5, #8
 800398c:	2d0c      	cmp	r5, #12
 800398e:	bf38      	it	cc
 8003990:	250c      	movcc	r5, #12
 8003992:	2d00      	cmp	r5, #0
 8003994:	4607      	mov	r7, r0
 8003996:	db01      	blt.n	800399c <_malloc_r+0x1c>
 8003998:	42a9      	cmp	r1, r5
 800399a:	d905      	bls.n	80039a8 <_malloc_r+0x28>
 800399c:	230c      	movs	r3, #12
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	2600      	movs	r6, #0
 80039a2:	4630      	mov	r0, r6
 80039a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a7c <_malloc_r+0xfc>
 80039ac:	f000 f868 	bl	8003a80 <__malloc_lock>
 80039b0:	f8d8 3000 	ldr.w	r3, [r8]
 80039b4:	461c      	mov	r4, r3
 80039b6:	bb5c      	cbnz	r4, 8003a10 <_malloc_r+0x90>
 80039b8:	4629      	mov	r1, r5
 80039ba:	4638      	mov	r0, r7
 80039bc:	f7ff ffc0 	bl	8003940 <sbrk_aligned>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	4604      	mov	r4, r0
 80039c4:	d155      	bne.n	8003a72 <_malloc_r+0xf2>
 80039c6:	f8d8 4000 	ldr.w	r4, [r8]
 80039ca:	4626      	mov	r6, r4
 80039cc:	2e00      	cmp	r6, #0
 80039ce:	d145      	bne.n	8003a5c <_malloc_r+0xdc>
 80039d0:	2c00      	cmp	r4, #0
 80039d2:	d048      	beq.n	8003a66 <_malloc_r+0xe6>
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	4631      	mov	r1, r6
 80039d8:	4638      	mov	r0, r7
 80039da:	eb04 0903 	add.w	r9, r4, r3
 80039de:	f000 f98d 	bl	8003cfc <_sbrk_r>
 80039e2:	4581      	cmp	r9, r0
 80039e4:	d13f      	bne.n	8003a66 <_malloc_r+0xe6>
 80039e6:	6821      	ldr	r1, [r4, #0]
 80039e8:	1a6d      	subs	r5, r5, r1
 80039ea:	4629      	mov	r1, r5
 80039ec:	4638      	mov	r0, r7
 80039ee:	f7ff ffa7 	bl	8003940 <sbrk_aligned>
 80039f2:	3001      	adds	r0, #1
 80039f4:	d037      	beq.n	8003a66 <_malloc_r+0xe6>
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	442b      	add	r3, r5
 80039fa:	6023      	str	r3, [r4, #0]
 80039fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d038      	beq.n	8003a76 <_malloc_r+0xf6>
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	42a2      	cmp	r2, r4
 8003a08:	d12b      	bne.n	8003a62 <_malloc_r+0xe2>
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	e00f      	b.n	8003a30 <_malloc_r+0xb0>
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	1b52      	subs	r2, r2, r5
 8003a14:	d41f      	bmi.n	8003a56 <_malloc_r+0xd6>
 8003a16:	2a0b      	cmp	r2, #11
 8003a18:	d917      	bls.n	8003a4a <_malloc_r+0xca>
 8003a1a:	1961      	adds	r1, r4, r5
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	6025      	str	r5, [r4, #0]
 8003a20:	bf18      	it	ne
 8003a22:	6059      	strne	r1, [r3, #4]
 8003a24:	6863      	ldr	r3, [r4, #4]
 8003a26:	bf08      	it	eq
 8003a28:	f8c8 1000 	streq.w	r1, [r8]
 8003a2c:	5162      	str	r2, [r4, r5]
 8003a2e:	604b      	str	r3, [r1, #4]
 8003a30:	4638      	mov	r0, r7
 8003a32:	f104 060b 	add.w	r6, r4, #11
 8003a36:	f000 f829 	bl	8003a8c <__malloc_unlock>
 8003a3a:	f026 0607 	bic.w	r6, r6, #7
 8003a3e:	1d23      	adds	r3, r4, #4
 8003a40:	1af2      	subs	r2, r6, r3
 8003a42:	d0ae      	beq.n	80039a2 <_malloc_r+0x22>
 8003a44:	1b9b      	subs	r3, r3, r6
 8003a46:	50a3      	str	r3, [r4, r2]
 8003a48:	e7ab      	b.n	80039a2 <_malloc_r+0x22>
 8003a4a:	42a3      	cmp	r3, r4
 8003a4c:	6862      	ldr	r2, [r4, #4]
 8003a4e:	d1dd      	bne.n	8003a0c <_malloc_r+0x8c>
 8003a50:	f8c8 2000 	str.w	r2, [r8]
 8003a54:	e7ec      	b.n	8003a30 <_malloc_r+0xb0>
 8003a56:	4623      	mov	r3, r4
 8003a58:	6864      	ldr	r4, [r4, #4]
 8003a5a:	e7ac      	b.n	80039b6 <_malloc_r+0x36>
 8003a5c:	4634      	mov	r4, r6
 8003a5e:	6876      	ldr	r6, [r6, #4]
 8003a60:	e7b4      	b.n	80039cc <_malloc_r+0x4c>
 8003a62:	4613      	mov	r3, r2
 8003a64:	e7cc      	b.n	8003a00 <_malloc_r+0x80>
 8003a66:	230c      	movs	r3, #12
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	f000 f80e 	bl	8003a8c <__malloc_unlock>
 8003a70:	e797      	b.n	80039a2 <_malloc_r+0x22>
 8003a72:	6025      	str	r5, [r4, #0]
 8003a74:	e7dc      	b.n	8003a30 <_malloc_r+0xb0>
 8003a76:	605b      	str	r3, [r3, #4]
 8003a78:	deff      	udf	#255	; 0xff
 8003a7a:	bf00      	nop
 8003a7c:	200015b0 	.word	0x200015b0

08003a80 <__malloc_lock>:
 8003a80:	4801      	ldr	r0, [pc, #4]	; (8003a88 <__malloc_lock+0x8>)
 8003a82:	f7ff bf0e 	b.w	80038a2 <__retarget_lock_acquire_recursive>
 8003a86:	bf00      	nop
 8003a88:	200015ac 	.word	0x200015ac

08003a8c <__malloc_unlock>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	; (8003a94 <__malloc_unlock+0x8>)
 8003a8e:	f7ff bf09 	b.w	80038a4 <__retarget_lock_release_recursive>
 8003a92:	bf00      	nop
 8003a94:	200015ac 	.word	0x200015ac

08003a98 <__sflush_r>:
 8003a98:	898a      	ldrh	r2, [r1, #12]
 8003a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9e:	4605      	mov	r5, r0
 8003aa0:	0710      	lsls	r0, r2, #28
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	d458      	bmi.n	8003b58 <__sflush_r+0xc0>
 8003aa6:	684b      	ldr	r3, [r1, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	dc05      	bgt.n	8003ab8 <__sflush_r+0x20>
 8003aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	dc02      	bgt.n	8003ab8 <__sflush_r+0x20>
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aba:	2e00      	cmp	r6, #0
 8003abc:	d0f9      	beq.n	8003ab2 <__sflush_r+0x1a>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ac4:	682f      	ldr	r7, [r5, #0]
 8003ac6:	6a21      	ldr	r1, [r4, #32]
 8003ac8:	602b      	str	r3, [r5, #0]
 8003aca:	d032      	beq.n	8003b32 <__sflush_r+0x9a>
 8003acc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	075a      	lsls	r2, r3, #29
 8003ad2:	d505      	bpl.n	8003ae0 <__sflush_r+0x48>
 8003ad4:	6863      	ldr	r3, [r4, #4]
 8003ad6:	1ac0      	subs	r0, r0, r3
 8003ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ada:	b10b      	cbz	r3, 8003ae0 <__sflush_r+0x48>
 8003adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ade:	1ac0      	subs	r0, r0, r3
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ae6:	6a21      	ldr	r1, [r4, #32]
 8003ae8:	4628      	mov	r0, r5
 8003aea:	47b0      	blx	r6
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	d106      	bne.n	8003b00 <__sflush_r+0x68>
 8003af2:	6829      	ldr	r1, [r5, #0]
 8003af4:	291d      	cmp	r1, #29
 8003af6:	d82b      	bhi.n	8003b50 <__sflush_r+0xb8>
 8003af8:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <__sflush_r+0x108>)
 8003afa:	410a      	asrs	r2, r1
 8003afc:	07d6      	lsls	r6, r2, #31
 8003afe:	d427      	bmi.n	8003b50 <__sflush_r+0xb8>
 8003b00:	2200      	movs	r2, #0
 8003b02:	6062      	str	r2, [r4, #4]
 8003b04:	04d9      	lsls	r1, r3, #19
 8003b06:	6922      	ldr	r2, [r4, #16]
 8003b08:	6022      	str	r2, [r4, #0]
 8003b0a:	d504      	bpl.n	8003b16 <__sflush_r+0x7e>
 8003b0c:	1c42      	adds	r2, r0, #1
 8003b0e:	d101      	bne.n	8003b14 <__sflush_r+0x7c>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b903      	cbnz	r3, 8003b16 <__sflush_r+0x7e>
 8003b14:	6560      	str	r0, [r4, #84]	; 0x54
 8003b16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b18:	602f      	str	r7, [r5, #0]
 8003b1a:	2900      	cmp	r1, #0
 8003b1c:	d0c9      	beq.n	8003ab2 <__sflush_r+0x1a>
 8003b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b22:	4299      	cmp	r1, r3
 8003b24:	d002      	beq.n	8003b2c <__sflush_r+0x94>
 8003b26:	4628      	mov	r0, r5
 8003b28:	f7ff febe 	bl	80038a8 <_free_r>
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b30:	e7c0      	b.n	8003ab4 <__sflush_r+0x1c>
 8003b32:	2301      	movs	r3, #1
 8003b34:	4628      	mov	r0, r5
 8003b36:	47b0      	blx	r6
 8003b38:	1c41      	adds	r1, r0, #1
 8003b3a:	d1c8      	bne.n	8003ace <__sflush_r+0x36>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0c5      	beq.n	8003ace <__sflush_r+0x36>
 8003b42:	2b1d      	cmp	r3, #29
 8003b44:	d001      	beq.n	8003b4a <__sflush_r+0xb2>
 8003b46:	2b16      	cmp	r3, #22
 8003b48:	d101      	bne.n	8003b4e <__sflush_r+0xb6>
 8003b4a:	602f      	str	r7, [r5, #0]
 8003b4c:	e7b1      	b.n	8003ab2 <__sflush_r+0x1a>
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b54:	81a3      	strh	r3, [r4, #12]
 8003b56:	e7ad      	b.n	8003ab4 <__sflush_r+0x1c>
 8003b58:	690f      	ldr	r7, [r1, #16]
 8003b5a:	2f00      	cmp	r7, #0
 8003b5c:	d0a9      	beq.n	8003ab2 <__sflush_r+0x1a>
 8003b5e:	0793      	lsls	r3, r2, #30
 8003b60:	680e      	ldr	r6, [r1, #0]
 8003b62:	bf08      	it	eq
 8003b64:	694b      	ldreq	r3, [r1, #20]
 8003b66:	600f      	str	r7, [r1, #0]
 8003b68:	bf18      	it	ne
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	eba6 0807 	sub.w	r8, r6, r7
 8003b70:	608b      	str	r3, [r1, #8]
 8003b72:	f1b8 0f00 	cmp.w	r8, #0
 8003b76:	dd9c      	ble.n	8003ab2 <__sflush_r+0x1a>
 8003b78:	6a21      	ldr	r1, [r4, #32]
 8003b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b7c:	4643      	mov	r3, r8
 8003b7e:	463a      	mov	r2, r7
 8003b80:	4628      	mov	r0, r5
 8003b82:	47b0      	blx	r6
 8003b84:	2800      	cmp	r0, #0
 8003b86:	dc06      	bgt.n	8003b96 <__sflush_r+0xfe>
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b8e:	81a3      	strh	r3, [r4, #12]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	e78e      	b.n	8003ab4 <__sflush_r+0x1c>
 8003b96:	4407      	add	r7, r0
 8003b98:	eba8 0800 	sub.w	r8, r8, r0
 8003b9c:	e7e9      	b.n	8003b72 <__sflush_r+0xda>
 8003b9e:	bf00      	nop
 8003ba0:	dfbffffe 	.word	0xdfbffffe

08003ba4 <_fflush_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	690b      	ldr	r3, [r1, #16]
 8003ba8:	4605      	mov	r5, r0
 8003baa:	460c      	mov	r4, r1
 8003bac:	b913      	cbnz	r3, 8003bb4 <_fflush_r+0x10>
 8003bae:	2500      	movs	r5, #0
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	b118      	cbz	r0, 8003bbe <_fflush_r+0x1a>
 8003bb6:	6a03      	ldr	r3, [r0, #32]
 8003bb8:	b90b      	cbnz	r3, 8003bbe <_fflush_r+0x1a>
 8003bba:	f7ff fc3f 	bl	800343c <__sinit>
 8003bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f3      	beq.n	8003bae <_fflush_r+0xa>
 8003bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bc8:	07d0      	lsls	r0, r2, #31
 8003bca:	d404      	bmi.n	8003bd6 <_fflush_r+0x32>
 8003bcc:	0599      	lsls	r1, r3, #22
 8003bce:	d402      	bmi.n	8003bd6 <_fflush_r+0x32>
 8003bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bd2:	f7ff fe66 	bl	80038a2 <__retarget_lock_acquire_recursive>
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	4621      	mov	r1, r4
 8003bda:	f7ff ff5d 	bl	8003a98 <__sflush_r>
 8003bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003be0:	07da      	lsls	r2, r3, #31
 8003be2:	4605      	mov	r5, r0
 8003be4:	d4e4      	bmi.n	8003bb0 <_fflush_r+0xc>
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	059b      	lsls	r3, r3, #22
 8003bea:	d4e1      	bmi.n	8003bb0 <_fflush_r+0xc>
 8003bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bee:	f7ff fe59 	bl	80038a4 <__retarget_lock_release_recursive>
 8003bf2:	e7dd      	b.n	8003bb0 <_fflush_r+0xc>

08003bf4 <__swhatbuf_r>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	b096      	sub	sp, #88	; 0x58
 8003c00:	4615      	mov	r5, r2
 8003c02:	461e      	mov	r6, r3
 8003c04:	da0d      	bge.n	8003c22 <__swhatbuf_r+0x2e>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	bf0c      	ite	eq
 8003c12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003c16:	2340      	movne	r3, #64	; 0x40
 8003c18:	2000      	movs	r0, #0
 8003c1a:	6031      	str	r1, [r6, #0]
 8003c1c:	602b      	str	r3, [r5, #0]
 8003c1e:	b016      	add	sp, #88	; 0x58
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
 8003c22:	466a      	mov	r2, sp
 8003c24:	f000 f848 	bl	8003cb8 <_fstat_r>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	dbec      	blt.n	8003c06 <__swhatbuf_r+0x12>
 8003c2c:	9901      	ldr	r1, [sp, #4]
 8003c2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003c32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003c36:	4259      	negs	r1, r3
 8003c38:	4159      	adcs	r1, r3
 8003c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3e:	e7eb      	b.n	8003c18 <__swhatbuf_r+0x24>

08003c40 <__smakebuf_r>:
 8003c40:	898b      	ldrh	r3, [r1, #12]
 8003c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c44:	079d      	lsls	r5, r3, #30
 8003c46:	4606      	mov	r6, r0
 8003c48:	460c      	mov	r4, r1
 8003c4a:	d507      	bpl.n	8003c5c <__smakebuf_r+0x1c>
 8003c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	6123      	str	r3, [r4, #16]
 8003c54:	2301      	movs	r3, #1
 8003c56:	6163      	str	r3, [r4, #20]
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	ab01      	add	r3, sp, #4
 8003c5e:	466a      	mov	r2, sp
 8003c60:	f7ff ffc8 	bl	8003bf4 <__swhatbuf_r>
 8003c64:	9900      	ldr	r1, [sp, #0]
 8003c66:	4605      	mov	r5, r0
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f7ff fe89 	bl	8003980 <_malloc_r>
 8003c6e:	b948      	cbnz	r0, 8003c84 <__smakebuf_r+0x44>
 8003c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c74:	059a      	lsls	r2, r3, #22
 8003c76:	d4ef      	bmi.n	8003c58 <__smakebuf_r+0x18>
 8003c78:	f023 0303 	bic.w	r3, r3, #3
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	e7e3      	b.n	8003c4c <__smakebuf_r+0xc>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	6020      	str	r0, [r4, #0]
 8003c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8c:	81a3      	strh	r3, [r4, #12]
 8003c8e:	9b00      	ldr	r3, [sp, #0]
 8003c90:	6163      	str	r3, [r4, #20]
 8003c92:	9b01      	ldr	r3, [sp, #4]
 8003c94:	6120      	str	r0, [r4, #16]
 8003c96:	b15b      	cbz	r3, 8003cb0 <__smakebuf_r+0x70>
 8003c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	f000 f81d 	bl	8003cdc <_isatty_r>
 8003ca2:	b128      	cbz	r0, 8003cb0 <__smakebuf_r+0x70>
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	81a3      	strh	r3, [r4, #12]
 8003cb0:	89a3      	ldrh	r3, [r4, #12]
 8003cb2:	431d      	orrs	r5, r3
 8003cb4:	81a5      	strh	r5, [r4, #12]
 8003cb6:	e7cf      	b.n	8003c58 <__smakebuf_r+0x18>

08003cb8 <_fstat_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4d07      	ldr	r5, [pc, #28]	; (8003cd8 <_fstat_r+0x20>)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	602b      	str	r3, [r5, #0]
 8003cc6:	f7fc fd1a 	bl	80006fe <_fstat>
 8003cca:	1c43      	adds	r3, r0, #1
 8003ccc:	d102      	bne.n	8003cd4 <_fstat_r+0x1c>
 8003cce:	682b      	ldr	r3, [r5, #0]
 8003cd0:	b103      	cbz	r3, 8003cd4 <_fstat_r+0x1c>
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200015a8 	.word	0x200015a8

08003cdc <_isatty_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4d06      	ldr	r5, [pc, #24]	; (8003cf8 <_isatty_r+0x1c>)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	f7fc fd19 	bl	800071e <_isatty>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_isatty_r+0x1a>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_isatty_r+0x1a>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	200015a8 	.word	0x200015a8

08003cfc <_sbrk_r>:
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	4d06      	ldr	r5, [pc, #24]	; (8003d18 <_sbrk_r+0x1c>)
 8003d00:	2300      	movs	r3, #0
 8003d02:	4604      	mov	r4, r0
 8003d04:	4608      	mov	r0, r1
 8003d06:	602b      	str	r3, [r5, #0]
 8003d08:	f000 f808 	bl	8003d1c <_sbrk>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	d102      	bne.n	8003d16 <_sbrk_r+0x1a>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	b103      	cbz	r3, 8003d16 <_sbrk_r+0x1a>
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	200015a8 	.word	0x200015a8

08003d1c <_sbrk>:
 8003d1c:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <_sbrk+0x14>)
 8003d1e:	6811      	ldr	r1, [r2, #0]
 8003d20:	4603      	mov	r3, r0
 8003d22:	b909      	cbnz	r1, 8003d28 <_sbrk+0xc>
 8003d24:	4903      	ldr	r1, [pc, #12]	; (8003d34 <_sbrk+0x18>)
 8003d26:	6011      	str	r1, [r2, #0]
 8003d28:	6810      	ldr	r0, [r2, #0]
 8003d2a:	4403      	add	r3, r0
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4770      	bx	lr
 8003d30:	200015b8 	.word	0x200015b8
 8003d34:	200015c0 	.word	0x200015c0

08003d38 <_init>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr

08003d44 <_fini>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr
