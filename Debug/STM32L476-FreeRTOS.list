
STM32L476-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008710  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008990  08008990  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08008990  08008990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008998  08008998  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080089a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c78  20000064  08008a04  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cdc  08008a04  00021cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e2f5  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d4b  00000000  00000000  0003e3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  00042118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138b  00000000  00000000  00043a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b361  00000000  00000000  00044dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9cd  00000000  00000000  0007012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107c37  00000000  00000000  0008eaf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c98  00000000  00000000  00196730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0019d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008888 	.word	0x08008888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08008888 	.word	0x08008888

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200015d0 	.word	0x200015d0

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	; (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000080 	.word	0x20000080
 8000590:	20000120 	.word	0x20000120

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fc6b 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f8df 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f989 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f957 	bl	8000858 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80005aa:	f000 f92d 	bl	8000808 <MX_RTC_Init>
//
//  SEGGER_SYSVIEW_Conf();
//  SEGGER_SYSVIEW_Start();


  xStatus = xTaskCreate(menuTask, "MENU", 100, NULL, 2, &xMenuTask);
 80005ae:	4b59      	ldr	r3, [pc, #356]	; (8000714 <main+0x180>)
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2302      	movs	r3, #2
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	4957      	ldr	r1, [pc, #348]	; (8000718 <main+0x184>)
 80005bc:	4857      	ldr	r0, [pc, #348]	; (800071c <main+0x188>)
 80005be:	f004 feaf 	bl	8005320 <xTaskCreate>
 80005c2:	61f8      	str	r0, [r7, #28]
  configASSERT(xStatus == pdPASS);
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d00a      	beq.n	80005e0 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ce:	f383 8811 	msr	BASEPRI, r3
 80005d2:	f3bf 8f6f 	isb	sy
 80005d6:	f3bf 8f4f 	dsb	sy
 80005da:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005dc:	bf00      	nop
 80005de:	e7fe      	b.n	80005de <main+0x4a>

  xStatus = xTaskCreate(cmdTask, "CMD", 100, (void *)&xDataQueue, 2, &xCmdTask);
 80005e0:	4b4f      	ldr	r3, [pc, #316]	; (8000720 <main+0x18c>)
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	2302      	movs	r3, #2
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	4b4e      	ldr	r3, [pc, #312]	; (8000724 <main+0x190>)
 80005ea:	2264      	movs	r2, #100	; 0x64
 80005ec:	494e      	ldr	r1, [pc, #312]	; (8000728 <main+0x194>)
 80005ee:	484f      	ldr	r0, [pc, #316]	; (800072c <main+0x198>)
 80005f0:	f004 fe96 	bl	8005320 <xTaskCreate>
 80005f4:	61f8      	str	r0, [r7, #28]
  configASSERT(xStatus == pdPASS);
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d00a      	beq.n	8000612 <main+0x7e>
        __asm volatile
 80005fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000600:	f383 8811 	msr	BASEPRI, r3
 8000604:	f3bf 8f6f 	isb	sy
 8000608:	f3bf 8f4f 	dsb	sy
 800060c:	617b      	str	r3, [r7, #20]
    }
 800060e:	bf00      	nop
 8000610:	e7fe      	b.n	8000610 <main+0x7c>

  xStatus = xTaskCreate(printTask, "PRINT", 100, NULL, 2, &xPrintTask);
 8000612:	4b47      	ldr	r3, [pc, #284]	; (8000730 <main+0x19c>)
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2302      	movs	r3, #2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2264      	movs	r2, #100	; 0x64
 800061e:	4945      	ldr	r1, [pc, #276]	; (8000734 <main+0x1a0>)
 8000620:	4845      	ldr	r0, [pc, #276]	; (8000738 <main+0x1a4>)
 8000622:	f004 fe7d 	bl	8005320 <xTaskCreate>
 8000626:	61f8      	str	r0, [r7, #28]
  configASSERT(xStatus == pdPASS);
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d00a      	beq.n	8000644 <main+0xb0>
        __asm volatile
 800062e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000632:	f383 8811 	msr	BASEPRI, r3
 8000636:	f3bf 8f6f 	isb	sy
 800063a:	f3bf 8f4f 	dsb	sy
 800063e:	613b      	str	r3, [r7, #16]
    }
 8000640:	bf00      	nop
 8000642:	e7fe      	b.n	8000642 <main+0xae>

  xStatus = xTaskCreate(rtcTask, "RTC", 100, NULL, 2, &xRtcTask);
 8000644:	4b3d      	ldr	r3, [pc, #244]	; (800073c <main+0x1a8>)
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2302      	movs	r3, #2
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2300      	movs	r3, #0
 800064e:	2264      	movs	r2, #100	; 0x64
 8000650:	493b      	ldr	r1, [pc, #236]	; (8000740 <main+0x1ac>)
 8000652:	483c      	ldr	r0, [pc, #240]	; (8000744 <main+0x1b0>)
 8000654:	f004 fe64 	bl	8005320 <xTaskCreate>
 8000658:	61f8      	str	r0, [r7, #28]
  configASSERT(xStatus == pdPASS);
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00a      	beq.n	8000676 <main+0xe2>
        __asm volatile
 8000660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000664:	f383 8811 	msr	BASEPRI, r3
 8000668:	f3bf 8f6f 	isb	sy
 800066c:	f3bf 8f4f 	dsb	sy
 8000670:	60fb      	str	r3, [r7, #12]
    }
 8000672:	bf00      	nop
 8000674:	e7fe      	b.n	8000674 <main+0xe0>

  xStatus = xTaskCreate(ledTask, "LED", 100, NULL, 2, &xLedTask);
 8000676:	4b34      	ldr	r3, [pc, #208]	; (8000748 <main+0x1b4>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	2264      	movs	r2, #100	; 0x64
 8000682:	4932      	ldr	r1, [pc, #200]	; (800074c <main+0x1b8>)
 8000684:	4832      	ldr	r0, [pc, #200]	; (8000750 <main+0x1bc>)
 8000686:	f004 fe4b 	bl	8005320 <xTaskCreate>
 800068a:	61f8      	str	r0, [r7, #28]
  configASSERT(xStatus == pdPASS);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d00a      	beq.n	80006a8 <main+0x114>
        __asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	60bb      	str	r3, [r7, #8]
    }
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <main+0x112>

  xDataQueue = xQueueCreate(16, sizeof(char));
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	2010      	movs	r0, #16
 80006ae:	f004 fb0f 	bl	8004cd0 <xQueueGenericCreate>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <main+0x190>)
 80006b6:	6013      	str	r3, [r2, #0]
  configASSERT(xDataQueue != NULL);
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <main+0x190>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10a      	bne.n	80006d6 <main+0x142>
        __asm volatile
 80006c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c4:	f383 8811 	msr	BASEPRI, r3
 80006c8:	f3bf 8f6f 	isb	sy
 80006cc:	f3bf 8f4f 	dsb	sy
 80006d0:	607b      	str	r3, [r7, #4]
    }
 80006d2:	bf00      	nop
 80006d4:	e7fe      	b.n	80006d4 <main+0x140>

  // String Queue (item size equal to a pointer)
  xPrintQueue = xQueueCreate(16, sizeof(size_t));
 80006d6:	2200      	movs	r2, #0
 80006d8:	2104      	movs	r1, #4
 80006da:	2010      	movs	r0, #16
 80006dc:	f004 faf8 	bl	8004cd0 <xQueueGenericCreate>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <main+0x1c0>)
 80006e4:	6013      	str	r3, [r2, #0]
  configASSERT(xPrintQueue != NULL);
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <main+0x1c0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d10a      	bne.n	8000704 <main+0x170>
        __asm volatile
 80006ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f2:	f383 8811 	msr	BASEPRI, r3
 80006f6:	f3bf 8f6f 	isb	sy
 80006fa:	f3bf 8f4f 	dsb	sy
 80006fe:	603b      	str	r3, [r7, #0]
    }
 8000700:	bf00      	nop
 8000702:	e7fe      	b.n	8000702 <main+0x16e>

  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	4914      	ldr	r1, [pc, #80]	; (8000758 <main+0x1c4>)
 8000708:	4814      	ldr	r0, [pc, #80]	; (800075c <main+0x1c8>)
 800070a:	f002 fead 	bl	8003468 <HAL_UART_Receive_IT>

  // start the freeRTOS scheduler
   vTaskStartScheduler();
 800070e:	f004 ff9d 	bl	800564c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0x17e>
 8000714:	200003cc 	.word	0x200003cc
 8000718:	080088a0 	.word	0x080088a0
 800071c:	08000dbd 	.word	0x08000dbd
 8000720:	200003d0 	.word	0x200003d0
 8000724:	200003e0 	.word	0x200003e0
 8000728:	080088a8 	.word	0x080088a8
 800072c:	08000dc7 	.word	0x08000dc7
 8000730:	200003d4 	.word	0x200003d4
 8000734:	080088ac 	.word	0x080088ac
 8000738:	08000e03 	.word	0x08000e03
 800073c:	200003dc 	.word	0x200003dc
 8000740:	080088b4 	.word	0x080088b4
 8000744:	08000e17 	.word	0x08000e17
 8000748:	200003d8 	.word	0x200003d8
 800074c:	080088b8 	.word	0x080088b8
 8000750:	08000e0d 	.word	0x08000e0d
 8000754:	200003e4 	.word	0x200003e4
 8000758:	200003e8 	.word	0x200003e8
 800075c:	20000344 	.word	0x20000344

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b096      	sub	sp, #88	; 0x58
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2244      	movs	r2, #68	; 0x44
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f007 ffa0 	bl	80086b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000782:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000786:	f000 ff0b 	bl	80015a0 <HAL_PWREx_ControlVoltageScaling>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000790:	f000 f992 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000794:	230a      	movs	r3, #10
 8000796:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079e:	2310      	movs	r3, #16
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007b2:	230a      	movs	r3, #10
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b6:	2307      	movs	r3, #7
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 ff40 	bl	800164c <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80007d2:	f000 f971 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2303      	movs	r3, #3
 80007dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	2104      	movs	r1, #4
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fb08 	bl	8001e04 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007fa:	f000 f95d 	bl	8000ab8 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3758      	adds	r7, #88	; 0x58
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_RTC_Init+0x48>)
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <MX_RTC_Init+0x4c>)
 8000810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_RTC_Init+0x48>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_RTC_Init+0x48>)
 800081a:	227f      	movs	r2, #127	; 0x7f
 800081c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_RTC_Init+0x48>)
 8000820:	22ff      	movs	r2, #255	; 0xff
 8000822:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_RTC_Init+0x48>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_RTC_Init+0x48>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_RTC_Init+0x48>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_RTC_Init+0x48>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_RTC_Init+0x48>)
 800083e:	f002 f9f3 	bl	8002c28 <HAL_RTC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000848:	f000 f936 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000320 	.word	0x20000320
 8000854:	40002800 	.word	0x40002800

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART2_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800089c:	f002 fd96 	bl	80033cc <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f907 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000344 	.word	0x20000344
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <MX_GPIO_Init+0x140>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a49      	ldr	r2, [pc, #292]	; (80009f8 <MX_GPIO_Init+0x140>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <MX_GPIO_Init+0x140>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <MX_GPIO_Init+0x140>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a43      	ldr	r2, [pc, #268]	; (80009f8 <MX_GPIO_Init+0x140>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <MX_GPIO_Init+0x140>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <MX_GPIO_Init+0x140>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a3d      	ldr	r2, [pc, #244]	; (80009f8 <MX_GPIO_Init+0x140>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b3b      	ldr	r3, [pc, #236]	; (80009f8 <MX_GPIO_Init+0x140>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <MX_GPIO_Init+0x140>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a37      	ldr	r2, [pc, #220]	; (80009f8 <MX_GPIO_Init+0x140>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <MX_GPIO_Init+0x140>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2103      	movs	r1, #3
 8000932:	4832      	ldr	r0, [pc, #200]	; (80009fc <MX_GPIO_Init+0x144>)
 8000934:	f000 fdea 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2120      	movs	r1, #32
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f000 fde4 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2101      	movs	r1, #1
 8000948:	482d      	ldr	r0, [pc, #180]	; (8000a00 <MX_GPIO_Init+0x148>)
 800094a:	f000 fddf 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000954:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4825      	ldr	r0, [pc, #148]	; (80009fc <MX_GPIO_Init+0x144>)
 8000966:	f000 fc27 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800096a:	2303      	movs	r3, #3
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	481e      	ldr	r0, [pc, #120]	; (80009fc <MX_GPIO_Init+0x144>)
 8000982:	f000 fc19 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000986:	2320      	movs	r3, #32
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f000 fc0a 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a4:	2301      	movs	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <MX_GPIO_Init+0x148>)
 80009bc:	f000 fbfc 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f000 fbed 	bl	80011b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2106      	movs	r1, #6
 80009e2:	2028      	movs	r0, #40	; 0x28
 80009e4:	f000 fb3e 	bl	8001064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e8:	2028      	movs	r0, #40	; 0x28
 80009ea:	f000 fb57 	bl	800109c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000800 	.word	0x48000800
 8000a00:	48000400 	.word	0x48000400

08000a04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	6078      	str	r0, [r7, #4]
            the HAL_UART_RxCpltCallback can be implemented in the user file.
  */

  uint8_t dummy;

  if(xQueueIsQueueFullFromISR(xDataQueue) == pdFALSE)
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <HAL_UART_RxCpltCallback+0x80>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f004 fbfd 	bl	8005210 <xQueueIsQueueFullFromISR>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d107      	bne.n	8000a2c <HAL_UART_RxCpltCallback+0x28>
  {
	  // enqueue data
	  xQueueSendFromISR(xDataQueue, (void *)&rxData, NULL);
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_UART_RxCpltCallback+0x80>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	2300      	movs	r3, #0
 8000a22:	2200      	movs	r2, #0
 8000a24:	4918      	ldr	r1, [pc, #96]	; (8000a88 <HAL_UART_RxCpltCallback+0x84>)
 8000a26:	f004 f9ca 	bl	8004dbe <xQueueGenericSendFromISR>
 8000a2a:	e012      	b.n	8000a52 <HAL_UART_RxCpltCallback+0x4e>
  }
  else
  {
	  if(rxData == 0x0D) // \r in ASCII table - end of data
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_UART_RxCpltCallback+0x84>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b0d      	cmp	r3, #13
 8000a32:	d10e      	bne.n	8000a52 <HAL_UART_RxCpltCallback+0x4e>
	  {
		  // force the last byte as Line Feed
		  xQueueReceiveFromISR(xDataQueue, (void *)&dummy, NULL);
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <HAL_UART_RxCpltCallback+0x80>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f107 010f 	add.w	r1, r7, #15
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fa83 	bl	8004f4a <xQueueReceiveFromISR>
		  xQueueSendFromISR(xDataQueue, (void *)&rxData, NULL);
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_UART_RxCpltCallback+0x80>)
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	490e      	ldr	r1, [pc, #56]	; (8000a88 <HAL_UART_RxCpltCallback+0x84>)
 8000a4e:	f004 f9b6 	bl	8004dbe <xQueueGenericSendFromISR>
	  }
  }

  if(rxData == 0x0D) // \r in ASCII table - end of data
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_UART_RxCpltCallback+0x84>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b0d      	cmp	r3, #13
 8000a58:	d10a      	bne.n	8000a70 <HAL_UART_RxCpltCallback+0x6c>
  {
	  // send notification to cmdTask
	  xTaskNotifyFromISR(xCmdTask, 0, eNoAction, NULL);
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_UART_RxCpltCallback+0x88>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	2300      	movs	r3, #0
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f005 fbd2 	bl	8006214 <xTaskGenericNotifyFromISR>
  }

  // enable UART data byte reception again in IT mode
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	4905      	ldr	r1, [pc, #20]	; (8000a88 <HAL_UART_RxCpltCallback+0x84>)
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <HAL_UART_RxCpltCallback+0x8c>)
 8000a76:	f002 fcf7 	bl	8003468 <HAL_UART_Receive_IT>

}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200003e0 	.word	0x200003e0
 8000a88:	200003e8 	.word	0x200003e8
 8000a8c:	200003d0 	.word	0x200003d0
 8000a90:	20000344 	.word	0x20000344

08000a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa6:	f000 fa05 	bl	8000eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40001000 	.word	0x40001000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x44>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6593      	str	r3, [r2, #88]	; 0x58
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x44>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  // This initializes a variable which is related to priority grouping
  // This initialization is actually done by the scheduler, but the problem
  // is that the priority grouping initialization is required for the SEGGER
  // start function.
  vInitPrioGroupValue();
 8000afa:	f005 fea5 	bl	8006848 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0a4      	sub	sp, #144	; 0x90
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	2288      	movs	r2, #136	; 0x88
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f007 fdc9 	bl	80086b4 <memset>
  if(hrtc->Instance==RTC)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_RTC_MspInit+0x5c>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d118      	bne.n	8000b5e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fbb6 	bl	80022b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b4a:	f7ff ffb5 	bl	8000ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <HAL_RTC_MspInit+0x60>)
 8000b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <HAL_RTC_MspInit+0x60>)
 8000b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3790      	adds	r7, #144	; 0x90
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40002800 	.word	0x40002800
 8000b6c:	40021000 	.word	0x40021000

08000b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0ac      	sub	sp, #176	; 0xb0
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2288      	movs	r2, #136	; 0x88
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f007 fd8f 	bl	80086b4 <memset>
  if(huart->Instance==USART2)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a25      	ldr	r2, [pc, #148]	; (8000c30 <HAL_UART_MspInit+0xc0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d143      	bne.n	8000c28 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fb7f 	bl	80022b0 <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb8:	f7ff ff7e 	bl	8000ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <HAL_UART_MspInit+0xc4>)
 8000bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <HAL_UART_MspInit+0xc4>)
 8000bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_UART_MspInit+0xc4>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0xc4>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0xc4>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_UART_MspInit+0xc4>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bec:	230c      	movs	r3, #12
 8000bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c04:	2307      	movs	r3, #7
 8000c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f000 fad0 	bl	80011b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2106      	movs	r1, #6
 8000c1c:	2026      	movs	r0, #38	; 0x26
 8000c1e:	f000 fa21 	bl	8001064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c22:	2026      	movs	r0, #38	; 0x26
 8000c24:	f000 fa3a 	bl	800109c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	37b0      	adds	r7, #176	; 0xb0
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	; 0x38
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <HAL_InitTick+0xe0>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a33      	ldr	r2, [pc, #204]	; (8000d18 <HAL_InitTick+0xe0>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <HAL_InitTick+0xe0>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c5e:	f107 0210 	add.w	r2, r7, #16
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fa8f 	bl	800218c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d103      	bne.n	8000c80 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c78:	f001 fa5c 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8000c7c:	6378      	str	r0, [r7, #52]	; 0x34
 8000c7e:	e004      	b.n	8000c8a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c80:	f001 fa58 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8000c84:	4603      	mov	r3, r0
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8c:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <HAL_InitTick+0xe4>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9b      	lsrs	r3, r3, #18
 8000c94:	3b01      	subs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <HAL_InitTick+0xe8>)
 8000c9a:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <HAL_InitTick+0xec>)
 8000c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_InitTick+0xe8>)
 8000ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_InitTick+0xe8>)
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <HAL_InitTick+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_InitTick+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_InitTick+0xe8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <HAL_InitTick+0xe8>)
 8000cc0:	f002 f8d0 	bl	8002e64 <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d11b      	bne.n	8000d0a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cd2:	4813      	ldr	r0, [pc, #76]	; (8000d20 <HAL_InitTick+0xe8>)
 8000cd4:	f002 f928 	bl	8002f28 <HAL_TIM_Base_Start_IT>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d111      	bne.n	8000d0a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce6:	2036      	movs	r0, #54	; 0x36
 8000ce8:	f000 f9d8 	bl	800109c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b0f      	cmp	r3, #15
 8000cf0:	d808      	bhi.n	8000d04 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	2036      	movs	r0, #54	; 0x36
 8000cf8:	f000 f9b4 	bl	8001064 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_InitTick+0xf0>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e002      	b.n	8000d0a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3738      	adds	r7, #56	; 0x38
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	431bde83 	.word	0x431bde83
 8000d20:	200003ec 	.word	0x200003ec
 8000d24:	40001000 	.word	0x40001000
 8000d28:	20000004 	.word	0x20000004

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <USART2_IRQHandler+0x10>)
 8000d5e:	f002 fbcf 	bl	8003500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000344 	.word	0x20000344

08000d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d74:	f000 fbe2 	bl	800153c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d7c:	f000 fbde 	bl	800153c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM6_DAC_IRQHandler+0x10>)
 8000d8a:	f002 f93d 	bl	8003008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200003ec 	.word	0x200003ec

08000d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <menuTask>:

#include "main.h"


void menuTask (void* pvParameters)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	while(1)
 8000dc4:	e7fe      	b.n	8000dc4 <menuTask+0x8>

08000dc6 <cmdTask>:

	}
}

void cmdTask (void* pvParameters)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af02      	add	r7, sp, #8
 8000dcc:	6078      	str	r0, [r7, #4]
	BaseType_t ret;

	while(1)
	{
		// wait until receive some notification -> portMAX_DELAY
		ret = xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f005 f992 	bl	8006104 <xTaskGenericNotifyWait>
 8000de0:	60f8      	str	r0, [r7, #12]

		// the notification is received
		if(ret == pdTRUE)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d1f2      	bne.n	8000dce <cmdTask+0x8>
		{
			ret = uxQueueMessagesWaiting( (*(QueueHandle_t*)(pvParameters)) );
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 f961 	bl	80050b4 <uxQueueMessagesWaiting>
 8000df2:	4603      	mov	r3, r0
 8000df4:	60fb      	str	r3, [r7, #12]

			if(ret != 0)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0e8      	beq.n	8000dce <cmdTask+0x8>
			{
				ret = 13;
 8000dfc:	230d      	movs	r3, #13
 8000dfe:	60fb      	str	r3, [r7, #12]
		ret = xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 8000e00:	e7e5      	b.n	8000dce <cmdTask+0x8>

08000e02 <printTask>:
		}
	}
}

void printTask (void* pvParameters)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	while(1)
 8000e0a:	e7fe      	b.n	8000e0a <printTask+0x8>

08000e0c <ledTask>:

	}
}

void ledTask (void* pvParameters)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	while(1)
 8000e14:	e7fe      	b.n	8000e14 <ledTask+0x8>

08000e16 <rtcTask>:

	}
}

void rtcTask (void* pvParameters)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	while(1)
 8000e1e:	e7fe      	b.n	8000e1e <rtcTask+0x8>

08000e20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e24:	f7ff ffb8 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <LoopForever+0xe>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <LoopForever+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f007 fc8f 	bl	8008770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e52:	f7ff fb9f 	bl	8000594 <main>

08000e56 <LoopForever>:

LoopForever:
    b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e64:	080089a0 	.word	0x080089a0
  ldr r2, =_sbss
 8000e68:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e6c:	20001cdc 	.word	0x20001cdc

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_Init+0x3c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_Init+0x3c>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f000 f8df 	bl	800104e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e90:	200f      	movs	r0, #15
 8000e92:	f7ff fed1 	bl	8000c38 <HAL_InitTick>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	e001      	b.n	8000ea6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea2:	f7ff fe0f 	bl	8000ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000438 	.word	0x20000438

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000438 	.word	0x20000438

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff4c 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001076:	f7ff ff61 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 800107a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	6978      	ldr	r0, [r7, #20]
 8001082:	f7ff ffb1 	bl	8000fe8 <NVIC_EncodePriority>
 8001086:	4602      	mov	r2, r0
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff80 	bl	8000f94 <__NVIC_SetPriority>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff54 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d008      	beq.n	80010e2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2204      	movs	r2, #4
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e022      	b.n	8001128 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 020e 	bic.w	r2, r2, #14
 80010f0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0201 	bic.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f003 021c 	and.w	r2, r3, #28
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d005      	beq.n	8001158 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e029      	b.n	80011ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 020e 	bic.w	r2, r2, #14
 8001166:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f003 021c 	and.w	r2, r3, #28
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
    }
  }
  return status;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	e17f      	b.n	80014c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 8171 	beq.w	80014c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d005      	beq.n	80011f8 <HAL_GPIO_Init+0x40>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d130      	bne.n	800125a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800122e:	2201      	movs	r2, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	f003 0201 	and.w	r2, r3, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b03      	cmp	r3, #3
 8001264:	d118      	bne.n	8001298 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	08db      	lsrs	r3, r3, #3
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d017      	beq.n	80012d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	6939      	ldr	r1, [r7, #16]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80ac 	beq.w	80014c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	4b5f      	ldr	r3, [pc, #380]	; (80014e8 <HAL_GPIO_Init+0x330>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	4a5e      	ldr	r2, [pc, #376]	; (80014e8 <HAL_GPIO_Init+0x330>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6613      	str	r3, [r2, #96]	; 0x60
 8001376:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <HAL_GPIO_Init+0x330>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001382:	4a5a      	ldr	r2, [pc, #360]	; (80014ec <HAL_GPIO_Init+0x334>)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ac:	d025      	beq.n	80013fa <HAL_GPIO_Init+0x242>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x338>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01f      	beq.n	80013f6 <HAL_GPIO_Init+0x23e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <HAL_GPIO_Init+0x33c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d019      	beq.n	80013f2 <HAL_GPIO_Init+0x23a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x340>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x236>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x344>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x232>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_GPIO_Init+0x348>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x22e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4a      	ldr	r2, [pc, #296]	; (8001504 <HAL_GPIO_Init+0x34c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x22a>
 80013de:	2306      	movs	r3, #6
 80013e0:	e00c      	b.n	80013fc <HAL_GPIO_Init+0x244>
 80013e2:	2307      	movs	r3, #7
 80013e4:	e00a      	b.n	80013fc <HAL_GPIO_Init+0x244>
 80013e6:	2305      	movs	r3, #5
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x244>
 80013ea:	2304      	movs	r3, #4
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x244>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x244>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x244>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x244>
 80013fa:	2300      	movs	r3, #0
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140c:	4937      	ldr	r1, [pc, #220]	; (80014ec <HAL_GPIO_Init+0x334>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_GPIO_Init+0x350>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800143e:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_GPIO_Init+0x350>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_GPIO_Init+0x350>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001468:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_GPIO_Init+0x350>)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_GPIO_Init+0x350>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001492:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <HAL_GPIO_Init+0x350>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_GPIO_Init+0x350>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014bc:	4a12      	ldr	r2, [pc, #72]	; (8001508 <HAL_GPIO_Init+0x350>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa22 f303 	lsr.w	r3, r2, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f47f ae78 	bne.w	80011c8 <HAL_GPIO_Init+0x10>
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	48000400 	.word	0x48000400
 80014f4:	48000800 	.word	0x48000800
 80014f8:	48000c00 	.word	0x48000c00
 80014fc:	48001000 	.word	0x48001000
 8001500:	48001400 	.word	0x48001400
 8001504:	48001800 	.word	0x48001800
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001528:	e002      	b.n	8001530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	4013      	ands	r3, r2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f806 	bl	800156c <HAL_GPIO_EXTI_Callback>
  }
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_PWREx_GetVoltageRange+0x18>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40007000 	.word	0x40007000

080015a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ae:	d130      	bne.n	8001612 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015bc:	d038      	beq.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2232      	movs	r2, #50	; 0x32
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0c9b      	lsrs	r3, r3, #18
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e4:	e002      	b.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f8:	d102      	bne.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f2      	bne.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160c:	d110      	bne.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e00f      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161e:	d007      	beq.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001628:	4a05      	ldr	r2, [pc, #20]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40007000 	.word	0x40007000
 8001644:	20000000 	.word	0x20000000
 8001648:	431bde83 	.word	0x431bde83

0800164c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e3ca      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	4b97      	ldr	r3, [pc, #604]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001668:	4b94      	ldr	r3, [pc, #592]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80e4 	beq.w	8001848 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_RCC_OscConfig+0x4a>
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	f040 808b 	bne.w	80017a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b01      	cmp	r3, #1
 8001692:	f040 8087 	bne.w	80017a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001696:	4b89      	ldr	r3, [pc, #548]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x62>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e3a2      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1a      	ldr	r2, [r3, #32]
 80016b2:	4b82      	ldr	r3, [pc, #520]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_RCC_OscConfig+0x7c>
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c6:	e005      	b.n	80016d4 <HAL_RCC_OscConfig+0x88>
 80016c8:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d223      	bcs.n	8001720 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fd87 	bl	80021f0 <RCC_SetFlashLatencyFromMSIRange>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e383      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ec:	4b73      	ldr	r3, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a72      	ldr	r2, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	496d      	ldr	r1, [pc, #436]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170a:	4b6c      	ldr	r3, [pc, #432]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	4968      	ldr	r1, [pc, #416]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
 800171e:	e025      	b.n	800176c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001720:	4b66      	ldr	r3, [pc, #408]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a65      	ldr	r2, [pc, #404]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b63      	ldr	r3, [pc, #396]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4960      	ldr	r1, [pc, #384]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	495b      	ldr	r1, [pc, #364]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fd47 	bl	80021f0 <RCC_SetFlashLatencyFromMSIRange>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e343      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800176c:	f000 fc4a 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b52      	ldr	r3, [pc, #328]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	4950      	ldr	r1, [pc, #320]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	4a4e      	ldr	r2, [pc, #312]	; (80018c4 <HAL_RCC_OscConfig+0x278>)
 800178a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800178c:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <HAL_RCC_OscConfig+0x27c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fa51 	bl	8000c38 <HAL_InitTick>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d052      	beq.n	8001846 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	e327      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d032      	beq.n	8001812 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a42      	ldr	r2, [pc, #264]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fb90 	bl	8000edc <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c0:	f7ff fb8c 	bl	8000edc <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e310      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d2:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017de:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a36      	ldr	r2, [pc, #216]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4931      	ldr	r1, [pc, #196]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	492c      	ldr	r1, [pc, #176]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e01a      	b.n	8001848 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800181e:	f7ff fb5d 	bl	8000edc <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001826:	f7ff fb59 	bl	8000edc <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e2dd      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x1da>
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001846:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d074      	beq.n	800193e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b08      	cmp	r3, #8
 8001858:	d005      	beq.n	8001866 <HAL_RCC_OscConfig+0x21a>
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d10e      	bne.n	800187e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d10b      	bne.n	800187e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d064      	beq.n	800193c <HAL_RCC_OscConfig+0x2f0>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d160      	bne.n	800193c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e2ba      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x24a>
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e026      	b.n	80018e4 <HAL_RCC_OscConfig+0x298>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189e:	d115      	bne.n	80018cc <HAL_RCC_OscConfig+0x280>
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a05      	ldr	r2, [pc, #20]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80018a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a02      	ldr	r2, [pc, #8]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x298>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08008928 	.word	0x08008928
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004
 80018cc:	4ba0      	ldr	r3, [pc, #640]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a9f      	ldr	r2, [pc, #636]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b9d      	ldr	r3, [pc, #628]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a9c      	ldr	r2, [pc, #624]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff faf6 	bl	8000edc <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff faf2 	bl	8000edc <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e276      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2a8>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff fae2 	bl	8000edc <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff fade 	bl	8000edc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e262      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x2d0>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d060      	beq.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x310>
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d119      	bne.n	800198a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d116      	bne.n	800198a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800195c:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_OscConfig+0x328>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e23f      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	4973      	ldr	r1, [pc, #460]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001988:	e040      	b.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d023      	beq.n	80019da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001992:	4b6f      	ldr	r3, [pc, #444]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6e      	ldr	r2, [pc, #440]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff fa9d 	bl	8000edc <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fa99 	bl	8000edc <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e21d      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	495f      	ldr	r1, [pc, #380]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e018      	b.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a5c      	ldr	r2, [pc, #368]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 80019e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fa79 	bl	8000edc <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff fa75 	bl	8000edc <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1f9      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d03c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a20:	4b4b      	ldr	r3, [pc, #300]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fa54 	bl	8000edc <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff fa50 	bl	8000edc <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1d4      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ef      	beq.n	8001a38 <HAL_RCC_OscConfig+0x3ec>
 8001a58:	e01b      	b.n	8001a92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a60:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fa37 	bl	8000edc <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff fa33 	bl	8000edc <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1b7      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ef      	bne.n	8001a72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80a6 	beq.w	8001bec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10d      	bne.n	8001acc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aba:	6593      	str	r3, [r2, #88]	; 0x58
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_RCC_OscConfig+0x508>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d118      	bne.n	8001b0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_OscConfig+0x508>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_RCC_OscConfig+0x508>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f9fa 	bl	8000edc <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aec:	f7ff f9f6 	bl	8000edc <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e17a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_RCC_OscConfig+0x508>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d108      	bne.n	8001b24 <HAL_RCC_OscConfig+0x4d8>
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b22:	e029      	b.n	8001b78 <HAL_RCC_OscConfig+0x52c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d115      	bne.n	8001b58 <HAL_RCC_OscConfig+0x50c>
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_OscConfig+0x504>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b4c:	e014      	b.n	8001b78 <HAL_RCC_OscConfig+0x52c>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40007000 	.word	0x40007000
 8001b58:	4b9c      	ldr	r3, [pc, #624]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	4a9b      	ldr	r2, [pc, #620]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b68:	4b98      	ldr	r3, [pc, #608]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a97      	ldr	r2, [pc, #604]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d016      	beq.n	8001bae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f9ac 	bl	8000edc <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7ff f9a8 	bl	8000edc <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e12a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ed      	beq.n	8001b88 <HAL_RCC_OscConfig+0x53c>
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff f995 	bl	8000edc <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff f991 	bl	8000edc <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e113      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bcc:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1ed      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	4b7a      	ldr	r3, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	4a79      	ldr	r2, [pc, #484]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80fe 	beq.w	8001df2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	f040 80d0 	bne.w	8001da0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c00:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d130      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d127      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d11f      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c40:	2a07      	cmp	r2, #7
 8001c42:	bf14      	ite	ne
 8001c44:	2201      	movne	r2, #1
 8001c46:	2200      	moveq	r2, #0
 8001c48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d113      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d109      	bne.n	8001c76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d06e      	beq.n	8001d54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d069      	beq.n	8001d50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c88:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0ad      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c98:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a4b      	ldr	r2, [pc, #300]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ca4:	f7ff f91a 	bl	8000edc <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff f916 	bl	8000edc <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e09a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cca:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <HAL_RCC_OscConfig+0x784>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cda:	3a01      	subs	r2, #1
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ce4:	0212      	lsls	r2, r2, #8
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cec:	0852      	lsrs	r2, r2, #1
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	0552      	lsls	r2, r2, #21
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cf8:	0852      	lsrs	r2, r2, #1
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	0652      	lsls	r2, r2, #25
 8001cfe:	4311      	orrs	r1, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d04:	0912      	lsrs	r2, r2, #4
 8001d06:	0452      	lsls	r2, r2, #17
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	4930      	ldr	r1, [pc, #192]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a2a      	ldr	r2, [pc, #168]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d28:	f7ff f8d8 	bl	8000edc <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f8d4 	bl	8000edc <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e058      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d4e:	e050      	b.n	8001df2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e04f      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d148      	bne.n	8001df2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d78:	f7ff f8b0 	bl	8000edc <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff f8ac 	bl	8000edc <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e030      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x734>
 8001d9e:	e028      	b.n	8001df2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d023      	beq.n	8001dee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_RCC_OscConfig+0x780>)
 8001dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff f893 	bl	8000edc <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff f88f 	bl	8000edc <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d905      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e013      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_OscConfig+0x7b0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ec      	bne.n	8001dba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_OscConfig+0x7b0>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	4905      	ldr	r1, [pc, #20]	; (8001dfc <HAL_RCC_OscConfig+0x7b0>)
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x7b4>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
 8001dec:	e001      	b.n	8001df2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	feeefffc 	.word	0xfeeefffc

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0e7      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b75      	ldr	r3, [pc, #468]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d910      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b72      	ldr	r3, [pc, #456]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4970      	ldr	r1, [pc, #448]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b6e      	ldr	r3, [pc, #440]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0cf      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d010      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4b66      	ldr	r3, [pc, #408]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d908      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b63      	ldr	r3, [pc, #396]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4960      	ldr	r1, [pc, #384]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d04c      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d121      	bne.n	8001eda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0a6      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea2:	4b54      	ldr	r3, [pc, #336]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d115      	bne.n	8001eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e09a      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eba:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e08e      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e086      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f023 0203 	bic.w	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4943      	ldr	r1, [pc, #268]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eec:	f7fe fff6 	bl	8000edc <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f7fe fff2 	bl	8000edc <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e06e      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 020c 	and.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1eb      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d010      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d208      	bcs.n	8001f4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	492b      	ldr	r1, [pc, #172]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d210      	bcs.n	8001f7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 0207 	bic.w	r2, r3, #7
 8001f60:	4923      	ldr	r1, [pc, #140]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e036      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	4918      	ldr	r1, [pc, #96]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4910      	ldr	r1, [pc, #64]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fb8:	f000 f824 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	490b      	ldr	r1, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001fd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x1fc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fe2b 	bl	8000c38 <HAL_InitTick>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08008928 	.word	0x08008928
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002012:	4b3e      	ldr	r3, [pc, #248]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800201c:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x34>
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d121      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d11e      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002038:	4b34      	ldr	r3, [pc, #208]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e005      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002060:	4a2b      	ldr	r2, [pc, #172]	; (8002110 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10d      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002074:	e00a      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b04      	cmp	r3, #4
 800207a:	d102      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCC_GetSysClockFreq+0x110>)
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	e004      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d101      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_GetSysClockFreq+0x114>)
 800208a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d134      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0xa6>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d003      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0xac>
 80020a8:	e005      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ac:	617b      	str	r3, [r7, #20]
      break;
 80020ae:	e005      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <HAL_RCC_GetSysClockFreq+0x114>)
 80020b2:	617b      	str	r3, [r7, #20]
      break;
 80020b4:	e002      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	617b      	str	r3, [r7, #20]
      break;
 80020ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	3301      	adds	r3, #1
 80020c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	fb03 f202 	mul.w	r2, r3, r2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_RCC_GetSysClockFreq+0x108>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	0e5b      	lsrs	r3, r3, #25
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	3301      	adds	r3, #1
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020fc:	69bb      	ldr	r3, [r7, #24]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	; 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	08008940 	.word	0x08008940
 8002114:	00f42400 	.word	0x00f42400
 8002118:	007a1200 	.word	0x007a1200

0800211c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_RCC_GetHCLKFreq+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002138:	f7ff fff0 	bl	800211c <HAL_RCC_GetHCLKFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4904      	ldr	r1, [pc, #16]	; (800215c <HAL_RCC_GetPCLK1Freq+0x28>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	08008938 	.word	0x08008938

08002160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002164:	f7ff ffda 	bl	800211c <HAL_RCC_GetHCLKFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	0adb      	lsrs	r3, r3, #11
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	4904      	ldr	r1, [pc, #16]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	08008938 	.word	0x08008938

0800218c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	220f      	movs	r2, #15
 800219a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_RCC_GetClockConfig+0x60>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0207 	and.w	r2, r3, #7
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40022000 	.word	0x40022000

080021f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002208:	f7ff f9bc 	bl	8001584 <HAL_PWREx_GetVoltageRange>
 800220c:	6178      	str	r0, [r7, #20]
 800220e:	e014      	b.n	800223a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002228:	f7ff f9ac 	bl	8001584 <HAL_PWREx_GetVoltageRange>
 800222c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	d10b      	bne.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d919      	bls.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2ba0      	cmp	r3, #160	; 0xa0
 800224c:	d902      	bls.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800224e:	2302      	movs	r3, #2
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e013      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e010      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d902      	bls.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002260:	2303      	movs	r3, #3
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e00a      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d102      	bne.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800226c:	2302      	movs	r3, #2
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e004      	b.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b70      	cmp	r3, #112	; 0x70
 8002276:	d101      	bne.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 0207 	bic.w	r2, r3, #7
 8002284:	4909      	ldr	r1, [pc, #36]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40022000 	.word	0x40022000

080022b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b8:	2300      	movs	r3, #0
 80022ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022bc:	2300      	movs	r3, #0
 80022be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d041      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d4:	d02a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022da:	d824      	bhi.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e0:	d008      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e6:	d81e      	bhi.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f0:	d010      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022f2:	e018      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022f4:	4b86      	ldr	r3, [pc, #536]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a85      	ldr	r2, [pc, #532]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002300:	e015      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fabb 	bl	8002884 <RCCEx_PLLSAI1_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002312:	e00c      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3320      	adds	r3, #32
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fba6 	bl	8002a6c <RCCEx_PLLSAI2_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002324:	e003      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	74fb      	strb	r3, [r7, #19]
      break;
 800232a:	e000      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800232c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800232e:	7cfb      	ldrb	r3, [r7, #19]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002334:	4b76      	ldr	r3, [pc, #472]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002342:	4973      	ldr	r1, [pc, #460]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800234a:	e001      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d041      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002360:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002364:	d02a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002366:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800236a:	d824      	bhi.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800236c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002370:	d008      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002376:	d81e      	bhi.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002380:	d010      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002382:	e018      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002384:	4b62      	ldr	r3, [pc, #392]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a61      	ldr	r2, [pc, #388]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002390:	e015      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fa73 	bl	8002884 <RCCEx_PLLSAI1_Config>
 800239e:	4603      	mov	r3, r0
 80023a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023a2:	e00c      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3320      	adds	r3, #32
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fb5e 	bl	8002a6c <RCCEx_PLLSAI2_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b4:	e003      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	74fb      	strb	r3, [r7, #19]
      break;
 80023ba:	e000      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10b      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023c4:	4b52      	ldr	r3, [pc, #328]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023d2:	494f      	ldr	r1, [pc, #316]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023da:	e001      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a0 	beq.w	800252e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00d      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002408:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	4a40      	ldr	r2, [pc, #256]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002412:	6593      	str	r3, [r2, #88]	; 0x58
 8002414:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002420:	2301      	movs	r3, #1
 8002422:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002424:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800242a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002430:	f7fe fd54 	bl	8000edc <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002436:	e009      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002438:	f7fe fd50 	bl	8000edc <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d902      	bls.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	74fb      	strb	r3, [r7, #19]
        break;
 800244a:	e005      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800244c:	4b31      	ldr	r3, [pc, #196]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ef      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d15c      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002468:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01f      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	d019      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	4a20      	ldr	r2, [pc, #128]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a8:	4a19      	ldr	r2, [pc, #100]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fd0f 	bl	8000edc <HAL_GetTick>
 80024be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c0:	e00b      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe fd0b 	bl	8000edc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d902      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	74fb      	strb	r3, [r7, #19]
            break;
 80024d8:	e006      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ec      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fe:	4904      	ldr	r1, [pc, #16]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002506:	e009      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	74bb      	strb	r3, [r7, #18]
 800250c:	e006      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800251c:	7c7b      	ldrb	r3, [r7, #17]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002522:	4b9e      	ldr	r3, [pc, #632]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	4a9d      	ldr	r2, [pc, #628]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253a:	4b98      	ldr	r3, [pc, #608]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f023 0203 	bic.w	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	4994      	ldr	r1, [pc, #592]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800255c:	4b8f      	ldr	r3, [pc, #572]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 020c 	bic.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	498c      	ldr	r1, [pc, #560]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800257e:	4b87      	ldr	r3, [pc, #540]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4983      	ldr	r1, [pc, #524]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a0:	4b7e      	ldr	r3, [pc, #504]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	497b      	ldr	r1, [pc, #492]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025c2:	4b76      	ldr	r3, [pc, #472]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d0:	4972      	ldr	r1, [pc, #456]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025e4:	4b6d      	ldr	r3, [pc, #436]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	496a      	ldr	r1, [pc, #424]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002606:	4b65      	ldr	r3, [pc, #404]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	4961      	ldr	r1, [pc, #388]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002628:	4b5c      	ldr	r3, [pc, #368]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	4959      	ldr	r1, [pc, #356]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	4950      	ldr	r1, [pc, #320]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800266c:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	4948      	ldr	r1, [pc, #288]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800268e:	4b43      	ldr	r3, [pc, #268]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269c:	493f      	ldr	r1, [pc, #252]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d028      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026be:	4937      	ldr	r1, [pc, #220]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ce:	d106      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a31      	ldr	r2, [pc, #196]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026da:	60d3      	str	r3, [r2, #12]
 80026dc:	e011      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e6:	d10c      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	2101      	movs	r1, #1
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f8c8 	bl	8002884 <RCCEx_PLLSAI1_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d028      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	491f      	ldr	r1, [pc, #124]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272c:	d106      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a1a      	ldr	r2, [pc, #104]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002738:	60d3      	str	r3, [r2, #12]
 800273a:	e011      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002744:	d10c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f899 	bl	8002884 <RCCEx_PLLSAI1_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02b      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277a:	4908      	ldr	r1, [pc, #32]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800278a:	d109      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a02      	ldr	r2, [pc, #8]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002796:	60d3      	str	r3, [r2, #12]
 8002798:	e014      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f867 	bl	8002884 <RCCEx_PLLSAI1_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02f      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027de:	4928      	ldr	r1, [pc, #160]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ee:	d10d      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	2102      	movs	r1, #2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f844 	bl	8002884 <RCCEx_PLLSAI1_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d014      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	74bb      	strb	r3, [r7, #18]
 800280a:	e011      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3320      	adds	r3, #32
 800281a:	2102      	movs	r1, #2
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f925 	bl	8002a6c <RCCEx_PLLSAI2_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286e:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002876:	7cbb      	ldrb	r3, [r7, #18]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000

08002884 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002892:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d018      	beq.n	80028d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800289e:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0203 	and.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d10d      	bne.n	80028ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
       ||
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028b6:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
       ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d047      	beq.n	800295a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	e044      	b.n	800295a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d018      	beq.n	800290a <RCCEx_PLLSAI1_Config+0x86>
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d825      	bhi.n	8002928 <RCCEx_PLLSAI1_Config+0xa4>
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d002      	beq.n	80028e6 <RCCEx_PLLSAI1_Config+0x62>
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d009      	beq.n	80028f8 <RCCEx_PLLSAI1_Config+0x74>
 80028e4:	e020      	b.n	8002928 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028e6:	4b60      	ldr	r3, [pc, #384]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11d      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f6:	e01a      	b.n	800292e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f8:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d116      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002908:	e013      	b.n	8002932 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800290a:	4b57      	ldr	r3, [pc, #348]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10f      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002916:	4b54      	ldr	r3, [pc, #336]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002926:	e006      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e004      	b.n	8002938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292e:	bf00      	nop
 8002930:	e002      	b.n	8002938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002932:	bf00      	nop
 8002934:	e000      	b.n	8002938 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002936:	bf00      	nop
    }

    if(status == HAL_OK)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10d      	bne.n	800295a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	430b      	orrs	r3, r1
 8002954:	4944      	ldr	r1, [pc, #272]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d17d      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a40      	ldr	r2, [pc, #256]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800296a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296c:	f7fe fab6 	bl	8000edc <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002972:	e009      	b.n	8002988 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002974:	f7fe fab2 	bl	8000edc <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	73fb      	strb	r3, [r7, #15]
        break;
 8002986:	e005      	b.n	8002994 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ef      	bne.n	8002974 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d160      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d111      	bne.n	80029c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6892      	ldr	r2, [r2, #8]
 80029b0:	0211      	lsls	r1, r2, #8
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68d2      	ldr	r2, [r2, #12]
 80029b6:	0912      	lsrs	r2, r2, #4
 80029b8:	0452      	lsls	r2, r2, #17
 80029ba:	430a      	orrs	r2, r1
 80029bc:	492a      	ldr	r1, [pc, #168]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	610b      	str	r3, [r1, #16]
 80029c2:	e027      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d112      	bne.n	80029f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6892      	ldr	r2, [r2, #8]
 80029da:	0211      	lsls	r1, r2, #8
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6912      	ldr	r2, [r2, #16]
 80029e0:	0852      	lsrs	r2, r2, #1
 80029e2:	3a01      	subs	r2, #1
 80029e4:	0552      	lsls	r2, r2, #21
 80029e6:	430a      	orrs	r2, r1
 80029e8:	491f      	ldr	r1, [pc, #124]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	610b      	str	r3, [r1, #16]
 80029ee:	e011      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6892      	ldr	r2, [r2, #8]
 8002a00:	0211      	lsls	r1, r2, #8
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6952      	ldr	r2, [r2, #20]
 8002a06:	0852      	lsrs	r2, r2, #1
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	0652      	lsls	r2, r2, #25
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	4916      	ldr	r1, [pc, #88]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe fa5c 	bl	8000edc <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a26:	e009      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a28:	f7fe fa58 	bl	8000edc <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d902      	bls.n	8002a3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	73fb      	strb	r3, [r7, #15]
          break;
 8002a3a:	e005      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	4904      	ldr	r1, [pc, #16]	; (8002a68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000

08002a6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a7a:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d018      	beq.n	8002ab8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a86:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0203 	and.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d10d      	bne.n	8002ab2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
       ||
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a9e:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
       ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d047      	beq.n	8002b42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e044      	b.n	8002b42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d018      	beq.n	8002af2 <RCCEx_PLLSAI2_Config+0x86>
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d825      	bhi.n	8002b10 <RCCEx_PLLSAI2_Config+0xa4>
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d002      	beq.n	8002ace <RCCEx_PLLSAI2_Config+0x62>
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d009      	beq.n	8002ae0 <RCCEx_PLLSAI2_Config+0x74>
 8002acc:	e020      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ace:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d11d      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ade:	e01a      	b.n	8002b16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d116      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af0:	e013      	b.n	8002b1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002af2:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10f      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002afe:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b0e:	e006      	b.n	8002b1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	e004      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b16:	bf00      	nop
 8002b18:	e002      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b26:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	4939      	ldr	r1, [pc, #228]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d167      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a35      	ldr	r2, [pc, #212]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7fe f9c2 	bl	8000edc <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b5a:	e009      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b5c:	f7fe f9be 	bl	8000edc <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d902      	bls.n	8002b70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b6e:	e005      	b.n	8002b7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ef      	bne.n	8002b5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d14a      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d111      	bne.n	8002bac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b88:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	0211      	lsls	r1, r2, #8
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	0912      	lsrs	r2, r2, #4
 8002ba0:	0452      	lsls	r2, r2, #17
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	491f      	ldr	r1, [pc, #124]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	614b      	str	r3, [r1, #20]
 8002baa:	e011      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6892      	ldr	r2, [r2, #8]
 8002bbc:	0211      	lsls	r1, r2, #8
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6912      	ldr	r2, [r2, #16]
 8002bc2:	0852      	lsrs	r2, r2, #1
 8002bc4:	3a01      	subs	r2, #1
 8002bc6:	0652      	lsls	r2, r2, #25
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	4916      	ldr	r1, [pc, #88]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe f97e 	bl	8000edc <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002be2:	e009      	b.n	8002bf8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002be4:	f7fe f97a 	bl	8000edc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d902      	bls.n	8002bf8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	73fb      	strb	r3, [r7, #15]
          break;
 8002bf6:	e005      	b.n	8002c04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ef      	beq.n	8002be4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	4904      	ldr	r1, [pc, #16]	; (8002c24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d079      	beq.n	8002d2e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd ff5c 	bl	8000b0c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d058      	beq.n	8002d1c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	22ca      	movs	r2, #202	; 0xca
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2253      	movs	r2, #83	; 0x53
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f880 	bl	8002d80 <RTC_EnterInitMode>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d127      	bne.n	8002cda <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6899      	ldr	r1, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68d2      	ldr	r2, [r2, #12]
 8002cc4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6919      	ldr	r1, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	041a      	lsls	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f884 	bl	8002de8 <RTC_ExitInitMode>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d113      	bne.n	8002d12 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0203 	bic.w	r2, r2, #3
 8002cf8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24
 8002d1a:	e001      	b.n	8002d20 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <HAL_RTC_WaitForSynchro+0x44>)
 8002d46:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002d48:	f7fe f8c8 	bl	8000edc <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d4e:	e009      	b.n	8002d64 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d50:	f7fe f8c4 	bl	8000edc <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d5e:	d901      	bls.n	8002d64 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e007      	b.n	8002d74 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0ee      	beq.n	8002d50 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	0003ff5f 	.word	0x0003ff5f

08002d80 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d120      	bne.n	8002ddc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002da2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002da4:	f7fe f89a 	bl	8000edc <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002daa:	e00d      	b.n	8002dc8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002dac:	f7fe f896 	bl	8000edc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dba:	d905      	bls.n	8002dc8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <RTC_EnterInitMode+0x5c>
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d1e7      	bne.n	8002dac <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <RTC_ExitInitMode+0x78>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <RTC_ExitInitMode+0x78>)
 8002dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dfe:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <RTC_ExitInitMode+0x78>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10c      	bne.n	8002e26 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff93 	bl	8002d38 <HAL_RTC_WaitForSynchro>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01e      	beq.n	8002e56 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e017      	b.n	8002e56 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <RTC_ExitInitMode+0x78>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <RTC_ExitInitMode+0x78>)
 8002e2c:	f023 0320 	bic.w	r3, r3, #32
 8002e30:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff80 	bl	8002d38 <HAL_RTC_WaitForSynchro>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2203      	movs	r2, #3
 8002e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <RTC_ExitInitMode+0x78>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <RTC_ExitInitMode+0x78>)
 8002e50:	f043 0320 	orr.w	r3, r3, #32
 8002e54:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40002800 	.word	0x40002800

08002e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e049      	b.n	8002f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f841 	bl	8002f12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f000 f9da 	bl	800325c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d001      	beq.n	8002f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e04f      	b.n	8002fe0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a23      	ldr	r2, [pc, #140]	; (8002fec <HAL_TIM_Base_Start_IT+0xc4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01d      	beq.n	8002f9e <HAL_TIM_Base_Start_IT+0x76>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6a:	d018      	beq.n	8002f9e <HAL_TIM_Base_Start_IT+0x76>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1f      	ldr	r2, [pc, #124]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_TIM_Base_Start_IT+0x76>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00e      	beq.n	8002f9e <HAL_TIM_Base_Start_IT+0x76>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_TIM_Base_Start_IT+0x76>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_TIM_Base_Start_IT+0x76>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a19      	ldr	r2, [pc, #100]	; (8003000 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d115      	bne.n	8002fca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	4b17      	ldr	r3, [pc, #92]	; (8003004 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b06      	cmp	r3, #6
 8002fae:	d015      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0xb4>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb6:	d011      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc8:	e008      	b.n	8002fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e000      	b.n	8002fde <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00
 8002ffc:	40013400 	.word	0x40013400
 8003000:	40014000 	.word	0x40014000
 8003004:	00010007 	.word	0x00010007

08003008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d020      	beq.n	800306c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01b      	beq.n	800306c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0202 	mvn.w	r2, #2
 800303c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8e4 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 8003058:	e005      	b.n	8003066 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8d6 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f8e7 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d020      	beq.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0204 	mvn.w	r2, #4
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8be 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f8b0 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8c1 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d020      	beq.n	8003104 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01b      	beq.n	8003104 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0208 	mvn.w	r2, #8
 80030d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2204      	movs	r2, #4
 80030da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f898 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 80030f0:	e005      	b.n	80030fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f88a 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f89b 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d020      	beq.n	8003150 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0210 	mvn.w	r2, #16
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2208      	movs	r2, #8
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f872 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f864 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f875 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0201 	mvn.w	r2, #1
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fc90 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f906 	bl	80033a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8fe 	bl	80033b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f834 	bl	8003248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0220 	mvn.w	r2, #32
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8c6 	bl	8003390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a40      	ldr	r2, [pc, #256]	; (8003370 <TIM_Base_SetConfig+0x114>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d00f      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a3d      	ldr	r2, [pc, #244]	; (8003374 <TIM_Base_SetConfig+0x118>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00b      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3c      	ldr	r2, [pc, #240]	; (8003378 <TIM_Base_SetConfig+0x11c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3b      	ldr	r2, [pc, #236]	; (800337c <TIM_Base_SetConfig+0x120>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <TIM_Base_SetConfig+0x124>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d108      	bne.n	80032ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <TIM_Base_SetConfig+0x114>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01f      	beq.n	80032f6 <TIM_Base_SetConfig+0x9a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d01b      	beq.n	80032f6 <TIM_Base_SetConfig+0x9a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <TIM_Base_SetConfig+0x118>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d017      	beq.n	80032f6 <TIM_Base_SetConfig+0x9a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a2b      	ldr	r2, [pc, #172]	; (8003378 <TIM_Base_SetConfig+0x11c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <TIM_Base_SetConfig+0x9a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2a      	ldr	r2, [pc, #168]	; (800337c <TIM_Base_SetConfig+0x120>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00f      	beq.n	80032f6 <TIM_Base_SetConfig+0x9a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a29      	ldr	r2, [pc, #164]	; (8003380 <TIM_Base_SetConfig+0x124>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <TIM_Base_SetConfig+0x9a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a28      	ldr	r2, [pc, #160]	; (8003384 <TIM_Base_SetConfig+0x128>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <TIM_Base_SetConfig+0x9a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a27      	ldr	r2, [pc, #156]	; (8003388 <TIM_Base_SetConfig+0x12c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_Base_SetConfig+0x9a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a26      	ldr	r2, [pc, #152]	; (800338c <TIM_Base_SetConfig+0x130>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d108      	bne.n	8003308 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a10      	ldr	r2, [pc, #64]	; (8003370 <TIM_Base_SetConfig+0x114>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00f      	beq.n	8003354 <TIM_Base_SetConfig+0xf8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <TIM_Base_SetConfig+0x124>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00b      	beq.n	8003354 <TIM_Base_SetConfig+0xf8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a11      	ldr	r2, [pc, #68]	; (8003384 <TIM_Base_SetConfig+0x128>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d007      	beq.n	8003354 <TIM_Base_SetConfig+0xf8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a10      	ldr	r2, [pc, #64]	; (8003388 <TIM_Base_SetConfig+0x12c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <TIM_Base_SetConfig+0xf8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0f      	ldr	r2, [pc, #60]	; (800338c <TIM_Base_SetConfig+0x130>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	615a      	str	r2, [r3, #20]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40012c00 	.word	0x40012c00
 8003374:	40000400 	.word	0x40000400
 8003378:	40000800 	.word	0x40000800
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40013400 	.word	0x40013400
 8003384:	40014000 	.word	0x40014000
 8003388:	40014400 	.word	0x40014400
 800338c:	40014800 	.word	0x40014800

08003390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e040      	b.n	8003460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fbbe 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	; 0x24
 80033f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fe36 	bl	8004084 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fb7b 	bl	8003b14 <UART_SetConfig>
 800341e:	4603      	mov	r3, r0
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e01b      	b.n	8003460 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 feb5 	bl	80041c8 <UART_CheckIdleState>
 800345e:	4603      	mov	r3, r0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	4613      	mov	r3, r2
 8003474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800347c:	2b20      	cmp	r3, #32
 800347e:	d137      	bne.n	80034f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Receive_IT+0x24>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e030      	b.n	80034f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a18      	ldr	r2, [pc, #96]	; (80034fc <HAL_UART_Receive_IT+0x94>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d01f      	beq.n	80034e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	613b      	str	r3, [r7, #16]
   return(result);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	69f9      	ldr	r1, [r7, #28]
 80034d2:	6a3a      	ldr	r2, [r7, #32]
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e6      	bne.n	80034ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	461a      	mov	r2, r3
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 ff7e 	bl	80043e8 <UART_Start_Receive_IT>
 80034ec:	4603      	mov	r3, r0
 80034ee:	e000      	b.n	80034f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40008000 	.word	0x40008000

08003500 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b0ba      	sub	sp, #232	; 0xe8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003526:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800352a:	f640 030f 	movw	r3, #2063	; 0x80f
 800352e:	4013      	ands	r3, r2
 8003530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d115      	bne.n	8003568 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800353c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00f      	beq.n	8003568 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 82ae 	beq.w	8003aba <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
      }
      return;
 8003566:	e2a8      	b.n	8003aba <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8117 	beq.w	80037a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800357e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003582:	4b85      	ldr	r3, [pc, #532]	; (8003798 <HAL_UART_IRQHandler+0x298>)
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 810a 	beq.w	80037a0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800358c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d011      	beq.n	80035bc <HAL_UART_IRQHandler+0xbc>
 8003598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2201      	movs	r2, #1
 80035aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d011      	beq.n	80035ec <HAL_UART_IRQHandler+0xec>
 80035c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2202      	movs	r2, #2
 80035da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e2:	f043 0204 	orr.w	r2, r3, #4
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d011      	beq.n	800361c <HAL_UART_IRQHandler+0x11c>
 80035f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2204      	movs	r2, #4
 800360a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003612:	f043 0202 	orr.w	r2, r3, #2
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d017      	beq.n	8003658 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003638:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2208      	movs	r2, #8
 8003646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	f043 0208 	orr.w	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <HAL_UART_IRQHandler+0x18a>
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00c      	beq.n	800368a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003678:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8214 	beq.w	8003abe <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d04f      	beq.n	8003782 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 ff46 	bl	8004574 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d141      	bne.n	800377a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3308      	adds	r3, #8
 80036fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800370c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003722:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800372e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800373a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1d9      	bne.n	80036f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	2b00      	cmp	r3, #0
 8003748:	d013      	beq.n	8003772 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	4a13      	ldr	r2, [pc, #76]	; (800379c <HAL_UART_IRQHandler+0x29c>)
 8003750:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fcec 	bl	8001134 <HAL_DMA_Abort_IT>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d017      	beq.n	8003792 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800376c:	4610      	mov	r0, r2
 800376e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e00f      	b.n	8003792 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9b8 	bl	8003ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e00b      	b.n	8003792 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9b4 	bl	8003ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e007      	b.n	8003792 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9b0 	bl	8003ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003790:	e195      	b.n	8003abe <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003792:	bf00      	nop
    return;
 8003794:	e193      	b.n	8003abe <HAL_UART_IRQHandler+0x5be>
 8003796:	bf00      	nop
 8003798:	04000120 	.word	0x04000120
 800379c:	0800463d 	.word	0x0800463d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	f040 814e 	bne.w	8003a46 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8147 	beq.w	8003a46 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8140 	beq.w	8003a46 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2210      	movs	r2, #16
 80037cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	f040 80b8 	bne.w	800394e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8167 	beq.w	8003ac2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037fe:	429a      	cmp	r2, r3
 8003800:	f080 815f 	bcs.w	8003ac2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800380a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 8086 	bne.w	800392c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800384a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800384e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003856:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1da      	bne.n	8003820 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3308      	adds	r3, #8
 8003870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800387a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3308      	adds	r3, #8
 800388a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800388e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003892:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e1      	bne.n	800386a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3308      	adds	r3, #8
 80038c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e3      	bne.n	80038a6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fc:	f023 0310 	bic.w	r3, r3, #16
 8003900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800390e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003910:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800391c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e4      	bne.n	80038ec <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fbc6 	bl	80010b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800393e:	b29b      	uxth	r3, r3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	b29b      	uxth	r3, r3
 8003944:	4619      	mov	r1, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8d8 	bl	8003afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800394c:	e0b9      	b.n	8003ac2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800395a:	b29b      	uxth	r3, r3
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 80ab 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a6 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800398e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
 800399e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a4:	e841 2300 	strex	r3, r2, [r1]
 80039a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e4      	bne.n	800397a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	623b      	str	r3, [r7, #32]
   return(result);
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3308      	adds	r3, #8
 80039d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039d4:	633a      	str	r2, [r7, #48]	; 0x30
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e3      	bne.n	80039b0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f023 0310 	bic.w	r3, r3, #16
 8003a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	69b9      	ldr	r1, [r7, #24]
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e4      	bne.n	80039fc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f85c 	bl	8003afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a44:	e03f      	b.n	8003ac6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00e      	beq.n	8003a70 <HAL_UART_IRQHandler+0x570>
 8003a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 ffe3 	bl	8004a34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a6e:	e02d      	b.n	8003acc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00e      	beq.n	8003a9a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01c      	beq.n	8003aca <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
    }
    return;
 8003a98:	e017      	b.n	8003aca <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d012      	beq.n	8003acc <HAL_UART_IRQHandler+0x5cc>
 8003aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fdd8 	bl	8004668 <UART_EndTransmit_IT>
    return;
 8003ab8:	e008      	b.n	8003acc <HAL_UART_IRQHandler+0x5cc>
      return;
 8003aba:	bf00      	nop
 8003abc:	e006      	b.n	8003acc <HAL_UART_IRQHandler+0x5cc>
    return;
 8003abe:	bf00      	nop
 8003ac0:	e004      	b.n	8003acc <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_UART_IRQHandler+0x5cc>
    return;
 8003aca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003acc:	37e8      	adds	r7, #232	; 0xe8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop

08003ad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b18:	b08a      	sub	sp, #40	; 0x28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4ba4      	ldr	r3, [pc, #656]	; (8003dd4 <UART_SetConfig+0x2c0>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a99      	ldr	r2, [pc, #612]	; (8003dd8 <UART_SetConfig+0x2c4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a90      	ldr	r2, [pc, #576]	; (8003ddc <UART_SetConfig+0x2c8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d126      	bne.n	8003bec <UART_SetConfig+0xd8>
 8003b9e:	4b90      	ldr	r3, [pc, #576]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d81b      	bhi.n	8003be4 <UART_SetConfig+0xd0>
 8003bac:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0xa0>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bd5 	.word	0x08003bd5
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003bdd 	.word	0x08003bdd
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bca:	e116      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd2:	e112      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bda:	e10e      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003bdc:	2308      	movs	r3, #8
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be2:	e10a      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003be4:	2310      	movs	r3, #16
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bea:	e106      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a7c      	ldr	r2, [pc, #496]	; (8003de4 <UART_SetConfig+0x2d0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d138      	bne.n	8003c68 <UART_SetConfig+0x154>
 8003bf6:	4b7a      	ldr	r3, [pc, #488]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d82d      	bhi.n	8003c60 <UART_SetConfig+0x14c>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <UART_SetConfig+0xf8>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c41 	.word	0x08003c41
 8003c10:	08003c61 	.word	0x08003c61
 8003c14:	08003c61 	.word	0x08003c61
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c61 	.word	0x08003c61
 8003c24:	08003c61 	.word	0x08003c61
 8003c28:	08003c61 	.word	0x08003c61
 8003c2c:	08003c49 	.word	0x08003c49
 8003c30:	08003c61 	.word	0x08003c61
 8003c34:	08003c61 	.word	0x08003c61
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c46:	e0d8      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4e:	e0d4      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c56:	e0d0      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5e:	e0cc      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e0c8      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5e      	ldr	r2, [pc, #376]	; (8003de8 <UART_SetConfig+0x2d4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d125      	bne.n	8003cbe <UART_SetConfig+0x1aa>
 8003c72:	4b5b      	ldr	r3, [pc, #364]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c7c:	2b30      	cmp	r3, #48	; 0x30
 8003c7e:	d016      	beq.n	8003cae <UART_SetConfig+0x19a>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d818      	bhi.n	8003cb6 <UART_SetConfig+0x1a2>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d00a      	beq.n	8003c9e <UART_SetConfig+0x18a>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d814      	bhi.n	8003cb6 <UART_SetConfig+0x1a2>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <UART_SetConfig+0x182>
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d008      	beq.n	8003ca6 <UART_SetConfig+0x192>
 8003c94:	e00f      	b.n	8003cb6 <UART_SetConfig+0x1a2>
 8003c96:	2300      	movs	r3, #0
 8003c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9c:	e0ad      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca4:	e0a9      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cac:	e0a5      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb4:	e0a1      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbc:	e09d      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4a      	ldr	r2, [pc, #296]	; (8003dec <UART_SetConfig+0x2d8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d125      	bne.n	8003d14 <UART_SetConfig+0x200>
 8003cc8:	4b45      	ldr	r3, [pc, #276]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd4:	d016      	beq.n	8003d04 <UART_SetConfig+0x1f0>
 8003cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd8:	d818      	bhi.n	8003d0c <UART_SetConfig+0x1f8>
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d00a      	beq.n	8003cf4 <UART_SetConfig+0x1e0>
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d814      	bhi.n	8003d0c <UART_SetConfig+0x1f8>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <UART_SetConfig+0x1d8>
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d008      	beq.n	8003cfc <UART_SetConfig+0x1e8>
 8003cea:	e00f      	b.n	8003d0c <UART_SetConfig+0x1f8>
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf2:	e082      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfa:	e07e      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	e07a      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d04:	2308      	movs	r3, #8
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0a:	e076      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d12:	e072      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <UART_SetConfig+0x2dc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d12a      	bne.n	8003d74 <UART_SetConfig+0x260>
 8003d1e:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2c:	d01a      	beq.n	8003d64 <UART_SetConfig+0x250>
 8003d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d32:	d81b      	bhi.n	8003d6c <UART_SetConfig+0x258>
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d00c      	beq.n	8003d54 <UART_SetConfig+0x240>
 8003d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3e:	d815      	bhi.n	8003d6c <UART_SetConfig+0x258>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <UART_SetConfig+0x238>
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d48:	d008      	beq.n	8003d5c <UART_SetConfig+0x248>
 8003d4a:	e00f      	b.n	8003d6c <UART_SetConfig+0x258>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d52:	e052      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d54:	2302      	movs	r3, #2
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5a:	e04e      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d62:	e04a      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d64:	2308      	movs	r3, #8
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6a:	e046      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e042      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <UART_SetConfig+0x2c4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d13a      	bne.n	8003df4 <UART_SetConfig+0x2e0>
 8003d7e:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <UART_SetConfig+0x2cc>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d8c:	d01a      	beq.n	8003dc4 <UART_SetConfig+0x2b0>
 8003d8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d92:	d81b      	bhi.n	8003dcc <UART_SetConfig+0x2b8>
 8003d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d98:	d00c      	beq.n	8003db4 <UART_SetConfig+0x2a0>
 8003d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9e:	d815      	bhi.n	8003dcc <UART_SetConfig+0x2b8>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <UART_SetConfig+0x298>
 8003da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da8:	d008      	beq.n	8003dbc <UART_SetConfig+0x2a8>
 8003daa:	e00f      	b.n	8003dcc <UART_SetConfig+0x2b8>
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db2:	e022      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003db4:	2302      	movs	r3, #2
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dba:	e01e      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc2:	e01a      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003dc4:	2308      	movs	r3, #8
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dca:	e016      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd2:	e012      	b.n	8003dfa <UART_SetConfig+0x2e6>
 8003dd4:	efff69f3 	.word	0xefff69f3
 8003dd8:	40008000 	.word	0x40008000
 8003ddc:	40013800 	.word	0x40013800
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40004400 	.word	0x40004400
 8003de8:	40004800 	.word	0x40004800
 8003dec:	40004c00 	.word	0x40004c00
 8003df0:	40005000 	.word	0x40005000
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a9f      	ldr	r2, [pc, #636]	; (800407c <UART_SetConfig+0x568>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d17a      	bne.n	8003efa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d824      	bhi.n	8003e56 <UART_SetConfig+0x342>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <UART_SetConfig+0x300>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e39 	.word	0x08003e39
 8003e18:	08003e57 	.word	0x08003e57
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e57 	.word	0x08003e57
 8003e24:	08003e47 	.word	0x08003e47
 8003e28:	08003e57 	.word	0x08003e57
 8003e2c:	08003e57 	.word	0x08003e57
 8003e30:	08003e57 	.word	0x08003e57
 8003e34:	08003e4f 	.word	0x08003e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e38:	f7fe f97c 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8003e3c:	61f8      	str	r0, [r7, #28]
        break;
 8003e3e:	e010      	b.n	8003e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e40:	4b8f      	ldr	r3, [pc, #572]	; (8004080 <UART_SetConfig+0x56c>)
 8003e42:	61fb      	str	r3, [r7, #28]
        break;
 8003e44:	e00d      	b.n	8003e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e46:	f7fe f8dd 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8003e4a:	61f8      	str	r0, [r7, #28]
        break;
 8003e4c:	e009      	b.n	8003e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e005      	b.n	8003e62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80fb 	beq.w	8004060 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d305      	bcc.n	8003e86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d903      	bls.n	8003e8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e8c:	e0e8      	b.n	8004060 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2200      	movs	r2, #0
 8003e92:	461c      	mov	r4, r3
 8003e94:	4615      	mov	r5, r2
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	022b      	lsls	r3, r5, #8
 8003ea0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ea4:	0222      	lsls	r2, r4, #8
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	6849      	ldr	r1, [r1, #4]
 8003eaa:	0849      	lsrs	r1, r1, #1
 8003eac:	2000      	movs	r0, #0
 8003eae:	4688      	mov	r8, r1
 8003eb0:	4681      	mov	r9, r0
 8003eb2:	eb12 0a08 	adds.w	sl, r2, r8
 8003eb6:	eb43 0b09 	adc.w	fp, r3, r9
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ec8:	4650      	mov	r0, sl
 8003eca:	4659      	mov	r1, fp
 8003ecc:	f7fc f9ca 	bl	8000264 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ede:	d308      	bcc.n	8003ef2 <UART_SetConfig+0x3de>
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee6:	d204      	bcs.n	8003ef2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	60da      	str	r2, [r3, #12]
 8003ef0:	e0b6      	b.n	8004060 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ef8:	e0b2      	b.n	8004060 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f02:	d15e      	bne.n	8003fc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d828      	bhi.n	8003f5e <UART_SetConfig+0x44a>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <UART_SetConfig+0x400>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f41 	.word	0x08003f41
 8003f1c:	08003f49 	.word	0x08003f49
 8003f20:	08003f5f 	.word	0x08003f5f
 8003f24:	08003f4f 	.word	0x08003f4f
 8003f28:	08003f5f 	.word	0x08003f5f
 8003f2c:	08003f5f 	.word	0x08003f5f
 8003f30:	08003f5f 	.word	0x08003f5f
 8003f34:	08003f57 	.word	0x08003f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7fe f8fc 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	61f8      	str	r0, [r7, #28]
        break;
 8003f3e:	e014      	b.n	8003f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f40:	f7fe f90e 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8003f44:	61f8      	str	r0, [r7, #28]
        break;
 8003f46:	e010      	b.n	8003f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f48:	4b4d      	ldr	r3, [pc, #308]	; (8004080 <UART_SetConfig+0x56c>)
 8003f4a:	61fb      	str	r3, [r7, #28]
        break;
 8003f4c:	e00d      	b.n	8003f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4e:	f7fe f859 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8003f52:	61f8      	str	r0, [r7, #28]
        break;
 8003f54:	e009      	b.n	8003f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5a:	61fb      	str	r3, [r7, #28]
        break;
 8003f5c:	e005      	b.n	8003f6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d077      	beq.n	8004060 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005a      	lsls	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	441a      	add	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b0f      	cmp	r3, #15
 8003f8a:	d916      	bls.n	8003fba <UART_SetConfig+0x4a6>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d212      	bcs.n	8003fba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f023 030f 	bic.w	r3, r3, #15
 8003f9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	8afb      	ldrh	r3, [r7, #22]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	8afa      	ldrh	r2, [r7, #22]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	e052      	b.n	8004060 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fc0:	e04e      	b.n	8004060 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d827      	bhi.n	800401a <UART_SetConfig+0x506>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <UART_SetConfig+0x4bc>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	08003ffd 	.word	0x08003ffd
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	0800401b 	.word	0x0800401b
 8003fe0:	0800400b 	.word	0x0800400b
 8003fe4:	0800401b 	.word	0x0800401b
 8003fe8:	0800401b 	.word	0x0800401b
 8003fec:	0800401b 	.word	0x0800401b
 8003ff0:	08004013 	.word	0x08004013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f7fe f89e 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8003ff8:	61f8      	str	r0, [r7, #28]
        break;
 8003ffa:	e014      	b.n	8004026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ffc:	f7fe f8b0 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8004000:	61f8      	str	r0, [r7, #28]
        break;
 8004002:	e010      	b.n	8004026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004004:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <UART_SetConfig+0x56c>)
 8004006:	61fb      	str	r3, [r7, #28]
        break;
 8004008:	e00d      	b.n	8004026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400a:	f7fd fffb 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 800400e:	61f8      	str	r0, [r7, #28]
        break;
 8004010:	e009      	b.n	8004026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004016:	61fb      	str	r3, [r7, #28]
        break;
 8004018:	e005      	b.n	8004026 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004024:	bf00      	nop
    }

    if (pclk != 0U)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d019      	beq.n	8004060 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	085a      	lsrs	r2, r3, #1
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	441a      	add	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b0f      	cmp	r3, #15
 8004044:	d909      	bls.n	800405a <UART_SetConfig+0x546>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404c:	d205      	bcs.n	800405a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	e002      	b.n	8004060 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800406c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004070:	4618      	mov	r0, r3
 8004072:	3728      	adds	r7, #40	; 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407a:	bf00      	nop
 800407c:	40008000 	.word	0x40008000
 8004080:	00f42400 	.word	0x00f42400

08004084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004182:	d10a      	bne.n	800419a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b098      	sub	sp, #96	; 0x60
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041d8:	f7fc fe80 	bl	8000edc <HAL_GetTick>
 80041dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d12e      	bne.n	800424a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f88c 	bl	8004318 <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d021      	beq.n	800424a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	653b      	str	r3, [r7, #80]	; 0x50
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
 8004226:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800422a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e6      	bne.n	8004206 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e062      	b.n	8004310 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b04      	cmp	r3, #4
 8004256:	d149      	bne.n	80042ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f856 	bl	8004318 <UART_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d03c      	beq.n	80042ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	623b      	str	r3, [r7, #32]
   return(result);
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
 8004292:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c4:	61fa      	str	r2, [r7, #28]
 80042c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	617b      	str	r3, [r7, #20]
   return(result);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e011      	b.n	8004310 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3758      	adds	r7, #88	; 0x58
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004328:	e049      	b.n	80043be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d045      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fc fdd3 	bl	8000edc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <UART_WaitOnFlagUntilTimeout+0x30>
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e048      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d031      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d110      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2208      	movs	r2, #8
 800436e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f8ff 	bl	8004574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2208      	movs	r2, #8
 800437a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e029      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004398:	d111      	bne.n	80043be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f8e5 	bl	8004574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e00f      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4013      	ands	r3, r2
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	bf0c      	ite	eq
 80043ce:	2301      	moveq	r3, #1
 80043d0:	2300      	movne	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d0a6      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b097      	sub	sp, #92	; 0x5c
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441a:	d10e      	bne.n	800443a <UART_Start_Receive_IT+0x52>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <UART_Start_Receive_IT+0x48>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f240 12ff 	movw	r2, #511	; 0x1ff
 800442a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800442e:	e02d      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	22ff      	movs	r2, #255	; 0xff
 8004434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004438:	e028      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10d      	bne.n	800445e <UART_Start_Receive_IT+0x76>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <UART_Start_Receive_IT+0x6c>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	22ff      	movs	r2, #255	; 0xff
 800444e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004452:	e01b      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	227f      	movs	r2, #127	; 0x7f
 8004458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800445c:	e016      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004466:	d10d      	bne.n	8004484 <UART_Start_Receive_IT+0x9c>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <UART_Start_Receive_IT+0x92>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	227f      	movs	r2, #127	; 0x7f
 8004474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004478:	e008      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	223f      	movs	r2, #63	; 0x3f
 800447e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004482:	e003      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2222      	movs	r2, #34	; 0x22
 8004498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	657b      	str	r3, [r7, #84]	; 0x54
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80044be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d8:	d107      	bne.n	80044ea <UART_Start_Receive_IT+0x102>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a21      	ldr	r2, [pc, #132]	; (800456c <UART_Start_Receive_IT+0x184>)
 80044e6:	669a      	str	r2, [r3, #104]	; 0x68
 80044e8:	e002      	b.n	80044f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a20      	ldr	r2, [pc, #128]	; (8004570 <UART_Start_Receive_IT+0x188>)
 80044ee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d019      	beq.n	800452c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800450c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
 8004518:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800451c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e6      	bne.n	80044f8 <UART_Start_Receive_IT+0x110>
 800452a:	e018      	b.n	800455e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	613b      	str	r3, [r7, #16]
   return(result);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f043 0320 	orr.w	r3, r3, #32
 8004540:	653b      	str	r3, [r7, #80]	; 0x50
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	69f9      	ldr	r1, [r7, #28]
 8004550:	6a3a      	ldr	r2, [r7, #32]
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	61bb      	str	r3, [r7, #24]
   return(result);
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e6      	bne.n	800452c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	375c      	adds	r7, #92	; 0x5c
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	08004879 	.word	0x08004879
 8004570:	080046bd 	.word	0x080046bd

08004574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b095      	sub	sp, #84	; 0x54
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459a:	643b      	str	r3, [r7, #64]	; 0x40
 800459c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e6      	bne.n	800457c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d118      	bne.n	800461c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 0310 	bic.w	r3, r3, #16
 80045fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	613b      	str	r3, [r7, #16]
   return(result);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e6      	bne.n	80045ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004630:	bf00      	nop
 8004632:	3754      	adds	r7, #84	; 0x54
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff fa44 	bl	8003ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	60bb      	str	r3, [r7, #8]
   return(result);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	6979      	ldr	r1, [r7, #20]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	613b      	str	r3, [r7, #16]
   return(result);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e6      	bne.n	8004670 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fa10 	bl	8003ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b4:	bf00      	nop
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b09c      	sub	sp, #112	; 0x70
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d4:	2b22      	cmp	r3, #34	; 0x22
 80046d6:	f040 80be 	bne.w	8004856 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046e8:	b2d9      	uxtb	r1, r3
 80046ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	400a      	ands	r2, r1
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	f040 80a3 	bne.w	800486a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004738:	66bb      	str	r3, [r7, #104]	; 0x68
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004742:	65bb      	str	r3, [r7, #88]	; 0x58
 8004744:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e6      	bne.n	8004724 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3308      	adds	r3, #8
 800475c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	667b      	str	r3, [r7, #100]	; 0x64
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3308      	adds	r3, #8
 8004774:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004776:	647a      	str	r2, [r7, #68]	; 0x44
 8004778:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800477c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a34      	ldr	r2, [pc, #208]	; (8004874 <UART_RxISR_8BIT+0x1b8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d01f      	beq.n	80047e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	623b      	str	r3, [r7, #32]
   return(result);
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ca:	663b      	str	r3, [r7, #96]	; 0x60
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30
 80047d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d12e      	bne.n	800484e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	60fb      	str	r3, [r7, #12]
   return(result);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0310 	bic.w	r3, r3, #16
 800480a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	69b9      	ldr	r1, [r7, #24]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	617b      	str	r3, [r7, #20]
   return(result);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e6      	bne.n	80047f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b10      	cmp	r3, #16
 8004834:	d103      	bne.n	800483e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2210      	movs	r2, #16
 800483c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff f958 	bl	8003afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800484c:	e00d      	b.n	800486a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fc f8d8 	bl	8000a04 <HAL_UART_RxCpltCallback>
}
 8004854:	e009      	b.n	800486a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	8b1b      	ldrh	r3, [r3, #24]
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0208 	orr.w	r2, r2, #8
 8004866:	b292      	uxth	r2, r2
 8004868:	831a      	strh	r2, [r3, #24]
}
 800486a:	bf00      	nop
 800486c:	3770      	adds	r7, #112	; 0x70
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40008000 	.word	0x40008000

08004878 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b09c      	sub	sp, #112	; 0x70
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004886:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004890:	2b22      	cmp	r3, #34	; 0x22
 8004892:	f040 80be 	bne.w	8004a12 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800489c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80048a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80048aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80048ae:	4013      	ands	r3, r2
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	1c9a      	adds	r2, r3, #2
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 80a3 	bne.w	8004a26 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80048ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004900:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800490c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004932:	643a      	str	r2, [r7, #64]	; 0x40
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a34      	ldr	r2, [pc, #208]	; (8004a30 <UART_RxISR_16BIT+0x1b8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01f      	beq.n	80049a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004992:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d12e      	bne.n	8004a0a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	60bb      	str	r3, [r7, #8]
   return(result);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f023 0310 	bic.w	r3, r3, #16
 80049c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6979      	ldr	r1, [r7, #20]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	613b      	str	r3, [r7, #16]
   return(result);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e6      	bne.n	80049b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d103      	bne.n	80049fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2210      	movs	r2, #16
 80049f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff f87a 	bl	8003afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a08:	e00d      	b.n	8004a26 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fb fffa 	bl	8000a04 <HAL_UART_RxCpltCallback>
}
 8004a10:	e009      	b.n	8004a26 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	8b1b      	ldrh	r3, [r3, #24]
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	b292      	uxth	r2, r2
 8004a24:	831a      	strh	r2, [r3, #24]
}
 8004a26:	bf00      	nop
 8004a28:	3770      	adds	r7, #112	; 0x70
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40008000 	.word	0x40008000

08004a34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f103 0208 	add.w	r2, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a60:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f103 0208 	add.w	r2, r3, #8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f103 0208 	add.w	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004aea:	b480      	push	{r7}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d103      	bne.n	8004b0a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e00c      	b.n	8004b24 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e002      	b.n	8004b18 <vListInsert+0x2e>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d2f6      	bcs.n	8004b12 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	601a      	str	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6892      	ldr	r2, [r2, #8]
 8004b72:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6852      	ldr	r2, [r2, #4]
 8004b7c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d103      	bne.n	8004b90 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1e5a      	subs	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xQueueGenericReset+0x2e>
        __asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60fb      	str	r3, [r7, #12]
    }
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d05d      	beq.n	8004ca0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d059      	beq.n	8004ca0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d000      	beq.n	8004c00 <xQueueGenericReset+0x50>
 8004bfe:	2101      	movs	r1, #1
 8004c00:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d14c      	bne.n	8004ca0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004c06:	f001 fe9d 	bl	8006944 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	6939      	ldr	r1, [r7, #16]
 8004c14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	441a      	add	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2200      	movs	r2, #0
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	3b01      	subs	r3, #1
 8004c38:	6939      	ldr	r1, [r7, #16]
 8004c3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	441a      	add	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	22ff      	movs	r2, #255	; 0xff
 8004c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	22ff      	movs	r2, #255	; 0xff
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d114      	bne.n	8004c86 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01a      	beq.n	8004c9a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	3310      	adds	r3, #16
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 f819 	bl	8005ca0 <xTaskRemoveFromEventList>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d012      	beq.n	8004c9a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004c74:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <xQueueGenericReset+0x11c>)
 8004c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	e009      	b.n	8004c9a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	3310      	adds	r3, #16
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fedc 	bl	8004a48 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	3324      	adds	r3, #36	; 0x24
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fed7 	bl	8004a48 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004c9a:	f001 fe83 	bl	80069a4 <vPortExitCritical>
 8004c9e:	e001      	b.n	8004ca4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <xQueueGenericReset+0x110>
        __asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	60bb      	str	r3, [r7, #8]
    }
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004cc0:	697b      	ldr	r3, [r7, #20]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d032      	beq.n	8004d4e <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004ce8:	2100      	movs	r1, #0
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d000      	beq.n	8004cf8 <xQueueGenericCreate+0x28>
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d127      	bne.n	8004d4e <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004d06:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8004d0a:	d820      	bhi.n	8004d4e <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	3348      	adds	r3, #72	; 0x48
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 ff3e 	bl	8006b9c <pvPortMalloc>
 8004d20:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <xQueueGenericCreate+0x9a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	3348      	adds	r3, #72	; 0x48
 8004d30:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d3a:	79fa      	ldrb	r2, [r7, #7]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f814 	bl	8004d74 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004d4c:	e00d      	b.n	8004d6a <xQueueGenericCreate+0x9a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xQueueGenericCreate+0x9a>
        __asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	613b      	str	r3, [r7, #16]
    }
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
    }
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004da2:	2101      	movs	r1, #1
 8004da4:	69b8      	ldr	r0, [r7, #24]
 8004da6:	f7ff ff03 	bl	8004bb0 <xQueueGenericReset>
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	2073      	movs	r0, #115	; 0x73
 8004db2:	f002 fd67 	bl	8007884 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b092      	sub	sp, #72	; 0x48
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8004dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <xQueueGenericSendFromISR+0x3c>
 8004df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <xQueueGenericSendFromISR+0x40>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <xQueueGenericSendFromISR+0x42>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d103      	bne.n	8004e28 <xQueueGenericSendFromISR+0x6a>
 8004e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <xQueueGenericSendFromISR+0x6e>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <xQueueGenericSendFromISR+0x70>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e48:	f001 fe68 	bl	8006b1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004e4c:	f3ef 8211 	mrs	r2, BASEPRI
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	623a      	str	r2, [r7, #32]
 8004e62:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004e64:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <xQueueGenericSendFromISR+0xbc>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d150      	bne.n	8004f1c <xQueueGenericSendFromISR+0x15e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e80:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f003 faaf 	bl	80083f0 <SEGGER_SYSVIEW_ShrinkId>
 8004e92:	4601      	mov	r1, r0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	461a      	mov	r2, r3
 8004e98:	2060      	movs	r0, #96	; 0x60
 8004e9a:	f002 fc99 	bl	80077d0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ea4:	f000 f924 	bl	80050f0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004ea8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d112      	bne.n	8004ed8 <xQueueGenericSendFromISR+0x11a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d02d      	beq.n	8004f16 <xQueueGenericSendFromISR+0x158>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebc:	3324      	adds	r3, #36	; 0x24
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 feee 	bl	8005ca0 <xTaskRemoveFromEventList>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d025      	beq.n	8004f16 <xQueueGenericSendFromISR+0x158>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d022      	beq.n	8004f16 <xQueueGenericSendFromISR+0x158>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e01e      	b.n	8004f16 <xQueueGenericSendFromISR+0x158>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004ed8:	f000 fd46 	bl	8005968 <uxTaskGetNumberOfTasks>
 8004edc:	6338      	str	r0, [r7, #48]	; 0x30
 8004ede:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d916      	bls.n	8004f16 <xQueueGenericSendFromISR+0x158>
 8004ee8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004eec:	2b7f      	cmp	r3, #127	; 0x7f
 8004eee:	d10a      	bne.n	8004f06 <xQueueGenericSendFromISR+0x148>
        __asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	61bb      	str	r3, [r7, #24]
    }
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xQueueGenericSendFromISR+0x146>
 8004f06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	b25a      	sxtb	r2, r3
 8004f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004f16:	2301      	movs	r3, #1
 8004f18:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8004f1a:	e00b      	b.n	8004f34 <xQueueGenericSendFromISR+0x176>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f003 fa66 	bl	80083f0 <SEGGER_SYSVIEW_ShrinkId>
 8004f24:	4601      	mov	r1, r0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2060      	movs	r0, #96	; 0x60
 8004f2c:	f002 fc50 	bl	80077d0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	647b      	str	r3, [r7, #68]	; 0x44
 8004f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f36:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004f3e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3748      	adds	r7, #72	; 0x48
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f4a:	b590      	push	{r4, r7, lr}
 8004f4c:	b091      	sub	sp, #68	; 0x44
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d103      	bne.n	8004f84 <xQueueReceiveFromISR+0x3a>
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <xQueueReceiveFromISR+0x3e>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <xQueueReceiveFromISR+0x40>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	623b      	str	r3, [r7, #32]
    }
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fa4:	f001 fdba 	bl	8006b1c <vPortValidateInterruptPriority>
        __asm volatile
 8004fa8:	f3ef 8211 	mrs	r2, BASEPRI
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	61fa      	str	r2, [r7, #28]
 8004fbe:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8004fc0:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d055      	beq.n	800507c <xQueueReceiveFromISR+0x132>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f003 fa07 	bl	80083f0 <SEGGER_SYSVIEW_ShrinkId>
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f003 fa02 	bl	80083f0 <SEGGER_SYSVIEW_ShrinkId>
 8004fec:	4602      	mov	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	2062      	movs	r0, #98	; 0x62
 8004ff4:	f002 fc46 	bl	8007884 <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ffc:	f000 f8e2 	bl	80051c4 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	1e5a      	subs	r2, r3, #1
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005008:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d112      	bne.n	8005038 <xQueueReceiveFromISR+0xee>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d02d      	beq.n	8005076 <xQueueReceiveFromISR+0x12c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	3310      	adds	r3, #16
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fe3e 	bl	8005ca0 <xTaskRemoveFromEventList>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d025      	beq.n	8005076 <xQueueReceiveFromISR+0x12c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d022      	beq.n	8005076 <xQueueReceiveFromISR+0x12c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e01e      	b.n	8005076 <xQueueReceiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8005038:	f000 fc96 	bl	8005968 <uxTaskGetNumberOfTasks>
 800503c:	62b8      	str	r0, [r7, #40]	; 0x28
 800503e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005044:	429a      	cmp	r2, r3
 8005046:	d916      	bls.n	8005076 <xQueueReceiveFromISR+0x12c>
 8005048:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800504c:	2b7f      	cmp	r3, #127	; 0x7f
 800504e:	d10a      	bne.n	8005066 <xQueueReceiveFromISR+0x11c>
        __asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	617b      	str	r3, [r7, #20]
    }
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xQueueReceiveFromISR+0x11a>
 8005066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800506a:	3301      	adds	r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	b25a      	sxtb	r2, r3
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005076:	2301      	movs	r3, #1
 8005078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507a:	e010      	b.n	800509e <xQueueReceiveFromISR+0x154>
        }
        else
        {
            xReturn = pdFAIL;
 800507c:	2300      	movs	r3, #0
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	4618      	mov	r0, r3
 8005084:	f003 f9b4 	bl	80083f0 <SEGGER_SYSVIEW_ShrinkId>
 8005088:	4604      	mov	r4, r0
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f003 f9af 	bl	80083f0 <SEGGER_SYSVIEW_ShrinkId>
 8005092:	4602      	mov	r2, r0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4621      	mov	r1, r4
 8005098:	2062      	movs	r0, #98	; 0x62
 800509a:	f002 fbf3 	bl	8007884 <SEGGER_SYSVIEW_RecordU32x3>
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	613b      	str	r3, [r7, #16]
        __asm volatile
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f383 8811 	msr	BASEPRI, r3
    }
 80050a8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80050aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3744      	adds	r7, #68	; 0x44
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd90      	pop	{r4, r7, pc}

080050b4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	60bb      	str	r3, [r7, #8]
    }
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80050d8:	f001 fc34 	bl	8006944 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80050e2:	f001 fc5f 	bl	80069a4 <vPortExitCritical>

    return uxReturn;
 80050e6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10d      	bne.n	800512a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d14d      	bne.n	80051b2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 ff72 	bl	8006004 <xTaskPriorityDisinherit>
 8005120:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	e043      	b.n	80051b2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d119      	bne.n	8005164 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6858      	ldr	r0, [r3, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	461a      	mov	r2, r3
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	f003 fb3e 	bl	80087bc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	441a      	add	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	d32b      	bcc.n	80051b2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	e026      	b.n	80051b2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68d8      	ldr	r0, [r3, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	461a      	mov	r2, r3
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	f003 fb24 	bl	80087bc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	425b      	negs	r3, r3
 800517e:	441a      	add	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d207      	bcs.n	80051a0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	425b      	negs	r3, r3
 800519a:	441a      	add	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d105      	bne.n	80051b2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80051ba:	697b      	ldr	r3, [r7, #20]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d018      	beq.n	8005208 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	441a      	add	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d303      	bcc.n	80051f8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68d9      	ldr	r1, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	461a      	mov	r2, r3
 8005202:	6838      	ldr	r0, [r7, #0]
 8005204:	f003 fada 	bl	80087bc <memcpy>
    }
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	60fb      	str	r3, [r7, #12]
    }
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	429a      	cmp	r2, r3
 8005242:	d102      	bne.n	800524a <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005244:	2301      	movs	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e001      	b.n	800524e <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800524e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005250:	4618      	mov	r0, r3
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800525c:	b580      	push	{r7, lr}
 800525e:	b08e      	sub	sp, #56	; 0x38
 8005260:	af04      	add	r7, sp, #16
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xTaskCreateStatic+0x2a>
        __asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	623b      	str	r3, [r7, #32]
    }
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <xTaskCreateStatic+0x46>
        __asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	61fb      	str	r3, [r7, #28]
    }
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80052a2:	23a0      	movs	r3, #160	; 0xa0
 80052a4:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2ba0      	cmp	r3, #160	; 0xa0
 80052aa:	d00a      	beq.n	80052c2 <xTaskCreateStatic+0x66>
        __asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	61bb      	str	r3, [r7, #24]
    }
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052c2:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d023      	beq.n	8005312 <xTaskCreateStatic+0xb6>
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80052d4:	22a0      	movs	r2, #160	; 0xa0
 80052d6:	2100      	movs	r1, #0
 80052d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052da:	f003 f9eb 	bl	80086b4 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052ec:	2300      	movs	r3, #0
 80052ee:	9303      	str	r3, [sp, #12]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	9302      	str	r3, [sp, #8]
 80052f4:	f107 0314 	add.w	r3, r7, #20
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f855 	bl	80053b4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800530a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800530c:	f000 f8ee 	bl	80054ec <prvAddNewTaskToReadyList>
 8005310:	e001      	b.n	8005316 <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8005316:	697b      	ldr	r3, [r7, #20]
    }
 8005318:	4618      	mov	r0, r3
 800531a:	3728      	adds	r7, #40	; 0x28
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005320:	b580      	push	{r7, lr}
 8005322:	b08c      	sub	sp, #48	; 0x30
 8005324:	af04      	add	r7, sp, #16
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fc31 	bl	8006b9c <pvPortMalloc>
 800533a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d013      	beq.n	800536a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005342:	20a0      	movs	r0, #160	; 0xa0
 8005344:	f001 fc2a 	bl	8006b9c <pvPortMalloc>
 8005348:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005350:	22a0      	movs	r2, #160	; 0xa0
 8005352:	2100      	movs	r1, #0
 8005354:	69f8      	ldr	r0, [r7, #28]
 8005356:	f003 f9ad 	bl	80086b4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
 8005360:	e005      	b.n	800536e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005362:	6978      	ldr	r0, [r7, #20]
 8005364:	f001 fcd4 	bl	8006d10 <vPortFree>
 8005368:	e001      	b.n	800536e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d017      	beq.n	80053a4 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	2300      	movs	r3, #0
 8005380:	9303      	str	r3, [sp, #12]
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	9302      	str	r3, [sp, #8]
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f80e 	bl	80053b4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005398:	69f8      	ldr	r0, [r7, #28]
 800539a:	f000 f8a7 	bl	80054ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800539e:	2301      	movs	r3, #1
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e002      	b.n	80053aa <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295
 80053a8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80053aa:	69bb      	ldr	r3, [r7, #24]
    }
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053cc:	3b01      	subs	r3, #1
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <prvInitialiseNewTask+0x48>
        __asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	617b      	str	r3, [r7, #20]
    }
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01e      	beq.n	8005440 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	e012      	b.n	800542e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	7819      	ldrb	r1, [r3, #0]
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	3334      	adds	r3, #52	; 0x34
 8005418:	460a      	mov	r2, r1
 800541a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d006      	beq.n	8005436 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	3301      	adds	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2b0f      	cmp	r3, #15
 8005432:	d9e9      	bls.n	8005408 <prvInitialiseNewTask+0x54>
 8005434:	e000      	b.n	8005438 <prvInitialiseNewTask+0x84>
            {
                break;
 8005436:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2b06      	cmp	r3, #6
 8005444:	d90a      	bls.n	800545c <prvInitialiseNewTask+0xa8>
        __asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	613b      	str	r3, [r7, #16]
    }
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2b06      	cmp	r3, #6
 8005460:	d901      	bls.n	8005466 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005462:	2306      	movs	r3, #6
 8005464:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005470:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	3304      	adds	r3, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fb06 	bl	8004a88 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	3318      	adds	r3, #24
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fb01 	bl	8004a88 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	f1c3 0207 	rsb	r2, r3, #7
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549a:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	334c      	adds	r3, #76	; 0x4c
 80054a0:	224c      	movs	r2, #76	; 0x4c
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 f905 	bl	80086b4 <memset>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <prvInitialiseNewTask+0x12c>)
 80054ae:	651a      	str	r2, [r3, #80]	; 0x50
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <prvInitialiseNewTask+0x130>)
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	4a0b      	ldr	r2, [pc, #44]	; (80054e8 <prvInitialiseNewTask+0x134>)
 80054ba:	659a      	str	r2, [r3, #88]	; 0x58
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	69b8      	ldr	r0, [r7, #24]
 80054c2:	f001 f895 	bl	80065f0 <pxPortInitialiseStack>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80054d8:	bf00      	nop
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20001b9c 	.word	0x20001b9c
 80054e4:	20001c04 	.word	0x20001c04
 80054e8:	20001c6c 	.word	0x20001c6c

080054ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80054ec:	b5b0      	push	{r4, r5, r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80054f4:	f001 fa26 	bl	8006944 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80054f8:	4b4d      	ldr	r3, [pc, #308]	; (8005630 <prvAddNewTaskToReadyList+0x144>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a4c      	ldr	r2, [pc, #304]	; (8005630 <prvAddNewTaskToReadyList+0x144>)
 8005500:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005502:	4b4c      	ldr	r3, [pc, #304]	; (8005634 <prvAddNewTaskToReadyList+0x148>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800550a:	4a4a      	ldr	r2, [pc, #296]	; (8005634 <prvAddNewTaskToReadyList+0x148>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005510:	4b47      	ldr	r3, [pc, #284]	; (8005630 <prvAddNewTaskToReadyList+0x144>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d110      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005518:	f000 fcb2 	bl	8005e80 <prvInitialiseTaskLists>
 800551c:	e00d      	b.n	800553a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800551e:	4b46      	ldr	r3, [pc, #280]	; (8005638 <prvAddNewTaskToReadyList+0x14c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005526:	4b43      	ldr	r3, [pc, #268]	; (8005634 <prvAddNewTaskToReadyList+0x148>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d802      	bhi.n	800553a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005534:	4a3f      	ldr	r2, [pc, #252]	; (8005634 <prvAddNewTaskToReadyList+0x148>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800553a:	4b40      	ldr	r3, [pc, #256]	; (800563c <prvAddNewTaskToReadyList+0x150>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	4a3e      	ldr	r2, [pc, #248]	; (800563c <prvAddNewTaskToReadyList+0x150>)
 8005542:	6013      	str	r3, [r2, #0]
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <prvAddNewTaskToReadyList+0x8c>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	f002 fe89 	bl	8008264 <SEGGER_SYSVIEW_OnTaskCreate>
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	461d      	mov	r5, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461c      	mov	r4, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	1ae3      	subs	r3, r4, r3
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	462b      	mov	r3, r5
 8005574:	f001 fcde 	bl	8006f34 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4618      	mov	r0, r3
 800557c:	f002 fef6 	bl	800836c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	2201      	movs	r2, #1
 8005586:	409a      	lsls	r2, r3
 8005588:	4b2d      	ldr	r3, [pc, #180]	; (8005640 <prvAddNewTaskToReadyList+0x154>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4313      	orrs	r3, r2
 800558e:	4a2c      	ldr	r2, [pc, #176]	; (8005640 <prvAddNewTaskToReadyList+0x154>)
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005596:	492b      	ldr	r1, [pc, #172]	; (8005644 <prvAddNewTaskToReadyList+0x158>)
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	3304      	adds	r3, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	609a      	str	r2, [r3, #8]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	3204      	adds	r2, #4
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	1d1a      	adds	r2, r3, #4
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4a1b      	ldr	r2, [pc, #108]	; (8005644 <prvAddNewTaskToReadyList+0x158>)
 80055d6:	441a      	add	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	615a      	str	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	4918      	ldr	r1, [pc, #96]	; (8005644 <prvAddNewTaskToReadyList+0x158>)
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	4814      	ldr	r0, [pc, #80]	; (8005644 <prvAddNewTaskToReadyList+0x158>)
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4403      	add	r3, r0
 80055fc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80055fe:	f001 f9d1 	bl	80069a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <prvAddNewTaskToReadyList+0x14c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00e      	beq.n	8005628 <prvAddNewTaskToReadyList+0x13c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <prvAddNewTaskToReadyList+0x148>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	429a      	cmp	r2, r3
 8005616:	d207      	bcs.n	8005628 <prvAddNewTaskToReadyList+0x13c>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <prvAddNewTaskToReadyList+0x15c>)
 800561a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bdb0      	pop	{r4, r5, r7, pc}
 8005630:	2000053c 	.word	0x2000053c
 8005634:	2000043c 	.word	0x2000043c
 8005638:	20000548 	.word	0x20000548
 800563c:	20000558 	.word	0x20000558
 8005640:	20000544 	.word	0x20000544
 8005644:	20000440 	.word	0x20000440
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	; 0x28
 8005650:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800565a:	463a      	mov	r2, r7
 800565c:	1d39      	adds	r1, r7, #4
 800565e:	f107 0308 	add.w	r3, r7, #8
 8005662:	4618      	mov	r0, r3
 8005664:	f7fa ff7c 	bl	8000560 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	9202      	str	r2, [sp, #8]
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	2300      	movs	r3, #0
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	2300      	movs	r3, #0
 8005678:	460a      	mov	r2, r1
 800567a:	492b      	ldr	r1, [pc, #172]	; (8005728 <vTaskStartScheduler+0xdc>)
 800567c:	482b      	ldr	r0, [pc, #172]	; (800572c <vTaskStartScheduler+0xe0>)
 800567e:	f7ff fded 	bl	800525c <xTaskCreateStatic>
 8005682:	4603      	mov	r3, r0
 8005684:	4a2a      	ldr	r2, [pc, #168]	; (8005730 <vTaskStartScheduler+0xe4>)
 8005686:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8005688:	4b29      	ldr	r3, [pc, #164]	; (8005730 <vTaskStartScheduler+0xe4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8005690:	2301      	movs	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e001      	b.n	800569a <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d12e      	bne.n	80056fe <vTaskStartScheduler+0xb2>
        __asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	613b      	str	r3, [r7, #16]
    }
 80056b2:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80056b4:	4b1f      	ldr	r3, [pc, #124]	; (8005734 <vTaskStartScheduler+0xe8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	334c      	adds	r3, #76	; 0x4c
 80056ba:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <vTaskStartScheduler+0xec>)
 80056bc:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80056be:	4b1f      	ldr	r3, [pc, #124]	; (800573c <vTaskStartScheduler+0xf0>)
 80056c0:	f04f 32ff 	mov.w	r2, #4294967295
 80056c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80056c6:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <vTaskStartScheduler+0xf4>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <vTaskStartScheduler+0xf8>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80056d2:	4b18      	ldr	r3, [pc, #96]	; (8005734 <vTaskStartScheduler+0xe8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3334      	adds	r3, #52	; 0x34
 80056d8:	2205      	movs	r2, #5
 80056da:	4913      	ldr	r1, [pc, #76]	; (8005728 <vTaskStartScheduler+0xdc>)
 80056dc:	4618      	mov	r0, r3
 80056de:	f002 ffd9 	bl	8008694 <memcmp>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <vTaskStartScheduler+0xa8>
 80056e8:	4b12      	ldr	r3, [pc, #72]	; (8005734 <vTaskStartScheduler+0xe8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f002 fdfb 	bl	80082e8 <SEGGER_SYSVIEW_OnTaskStartExec>
 80056f2:	e001      	b.n	80056f8 <vTaskStartScheduler+0xac>
 80056f4:	f002 fd9a 	bl	800822c <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80056f8:	f001 f804 	bl	8006704 <xPortStartScheduler>
 80056fc:	e00e      	b.n	800571c <vTaskStartScheduler+0xd0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d10a      	bne.n	800571c <vTaskStartScheduler+0xd0>
        __asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	60fb      	str	r3, [r7, #12]
    }
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <vTaskStartScheduler+0xce>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <vTaskStartScheduler+0xfc>)
 800571e:	681b      	ldr	r3, [r3, #0]
}
 8005720:	bf00      	nop
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	080088bc 	.word	0x080088bc
 800572c:	08005e51 	.word	0x08005e51
 8005730:	20000560 	.word	0x20000560
 8005734:	2000043c 	.word	0x2000043c
 8005738:	20000060 	.word	0x20000060
 800573c:	2000055c 	.word	0x2000055c
 8005740:	20000548 	.word	0x20000548
 8005744:	20000540 	.word	0x20000540
 8005748:	2000000c 	.word	0x2000000c

0800574c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005750:	4b04      	ldr	r3, [pc, #16]	; (8005764 <vTaskSuspendAll+0x18>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	4a03      	ldr	r2, [pc, #12]	; (8005764 <vTaskSuspendAll+0x18>)
 8005758:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800575a:	bf00      	nop
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	20000564 	.word	0x20000564

08005768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005776:	4b73      	ldr	r3, [pc, #460]	; (8005944 <xTaskResumeAll+0x1dc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <xTaskResumeAll+0x2c>
        __asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	607b      	str	r3, [r7, #4]
    }
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005794:	f001 f8d6 	bl	8006944 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005798:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <xTaskResumeAll+0x1dc>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3b01      	subs	r3, #1
 800579e:	4a69      	ldr	r2, [pc, #420]	; (8005944 <xTaskResumeAll+0x1dc>)
 80057a0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057a2:	4b68      	ldr	r3, [pc, #416]	; (8005944 <xTaskResumeAll+0x1dc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 80c4 	bne.w	8005934 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057ac:	4b66      	ldr	r3, [pc, #408]	; (8005948 <xTaskResumeAll+0x1e0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80bf 	beq.w	8005934 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057b6:	e08e      	b.n	80058d6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b8:	4b64      	ldr	r3, [pc, #400]	; (800594c <xTaskResumeAll+0x1e4>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	6a12      	ldr	r2, [r2, #32]
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	69d2      	ldr	r2, [r2, #28]
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3318      	adds	r3, #24
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d103      	bne.n	80057ee <xTaskResumeAll+0x86>
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	6a1a      	ldr	r2, [r3, #32]
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	2200      	movs	r2, #0
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	1e5a      	subs	r2, r3, #1
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	68d2      	ldr	r2, [r2, #12]
 800580c:	609a      	str	r2, [r3, #8]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	6892      	ldr	r2, [r2, #8]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3304      	adds	r3, #4
 8005820:	429a      	cmp	r2, r3
 8005822:	d103      	bne.n	800582c <xTaskResumeAll+0xc4>
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	605a      	str	r2, [r3, #4]
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2200      	movs	r2, #0
 8005830:	615a      	str	r2, [r3, #20]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1e5a      	subs	r2, r3, #1
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4618      	mov	r0, r3
 8005840:	f002 fd94 	bl	800836c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	2201      	movs	r2, #1
 800584a:	409a      	lsls	r2, r3
 800584c:	4b40      	ldr	r3, [pc, #256]	; (8005950 <xTaskResumeAll+0x1e8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4313      	orrs	r3, r2
 8005852:	4a3f      	ldr	r2, [pc, #252]	; (8005950 <xTaskResumeAll+0x1e8>)
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585a:	493e      	ldr	r1, [pc, #248]	; (8005954 <xTaskResumeAll+0x1ec>)
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	3304      	adds	r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60bb      	str	r3, [r7, #8]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	609a      	str	r2, [r3, #8]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	3204      	adds	r2, #4
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	1d1a      	adds	r2, r3, #4
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	609a      	str	r2, [r3, #8]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4a2e      	ldr	r2, [pc, #184]	; (8005954 <xTaskResumeAll+0x1ec>)
 800589a:	441a      	add	r2, r3
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	615a      	str	r2, [r3, #20]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	492b      	ldr	r1, [pc, #172]	; (8005954 <xTaskResumeAll+0x1ec>)
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	4827      	ldr	r0, [pc, #156]	; (8005954 <xTaskResumeAll+0x1ec>)
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4403      	add	r3, r0
 80058c0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c6:	4b24      	ldr	r3, [pc, #144]	; (8005958 <xTaskResumeAll+0x1f0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d302      	bcc.n	80058d6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80058d0:	4b22      	ldr	r3, [pc, #136]	; (800595c <xTaskResumeAll+0x1f4>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058d6:	4b1d      	ldr	r3, [pc, #116]	; (800594c <xTaskResumeAll+0x1e4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f47f af6c 	bne.w	80057b8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80058e6:	f000 fb71 	bl	8005fcc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <xTaskResumeAll+0x1f8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d010      	beq.n	8005918 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80058f6:	f000 f843 	bl	8005980 <xTaskIncrementTick>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8005900:	4b16      	ldr	r3, [pc, #88]	; (800595c <xTaskResumeAll+0x1f4>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	3b01      	subs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f1      	bne.n	80058f6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8005912:	4b13      	ldr	r3, [pc, #76]	; (8005960 <xTaskResumeAll+0x1f8>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <xTaskResumeAll+0x1f4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005924:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <xTaskResumeAll+0x1fc>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005934:	f001 f836 	bl	80069a4 <vPortExitCritical>

    return xAlreadyYielded;
 8005938:	69bb      	ldr	r3, [r7, #24]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000564 	.word	0x20000564
 8005948:	2000053c 	.word	0x2000053c
 800594c:	200004fc 	.word	0x200004fc
 8005950:	20000544 	.word	0x20000544
 8005954:	20000440 	.word	0x20000440
 8005958:	2000043c 	.word	0x2000043c
 800595c:	20000550 	.word	0x20000550
 8005960:	2000054c 	.word	0x2000054c
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <uxTaskGetNumberOfTasks+0x14>)
 800596e:	681b      	ldr	r3, [r3, #0]
}
 8005970:	4618      	mov	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	2000053c 	.word	0x2000053c

08005980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598a:	4b7f      	ldr	r3, [pc, #508]	; (8005b88 <xTaskIncrementTick+0x208>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f040 80f0 	bne.w	8005b74 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005994:	4b7d      	ldr	r3, [pc, #500]	; (8005b8c <xTaskIncrementTick+0x20c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3301      	adds	r3, #1
 800599a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800599c:	4a7b      	ldr	r2, [pc, #492]	; (8005b8c <xTaskIncrementTick+0x20c>)
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d120      	bne.n	80059ea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80059a8:	4b79      	ldr	r3, [pc, #484]	; (8005b90 <xTaskIncrementTick+0x210>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <xTaskIncrementTick+0x48>
        __asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	607b      	str	r3, [r7, #4]
    }
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <xTaskIncrementTick+0x46>
 80059c8:	4b71      	ldr	r3, [pc, #452]	; (8005b90 <xTaskIncrementTick+0x210>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	4b71      	ldr	r3, [pc, #452]	; (8005b94 <xTaskIncrementTick+0x214>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6f      	ldr	r2, [pc, #444]	; (8005b90 <xTaskIncrementTick+0x210>)
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	4a6f      	ldr	r2, [pc, #444]	; (8005b94 <xTaskIncrementTick+0x214>)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	4b6e      	ldr	r3, [pc, #440]	; (8005b98 <xTaskIncrementTick+0x218>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	4a6d      	ldr	r2, [pc, #436]	; (8005b98 <xTaskIncrementTick+0x218>)
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	f000 faf1 	bl	8005fcc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80059ea:	4b6c      	ldr	r3, [pc, #432]	; (8005b9c <xTaskIncrementTick+0x21c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	f0c0 80aa 	bcc.w	8005b4a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f6:	4b66      	ldr	r3, [pc, #408]	; (8005b90 <xTaskIncrementTick+0x210>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a00:	4b66      	ldr	r3, [pc, #408]	; (8005b9c <xTaskIncrementTick+0x21c>)
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295
 8005a06:	601a      	str	r2, [r3, #0]
                    break;
 8005a08:	e09f      	b.n	8005b4a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0a:	4b61      	ldr	r3, [pc, #388]	; (8005b90 <xTaskIncrementTick+0x210>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d203      	bcs.n	8005a2a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005a22:	4a5e      	ldr	r2, [pc, #376]	; (8005b9c <xTaskIncrementTick+0x21c>)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005a28:	e08f      	b.n	8005b4a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	68d2      	ldr	r2, [r2, #12]
 8005a38:	609a      	str	r2, [r3, #8]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	6892      	ldr	r2, [r2, #8]
 8005a42:	605a      	str	r2, [r3, #4]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d103      	bne.n	8005a58 <xTaskIncrementTick+0xd8>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	615a      	str	r2, [r3, #20]
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	1e5a      	subs	r2, r3, #1
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01e      	beq.n	8005aae <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	6a12      	ldr	r2, [r2, #32]
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	69d2      	ldr	r2, [r2, #28]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	3318      	adds	r3, #24
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d103      	bne.n	8005a9e <xTaskIncrementTick+0x11e>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	6a1a      	ldr	r2, [r3, #32]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f002 fc5b 	bl	800836c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	2201      	movs	r2, #1
 8005abc:	409a      	lsls	r2, r3
 8005abe:	4b38      	ldr	r3, [pc, #224]	; (8005ba0 <xTaskIncrementTick+0x220>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	4a36      	ldr	r2, [pc, #216]	; (8005ba0 <xTaskIncrementTick+0x220>)
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	4935      	ldr	r1, [pc, #212]	; (8005ba4 <xTaskIncrementTick+0x224>)
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	3304      	adds	r3, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	60da      	str	r2, [r3, #12]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	3204      	adds	r2, #4
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	1d1a      	adds	r2, r3, #4
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <xTaskIncrementTick+0x224>)
 8005b0c:	441a      	add	r2, r3
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	615a      	str	r2, [r3, #20]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b16:	4923      	ldr	r1, [pc, #140]	; (8005ba4 <xTaskIncrementTick+0x224>)
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	1c59      	adds	r1, r3, #1
 8005b26:	481f      	ldr	r0, [pc, #124]	; (8005ba4 <xTaskIncrementTick+0x224>)
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4403      	add	r3, r0
 8005b32:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <xTaskIncrementTick+0x228>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	f67f af59 	bls.w	80059f6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b48:	e755      	b.n	80059f6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b4a:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <xTaskIncrementTick+0x228>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b50:	4914      	ldr	r1, [pc, #80]	; (8005ba4 <xTaskIncrementTick+0x224>)
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d901      	bls.n	8005b66 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005b66:	4b11      	ldr	r3, [pc, #68]	; (8005bac <xTaskIncrementTick+0x22c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
 8005b72:	e004      	b.n	8005b7e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005b74:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <xTaskIncrementTick+0x230>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	4a0d      	ldr	r2, [pc, #52]	; (8005bb0 <xTaskIncrementTick+0x230>)
 8005b7c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3728      	adds	r7, #40	; 0x28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000564 	.word	0x20000564
 8005b8c:	20000540 	.word	0x20000540
 8005b90:	200004f4 	.word	0x200004f4
 8005b94:	200004f8 	.word	0x200004f8
 8005b98:	20000554 	.word	0x20000554
 8005b9c:	2000055c 	.word	0x2000055c
 8005ba0:	20000544 	.word	0x20000544
 8005ba4:	20000440 	.word	0x20000440
 8005ba8:	2000043c 	.word	0x2000043c
 8005bac:	20000550 	.word	0x20000550
 8005bb0:	2000054c 	.word	0x2000054c

08005bb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bba:	4b32      	ldr	r3, [pc, #200]	; (8005c84 <vTaskSwitchContext+0xd0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005bc2:	4b31      	ldr	r3, [pc, #196]	; (8005c88 <vTaskSwitchContext+0xd4>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005bc8:	e057      	b.n	8005c7a <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8005bca:	4b2f      	ldr	r3, [pc, #188]	; (8005c88 <vTaskSwitchContext+0xd4>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd0:	4b2e      	ldr	r3, [pc, #184]	; (8005c8c <vTaskSwitchContext+0xd8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	fab3 f383 	clz	r3, r3
 8005bdc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005bde:	7afb      	ldrb	r3, [r7, #11]
 8005be0:	f1c3 031f 	rsb	r3, r3, #31
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	492a      	ldr	r1, [pc, #168]	; (8005c90 <vTaskSwitchContext+0xdc>)
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	607b      	str	r3, [r7, #4]
    }
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <vTaskSwitchContext+0x5a>
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4a1d      	ldr	r2, [pc, #116]	; (8005c90 <vTaskSwitchContext+0xdc>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3308      	adds	r3, #8
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d104      	bne.n	8005c40 <vTaskSwitchContext+0x8c>
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <vTaskSwitchContext+0xe0>)
 8005c48:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <vTaskSwitchContext+0xe0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3334      	adds	r3, #52	; 0x34
 8005c50:	2205      	movs	r2, #5
 8005c52:	4911      	ldr	r1, [pc, #68]	; (8005c98 <vTaskSwitchContext+0xe4>)
 8005c54:	4618      	mov	r0, r3
 8005c56:	f002 fd1d 	bl	8008694 <memcmp>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <vTaskSwitchContext+0xb8>
 8005c60:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <vTaskSwitchContext+0xe0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f002 fb3f 	bl	80082e8 <SEGGER_SYSVIEW_OnTaskStartExec>
 8005c6a:	e001      	b.n	8005c70 <vTaskSwitchContext+0xbc>
 8005c6c:	f002 fade 	bl	800822c <SEGGER_SYSVIEW_OnIdle>
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8005c70:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <vTaskSwitchContext+0xe0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	334c      	adds	r3, #76	; 0x4c
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <vTaskSwitchContext+0xe8>)
 8005c78:	6013      	str	r3, [r2, #0]
}
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000564 	.word	0x20000564
 8005c88:	20000550 	.word	0x20000550
 8005c8c:	20000544 	.word	0x20000544
 8005c90:	20000440 	.word	0x20000440
 8005c94:	2000043c 	.word	0x2000043c
 8005c98:	080088bc 	.word	0x080088bc
 8005c9c:	20000060 	.word	0x20000060

08005ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	60fb      	str	r3, [r7, #12]
    }
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	6a12      	ldr	r2, [r2, #32]
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	69d2      	ldr	r2, [r2, #28]
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	3318      	adds	r3, #24
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d103      	bne.n	8005cfa <xTaskRemoveFromEventList+0x5a>
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	6a1a      	ldr	r2, [r3, #32]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1e5a      	subs	r2, r3, #1
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0a:	4b4b      	ldr	r3, [pc, #300]	; (8005e38 <xTaskRemoveFromEventList+0x198>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d162      	bne.n	8005dd8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	6a3a      	ldr	r2, [r7, #32]
 8005d1e:	68d2      	ldr	r2, [r2, #12]
 8005d20:	609a      	str	r2, [r3, #8]
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	6a3a      	ldr	r2, [r7, #32]
 8005d28:	6892      	ldr	r2, [r2, #8]
 8005d2a:	605a      	str	r2, [r3, #4]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	3304      	adds	r3, #4
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d103      	bne.n	8005d40 <xTaskRemoveFromEventList+0xa0>
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	2200      	movs	r2, #0
 8005d44:	615a      	str	r2, [r3, #20]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	1e5a      	subs	r2, r3, #1
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f002 fb0a 	bl	800836c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	409a      	lsls	r2, r3
 8005d60:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <xTaskRemoveFromEventList+0x19c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	4a35      	ldr	r2, [pc, #212]	; (8005e3c <xTaskRemoveFromEventList+0x19c>)
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6e:	4934      	ldr	r1, [pc, #208]	; (8005e40 <xTaskRemoveFromEventList+0x1a0>)
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	609a      	str	r2, [r3, #8]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	6a3a      	ldr	r2, [r7, #32]
 8005d94:	3204      	adds	r2, #4
 8005d96:	605a      	str	r2, [r3, #4]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	1d1a      	adds	r2, r3, #4
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4a24      	ldr	r2, [pc, #144]	; (8005e40 <xTaskRemoveFromEventList+0x1a0>)
 8005dae:	441a      	add	r2, r3
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	615a      	str	r2, [r3, #20]
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db8:	4921      	ldr	r1, [pc, #132]	; (8005e40 <xTaskRemoveFromEventList+0x1a0>)
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	481d      	ldr	r0, [pc, #116]	; (8005e40 <xTaskRemoveFromEventList+0x1a0>)
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4403      	add	r3, r0
 8005dd4:	6019      	str	r1, [r3, #0]
 8005dd6:	e01b      	b.n	8005e10 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	; (8005e44 <xTaskRemoveFromEventList+0x1a4>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	61da      	str	r2, [r3, #28]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	621a      	str	r2, [r3, #32]
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	3218      	adds	r2, #24
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f103 0218 	add.w	r2, r3, #24
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	609a      	str	r2, [r3, #8]
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	4a10      	ldr	r2, [pc, #64]	; (8005e44 <xTaskRemoveFromEventList+0x1a4>)
 8005e04:	629a      	str	r2, [r3, #40]	; 0x28
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <xTaskRemoveFromEventList+0x1a4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	4a0d      	ldr	r2, [pc, #52]	; (8005e44 <xTaskRemoveFromEventList+0x1a4>)
 8005e0e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <xTaskRemoveFromEventList+0x1a8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d905      	bls.n	8005e2a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005e22:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <xTaskRemoveFromEventList+0x1ac>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e001      	b.n	8005e2e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3728      	adds	r7, #40	; 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000564 	.word	0x20000564
 8005e3c:	20000544 	.word	0x20000544
 8005e40:	20000440 	.word	0x20000440
 8005e44:	200004fc 	.word	0x200004fc
 8005e48:	2000043c 	.word	0x2000043c
 8005e4c:	20000550 	.word	0x20000550

08005e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005e58:	f000 f852 	bl	8005f00 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e5c:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <prvIdleTask+0x28>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d9f9      	bls.n	8005e58 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <prvIdleTask+0x2c>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005e74:	e7f0      	b.n	8005e58 <prvIdleTask+0x8>
 8005e76:	bf00      	nop
 8005e78:	20000440 	.word	0x20000440
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	e00c      	b.n	8005ea6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <prvInitialiseTaskLists+0x60>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fdd4 	bl	8004a48 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b06      	cmp	r3, #6
 8005eaa:	d9ef      	bls.n	8005e8c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005eac:	480d      	ldr	r0, [pc, #52]	; (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005eae:	f7fe fdcb 	bl	8004a48 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005eb2:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005eb4:	f7fe fdc8 	bl	8004a48 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005eb8:	480c      	ldr	r0, [pc, #48]	; (8005eec <prvInitialiseTaskLists+0x6c>)
 8005eba:	f7fe fdc5 	bl	8004a48 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005ebe:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <prvInitialiseTaskLists+0x70>)
 8005ec0:	f7fe fdc2 	bl	8004a48 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005ec4:	480b      	ldr	r0, [pc, #44]	; (8005ef4 <prvInitialiseTaskLists+0x74>)
 8005ec6:	f7fe fdbf 	bl	8004a48 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <prvInitialiseTaskLists+0x78>)
 8005ecc:	4a05      	ldr	r2, [pc, #20]	; (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005ece:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <prvInitialiseTaskLists+0x7c>)
 8005ed2:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005ed4:	601a      	str	r2, [r3, #0]
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000440 	.word	0x20000440
 8005ee4:	200004cc 	.word	0x200004cc
 8005ee8:	200004e0 	.word	0x200004e0
 8005eec:	200004fc 	.word	0x200004fc
 8005ef0:	20000510 	.word	0x20000510
 8005ef4:	20000528 	.word	0x20000528
 8005ef8:	200004f4 	.word	0x200004f4
 8005efc:	200004f8 	.word	0x200004f8

08005f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f06:	e019      	b.n	8005f3c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005f08:	f000 fd1c 	bl	8006944 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <prvCheckTasksWaitingTermination+0x50>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe fe1f 	bl	8004b5c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	4a0b      	ldr	r2, [pc, #44]	; (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f26:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	; (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f30:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005f32:	f000 fd37 	bl	80069a4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f810 	bl	8005f5c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e1      	bne.n	8005f08 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000510 	.word	0x20000510
 8005f54:	2000053c 	.word	0x2000053c
 8005f58:	20000524 	.word	0x20000524

08005f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8005f64:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <prvDeleteTCB+0x6c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	334c      	adds	r3, #76	; 0x4c
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f002 fbaa 	bl	80086c4 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d108      	bne.n	8005f8c <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fec6 	bl	8006d10 <vPortFree>
                vPortFree( pxTCB );
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fec3 	bl	8006d10 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005f8a:	e018      	b.n	8005fbe <prvDeleteTCB+0x62>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d103      	bne.n	8005f9e <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 feba 	bl	8006d10 <vPortFree>
    }
 8005f9c:	e00f      	b.n	8005fbe <prvDeleteTCB+0x62>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d00a      	beq.n	8005fbe <prvDeleteTCB+0x62>
        __asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	60fb      	str	r3, [r7, #12]
    }
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <prvDeleteTCB+0x60>
    }
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	2000043c 	.word	0x2000043c

08005fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <prvResetNextTaskUnblockTime+0x30>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <prvResetNextTaskUnblockTime+0x34>)
 8005fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005fe2:	e005      	b.n	8005ff0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <prvResetNextTaskUnblockTime+0x30>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a04      	ldr	r2, [pc, #16]	; (8006000 <prvResetNextTaskUnblockTime+0x34>)
 8005fee:	6013      	str	r3, [r2, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	200004f4 	.word	0x200004f4
 8006000:	2000055c 	.word	0x2000055c

08006004 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d068      	beq.n	80060ec <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800601a:	4b37      	ldr	r3, [pc, #220]	; (80060f8 <xTaskPriorityDisinherit+0xf4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	429a      	cmp	r2, r3
 8006022:	d00a      	beq.n	800603a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	60fb      	str	r3, [r7, #12]
    }
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	60bb      	str	r3, [r7, #8]
    }
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605c:	1e5a      	subs	r2, r3, #1
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	429a      	cmp	r2, r3
 800606c:	d03e      	beq.n	80060ec <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006072:	2b00      	cmp	r3, #0
 8006074:	d13a      	bne.n	80060ec <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	3304      	adds	r3, #4
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fd6e 	bl	8004b5c <uxListRemove>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	2201      	movs	r2, #1
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	43da      	mvns	r2, r3
 8006092:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <xTaskPriorityDisinherit+0xf8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4013      	ands	r3, r2
 8006098:	4a18      	ldr	r2, [pc, #96]	; (80060fc <xTaskPriorityDisinherit+0xf8>)
 800609a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4619      	mov	r1, r3
 80060a0:	204a      	movs	r0, #74	; 0x4a
 80060a2:	f001 fb59 	bl	8007758 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	f1c3 0207 	rsb	r2, r3, #7
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	2201      	movs	r2, #1
 80060c0:	409a      	lsls	r2, r3
 80060c2:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <xTaskPriorityDisinherit+0xf8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	4a0c      	ldr	r2, [pc, #48]	; (80060fc <xTaskPriorityDisinherit+0xf8>)
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4a09      	ldr	r2, [pc, #36]	; (8006100 <xTaskPriorityDisinherit+0xfc>)
 80060da:	441a      	add	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f7fe fcdd 	bl	8004aa2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80060ec:	697b      	ldr	r3, [r7, #20]
    }
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	2000043c 	.word	0x2000043c
 80060fc:	20000544 	.word	0x20000544
 8006100:	20000440 	.word	0x20000440

08006104 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	613b      	str	r3, [r7, #16]
    }
 800612a:	bf00      	nop
 800612c:	e7fe      	b.n	800612c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800612e:	f000 fc09 	bl	8006944 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006132:	4b36      	ldr	r3, [pc, #216]	; (800620c <xTaskGenericNotifyWait+0x108>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	339c      	adds	r3, #156	; 0x9c
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d022      	beq.n	800618a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006144:	4b31      	ldr	r3, [pc, #196]	; (800620c <xTaskGenericNotifyWait+0x108>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	3226      	adds	r2, #38	; 0x26
 800614c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	43d2      	mvns	r2, r2
 8006154:	4011      	ands	r1, r2
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	3226      	adds	r2, #38	; 0x26
 800615a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800615e:	4b2b      	ldr	r3, [pc, #172]	; (800620c <xTaskGenericNotifyWait+0x108>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	339c      	adds	r3, #156	; 0x9c
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006172:	2101      	movs	r1, #1
 8006174:	6a38      	ldr	r0, [r7, #32]
 8006176:	f000 f9bb 	bl	80064f0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800617a:	4b25      	ldr	r3, [pc, #148]	; (8006210 <xTaskGenericNotifyWait+0x10c>)
 800617c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800618a:	f000 fc0b 	bl	80069a4 <vPortExitCritical>

        taskENTER_CRITICAL();
 800618e:	f000 fbd9 	bl	8006944 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	2040      	movs	r0, #64	; 0x40
 80061a0:	f001 fbe6 	bl	8007970 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80061aa:	4b18      	ldr	r3, [pc, #96]	; (800620c <xTaskGenericNotifyWait+0x108>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	3226      	adds	r2, #38	; 0x26
 80061b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80061ba:	4b14      	ldr	r3, [pc, #80]	; (800620c <xTaskGenericNotifyWait+0x108>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	339c      	adds	r3, #156	; 0x9c
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d002      	beq.n	80061d2 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e00e      	b.n	80061f0 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80061d2:	4b0e      	ldr	r3, [pc, #56]	; (800620c <xTaskGenericNotifyWait+0x108>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	3226      	adds	r2, #38	; 0x26
 80061da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	43d2      	mvns	r2, r2
 80061e2:	4011      	ands	r1, r2
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	3226      	adds	r2, #38	; 0x26
 80061e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80061ec:	2301      	movs	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80061f0:	4b06      	ldr	r3, [pc, #24]	; (800620c <xTaskGenericNotifyWait+0x108>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	339c      	adds	r3, #156	; 0x9c
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80061fe:	f000 fbd1 	bl	80069a4 <vPortExitCritical>

        return xReturn;
 8006202:	697b      	ldr	r3, [r7, #20]
    }
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	2000043c 	.word	0x2000043c
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006214:	b580      	push	{r7, lr}
 8006216:	b094      	sub	sp, #80	; 0x50
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006222:	2301      	movs	r3, #1
 8006224:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00a      	beq.n	800625e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800625e:	f000 fc5d 	bl	8006b1c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8006266:	f3ef 8211 	mrs	r2, BASEPRI
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	623a      	str	r2, [r7, #32]
 800627c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800627e:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006280:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8006282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006284:	2b00      	cmp	r3, #0
 8006286:	d006      	beq.n	8006296 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	3226      	adds	r2, #38	; 0x26
 800628e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006294:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4413      	add	r3, r2
 800629c:	339c      	adds	r3, #156	; 0x9c
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80062a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4413      	add	r3, r2
 80062aa:	339c      	adds	r3, #156	; 0x9c
 80062ac:	2202      	movs	r2, #2
 80062ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d83b      	bhi.n	800632e <xTaskGenericNotifyFromISR+0x11a>
 80062b6:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <xTaskGenericNotifyFromISR+0xa8>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	0800634d 	.word	0x0800634d
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	080062ed 	.word	0x080062ed
 80062c8:	08006305 	.word	0x08006305
 80062cc:	08006313 	.word	0x08006313
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80062d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	3226      	adds	r2, #38	; 0x26
 80062d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	ea42 0103 	orr.w	r1, r2, r3
 80062e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	3226      	adds	r2, #38	; 0x26
 80062e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062ea:	e032      	b.n	8006352 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80062ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	3226      	adds	r2, #38	; 0x26
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	1c59      	adds	r1, r3, #1
 80062f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	3226      	adds	r2, #38	; 0x26
 80062fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006302:	e026      	b.n	8006352 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	3226      	adds	r2, #38	; 0x26
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006310:	e01f      	b.n	8006352 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006312:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006316:	2b02      	cmp	r3, #2
 8006318:	d006      	beq.n	8006328 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800631a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	3226      	adds	r2, #38	; 0x26
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006326:	e014      	b.n	8006352 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006328:	2300      	movs	r3, #0
 800632a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800632c:	e011      	b.n	8006352 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800632e:	4b69      	ldr	r3, [pc, #420]	; (80064d4 <xTaskGenericNotifyFromISR+0x2c0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	61bb      	str	r3, [r7, #24]
    }
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006350:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8006352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006354:	4618      	mov	r0, r3
 8006356:	f002 f84b 	bl	80083f0 <SEGGER_SYSVIEW_ShrinkId>
 800635a:	78f9      	ldrb	r1, [r7, #3]
 800635c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800635e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006360:	9201      	str	r2, [sp, #4]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	460b      	mov	r3, r1
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	4601      	mov	r1, r0
 800636a:	203f      	movs	r0, #63	; 0x3f
 800636c:	f001 fb92 	bl	8007a94 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006370:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006374:	2b01      	cmp	r3, #1
 8006376:	f040 80a2 	bne.w	80064be <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800637a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	617b      	str	r3, [r7, #20]
    }
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006398:	4b4f      	ldr	r3, [pc, #316]	; (80064d8 <xTaskGenericNotifyFromISR+0x2c4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d162      	bne.n	8006466 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80063a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30
 80063a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063ac:	68d2      	ldr	r2, [r2, #12]
 80063ae:	609a      	str	r2, [r3, #8]
 80063b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063b6:	6892      	ldr	r2, [r2, #8]
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c0:	3304      	adds	r3, #4
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d103      	bne.n	80063ce <xTaskGenericNotifyFromISR+0x1ba>
 80063c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	605a      	str	r2, [r3, #4]
 80063ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d0:	2200      	movs	r2, #0
 80063d2:	615a      	str	r2, [r3, #20]
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	1e5a      	subs	r2, r3, #1
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80063de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e0:	4618      	mov	r0, r3
 80063e2:	f001 ffc3 	bl	800836c <SEGGER_SYSVIEW_OnTaskStartReady>
 80063e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	2201      	movs	r2, #1
 80063ec:	409a      	lsls	r2, r3
 80063ee:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <xTaskGenericNotifyFromISR+0x2c8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	4a39      	ldr	r2, [pc, #228]	; (80064dc <xTaskGenericNotifyFromISR+0x2c8>)
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	4938      	ldr	r1, [pc, #224]	; (80064e0 <xTaskGenericNotifyFromISR+0x2cc>)
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	3304      	adds	r3, #4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800640e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641a:	60da      	str	r2, [r3, #12]
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006422:	3204      	adds	r2, #4
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006428:	1d1a      	adds	r2, r3, #4
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	609a      	str	r2, [r3, #8]
 800642e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4a29      	ldr	r2, [pc, #164]	; (80064e0 <xTaskGenericNotifyFromISR+0x2cc>)
 800643c:	441a      	add	r2, r3
 800643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006440:	615a      	str	r2, [r3, #20]
 8006442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	4926      	ldr	r1, [pc, #152]	; (80064e0 <xTaskGenericNotifyFromISR+0x2cc>)
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	4822      	ldr	r0, [pc, #136]	; (80064e0 <xTaskGenericNotifyFromISR+0x2cc>)
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4403      	add	r3, r0
 8006462:	6019      	str	r1, [r3, #0]
 8006464:	e01b      	b.n	800649e <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006466:	4b1f      	ldr	r3, [pc, #124]	; (80064e4 <xTaskGenericNotifyFromISR+0x2d0>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	637b      	str	r3, [r7, #52]	; 0x34
 800646c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006470:	61da      	str	r2, [r3, #28]
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006478:	621a      	str	r2, [r3, #32]
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006480:	3218      	adds	r2, #24
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006486:	f103 0218 	add.w	r2, r3, #24
 800648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648c:	609a      	str	r2, [r3, #8]
 800648e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006490:	4a14      	ldr	r2, [pc, #80]	; (80064e4 <xTaskGenericNotifyFromISR+0x2d0>)
 8006492:	629a      	str	r2, [r3, #40]	; 0x28
 8006494:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <xTaskGenericNotifyFromISR+0x2d0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	4a12      	ldr	r2, [pc, #72]	; (80064e4 <xTaskGenericNotifyFromISR+0x2d0>)
 800649c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800649e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a2:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <xTaskGenericNotifyFromISR+0x2d4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d908      	bls.n	80064be <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80064ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80064b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <xTaskGenericNotifyFromISR+0x2d8>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c0:	613b      	str	r3, [r7, #16]
        __asm volatile
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f383 8811 	msr	BASEPRI, r3
    }
 80064c8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80064ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80064cc:	4618      	mov	r0, r3
 80064ce:	3748      	adds	r7, #72	; 0x48
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20000540 	.word	0x20000540
 80064d8:	20000564 	.word	0x20000564
 80064dc:	20000544 	.word	0x20000544
 80064e0:	20000440 	.word	0x20000440
 80064e4:	200004fc 	.word	0x200004fc
 80064e8:	2000043c 	.word	0x2000043c
 80064ec:	20000550 	.word	0x20000550

080064f0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80064fa:	4b36      	ldr	r3, [pc, #216]	; (80065d4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006500:	4b35      	ldr	r3, [pc, #212]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3304      	adds	r3, #4
 8006506:	4618      	mov	r0, r3
 8006508:	f7fe fb28 	bl	8004b5c <uxListRemove>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10b      	bne.n	800652a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006512:	4b31      	ldr	r3, [pc, #196]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	2201      	movs	r2, #1
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	43da      	mvns	r2, r3
 8006520:	4b2e      	ldr	r3, [pc, #184]	; (80065dc <prvAddCurrentTaskToDelayedList+0xec>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4013      	ands	r3, r2
 8006526:	4a2d      	ldr	r2, [pc, #180]	; (80065dc <prvAddCurrentTaskToDelayedList+0xec>)
 8006528:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d124      	bne.n	800657c <prvAddCurrentTaskToDelayedList+0x8c>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d021      	beq.n	800657c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006538:	4b29      	ldr	r3, [pc, #164]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	4b26      	ldr	r3, [pc, #152]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	609a      	str	r2, [r3, #8]
 8006546:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	6892      	ldr	r2, [r2, #8]
 800654e:	60da      	str	r2, [r3, #12]
 8006550:	4b21      	ldr	r3, [pc, #132]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	3204      	adds	r2, #4
 800655a:	605a      	str	r2, [r3, #4]
 800655c:	4b1e      	ldr	r3, [pc, #120]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	609a      	str	r2, [r3, #8]
 8006566:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1d      	ldr	r2, [pc, #116]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800656c:	615a      	str	r2, [r3, #20]
 800656e:	4b1c      	ldr	r3, [pc, #112]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	4a1a      	ldr	r2, [pc, #104]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800657a:	e026      	b.n	80065ca <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4413      	add	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006584:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	429a      	cmp	r2, r3
 8006592:	d209      	bcs.n	80065a8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006594:	4b13      	ldr	r3, [pc, #76]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fe faa2 	bl	8004aea <vListInsert>
}
 80065a6:	e010      	b.n	80065ca <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a8:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <prvAddCurrentTaskToDelayedList+0xf8>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4619      	mov	r1, r3
 80065b4:	4610      	mov	r0, r2
 80065b6:	f7fe fa98 	bl	8004aea <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <prvAddCurrentTaskToDelayedList+0xfc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d202      	bcs.n	80065ca <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80065c4:	4a09      	ldr	r2, [pc, #36]	; (80065ec <prvAddCurrentTaskToDelayedList+0xfc>)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6013      	str	r3, [r2, #0]
}
 80065ca:	bf00      	nop
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000540 	.word	0x20000540
 80065d8:	2000043c 	.word	0x2000043c
 80065dc:	20000544 	.word	0x20000544
 80065e0:	20000528 	.word	0x20000528
 80065e4:	200004f8 	.word	0x200004f8
 80065e8:	200004f4 	.word	0x200004f4
 80065ec:	2000055c 	.word	0x2000055c

080065f0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3b04      	subs	r3, #4
 8006600:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006608:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3b04      	subs	r3, #4
 800660e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f023 0201 	bic.w	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3b04      	subs	r3, #4
 800661e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006620:	4a0c      	ldr	r2, [pc, #48]	; (8006654 <pxPortInitialiseStack+0x64>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3b14      	subs	r3, #20
 800662a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3b04      	subs	r3, #4
 8006636:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f06f 0202 	mvn.w	r2, #2
 800663e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3b20      	subs	r3, #32
 8006644:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006646:	68fb      	ldr	r3, [r7, #12]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	08006659 	.word	0x08006659

08006658 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <prvTaskExitError+0x54>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666a:	d00a      	beq.n	8006682 <prvTaskExitError+0x2a>
        __asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	60fb      	str	r3, [r7, #12]
    }
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <prvTaskExitError+0x28>
        __asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60bb      	str	r3, [r7, #8]
    }
 8006694:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006696:	bf00      	nop
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0fc      	beq.n	8006698 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	20000010 	.word	0x20000010

080066b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <pxCurrentTCBConst2>)
 80066b2:	6819      	ldr	r1, [r3, #0]
 80066b4:	6808      	ldr	r0, [r1, #0]
 80066b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	f380 8809 	msr	PSP, r0
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8811 	msr	BASEPRI, r0
 80066ca:	4770      	bx	lr
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst2>:
 80066d0:	2000043c 	.word	0x2000043c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80066d8:	4808      	ldr	r0, [pc, #32]	; (80066fc <prvPortStartFirstTask+0x24>)
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	6800      	ldr	r0, [r0, #0]
 80066de:	f380 8808 	msr	MSP, r0
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8814 	msr	CONTROL, r0
 80066ea:	b662      	cpsie	i
 80066ec:	b661      	cpsie	f
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	df00      	svc	0
 80066f8:	bf00      	nop
 80066fa:	0000      	.short	0x0000
 80066fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop

08006704 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800670a:	4b46      	ldr	r3, [pc, #280]	; (8006824 <xPortStartScheduler+0x120>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a46      	ldr	r2, [pc, #280]	; (8006828 <xPortStartScheduler+0x124>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10a      	bne.n	800672a <xPortStartScheduler+0x26>
        __asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	613b      	str	r3, [r7, #16]
    }
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800672a:	4b3e      	ldr	r3, [pc, #248]	; (8006824 <xPortStartScheduler+0x120>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a3f      	ldr	r2, [pc, #252]	; (800682c <xPortStartScheduler+0x128>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10a      	bne.n	800674a <xPortStartScheduler+0x46>
        __asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60fb      	str	r3, [r7, #12]
    }
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800674a:	4b39      	ldr	r3, [pc, #228]	; (8006830 <xPortStartScheduler+0x12c>)
 800674c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	22ff      	movs	r2, #255	; 0xff
 800675a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800676c:	b2da      	uxtb	r2, r3
 800676e:	4b31      	ldr	r3, [pc, #196]	; (8006834 <xPortStartScheduler+0x130>)
 8006770:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006772:	4b31      	ldr	r3, [pc, #196]	; (8006838 <xPortStartScheduler+0x134>)
 8006774:	2207      	movs	r2, #7
 8006776:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006778:	e009      	b.n	800678e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800677a:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <xPortStartScheduler+0x134>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3b01      	subs	r3, #1
 8006780:	4a2d      	ldr	r2, [pc, #180]	; (8006838 <xPortStartScheduler+0x134>)
 8006782:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d0ef      	beq.n	800677a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800679a:	4b27      	ldr	r3, [pc, #156]	; (8006838 <xPortStartScheduler+0x134>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f1c3 0307 	rsb	r3, r3, #7
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d00a      	beq.n	80067bc <xPortStartScheduler+0xb8>
        __asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	60bb      	str	r3, [r7, #8]
    }
 80067b8:	bf00      	nop
 80067ba:	e7fe      	b.n	80067ba <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <xPortStartScheduler+0x134>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <xPortStartScheduler+0x134>)
 80067c4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067c6:	4b1c      	ldr	r3, [pc, #112]	; (8006838 <xPortStartScheduler+0x134>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067ce:	4a1a      	ldr	r2, [pc, #104]	; (8006838 <xPortStartScheduler+0x134>)
 80067d0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80067da:	4b18      	ldr	r3, [pc, #96]	; (800683c <xPortStartScheduler+0x138>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a17      	ldr	r2, [pc, #92]	; (800683c <xPortStartScheduler+0x138>)
 80067e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80067e6:	4b15      	ldr	r3, [pc, #84]	; (800683c <xPortStartScheduler+0x138>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a14      	ldr	r2, [pc, #80]	; (800683c <xPortStartScheduler+0x138>)
 80067ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80067f2:	f000 f963 	bl	8006abc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80067f6:	4b12      	ldr	r3, [pc, #72]	; (8006840 <xPortStartScheduler+0x13c>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80067fc:	f000 f982 	bl	8006b04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006800:	4b10      	ldr	r3, [pc, #64]	; (8006844 <xPortStartScheduler+0x140>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a0f      	ldr	r2, [pc, #60]	; (8006844 <xPortStartScheduler+0x140>)
 8006806:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800680a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800680c:	f7ff ff64 	bl	80066d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006810:	f7ff f9d0 	bl	8005bb4 <vTaskSwitchContext>
    prvTaskExitError();
 8006814:	f7ff ff20 	bl	8006658 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	e000ed00 	.word	0xe000ed00
 8006828:	410fc271 	.word	0x410fc271
 800682c:	410fc270 	.word	0x410fc270
 8006830:	e000e400 	.word	0xe000e400
 8006834:	20000568 	.word	0x20000568
 8006838:	2000056c 	.word	0x2000056c
 800683c:	e000ed20 	.word	0xe000ed20
 8006840:	20000010 	.word	0x20000010
 8006844:	e000ef34 	.word	0xe000ef34

08006848 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800684e:	4b37      	ldr	r3, [pc, #220]	; (800692c <vInitPrioGroupValue+0xe4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a37      	ldr	r2, [pc, #220]	; (8006930 <vInitPrioGroupValue+0xe8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d10a      	bne.n	800686e <vInitPrioGroupValue+0x26>
        __asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	613b      	str	r3, [r7, #16]
    }
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800686e:	4b2f      	ldr	r3, [pc, #188]	; (800692c <vInitPrioGroupValue+0xe4>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a30      	ldr	r2, [pc, #192]	; (8006934 <vInitPrioGroupValue+0xec>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d10a      	bne.n	800688e <vInitPrioGroupValue+0x46>
        __asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
    }
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800688e:	4b2a      	ldr	r3, [pc, #168]	; (8006938 <vInitPrioGroupValue+0xf0>)
 8006890:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	22ff      	movs	r2, #255	; 0xff
 800689e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	4b22      	ldr	r3, [pc, #136]	; (800693c <vInitPrioGroupValue+0xf4>)
 80068b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068b6:	4b22      	ldr	r3, [pc, #136]	; (8006940 <vInitPrioGroupValue+0xf8>)
 80068b8:	2207      	movs	r2, #7
 80068ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068bc:	e009      	b.n	80068d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80068be:	4b20      	ldr	r3, [pc, #128]	; (8006940 <vInitPrioGroupValue+0xf8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	4a1e      	ldr	r2, [pc, #120]	; (8006940 <vInitPrioGroupValue+0xf8>)
 80068c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068d2:	78fb      	ldrb	r3, [r7, #3]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068da:	2b80      	cmp	r3, #128	; 0x80
 80068dc:	d0ef      	beq.n	80068be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068de:	4b18      	ldr	r3, [pc, #96]	; (8006940 <vInitPrioGroupValue+0xf8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f1c3 0307 	rsb	r3, r3, #7
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d00a      	beq.n	8006900 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	60bb      	str	r3, [r7, #8]
    }
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006900:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <vInitPrioGroupValue+0xf8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	4a0e      	ldr	r2, [pc, #56]	; (8006940 <vInitPrioGroupValue+0xf8>)
 8006908:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <vInitPrioGroupValue+0xf8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006912:	4a0b      	ldr	r2, [pc, #44]	; (8006940 <vInitPrioGroupValue+0xf8>)
 8006914:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	b2da      	uxtb	r2, r3
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	e000ed00 	.word	0xe000ed00
 8006930:	410fc271 	.word	0x410fc271
 8006934:	410fc270 	.word	0x410fc270
 8006938:	e000e400 	.word	0xe000e400
 800693c:	20000568 	.word	0x20000568
 8006940:	2000056c 	.word	0x2000056c

08006944 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
        __asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	607b      	str	r3, [r7, #4]
    }
 800695c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <vPortEnterCritical+0x58>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	4a0d      	ldr	r2, [pc, #52]	; (800699c <vPortEnterCritical+0x58>)
 8006966:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <vPortEnterCritical+0x58>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10f      	bne.n	8006990 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <vPortEnterCritical+0x5c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <vPortEnterCritical+0x4c>
        __asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	603b      	str	r3, [r7, #0]
    }
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <vPortEnterCritical+0x4a>
    }
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20000010 	.word	0x20000010
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80069aa:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <vPortExitCritical+0x50>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <vPortExitCritical+0x24>
        __asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	607b      	str	r3, [r7, #4]
    }
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80069c8:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <vPortExitCritical+0x50>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <vPortExitCritical+0x50>)
 80069d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80069d2:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <vPortExitCritical+0x50>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d105      	bne.n	80069e6 <vPortExitCritical+0x42>
 80069da:	2300      	movs	r3, #0
 80069dc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f383 8811 	msr	BASEPRI, r3
    }
 80069e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000010 	.word	0x20000010
	...

08006a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006a00:	f3ef 8009 	mrs	r0, PSP
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <pxCurrentTCBConst>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	f01e 0f10 	tst.w	lr, #16
 8006a10:	bf08      	it	eq
 8006a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1a:	6010      	str	r0, [r2, #0]
 8006a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a24:	f380 8811 	msr	BASEPRI, r0
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f7ff f8c0 	bl	8005bb4 <vTaskSwitchContext>
 8006a34:	f04f 0000 	mov.w	r0, #0
 8006a38:	f380 8811 	msr	BASEPRI, r0
 8006a3c:	bc09      	pop	{r0, r3}
 8006a3e:	6819      	ldr	r1, [r3, #0]
 8006a40:	6808      	ldr	r0, [r1, #0]
 8006a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a46:	f01e 0f10 	tst.w	lr, #16
 8006a4a:	bf08      	it	eq
 8006a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a50:	f380 8809 	msr	PSP, r0
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	f3af 8000 	nop.w

08006a60 <pxCurrentTCBConst>:
 8006a60:	2000043c 	.word	0x2000043c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
        __asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	607b      	str	r3, [r7, #4]
    }
 8006a80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006a82:	f001 fb59 	bl	8008138 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006a86:	f7fe ff7b 	bl	8005980 <xTaskIncrementTick>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d006      	beq.n	8006a9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8006a90:	f001 fbb0 	bl	80081f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a94:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <SysTick_Handler+0x50>)
 8006a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	e001      	b.n	8006aa2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8006a9e:	f001 fb8d 	bl	80081bc <SEGGER_SYSVIEW_RecordExitISR>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	f383 8811 	msr	BASEPRI, r3
    }
 8006aac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <vPortSetupTimerInterrupt+0x38>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <vPortSetupTimerInterrupt+0x3c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <vPortSetupTimerInterrupt+0x40>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	099b      	lsrs	r3, r3, #6
 8006ad8:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <vPortSetupTimerInterrupt+0x44>)
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ade:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	601a      	str	r2, [r3, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	e000e010 	.word	0xe000e010
 8006af4:	e000e018 	.word	0xe000e018
 8006af8:	20000000 	.word	0x20000000
 8006afc:	10624dd3 	.word	0x10624dd3
 8006b00:	e000e014 	.word	0xe000e014

08006b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b14 <vPortEnableVFP+0x10>
 8006b08:	6801      	ldr	r1, [r0, #0]
 8006b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b0e:	6001      	str	r1, [r0, #0]
 8006b10:	4770      	bx	lr
 8006b12:	0000      	.short	0x0000
 8006b14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop

08006b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006b22:	f3ef 8305 	mrs	r3, IPSR
 8006b26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d914      	bls.n	8006b58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b2e:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <vPortValidateInterruptPriority+0x70>)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <vPortValidateInterruptPriority+0x74>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	7afa      	ldrb	r2, [r7, #11]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d20a      	bcs.n	8006b58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	607b      	str	r3, [r7, #4]
    }
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b58:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <vPortValidateInterruptPriority+0x78>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b60:	4b0d      	ldr	r3, [pc, #52]	; (8006b98 <vPortValidateInterruptPriority+0x7c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d90a      	bls.n	8006b7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	603b      	str	r3, [r7, #0]
    }
 8006b7a:	bf00      	nop
 8006b7c:	e7fe      	b.n	8006b7c <vPortValidateInterruptPriority+0x60>
    }
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	e000e3f0 	.word	0xe000e3f0
 8006b90:	20000568 	.word	0x20000568
 8006b94:	e000ed0c 	.word	0xe000ed0c
 8006b98:	2000056c 	.word	0x2000056c

08006b9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08a      	sub	sp, #40	; 0x28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006ba8:	f7fe fdd0 	bl	800574c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006bac:	4b53      	ldr	r3, [pc, #332]	; (8006cfc <pvPortMalloc+0x160>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006bb4:	f000 f908 	bl	8006dc8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d012      	beq.n	8006be4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006bbe:	2208      	movs	r2, #8
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	3308      	adds	r3, #8
 8006bca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d804      	bhi.n	8006be0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	4413      	add	r3, r2
 8006bdc:	607b      	str	r3, [r7, #4]
 8006bde:	e001      	b.n	8006be4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	db70      	blt.n	8006ccc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d06d      	beq.n	8006ccc <pvPortMalloc+0x130>
 8006bf0:	4b43      	ldr	r3, [pc, #268]	; (8006d00 <pvPortMalloc+0x164>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d868      	bhi.n	8006ccc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006bfa:	4b42      	ldr	r3, [pc, #264]	; (8006d04 <pvPortMalloc+0x168>)
 8006bfc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006bfe:	4b41      	ldr	r3, [pc, #260]	; (8006d04 <pvPortMalloc+0x168>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c04:	e004      	b.n	8006c10 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d903      	bls.n	8006c22 <pvPortMalloc+0x86>
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f1      	bne.n	8006c06 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006c22:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <pvPortMalloc+0x160>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d04f      	beq.n	8006ccc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2208      	movs	r2, #8
 8006c32:	4413      	add	r3, r2
 8006c34:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	1ad2      	subs	r2, r2, r3
 8006c46:	2308      	movs	r3, #8
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d91f      	bls.n	8006c8e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4413      	add	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <pvPortMalloc+0xda>
        __asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	613b      	str	r3, [r7, #16]
    }
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	1ad2      	subs	r2, r2, r3
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c88:	6978      	ldr	r0, [r7, #20]
 8006c8a:	f000 f8f9 	bl	8006e80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c8e:	4b1c      	ldr	r3, [pc, #112]	; (8006d00 <pvPortMalloc+0x164>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	4a19      	ldr	r2, [pc, #100]	; (8006d00 <pvPortMalloc+0x164>)
 8006c9a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c9c:	4b18      	ldr	r3, [pc, #96]	; (8006d00 <pvPortMalloc+0x164>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <pvPortMalloc+0x16c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d203      	bcs.n	8006cb0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ca8:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <pvPortMalloc+0x164>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <pvPortMalloc+0x16c>)
 8006cae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006cc2:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <pvPortMalloc+0x170>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	4a10      	ldr	r2, [pc, #64]	; (8006d0c <pvPortMalloc+0x170>)
 8006cca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006ccc:	f7fe fd4c 	bl	8005768 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <pvPortMalloc+0x154>
        __asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	60fb      	str	r3, [r7, #12]
    }
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <pvPortMalloc+0x152>
    return pvReturn;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3728      	adds	r7, #40	; 0x28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20001518 	.word	0x20001518
 8006d00:	2000151c 	.word	0x2000151c
 8006d04:	20001510 	.word	0x20001510
 8006d08:	20001520 	.word	0x20001520
 8006d0c:	20001524 	.word	0x20001524

08006d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d049      	beq.n	8006db6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006d22:	2308      	movs	r3, #8
 8006d24:	425b      	negs	r3, r3
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4413      	add	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db0a      	blt.n	8006d4e <vPortFree+0x3e>
        __asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	60fb      	str	r3, [r7, #12]
    }
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <vPortFree+0x5c>
        __asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	60bb      	str	r3, [r7, #8]
    }
 8006d68:	bf00      	nop
 8006d6a:	e7fe      	b.n	8006d6a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	0fdb      	lsrs	r3, r3, #31
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01c      	beq.n	8006db6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d118      	bne.n	8006db6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006d90:	f7fe fcdc 	bl	800574c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <vPortFree+0xb0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	4a08      	ldr	r2, [pc, #32]	; (8006dc0 <vPortFree+0xb0>)
 8006da0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006da2:	6938      	ldr	r0, [r7, #16]
 8006da4:	f000 f86c 	bl	8006e80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <vPortFree+0xb4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	4a05      	ldr	r2, [pc, #20]	; (8006dc4 <vPortFree+0xb4>)
 8006db0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006db2:	f7fe fcd9 	bl	8005768 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006db6:	bf00      	nop
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	2000151c 	.word	0x2000151c
 8006dc4:	20001528 	.word	0x20001528

08006dc8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dce:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006dd2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006dd4:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <prvHeapInit+0xa4>)
 8006dd6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00c      	beq.n	8006dfc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3307      	adds	r3, #7
 8006de6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0307 	bic.w	r3, r3, #7
 8006dee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	4a1d      	ldr	r2, [pc, #116]	; (8006e6c <prvHeapInit+0xa4>)
 8006df8:	4413      	add	r3, r2
 8006dfa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e00:	4a1b      	ldr	r2, [pc, #108]	; (8006e70 <prvHeapInit+0xa8>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006e06:	4b1a      	ldr	r3, [pc, #104]	; (8006e70 <prvHeapInit+0xa8>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	4413      	add	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006e14:	2208      	movs	r2, #8
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1a9b      	subs	r3, r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0307 	bic.w	r3, r3, #7
 8006e22:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4a13      	ldr	r2, [pc, #76]	; (8006e74 <prvHeapInit+0xac>)
 8006e28:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006e2a:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <prvHeapInit+0xac>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <prvHeapInit+0xac>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <prvHeapInit+0xac>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	4a08      	ldr	r2, [pc, #32]	; (8006e78 <prvHeapInit+0xb0>)
 8006e56:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	4a07      	ldr	r2, [pc, #28]	; (8006e7c <prvHeapInit+0xb4>)
 8006e5e:	6013      	str	r3, [r2, #0]
}
 8006e60:	bf00      	nop
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	20000570 	.word	0x20000570
 8006e70:	20001510 	.word	0x20001510
 8006e74:	20001518 	.word	0x20001518
 8006e78:	20001520 	.word	0x20001520
 8006e7c:	2000151c 	.word	0x2000151c

08006e80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e88:	4b28      	ldr	r3, [pc, #160]	; (8006f2c <prvInsertBlockIntoFreeList+0xac>)
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e002      	b.n	8006e94 <prvInsertBlockIntoFreeList+0x14>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d8f7      	bhi.n	8006e8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d108      	bne.n	8006ec2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	441a      	add	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	441a      	add	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d118      	bne.n	8006f08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <prvInsertBlockIntoFreeList+0xb0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d00d      	beq.n	8006efe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	441a      	add	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	e008      	b.n	8006f10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <prvInsertBlockIntoFreeList+0xb0>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	e003      	b.n	8006f10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d002      	beq.n	8006f1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20001510 	.word	0x20001510
 8006f30:	20001518 	.word	0x20001518

08006f34 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006f42:	2205      	movs	r2, #5
 8006f44:	492b      	ldr	r1, [pc, #172]	; (8006ff4 <SYSVIEW_AddTask+0xc0>)
 8006f46:	68b8      	ldr	r0, [r7, #8]
 8006f48:	f001 fba4 	bl	8008694 <memcmp>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d04b      	beq.n	8006fea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006f52:	4b29      	ldr	r3, [pc, #164]	; (8006ff8 <SYSVIEW_AddTask+0xc4>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b07      	cmp	r3, #7
 8006f58:	d903      	bls.n	8006f62 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006f5a:	4828      	ldr	r0, [pc, #160]	; (8006ffc <SYSVIEW_AddTask+0xc8>)
 8006f5c:	f001 fb3e 	bl	80085dc <SEGGER_SYSVIEW_Warn>
    return;
 8006f60:	e044      	b.n	8006fec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006f62:	4b25      	ldr	r3, [pc, #148]	; (8006ff8 <SYSVIEW_AddTask+0xc4>)
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4926      	ldr	r1, [pc, #152]	; (8007000 <SYSVIEW_AddTask+0xcc>)
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006f76:	4b20      	ldr	r3, [pc, #128]	; (8006ff8 <SYSVIEW_AddTask+0xc4>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4921      	ldr	r1, [pc, #132]	; (8007000 <SYSVIEW_AddTask+0xcc>)
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	3304      	adds	r3, #4
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006f8c:	4b1a      	ldr	r3, [pc, #104]	; (8006ff8 <SYSVIEW_AddTask+0xc4>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	491b      	ldr	r1, [pc, #108]	; (8007000 <SYSVIEW_AddTask+0xcc>)
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006fa2:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <SYSVIEW_AddTask+0xc4>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4916      	ldr	r1, [pc, #88]	; (8007000 <SYSVIEW_AddTask+0xcc>)
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006fb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <SYSVIEW_AddTask+0xc4>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	4910      	ldr	r1, [pc, #64]	; (8007000 <SYSVIEW_AddTask+0xcc>)
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	3310      	adds	r3, #16
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <SYSVIEW_AddTask+0xc4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <SYSVIEW_AddTask+0xc4>)
 8006fd6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f80e 	bl	8007004 <SYSVIEW_SendTaskInfo>
 8006fe8:	e000      	b.n	8006fec <SYSVIEW_AddTask+0xb8>
    return;
 8006fea:	bf00      	nop

}
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	080088c4 	.word	0x080088c4
 8006ff8:	200015cc 	.word	0x200015cc
 8006ffc:	080088cc 	.word	0x080088cc
 8007000:	2000152c 	.word	0x2000152c

08007004 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	; 0x28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007012:	f107 0314 	add.w	r3, r7, #20
 8007016:	2214      	movs	r2, #20
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f001 fb4a 	bl	80086b4 <memset>
  TaskInfo.TaskID     = TaskID;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007034:	f107 0314 	add.w	r3, r7, #20
 8007038:	4618      	mov	r0, r3
 800703a:	f000 ff53 	bl	8007ee4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800703e:	bf00      	nop
 8007040:	3728      	adds	r7, #40	; 0x28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800704e:	4b26      	ldr	r3, [pc, #152]	; (80070e8 <_DoInit+0xa0>)
 8007050:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007052:	22a8      	movs	r2, #168	; 0xa8
 8007054:	2100      	movs	r1, #0
 8007056:	6838      	ldr	r0, [r7, #0]
 8007058:	f001 fb2c 	bl	80086b4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2203      	movs	r2, #3
 8007060:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2203      	movs	r2, #3
 8007066:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	4a20      	ldr	r2, [pc, #128]	; (80070ec <_DoInit+0xa4>)
 800706c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <_DoInit+0xa8>)
 8007072:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800707a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2200      	movs	r2, #0
 8007086:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2200      	movs	r2, #0
 800708c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	4a16      	ldr	r2, [pc, #88]	; (80070ec <_DoInit+0xa4>)
 8007092:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	4a17      	ldr	r2, [pc, #92]	; (80070f4 <_DoInit+0xac>)
 8007098:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2210      	movs	r2, #16
 800709e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2200      	movs	r2, #0
 80070a4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2200      	movs	r2, #0
 80070aa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80070b2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80070b6:	2300      	movs	r3, #0
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	e00c      	b.n	80070d6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f1c3 030f 	rsb	r3, r3, #15
 80070c2:	4a0d      	ldr	r2, [pc, #52]	; (80070f8 <_DoInit+0xb0>)
 80070c4:	5cd1      	ldrb	r1, [r2, r3]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4413      	add	r3, r2
 80070cc:	460a      	mov	r2, r1
 80070ce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3301      	adds	r3, #1
 80070d4:	607b      	str	r3, [r7, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b0f      	cmp	r3, #15
 80070da:	d9ef      	bls.n	80070bc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80070dc:	f3bf 8f5f 	dmb	sy
}
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	200015d0 	.word	0x200015d0
 80070ec:	0800891c 	.word	0x0800891c
 80070f0:	20001678 	.word	0x20001678
 80070f4:	20001a78 	.word	0x20001a78
 80070f8:	08008970 	.word	0x08008970

080070fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08c      	sub	sp, #48	; 0x30
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007108:	4b3e      	ldr	r3, [pc, #248]	; (8007204 <SEGGER_RTT_ReadNoLock+0x108>)
 800710a:	623b      	str	r3, [r7, #32]
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b53      	cmp	r3, #83	; 0x53
 8007114:	d001      	beq.n	800711a <SEGGER_RTT_ReadNoLock+0x1e>
 8007116:	f7ff ff97 	bl	8007048 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4613      	mov	r3, r2
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	4413      	add	r3, r2
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	3360      	adds	r3, #96	; 0x60
 8007126:	4a37      	ldr	r2, [pc, #220]	; (8007204 <SEGGER_RTT_ReadNoLock+0x108>)
 8007128:	4413      	add	r3, r2
 800712a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800713c:	2300      	movs	r3, #0
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	429a      	cmp	r2, r3
 8007146:	d92b      	bls.n	80071a0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4293      	cmp	r3, r2
 8007158:	bf28      	it	cs
 800715a:	4613      	movcs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	4413      	add	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	6939      	ldr	r1, [r7, #16]
 800716c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800716e:	f001 fb25 	bl	80087bc <memcpy>
    NumBytesRead += NumBytesRem;
 8007172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	4413      	add	r3, r2
 8007178:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800717a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	4413      	add	r3, r2
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800718a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	4413      	add	r3, r2
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007198:	429a      	cmp	r2, r3
 800719a:	d101      	bne.n	80071a0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800719c:	2300      	movs	r3, #0
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	bf28      	it	cs
 80071b0:	4613      	movcs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d019      	beq.n	80071ee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	4413      	add	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	6939      	ldr	r1, [r7, #16]
 80071c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071ca:	f001 faf7 	bl	80087bc <memcpy>
    NumBytesRead += NumBytesRem;
 80071ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	4413      	add	r3, r2
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80071d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	4413      	add	r3, r2
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80071e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	4413      	add	r3, r2
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3730      	adds	r7, #48	; 0x30
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	200015d0 	.word	0x200015d0

08007208 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	60fa      	str	r2, [r7, #12]
 800721e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b80      	cmp	r3, #128	; 0x80
 8007224:	d90a      	bls.n	800723c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8007226:	2380      	movs	r3, #128	; 0x80
 8007228:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800722a:	e007      	b.n	800723c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	1c53      	adds	r3, r2, #1
 8007230:	60bb      	str	r3, [r7, #8]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1c59      	adds	r1, r3, #1
 8007236:	60f9      	str	r1, [r7, #12]
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	1e5a      	subs	r2, r3, #1
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <_EncodeStr+0x46>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1ee      	bne.n	800722c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	b2da      	uxtb	r2, r3
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800725a:	68fb      	ldr	r3, [r7, #12]
}
 800725c:	4618      	mov	r0, r3
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3307      	adds	r3, #7
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007286:	4b34      	ldr	r3, [pc, #208]	; (8007358 <_HandleIncomingPacket+0xd8>)
 8007288:	7e1b      	ldrb	r3, [r3, #24]
 800728a:	4618      	mov	r0, r3
 800728c:	1cfb      	adds	r3, r7, #3
 800728e:	2201      	movs	r2, #1
 8007290:	4619      	mov	r1, r3
 8007292:	f7ff ff33 	bl	80070fc <SEGGER_RTT_ReadNoLock>
 8007296:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d057      	beq.n	800734e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	2b80      	cmp	r3, #128	; 0x80
 80072a2:	d031      	beq.n	8007308 <_HandleIncomingPacket+0x88>
 80072a4:	2b80      	cmp	r3, #128	; 0x80
 80072a6:	dc40      	bgt.n	800732a <_HandleIncomingPacket+0xaa>
 80072a8:	2b07      	cmp	r3, #7
 80072aa:	dc15      	bgt.n	80072d8 <_HandleIncomingPacket+0x58>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dd3c      	ble.n	800732a <_HandleIncomingPacket+0xaa>
 80072b0:	3b01      	subs	r3, #1
 80072b2:	2b06      	cmp	r3, #6
 80072b4:	d839      	bhi.n	800732a <_HandleIncomingPacket+0xaa>
 80072b6:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <_HandleIncomingPacket+0x3c>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072df 	.word	0x080072df
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	080072eb 	.word	0x080072eb
 80072c8:	080072f1 	.word	0x080072f1
 80072cc:	080072f7 	.word	0x080072f7
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	08007303 	.word	0x08007303
 80072d8:	2b7f      	cmp	r3, #127	; 0x7f
 80072da:	d033      	beq.n	8007344 <_HandleIncomingPacket+0xc4>
 80072dc:	e025      	b.n	800732a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80072de:	f000 fc87 	bl	8007bf0 <SEGGER_SYSVIEW_Start>
      break;
 80072e2:	e034      	b.n	800734e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80072e4:	f000 fd3e 	bl	8007d64 <SEGGER_SYSVIEW_Stop>
      break;
 80072e8:	e031      	b.n	800734e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80072ea:	f000 fef3 	bl	80080d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80072ee:	e02e      	b.n	800734e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80072f0:	f000 fedc 	bl	80080ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 80072f4:	e02b      	b.n	800734e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80072f6:	f000 fd5b 	bl	8007db0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80072fa:	e028      	b.n	800734e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80072fc:	f001 f930 	bl	8008560 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007300:	e025      	b.n	800734e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007302:	f001 f90f 	bl	8008524 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007306:	e022      	b.n	800734e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007308:	4b13      	ldr	r3, [pc, #76]	; (8007358 <_HandleIncomingPacket+0xd8>)
 800730a:	7e1b      	ldrb	r3, [r3, #24]
 800730c:	4618      	mov	r0, r3
 800730e:	1cfb      	adds	r3, r7, #3
 8007310:	2201      	movs	r2, #1
 8007312:	4619      	mov	r1, r3
 8007314:	f7ff fef2 	bl	80070fc <SEGGER_RTT_ReadNoLock>
 8007318:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d013      	beq.n	8007348 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	4618      	mov	r0, r3
 8007324:	f001 f874 	bl	8008410 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007328:	e00e      	b.n	8007348 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	b25b      	sxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	da0c      	bge.n	800734c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <_HandleIncomingPacket+0xd8>)
 8007334:	7e1b      	ldrb	r3, [r3, #24]
 8007336:	4618      	mov	r0, r3
 8007338:	1cfb      	adds	r3, r7, #3
 800733a:	2201      	movs	r2, #1
 800733c:	4619      	mov	r1, r3
 800733e:	f7ff fedd 	bl	80070fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007342:	e003      	b.n	800734c <_HandleIncomingPacket+0xcc>
      break;
 8007344:	bf00      	nop
 8007346:	e002      	b.n	800734e <_HandleIncomingPacket+0xce>
      break;
 8007348:	bf00      	nop
 800734a:	e000      	b.n	800734e <_HandleIncomingPacket+0xce>
      break;
 800734c:	bf00      	nop
    }
  }
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20001a88 	.word	0x20001a88

0800735c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b08c      	sub	sp, #48	; 0x30
 8007360:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007362:	2301      	movs	r3, #1
 8007364:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	3301      	adds	r3, #1
 800736a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007370:	4b31      	ldr	r3, [pc, #196]	; (8007438 <_TrySendOverflowPacket+0xdc>)
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	62bb      	str	r3, [r7, #40]	; 0x28
 8007376:	e00b      	b.n	8007390 <_TrySendOverflowPacket+0x34>
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	b2da      	uxtb	r2, r3
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	1c59      	adds	r1, r3, #1
 8007380:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	09db      	lsrs	r3, r3, #7
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	2b7f      	cmp	r3, #127	; 0x7f
 8007394:	d8f0      	bhi.n	8007378 <_TrySendOverflowPacket+0x1c>
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800739c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80073a6:	4b25      	ldr	r3, [pc, #148]	; (800743c <_TrySendOverflowPacket+0xe0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80073ac:	4b22      	ldr	r3, [pc, #136]	; (8007438 <_TrySendOverflowPacket+0xdc>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	623b      	str	r3, [r7, #32]
 80073be:	e00b      	b.n	80073d8 <_TrySendOverflowPacket+0x7c>
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	1c59      	adds	r1, r3, #1
 80073c8:	6279      	str	r1, [r7, #36]	; 0x24
 80073ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	09db      	lsrs	r3, r3, #7
 80073d6:	623b      	str	r3, [r7, #32]
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	2b7f      	cmp	r3, #127	; 0x7f
 80073dc:	d8f0      	bhi.n	80073c0 <_TrySendOverflowPacket+0x64>
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	627a      	str	r2, [r7, #36]	; 0x24
 80073e4:	6a3a      	ldr	r2, [r7, #32]
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80073ee:	4b12      	ldr	r3, [pc, #72]	; (8007438 <_TrySendOverflowPacket+0xdc>)
 80073f0:	785b      	ldrb	r3, [r3, #1]
 80073f2:	4618      	mov	r0, r3
 80073f4:	1d3b      	adds	r3, r7, #4
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	1d3b      	adds	r3, r7, #4
 80073fe:	4619      	mov	r1, r3
 8007400:	f7f8 fee6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007404:	4603      	mov	r3, r0
 8007406:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <_TrySendOverflowPacket+0xdc>)
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007414:	4b08      	ldr	r3, [pc, #32]	; (8007438 <_TrySendOverflowPacket+0xdc>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	3b01      	subs	r3, #1
 800741a:	b2da      	uxtb	r2, r3
 800741c:	4b06      	ldr	r3, [pc, #24]	; (8007438 <_TrySendOverflowPacket+0xdc>)
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e004      	b.n	800742c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <_TrySendOverflowPacket+0xdc>)
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	3301      	adds	r3, #1
 8007428:	4a03      	ldr	r2, [pc, #12]	; (8007438 <_TrySendOverflowPacket+0xdc>)
 800742a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800742c:	693b      	ldr	r3, [r7, #16]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3730      	adds	r7, #48	; 0x30
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20001a88 	.word	0x20001a88
 800743c:	e0001004 	.word	0xe0001004

08007440 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007440:	b580      	push	{r7, lr}
 8007442:	b08a      	sub	sp, #40	; 0x28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800744c:	4b98      	ldr	r3, [pc, #608]	; (80076b0 <_SendPacket+0x270>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d010      	beq.n	8007476 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007454:	4b96      	ldr	r3, [pc, #600]	; (80076b0 <_SendPacket+0x270>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 812d 	beq.w	80076b8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800745e:	4b94      	ldr	r3, [pc, #592]	; (80076b0 <_SendPacket+0x270>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b02      	cmp	r3, #2
 8007464:	d109      	bne.n	800747a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007466:	f7ff ff79 	bl	800735c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800746a:	4b91      	ldr	r3, [pc, #580]	; (80076b0 <_SendPacket+0x270>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b01      	cmp	r3, #1
 8007470:	f040 8124 	bne.w	80076bc <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8007474:	e001      	b.n	800747a <_SendPacket+0x3a>
    goto Send;
 8007476:	bf00      	nop
 8007478:	e000      	b.n	800747c <_SendPacket+0x3c>
Send:
 800747a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b1f      	cmp	r3, #31
 8007480:	d809      	bhi.n	8007496 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007482:	4b8b      	ldr	r3, [pc, #556]	; (80076b0 <_SendPacket+0x270>)
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	fa22 f303 	lsr.w	r3, r2, r3
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	f040 8115 	bne.w	80076c0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b17      	cmp	r3, #23
 800749a:	d807      	bhi.n	80074ac <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3b01      	subs	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	e0c4      	b.n	8007636 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2b7f      	cmp	r3, #127	; 0x7f
 80074b8:	d912      	bls.n	80074e0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	09da      	lsrs	r2, r3, #7
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	b2d2      	uxtb	r2, r2
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	3a01      	subs	r2, #1
 80074d2:	60fa      	str	r2, [r7, #12]
 80074d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	e006      	b.n	80074ee <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b7e      	cmp	r3, #126	; 0x7e
 80074f2:	d807      	bhi.n	8007504 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e098      	b.n	8007636 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800750a:	d212      	bcs.n	8007532 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	09da      	lsrs	r2, r3, #7
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3b01      	subs	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	3a01      	subs	r2, #1
 8007524:	60fa      	str	r2, [r7, #12]
 8007526:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800752a:	b2da      	uxtb	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	e081      	b.n	8007636 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007538:	d21d      	bcs.n	8007576 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	0b9a      	lsrs	r2, r3, #14
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3b01      	subs	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	09db      	lsrs	r3, r3, #7
 800754e:	b2db      	uxtb	r3, r3
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	3a01      	subs	r2, #1
 8007554:	60fa      	str	r2, [r7, #12]
 8007556:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800755a:	b2da      	uxtb	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	3a01      	subs	r2, #1
 8007568:	60fa      	str	r2, [r7, #12]
 800756a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800756e:	b2da      	uxtb	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	e05f      	b.n	8007636 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800757c:	d228      	bcs.n	80075d0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	0d5a      	lsrs	r2, r3, #21
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3b01      	subs	r3, #1
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	0b9b      	lsrs	r3, r3, #14
 8007592:	b2db      	uxtb	r3, r3
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	3a01      	subs	r2, #1
 8007598:	60fa      	str	r2, [r7, #12]
 800759a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	09db      	lsrs	r3, r3, #7
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	3a01      	subs	r2, #1
 80075ae:	60fa      	str	r2, [r7, #12]
 80075b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	3a01      	subs	r2, #1
 80075c2:	60fa      	str	r2, [r7, #12]
 80075c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	e032      	b.n	8007636 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	0f1a      	lsrs	r2, r3, #28
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	0d5b      	lsrs	r3, r3, #21
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	3a01      	subs	r2, #1
 80075ea:	60fa      	str	r2, [r7, #12]
 80075ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0b9b      	lsrs	r3, r3, #14
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	3a01      	subs	r2, #1
 8007600:	60fa      	str	r2, [r7, #12]
 8007602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007606:	b2da      	uxtb	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	09db      	lsrs	r3, r3, #7
 8007610:	b2db      	uxtb	r3, r3
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	3a01      	subs	r2, #1
 8007616:	60fa      	str	r2, [r7, #12]
 8007618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800761c:	b2da      	uxtb	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	3a01      	subs	r2, #1
 800762a:	60fa      	str	r2, [r7, #12]
 800762c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007630:	b2da      	uxtb	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007636:	4b1f      	ldr	r3, [pc, #124]	; (80076b4 <_SendPacket+0x274>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800763c:	4b1c      	ldr	r3, [pc, #112]	; (80076b0 <_SendPacket+0x270>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	623b      	str	r3, [r7, #32]
 800764e:	e00b      	b.n	8007668 <_SendPacket+0x228>
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	b2da      	uxtb	r2, r3
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	1c59      	adds	r1, r3, #1
 8007658:	6279      	str	r1, [r7, #36]	; 0x24
 800765a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	09db      	lsrs	r3, r3, #7
 8007666:	623b      	str	r3, [r7, #32]
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	2b7f      	cmp	r3, #127	; 0x7f
 800766c:	d8f0      	bhi.n	8007650 <_SendPacket+0x210>
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	627a      	str	r2, [r7, #36]	; 0x24
 8007674:	6a3a      	ldr	r2, [r7, #32]
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800767e:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <_SendPacket+0x270>)
 8007680:	785b      	ldrb	r3, [r3, #1]
 8007682:	4618      	mov	r0, r3
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	461a      	mov	r2, r3
 800768c:	68f9      	ldr	r1, [r7, #12]
 800768e:	f7f8 fd9f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007692:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800769a:	4a05      	ldr	r2, [pc, #20]	; (80076b0 <_SendPacket+0x270>)
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	60d3      	str	r3, [r2, #12]
 80076a0:	e00f      	b.n	80076c2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80076a2:	4b03      	ldr	r3, [pc, #12]	; (80076b0 <_SendPacket+0x270>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <_SendPacket+0x270>)
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	e008      	b.n	80076c2 <_SendPacket+0x282>
 80076b0:	20001a88 	.word	0x20001a88
 80076b4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80076b8:	bf00      	nop
 80076ba:	e002      	b.n	80076c2 <_SendPacket+0x282>
      goto SendDone;
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <_SendPacket+0x282>
      goto SendDone;
 80076c0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80076c2:	4b14      	ldr	r3, [pc, #80]	; (8007714 <_SendPacket+0x2d4>)
 80076c4:	7e1b      	ldrb	r3, [r3, #24]
 80076c6:	4619      	mov	r1, r3
 80076c8:	4a13      	ldr	r2, [pc, #76]	; (8007718 <_SendPacket+0x2d8>)
 80076ca:	460b      	mov	r3, r1
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	440b      	add	r3, r1
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	4413      	add	r3, r2
 80076d4:	336c      	adds	r3, #108	; 0x6c
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <_SendPacket+0x2d4>)
 80076da:	7e1b      	ldrb	r3, [r3, #24]
 80076dc:	4618      	mov	r0, r3
 80076de:	490e      	ldr	r1, [pc, #56]	; (8007718 <_SendPacket+0x2d8>)
 80076e0:	4603      	mov	r3, r0
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	4403      	add	r3, r0
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	440b      	add	r3, r1
 80076ea:	3370      	adds	r3, #112	; 0x70
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d00b      	beq.n	800770a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <_SendPacket+0x2d4>)
 80076f4:	789b      	ldrb	r3, [r3, #2]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d107      	bne.n	800770a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80076fa:	4b06      	ldr	r3, [pc, #24]	; (8007714 <_SendPacket+0x2d4>)
 80076fc:	2201      	movs	r2, #1
 80076fe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007700:	f7ff fdbe 	bl	8007280 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007704:	4b03      	ldr	r3, [pc, #12]	; (8007714 <_SendPacket+0x2d4>)
 8007706:	2200      	movs	r2, #0
 8007708:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800770a:	bf00      	nop
 800770c:	3728      	adds	r7, #40	; 0x28
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20001a88 	.word	0x20001a88
 8007718:	200015d0 	.word	0x200015d0

0800771c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007724:	f3ef 8311 	mrs	r3, BASEPRI
 8007728:	f04f 0120 	mov.w	r1, #32
 800772c:	f381 8811 	msr	BASEPRI, r1
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	4808      	ldr	r0, [pc, #32]	; (8007754 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007734:	f7ff fd98 	bl	8007268 <_PreparePacket>
 8007738:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	68b8      	ldr	r0, [r7, #8]
 8007740:	f7ff fe7e 	bl	8007440 <_SendPacket>
  RECORD_END();
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f383 8811 	msr	BASEPRI, r3
}
 800774a:	bf00      	nop
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20001ab8 	.word	0x20001ab8

08007758 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007762:	f3ef 8311 	mrs	r3, BASEPRI
 8007766:	f04f 0120 	mov.w	r1, #32
 800776a:	f381 8811 	msr	BASEPRI, r1
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	4816      	ldr	r0, [pc, #88]	; (80077cc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007772:	f7ff fd79 	bl	8007268 <_PreparePacket>
 8007776:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	e00b      	b.n	800779e <SEGGER_SYSVIEW_RecordU32+0x46>
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	1c59      	adds	r1, r3, #1
 800778e:	61f9      	str	r1, [r7, #28]
 8007790:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	09db      	lsrs	r3, r3, #7
 800779c:	61bb      	str	r3, [r7, #24]
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2b7f      	cmp	r3, #127	; 0x7f
 80077a2:	d8f0      	bhi.n	8007786 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	61fa      	str	r2, [r7, #28]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	b2d2      	uxtb	r2, r2
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	68f9      	ldr	r1, [r7, #12]
 80077b8:	6938      	ldr	r0, [r7, #16]
 80077ba:	f7ff fe41 	bl	8007440 <_SendPacket>
  RECORD_END();
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f383 8811 	msr	BASEPRI, r3
}
 80077c4:	bf00      	nop
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20001ab8 	.word	0x20001ab8

080077d0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08c      	sub	sp, #48	; 0x30
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80077dc:	f3ef 8311 	mrs	r3, BASEPRI
 80077e0:	f04f 0120 	mov.w	r1, #32
 80077e4:	f381 8811 	msr	BASEPRI, r1
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	4825      	ldr	r0, [pc, #148]	; (8007880 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80077ec:	f7ff fd3c 	bl	8007268 <_PreparePacket>
 80077f0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077fe:	e00b      	b.n	8007818 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	b2da      	uxtb	r2, r3
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	1c59      	adds	r1, r3, #1
 8007808:	62f9      	str	r1, [r7, #44]	; 0x2c
 800780a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	09db      	lsrs	r3, r3, #7
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	2b7f      	cmp	r3, #127	; 0x7f
 800781c:	d8f0      	bhi.n	8007800 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	623b      	str	r3, [r7, #32]
 8007836:	e00b      	b.n	8007850 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	b2da      	uxtb	r2, r3
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	1c59      	adds	r1, r3, #1
 8007840:	6279      	str	r1, [r7, #36]	; 0x24
 8007842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	09db      	lsrs	r3, r3, #7
 800784e:	623b      	str	r3, [r7, #32]
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2b7f      	cmp	r3, #127	; 0x7f
 8007854:	d8f0      	bhi.n	8007838 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	627a      	str	r2, [r7, #36]	; 0x24
 800785c:	6a3a      	ldr	r2, [r7, #32]
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	6979      	ldr	r1, [r7, #20]
 800786a:	69b8      	ldr	r0, [r7, #24]
 800786c:	f7ff fde8 	bl	8007440 <_SendPacket>
  RECORD_END();
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	f383 8811 	msr	BASEPRI, r3
}
 8007876:	bf00      	nop
 8007878:	3730      	adds	r7, #48	; 0x30
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20001ab8 	.word	0x20001ab8

08007884 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007884:	b580      	push	{r7, lr}
 8007886:	b08e      	sub	sp, #56	; 0x38
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007892:	f3ef 8311 	mrs	r3, BASEPRI
 8007896:	f04f 0120 	mov.w	r1, #32
 800789a:	f381 8811 	msr	BASEPRI, r1
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	4832      	ldr	r0, [pc, #200]	; (800796c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80078a2:	f7ff fce1 	bl	8007268 <_PreparePacket>
 80078a6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	633b      	str	r3, [r7, #48]	; 0x30
 80078b4:	e00b      	b.n	80078ce <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078bc:	1c59      	adds	r1, r3, #1
 80078be:	6379      	str	r1, [r7, #52]	; 0x34
 80078c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	09db      	lsrs	r3, r3, #7
 80078cc:	633b      	str	r3, [r7, #48]	; 0x30
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	2b7f      	cmp	r3, #127	; 0x7f
 80078d2:	d8f0      	bhi.n	80078b6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	637a      	str	r2, [r7, #52]	; 0x34
 80078da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078dc:	b2d2      	uxtb	r2, r2
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ec:	e00b      	b.n	8007906 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	1c59      	adds	r1, r3, #1
 80078f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80078f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	09db      	lsrs	r3, r3, #7
 8007904:	62bb      	str	r3, [r7, #40]	; 0x28
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	2b7f      	cmp	r3, #127	; 0x7f
 800790a:	d8f0      	bhi.n	80078ee <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	623b      	str	r3, [r7, #32]
 8007924:	e00b      	b.n	800793e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	b2da      	uxtb	r2, r3
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	1c59      	adds	r1, r3, #1
 800792e:	6279      	str	r1, [r7, #36]	; 0x24
 8007930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007934:	b2d2      	uxtb	r2, r2
 8007936:	701a      	strb	r2, [r3, #0]
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	09db      	lsrs	r3, r3, #7
 800793c:	623b      	str	r3, [r7, #32]
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	2b7f      	cmp	r3, #127	; 0x7f
 8007942:	d8f0      	bhi.n	8007926 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	627a      	str	r2, [r7, #36]	; 0x24
 800794a:	6a3a      	ldr	r2, [r7, #32]
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	6979      	ldr	r1, [r7, #20]
 8007958:	69b8      	ldr	r0, [r7, #24]
 800795a:	f7ff fd71 	bl	8007440 <_SendPacket>
  RECORD_END();
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	f383 8811 	msr	BASEPRI, r3
}
 8007964:	bf00      	nop
 8007966:	3738      	adds	r7, #56	; 0x38
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	20001ab8 	.word	0x20001ab8

08007970 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007970:	b580      	push	{r7, lr}
 8007972:	b090      	sub	sp, #64	; 0x40
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800797e:	f3ef 8311 	mrs	r3, BASEPRI
 8007982:	f04f 0120 	mov.w	r1, #32
 8007986:	f381 8811 	msr	BASEPRI, r1
 800798a:	61fb      	str	r3, [r7, #28]
 800798c:	4840      	ldr	r0, [pc, #256]	; (8007a90 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800798e:	f7ff fc6b 	bl	8007268 <_PreparePacket>
 8007992:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	63bb      	str	r3, [r7, #56]	; 0x38
 80079a0:	e00b      	b.n	80079ba <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a8:	1c59      	adds	r1, r3, #1
 80079aa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80079ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079b0:	b2d2      	uxtb	r2, r2
 80079b2:	701a      	strb	r2, [r3, #0]
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	09db      	lsrs	r3, r3, #7
 80079b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	2b7f      	cmp	r3, #127	; 0x7f
 80079be:	d8f0      	bhi.n	80079a2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80079c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	637b      	str	r3, [r7, #52]	; 0x34
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	633b      	str	r3, [r7, #48]	; 0x30
 80079d8:	e00b      	b.n	80079f2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e0:	1c59      	adds	r1, r3, #1
 80079e2:	6379      	str	r1, [r7, #52]	; 0x34
 80079e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079e8:	b2d2      	uxtb	r2, r2
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	09db      	lsrs	r3, r3, #7
 80079f0:	633b      	str	r3, [r7, #48]	; 0x30
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	2b7f      	cmp	r3, #127	; 0x7f
 80079f6:	d8f0      	bhi.n	80079da <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80079f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	637a      	str	r2, [r7, #52]	; 0x34
 80079fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a10:	e00b      	b.n	8007a2a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	1c59      	adds	r1, r3, #1
 8007a1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	09db      	lsrs	r3, r3, #7
 8007a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a2e:	d8f0      	bhi.n	8007a12 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
 8007a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a46:	623b      	str	r3, [r7, #32]
 8007a48:	e00b      	b.n	8007a62 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	1c59      	adds	r1, r3, #1
 8007a52:	6279      	str	r1, [r7, #36]	; 0x24
 8007a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	09db      	lsrs	r3, r3, #7
 8007a60:	623b      	str	r3, [r7, #32]
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	2b7f      	cmp	r3, #127	; 0x7f
 8007a66:	d8f0      	bhi.n	8007a4a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8007a6e:	6a3a      	ldr	r2, [r7, #32]
 8007a70:	b2d2      	uxtb	r2, r2
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	6979      	ldr	r1, [r7, #20]
 8007a7c:	69b8      	ldr	r0, [r7, #24]
 8007a7e:	f7ff fcdf 	bl	8007440 <_SendPacket>
  RECORD_END();
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	f383 8811 	msr	BASEPRI, r3
}
 8007a88:	bf00      	nop
 8007a8a:	3740      	adds	r7, #64	; 0x40
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	20001ab8 	.word	0x20001ab8

08007a94 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b092      	sub	sp, #72	; 0x48
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8007aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8007aa6:	f04f 0120 	mov.w	r1, #32
 8007aaa:	f381 8811 	msr	BASEPRI, r1
 8007aae:	61fb      	str	r3, [r7, #28]
 8007ab0:	484e      	ldr	r0, [pc, #312]	; (8007bec <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8007ab2:	f7ff fbd9 	bl	8007268 <_PreparePacket>
 8007ab6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac4:	e00b      	b.n	8007ade <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8007ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	6479      	str	r1, [r7, #68]	; 0x44
 8007ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ada:	09db      	lsrs	r3, r3, #7
 8007adc:	643b      	str	r3, [r7, #64]	; 0x40
 8007ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ae2:	d8f0      	bhi.n	8007ac6 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8007ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	647a      	str	r2, [r7, #68]	; 0x44
 8007aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007afc:	e00b      	b.n	8007b16 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b04:	1c59      	adds	r1, r3, #1
 8007b06:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007b08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	701a      	strb	r2, [r3, #0]
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	09db      	lsrs	r3, r3, #7
 8007b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	2b7f      	cmp	r3, #127	; 0x7f
 8007b1a:	d8f0      	bhi.n	8007afe <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	633b      	str	r3, [r7, #48]	; 0x30
 8007b34:	e00b      	b.n	8007b4e <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	1c59      	adds	r1, r3, #1
 8007b3e:	6379      	str	r1, [r7, #52]	; 0x34
 8007b40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	09db      	lsrs	r3, r3, #7
 8007b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	2b7f      	cmp	r3, #127	; 0x7f
 8007b52:	d8f0      	bhi.n	8007b36 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8007b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	637a      	str	r2, [r7, #52]	; 0x34
 8007b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	701a      	strb	r2, [r3, #0]
 8007b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6c:	e00b      	b.n	8007b86 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	1c59      	adds	r1, r3, #1
 8007b76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b7c:	b2d2      	uxtb	r2, r2
 8007b7e:	701a      	strb	r2, [r3, #0]
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	09db      	lsrs	r3, r3, #7
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b88:	2b7f      	cmp	r3, #127	; 0x7f
 8007b8a:	d8f0      	bhi.n	8007b6e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba2:	623b      	str	r3, [r7, #32]
 8007ba4:	e00b      	b.n	8007bbe <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	1c59      	adds	r1, r3, #1
 8007bae:	6279      	str	r1, [r7, #36]	; 0x24
 8007bb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	09db      	lsrs	r3, r3, #7
 8007bbc:	623b      	str	r3, [r7, #32]
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8007bc2:	d8f0      	bhi.n	8007ba6 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	627a      	str	r2, [r7, #36]	; 0x24
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	6979      	ldr	r1, [r7, #20]
 8007bd8:	69b8      	ldr	r0, [r7, #24]
 8007bda:	f7ff fc31 	bl	8007440 <_SendPacket>
  RECORD_END();
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	f383 8811 	msr	BASEPRI, r3
}
 8007be4:	bf00      	nop
 8007be6:	3748      	adds	r7, #72	; 0x48
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20001ab8 	.word	0x20001ab8

08007bf0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08c      	sub	sp, #48	; 0x30
 8007bf4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007bf6:	4b58      	ldr	r3, [pc, #352]	; (8007d58 <SEGGER_SYSVIEW_Start+0x168>)
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8007c00:	f04f 0120 	mov.w	r1, #32
 8007c04:	f381 8811 	msr	BASEPRI, r1
 8007c08:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007c0a:	4b53      	ldr	r3, [pc, #332]	; (8007d58 <SEGGER_SYSVIEW_Start+0x168>)
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	220a      	movs	r2, #10
 8007c10:	4952      	ldr	r1, [pc, #328]	; (8007d5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7f8 fadc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007c1e:	200a      	movs	r0, #10
 8007c20:	f7ff fd7c 	bl	800771c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c24:	f3ef 8311 	mrs	r3, BASEPRI
 8007c28:	f04f 0120 	mov.w	r1, #32
 8007c2c:	f381 8811 	msr	BASEPRI, r1
 8007c30:	60bb      	str	r3, [r7, #8]
 8007c32:	484b      	ldr	r0, [pc, #300]	; (8007d60 <SEGGER_SYSVIEW_Start+0x170>)
 8007c34:	f7ff fb18 	bl	8007268 <_PreparePacket>
 8007c38:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c42:	4b45      	ldr	r3, [pc, #276]	; (8007d58 <SEGGER_SYSVIEW_Start+0x168>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c48:	e00b      	b.n	8007c62 <SEGGER_SYSVIEW_Start+0x72>
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	1c59      	adds	r1, r3, #1
 8007c52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	701a      	strb	r2, [r3, #0]
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	09db      	lsrs	r3, r3, #7
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	2b7f      	cmp	r3, #127	; 0x7f
 8007c66:	d8f0      	bhi.n	8007c4a <SEGGER_SYSVIEW_Start+0x5a>
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7c:	4b36      	ldr	r3, [pc, #216]	; (8007d58 <SEGGER_SYSVIEW_Start+0x168>)
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	623b      	str	r3, [r7, #32]
 8007c82:	e00b      	b.n	8007c9c <SEGGER_SYSVIEW_Start+0xac>
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	1c59      	adds	r1, r3, #1
 8007c8c:	6279      	str	r1, [r7, #36]	; 0x24
 8007c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	09db      	lsrs	r3, r3, #7
 8007c9a:	623b      	str	r3, [r7, #32]
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca0:	d8f0      	bhi.n	8007c84 <SEGGER_SYSVIEW_Start+0x94>
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	627a      	str	r2, [r7, #36]	; 0x24
 8007ca8:	6a3a      	ldr	r2, [r7, #32]
 8007caa:	b2d2      	uxtb	r2, r2
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	61fb      	str	r3, [r7, #28]
 8007cb6:	4b28      	ldr	r3, [pc, #160]	; (8007d58 <SEGGER_SYSVIEW_Start+0x168>)
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	e00b      	b.n	8007cd6 <SEGGER_SYSVIEW_Start+0xe6>
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	1c59      	adds	r1, r3, #1
 8007cc6:	61f9      	str	r1, [r7, #28]
 8007cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ccc:	b2d2      	uxtb	r2, r2
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	09db      	lsrs	r3, r3, #7
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8007cda:	d8f0      	bhi.n	8007cbe <SEGGER_SYSVIEW_Start+0xce>
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	61fa      	str	r2, [r7, #28]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	b2d2      	uxtb	r2, r2
 8007ce6:	701a      	strb	r2, [r3, #0]
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	613b      	str	r3, [r7, #16]
 8007cf4:	e00b      	b.n	8007d0e <SEGGER_SYSVIEW_Start+0x11e>
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	1c59      	adds	r1, r3, #1
 8007cfe:	6179      	str	r1, [r7, #20]
 8007d00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	09db      	lsrs	r3, r3, #7
 8007d0c:	613b      	str	r3, [r7, #16]
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b7f      	cmp	r3, #127	; 0x7f
 8007d12:	d8f0      	bhi.n	8007cf6 <SEGGER_SYSVIEW_Start+0x106>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	617a      	str	r2, [r7, #20]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007d24:	2218      	movs	r2, #24
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fb89 	bl	8007440 <_SendPacket>
      RECORD_END();
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007d34:	4b08      	ldr	r3, [pc, #32]	; (8007d58 <SEGGER_SYSVIEW_Start+0x168>)
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <SEGGER_SYSVIEW_Start+0x168>)
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007d42:	f000 f9c7 	bl	80080d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007d46:	f000 f9b1 	bl	80080ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007d4a:	f000 fc09 	bl	8008560 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007d4e:	bf00      	nop
 8007d50:	3730      	adds	r7, #48	; 0x30
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20001a88 	.word	0x20001a88
 8007d5c:	08008984 	.word	0x08008984
 8007d60:	20001ab8 	.word	0x20001ab8

08007d64 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d6e:	f04f 0120 	mov.w	r1, #32
 8007d72:	f381 8811 	msr	BASEPRI, r1
 8007d76:	607b      	str	r3, [r7, #4]
 8007d78:	480b      	ldr	r0, [pc, #44]	; (8007da8 <SEGGER_SYSVIEW_Stop+0x44>)
 8007d7a:	f7ff fa75 	bl	8007268 <_PreparePacket>
 8007d7e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <SEGGER_SYSVIEW_Stop+0x48>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d007      	beq.n	8007d98 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007d88:	220b      	movs	r2, #11
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6838      	ldr	r0, [r7, #0]
 8007d8e:	f7ff fb57 	bl	8007440 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007d92:	4b06      	ldr	r3, [pc, #24]	; (8007dac <SEGGER_SYSVIEW_Stop+0x48>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f383 8811 	msr	BASEPRI, r3
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20001ab8 	.word	0x20001ab8
 8007dac:	20001a88 	.word	0x20001a88

08007db0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08c      	sub	sp, #48	; 0x30
 8007db4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007db6:	f3ef 8311 	mrs	r3, BASEPRI
 8007dba:	f04f 0120 	mov.w	r1, #32
 8007dbe:	f381 8811 	msr	BASEPRI, r1
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	4845      	ldr	r0, [pc, #276]	; (8007edc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007dc6:	f7ff fa4f 	bl	8007268 <_PreparePacket>
 8007dca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd4:	4b42      	ldr	r3, [pc, #264]	; (8007ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dda:	e00b      	b.n	8007df4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	1c59      	adds	r1, r3, #1
 8007de4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	09db      	lsrs	r3, r3, #7
 8007df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	2b7f      	cmp	r3, #127	; 0x7f
 8007df8:	d8f0      	bhi.n	8007ddc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0e:	4b34      	ldr	r3, [pc, #208]	; (8007ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	623b      	str	r3, [r7, #32]
 8007e14:	e00b      	b.n	8007e2e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	6279      	str	r1, [r7, #36]	; 0x24
 8007e20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	09db      	lsrs	r3, r3, #7
 8007e2c:	623b      	str	r3, [r7, #32]
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	2b7f      	cmp	r3, #127	; 0x7f
 8007e32:	d8f0      	bhi.n	8007e16 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	627a      	str	r2, [r7, #36]	; 0x24
 8007e3a:	6a3a      	ldr	r2, [r7, #32]
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	61fb      	str	r3, [r7, #28]
 8007e48:	4b25      	ldr	r3, [pc, #148]	; (8007ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	e00b      	b.n	8007e68 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	1c59      	adds	r1, r3, #1
 8007e58:	61f9      	str	r1, [r7, #28]
 8007e5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	09db      	lsrs	r3, r3, #7
 8007e66:	61bb      	str	r3, [r7, #24]
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e6c:	d8f0      	bhi.n	8007e50 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	61fa      	str	r2, [r7, #28]
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	2300      	movs	r3, #0
 8007e84:	613b      	str	r3, [r7, #16]
 8007e86:	e00b      	b.n	8007ea0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	1c59      	adds	r1, r3, #1
 8007e90:	6179      	str	r1, [r7, #20]
 8007e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	09db      	lsrs	r3, r3, #7
 8007e9e:	613b      	str	r3, [r7, #16]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ea4:	d8f0      	bhi.n	8007e88 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	617a      	str	r2, [r7, #20]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007eb6:	2218      	movs	r2, #24
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	68b8      	ldr	r0, [r7, #8]
 8007ebc:	f7ff fac0 	bl	8007440 <_SendPacket>
  RECORD_END();
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007ec6:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007ece:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	4798      	blx	r3
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3730      	adds	r7, #48	; 0x30
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20001ab8 	.word	0x20001ab8
 8007ee0:	20001a88 	.word	0x20001a88

08007ee4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b092      	sub	sp, #72	; 0x48
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007eec:	f3ef 8311 	mrs	r3, BASEPRI
 8007ef0:	f04f 0120 	mov.w	r1, #32
 8007ef4:	f381 8811 	msr	BASEPRI, r1
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	486a      	ldr	r0, [pc, #424]	; (80080a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007efc:	f7ff f9b4 	bl	8007268 <_PreparePacket>
 8007f00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	647b      	str	r3, [r7, #68]	; 0x44
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4b66      	ldr	r3, [pc, #408]	; (80080a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	643b      	str	r3, [r7, #64]	; 0x40
 8007f16:	e00b      	b.n	8007f30 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f1e:	1c59      	adds	r1, r3, #1
 8007f20:	6479      	str	r1, [r7, #68]	; 0x44
 8007f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	701a      	strb	r2, [r3, #0]
 8007f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2c:	09db      	lsrs	r3, r3, #7
 8007f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8007f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f32:	2b7f      	cmp	r3, #127	; 0x7f
 8007f34:	d8f0      	bhi.n	8007f18 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	647a      	str	r2, [r7, #68]	; 0x44
 8007f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f50:	e00b      	b.n	8007f6a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f58:	1c59      	adds	r1, r3, #1
 8007f5a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f60:	b2d2      	uxtb	r2, r2
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	09db      	lsrs	r3, r3, #7
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8007f6e:	d8f0      	bhi.n	8007f52 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f78:	b2d2      	uxtb	r2, r2
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	4619      	mov	r1, r3
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f7ff f93d 	bl	8007208 <_EncodeStr>
 8007f8e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007f90:	2209      	movs	r2, #9
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	6938      	ldr	r0, [r7, #16]
 8007f96:	f7ff fa53 	bl	8007440 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b40      	ldr	r3, [pc, #256]	; (80080a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	633b      	str	r3, [r7, #48]	; 0x30
 8007fae:	e00b      	b.n	8007fc8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb6:	1c59      	adds	r1, r3, #1
 8007fb8:	6379      	str	r1, [r7, #52]	; 0x34
 8007fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	09db      	lsrs	r3, r3, #7
 8007fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	2b7f      	cmp	r3, #127	; 0x7f
 8007fcc:	d8f0      	bhi.n	8007fb0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	637a      	str	r2, [r7, #52]	; 0x34
 8007fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	701a      	strb	r2, [r3, #0]
 8007fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fe8:	e00b      	b.n	8008002 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	1c59      	adds	r1, r3, #1
 8007ff2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	09db      	lsrs	r3, r3, #7
 8008000:	62bb      	str	r3, [r7, #40]	; 0x28
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	2b7f      	cmp	r3, #127	; 0x7f
 8008006:	d8f0      	bhi.n	8007fea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800800e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008010:	b2d2      	uxtb	r2, r2
 8008012:	701a      	strb	r2, [r3, #0]
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	623b      	str	r3, [r7, #32]
 8008022:	e00b      	b.n	800803c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	b2da      	uxtb	r2, r3
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	1c59      	adds	r1, r3, #1
 800802c:	6279      	str	r1, [r7, #36]	; 0x24
 800802e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008032:	b2d2      	uxtb	r2, r2
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	09db      	lsrs	r3, r3, #7
 800803a:	623b      	str	r3, [r7, #32]
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	2b7f      	cmp	r3, #127	; 0x7f
 8008040:	d8f0      	bhi.n	8008024 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	627a      	str	r2, [r7, #36]	; 0x24
 8008048:	6a3a      	ldr	r2, [r7, #32]
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	2300      	movs	r3, #0
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	e00b      	b.n	8008074 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	b2da      	uxtb	r2, r3
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	1c59      	adds	r1, r3, #1
 8008064:	61f9      	str	r1, [r7, #28]
 8008066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	09db      	lsrs	r3, r3, #7
 8008072:	61bb      	str	r3, [r7, #24]
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b7f      	cmp	r3, #127	; 0x7f
 8008078:	d8f0      	bhi.n	800805c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	61fa      	str	r2, [r7, #28]
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800808a:	2215      	movs	r2, #21
 800808c:	68f9      	ldr	r1, [r7, #12]
 800808e:	6938      	ldr	r0, [r7, #16]
 8008090:	f7ff f9d6 	bl	8007440 <_SendPacket>
  RECORD_END();
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f383 8811 	msr	BASEPRI, r3
}
 800809a:	bf00      	nop
 800809c:	3748      	adds	r7, #72	; 0x48
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20001ab8 	.word	0x20001ab8
 80080a8:	20001a88 	.word	0x20001a88

080080ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80080b0:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d008      	beq.n	80080ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80080c2:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	4798      	blx	r3
  }
}
 80080ca:	bf00      	nop
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20001a88 	.word	0x20001a88

080080d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80080d4:	b590      	push	{r4, r7, lr}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80080da:	4b15      	ldr	r3, [pc, #84]	; (8008130 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d01a      	beq.n	8008118 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80080e2:	4b13      	ldr	r3, [pc, #76]	; (8008130 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d015      	beq.n	8008118 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80080ec:	4b10      	ldr	r3, [pc, #64]	; (8008130 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4798      	blx	r3
 80080f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80080f8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80080fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080fe:	f04f 0200 	mov.w	r2, #0
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	000a      	movs	r2, r1
 8008108:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800810a:	4613      	mov	r3, r2
 800810c:	461a      	mov	r2, r3
 800810e:	4621      	mov	r1, r4
 8008110:	200d      	movs	r0, #13
 8008112:	f7ff fb5d 	bl	80077d0 <SEGGER_SYSVIEW_RecordU32x2>
 8008116:	e006      	b.n	8008126 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008118:	4b06      	ldr	r3, [pc, #24]	; (8008134 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4619      	mov	r1, r3
 800811e:	200c      	movs	r0, #12
 8008120:	f7ff fb1a 	bl	8007758 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	bd90      	pop	{r4, r7, pc}
 800812e:	bf00      	nop
 8008130:	20001a88 	.word	0x20001a88
 8008134:	e0001004 	.word	0xe0001004

08008138 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800813e:	f3ef 8311 	mrs	r3, BASEPRI
 8008142:	f04f 0120 	mov.w	r1, #32
 8008146:	f381 8811 	msr	BASEPRI, r1
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	4819      	ldr	r0, [pc, #100]	; (80081b4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800814e:	f7ff f88b 	bl	8007268 <_PreparePacket>
 8008152:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008158:	4b17      	ldr	r3, [pc, #92]	; (80081b8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008160:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	e00b      	b.n	8008184 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	b2da      	uxtb	r2, r3
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	1c59      	adds	r1, r3, #1
 8008174:	6179      	str	r1, [r7, #20]
 8008176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	09db      	lsrs	r3, r3, #7
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b7f      	cmp	r3, #127	; 0x7f
 8008188:	d8f0      	bhi.n	800816c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	617a      	str	r2, [r7, #20]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800819a:	2202      	movs	r2, #2
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	68b8      	ldr	r0, [r7, #8]
 80081a0:	f7ff f94e 	bl	8007440 <_SendPacket>
  RECORD_END();
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f383 8811 	msr	BASEPRI, r3
}
 80081aa:	bf00      	nop
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20001ab8 	.word	0x20001ab8
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80081c2:	f3ef 8311 	mrs	r3, BASEPRI
 80081c6:	f04f 0120 	mov.w	r1, #32
 80081ca:	f381 8811 	msr	BASEPRI, r1
 80081ce:	607b      	str	r3, [r7, #4]
 80081d0:	4807      	ldr	r0, [pc, #28]	; (80081f0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80081d2:	f7ff f849 	bl	8007268 <_PreparePacket>
 80081d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80081d8:	2203      	movs	r2, #3
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6838      	ldr	r0, [r7, #0]
 80081de:	f7ff f92f 	bl	8007440 <_SendPacket>
  RECORD_END();
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f383 8811 	msr	BASEPRI, r3
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20001ab8 	.word	0x20001ab8

080081f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80081fa:	f3ef 8311 	mrs	r3, BASEPRI
 80081fe:	f04f 0120 	mov.w	r1, #32
 8008202:	f381 8811 	msr	BASEPRI, r1
 8008206:	607b      	str	r3, [r7, #4]
 8008208:	4807      	ldr	r0, [pc, #28]	; (8008228 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800820a:	f7ff f82d 	bl	8007268 <_PreparePacket>
 800820e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008210:	2212      	movs	r2, #18
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6838      	ldr	r0, [r7, #0]
 8008216:	f7ff f913 	bl	8007440 <_SendPacket>
  RECORD_END();
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f383 8811 	msr	BASEPRI, r3
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20001ab8 	.word	0x20001ab8

0800822c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008232:	f3ef 8311 	mrs	r3, BASEPRI
 8008236:	f04f 0120 	mov.w	r1, #32
 800823a:	f381 8811 	msr	BASEPRI, r1
 800823e:	607b      	str	r3, [r7, #4]
 8008240:	4807      	ldr	r0, [pc, #28]	; (8008260 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008242:	f7ff f811 	bl	8007268 <_PreparePacket>
 8008246:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008248:	2211      	movs	r2, #17
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6838      	ldr	r0, [r7, #0]
 800824e:	f7ff f8f7 	bl	8007440 <_SendPacket>
  RECORD_END();
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f383 8811 	msr	BASEPRI, r3
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20001ab8 	.word	0x20001ab8

08008264 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800826c:	f3ef 8311 	mrs	r3, BASEPRI
 8008270:	f04f 0120 	mov.w	r1, #32
 8008274:	f381 8811 	msr	BASEPRI, r1
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	4819      	ldr	r0, [pc, #100]	; (80082e0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800827c:	f7fe fff4 	bl	8007268 <_PreparePacket>
 8008280:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008286:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	61fb      	str	r3, [r7, #28]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	61bb      	str	r3, [r7, #24]
 8008298:	e00b      	b.n	80082b2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	b2da      	uxtb	r2, r3
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	1c59      	adds	r1, r3, #1
 80082a2:	61f9      	str	r1, [r7, #28]
 80082a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	09db      	lsrs	r3, r3, #7
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b7f      	cmp	r3, #127	; 0x7f
 80082b6:	d8f0      	bhi.n	800829a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	61fa      	str	r2, [r7, #28]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80082c8:	2208      	movs	r2, #8
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	6938      	ldr	r0, [r7, #16]
 80082ce:	f7ff f8b7 	bl	8007440 <_SendPacket>
  RECORD_END();
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f383 8811 	msr	BASEPRI, r3
}
 80082d8:	bf00      	nop
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20001ab8 	.word	0x20001ab8
 80082e4:	20001a88 	.word	0x20001a88

080082e8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80082f0:	f3ef 8311 	mrs	r3, BASEPRI
 80082f4:	f04f 0120 	mov.w	r1, #32
 80082f8:	f381 8811 	msr	BASEPRI, r1
 80082fc:	617b      	str	r3, [r7, #20]
 80082fe:	4819      	ldr	r0, [pc, #100]	; (8008364 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008300:	f7fe ffb2 	bl	8007268 <_PreparePacket>
 8008304:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800830a:	4b17      	ldr	r3, [pc, #92]	; (8008368 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	61bb      	str	r3, [r7, #24]
 800831c:	e00b      	b.n	8008336 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	b2da      	uxtb	r2, r3
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	1c59      	adds	r1, r3, #1
 8008326:	61f9      	str	r1, [r7, #28]
 8008328:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	701a      	strb	r2, [r3, #0]
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	09db      	lsrs	r3, r3, #7
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b7f      	cmp	r3, #127	; 0x7f
 800833a:	d8f0      	bhi.n	800831e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	61fa      	str	r2, [r7, #28]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800834c:	2204      	movs	r2, #4
 800834e:	68f9      	ldr	r1, [r7, #12]
 8008350:	6938      	ldr	r0, [r7, #16]
 8008352:	f7ff f875 	bl	8007440 <_SendPacket>
  RECORD_END();
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f383 8811 	msr	BASEPRI, r3
}
 800835c:	bf00      	nop
 800835e:	3720      	adds	r7, #32
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20001ab8 	.word	0x20001ab8
 8008368:	20001a88 	.word	0x20001a88

0800836c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008374:	f3ef 8311 	mrs	r3, BASEPRI
 8008378:	f04f 0120 	mov.w	r1, #32
 800837c:	f381 8811 	msr	BASEPRI, r1
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	4819      	ldr	r0, [pc, #100]	; (80083e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008384:	f7fe ff70 	bl	8007268 <_PreparePacket>
 8008388:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800838e:	4b17      	ldr	r3, [pc, #92]	; (80083ec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	61fb      	str	r3, [r7, #28]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	61bb      	str	r3, [r7, #24]
 80083a0:	e00b      	b.n	80083ba <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	1c59      	adds	r1, r3, #1
 80083aa:	61f9      	str	r1, [r7, #28]
 80083ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083b0:	b2d2      	uxtb	r2, r2
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	09db      	lsrs	r3, r3, #7
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b7f      	cmp	r3, #127	; 0x7f
 80083be:	d8f0      	bhi.n	80083a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	61fa      	str	r2, [r7, #28]
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	b2d2      	uxtb	r2, r2
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80083d0:	2206      	movs	r2, #6
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	6938      	ldr	r0, [r7, #16]
 80083d6:	f7ff f833 	bl	8007440 <_SendPacket>
  RECORD_END();
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f383 8811 	msr	BASEPRI, r3
}
 80083e0:	bf00      	nop
 80083e2:	3720      	adds	r7, #32
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20001ab8 	.word	0x20001ab8
 80083ec:	20001a88 	.word	0x20001a88

080083f0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80083f8:	4b04      	ldr	r3, [pc, #16]	; (800840c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	1ad3      	subs	r3, r2, r3
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	20001a88 	.word	0x20001a88

08008410 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008410:	b580      	push	{r7, lr}
 8008412:	b08c      	sub	sp, #48	; 0x30
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800841a:	4b40      	ldr	r3, [pc, #256]	; (800851c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d077      	beq.n	8008512 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8008422:	4b3e      	ldr	r3, [pc, #248]	; (800851c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008428:	2300      	movs	r3, #0
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
 800842c:	e008      	b.n	8008440 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d007      	beq.n	800844a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	3301      	adds	r3, #1
 800843e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008444:	429a      	cmp	r2, r3
 8008446:	d3f2      	bcc.n	800842e <SEGGER_SYSVIEW_SendModule+0x1e>
 8008448:	e000      	b.n	800844c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800844a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d055      	beq.n	80084fe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008452:	f3ef 8311 	mrs	r3, BASEPRI
 8008456:	f04f 0120 	mov.w	r1, #32
 800845a:	f381 8811 	msr	BASEPRI, r1
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	482f      	ldr	r0, [pc, #188]	; (8008520 <SEGGER_SYSVIEW_SendModule+0x110>)
 8008462:	f7fe ff01 	bl	8007268 <_PreparePacket>
 8008466:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	627b      	str	r3, [r7, #36]	; 0x24
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	623b      	str	r3, [r7, #32]
 8008474:	e00b      	b.n	800848e <SEGGER_SYSVIEW_SendModule+0x7e>
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	b2da      	uxtb	r2, r3
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	1c59      	adds	r1, r3, #1
 800847e:	6279      	str	r1, [r7, #36]	; 0x24
 8008480:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008484:	b2d2      	uxtb	r2, r2
 8008486:	701a      	strb	r2, [r3, #0]
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	09db      	lsrs	r3, r3, #7
 800848c:	623b      	str	r3, [r7, #32]
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	2b7f      	cmp	r3, #127	; 0x7f
 8008492:	d8f0      	bhi.n	8008476 <SEGGER_SYSVIEW_SendModule+0x66>
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	627a      	str	r2, [r7, #36]	; 0x24
 800849a:	6a3a      	ldr	r2, [r7, #32]
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	61bb      	str	r3, [r7, #24]
 80084ae:	e00b      	b.n	80084c8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	1c59      	adds	r1, r3, #1
 80084b8:	61f9      	str	r1, [r7, #28]
 80084ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	09db      	lsrs	r3, r3, #7
 80084c6:	61bb      	str	r3, [r7, #24]
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	2b7f      	cmp	r3, #127	; 0x7f
 80084cc:	d8f0      	bhi.n	80084b0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	61fa      	str	r2, [r7, #28]
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	b2d2      	uxtb	r2, r2
 80084d8:	701a      	strb	r2, [r3, #0]
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2280      	movs	r2, #128	; 0x80
 80084e4:	4619      	mov	r1, r3
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7fe fe8e 	bl	8007208 <_EncodeStr>
 80084ec:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80084ee:	2216      	movs	r2, #22
 80084f0:	68f9      	ldr	r1, [r7, #12]
 80084f2:	6938      	ldr	r0, [r7, #16]
 80084f4:	f7fe ffa4 	bl	8007440 <_SendPacket>
      RECORD_END();
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d006      	beq.n	8008512 <SEGGER_SYSVIEW_SendModule+0x102>
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	4798      	blx	r3
    }
  }
}
 8008512:	bf00      	nop
 8008514:	3730      	adds	r7, #48	; 0x30
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20001ab0 	.word	0x20001ab0
 8008520:	20001ab8 	.word	0x20001ab8

08008524 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800852a:	4b0c      	ldr	r3, [pc, #48]	; (800855c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00f      	beq.n	8008552 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008532:	4b0a      	ldr	r3, [pc, #40]	; (800855c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f2      	bne.n	8008538 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20001ab0 	.word	0x20001ab0

08008560 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008566:	f3ef 8311 	mrs	r3, BASEPRI
 800856a:	f04f 0120 	mov.w	r1, #32
 800856e:	f381 8811 	msr	BASEPRI, r1
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	4817      	ldr	r0, [pc, #92]	; (80085d4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008576:	f7fe fe77 	bl	8007268 <_PreparePacket>
 800857a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	613b      	str	r3, [r7, #16]
 800858a:	e00b      	b.n	80085a4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	b2da      	uxtb	r2, r3
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	1c59      	adds	r1, r3, #1
 8008594:	6179      	str	r1, [r7, #20]
 8008596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	09db      	lsrs	r3, r3, #7
 80085a2:	613b      	str	r3, [r7, #16]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2b7f      	cmp	r3, #127	; 0x7f
 80085a8:	d8f0      	bhi.n	800858c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	617a      	str	r2, [r7, #20]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80085ba:	221b      	movs	r2, #27
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	68b8      	ldr	r0, [r7, #8]
 80085c0:	f7fe ff3e 	bl	8007440 <_SendPacket>
  RECORD_END();
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f383 8811 	msr	BASEPRI, r3
}
 80085ca:	bf00      	nop
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20001ab8 	.word	0x20001ab8
 80085d8:	20001ab4 	.word	0x20001ab4

080085dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80085e4:	f3ef 8311 	mrs	r3, BASEPRI
 80085e8:	f04f 0120 	mov.w	r1, #32
 80085ec:	f381 8811 	msr	BASEPRI, r1
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	4827      	ldr	r0, [pc, #156]	; (8008690 <SEGGER_SYSVIEW_Warn+0xb4>)
 80085f4:	f7fe fe38 	bl	8007268 <_PreparePacket>
 80085f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80085fa:	2280      	movs	r2, #128	; 0x80
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	6938      	ldr	r0, [r7, #16]
 8008600:	f7fe fe02 	bl	8007208 <_EncodeStr>
 8008604:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
 800860a:	2301      	movs	r3, #1
 800860c:	623b      	str	r3, [r7, #32]
 800860e:	e00b      	b.n	8008628 <SEGGER_SYSVIEW_Warn+0x4c>
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	1c59      	adds	r1, r3, #1
 8008618:	6279      	str	r1, [r7, #36]	; 0x24
 800861a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	09db      	lsrs	r3, r3, #7
 8008626:	623b      	str	r3, [r7, #32]
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	2b7f      	cmp	r3, #127	; 0x7f
 800862c:	d8f0      	bhi.n	8008610 <SEGGER_SYSVIEW_Warn+0x34>
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	627a      	str	r2, [r7, #36]	; 0x24
 8008634:	6a3a      	ldr	r2, [r7, #32]
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	2300      	movs	r3, #0
 8008644:	61bb      	str	r3, [r7, #24]
 8008646:	e00b      	b.n	8008660 <SEGGER_SYSVIEW_Warn+0x84>
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	b2da      	uxtb	r2, r3
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	1c59      	adds	r1, r3, #1
 8008650:	61f9      	str	r1, [r7, #28]
 8008652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	09db      	lsrs	r3, r3, #7
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b7f      	cmp	r3, #127	; 0x7f
 8008664:	d8f0      	bhi.n	8008648 <SEGGER_SYSVIEW_Warn+0x6c>
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	61fa      	str	r2, [r7, #28]
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008676:	221a      	movs	r2, #26
 8008678:	68f9      	ldr	r1, [r7, #12]
 800867a:	6938      	ldr	r0, [r7, #16]
 800867c:	f7fe fee0 	bl	8007440 <_SendPacket>
  RECORD_END();
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f383 8811 	msr	BASEPRI, r3
}
 8008686:	bf00      	nop
 8008688:	3728      	adds	r7, #40	; 0x28
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20001ab8 	.word	0x20001ab8

08008694 <memcmp>:
 8008694:	b510      	push	{r4, lr}
 8008696:	3901      	subs	r1, #1
 8008698:	4402      	add	r2, r0
 800869a:	4290      	cmp	r0, r2
 800869c:	d101      	bne.n	80086a2 <memcmp+0xe>
 800869e:	2000      	movs	r0, #0
 80086a0:	e005      	b.n	80086ae <memcmp+0x1a>
 80086a2:	7803      	ldrb	r3, [r0, #0]
 80086a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	d001      	beq.n	80086b0 <memcmp+0x1c>
 80086ac:	1b18      	subs	r0, r3, r4
 80086ae:	bd10      	pop	{r4, pc}
 80086b0:	3001      	adds	r0, #1
 80086b2:	e7f2      	b.n	800869a <memcmp+0x6>

080086b4 <memset>:
 80086b4:	4402      	add	r2, r0
 80086b6:	4603      	mov	r3, r0
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d100      	bne.n	80086be <memset+0xa>
 80086bc:	4770      	bx	lr
 80086be:	f803 1b01 	strb.w	r1, [r3], #1
 80086c2:	e7f9      	b.n	80086b8 <memset+0x4>

080086c4 <_reclaim_reent>:
 80086c4:	4b29      	ldr	r3, [pc, #164]	; (800876c <_reclaim_reent+0xa8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4283      	cmp	r3, r0
 80086ca:	b570      	push	{r4, r5, r6, lr}
 80086cc:	4604      	mov	r4, r0
 80086ce:	d04b      	beq.n	8008768 <_reclaim_reent+0xa4>
 80086d0:	69c3      	ldr	r3, [r0, #28]
 80086d2:	b143      	cbz	r3, 80086e6 <_reclaim_reent+0x22>
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d144      	bne.n	8008764 <_reclaim_reent+0xa0>
 80086da:	69e3      	ldr	r3, [r4, #28]
 80086dc:	6819      	ldr	r1, [r3, #0]
 80086de:	b111      	cbz	r1, 80086e6 <_reclaim_reent+0x22>
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 f879 	bl	80087d8 <_free_r>
 80086e6:	6961      	ldr	r1, [r4, #20]
 80086e8:	b111      	cbz	r1, 80086f0 <_reclaim_reent+0x2c>
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 f874 	bl	80087d8 <_free_r>
 80086f0:	69e1      	ldr	r1, [r4, #28]
 80086f2:	b111      	cbz	r1, 80086fa <_reclaim_reent+0x36>
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 f86f 	bl	80087d8 <_free_r>
 80086fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80086fc:	b111      	cbz	r1, 8008704 <_reclaim_reent+0x40>
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 f86a 	bl	80087d8 <_free_r>
 8008704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008706:	b111      	cbz	r1, 800870e <_reclaim_reent+0x4a>
 8008708:	4620      	mov	r0, r4
 800870a:	f000 f865 	bl	80087d8 <_free_r>
 800870e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008710:	b111      	cbz	r1, 8008718 <_reclaim_reent+0x54>
 8008712:	4620      	mov	r0, r4
 8008714:	f000 f860 	bl	80087d8 <_free_r>
 8008718:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800871a:	b111      	cbz	r1, 8008722 <_reclaim_reent+0x5e>
 800871c:	4620      	mov	r0, r4
 800871e:	f000 f85b 	bl	80087d8 <_free_r>
 8008722:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008724:	b111      	cbz	r1, 800872c <_reclaim_reent+0x68>
 8008726:	4620      	mov	r0, r4
 8008728:	f000 f856 	bl	80087d8 <_free_r>
 800872c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800872e:	b111      	cbz	r1, 8008736 <_reclaim_reent+0x72>
 8008730:	4620      	mov	r0, r4
 8008732:	f000 f851 	bl	80087d8 <_free_r>
 8008736:	6a23      	ldr	r3, [r4, #32]
 8008738:	b1b3      	cbz	r3, 8008768 <_reclaim_reent+0xa4>
 800873a:	4620      	mov	r0, r4
 800873c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008740:	4718      	bx	r3
 8008742:	5949      	ldr	r1, [r1, r5]
 8008744:	b941      	cbnz	r1, 8008758 <_reclaim_reent+0x94>
 8008746:	3504      	adds	r5, #4
 8008748:	69e3      	ldr	r3, [r4, #28]
 800874a:	2d80      	cmp	r5, #128	; 0x80
 800874c:	68d9      	ldr	r1, [r3, #12]
 800874e:	d1f8      	bne.n	8008742 <_reclaim_reent+0x7e>
 8008750:	4620      	mov	r0, r4
 8008752:	f000 f841 	bl	80087d8 <_free_r>
 8008756:	e7c0      	b.n	80086da <_reclaim_reent+0x16>
 8008758:	680e      	ldr	r6, [r1, #0]
 800875a:	4620      	mov	r0, r4
 800875c:	f000 f83c 	bl	80087d8 <_free_r>
 8008760:	4631      	mov	r1, r6
 8008762:	e7ef      	b.n	8008744 <_reclaim_reent+0x80>
 8008764:	2500      	movs	r5, #0
 8008766:	e7ef      	b.n	8008748 <_reclaim_reent+0x84>
 8008768:	bd70      	pop	{r4, r5, r6, pc}
 800876a:	bf00      	nop
 800876c:	20000060 	.word	0x20000060

08008770 <__libc_init_array>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	4d0d      	ldr	r5, [pc, #52]	; (80087a8 <__libc_init_array+0x38>)
 8008774:	4c0d      	ldr	r4, [pc, #52]	; (80087ac <__libc_init_array+0x3c>)
 8008776:	1b64      	subs	r4, r4, r5
 8008778:	10a4      	asrs	r4, r4, #2
 800877a:	2600      	movs	r6, #0
 800877c:	42a6      	cmp	r6, r4
 800877e:	d109      	bne.n	8008794 <__libc_init_array+0x24>
 8008780:	4d0b      	ldr	r5, [pc, #44]	; (80087b0 <__libc_init_array+0x40>)
 8008782:	4c0c      	ldr	r4, [pc, #48]	; (80087b4 <__libc_init_array+0x44>)
 8008784:	f000 f880 	bl	8008888 <_init>
 8008788:	1b64      	subs	r4, r4, r5
 800878a:	10a4      	asrs	r4, r4, #2
 800878c:	2600      	movs	r6, #0
 800878e:	42a6      	cmp	r6, r4
 8008790:	d105      	bne.n	800879e <__libc_init_array+0x2e>
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	f855 3b04 	ldr.w	r3, [r5], #4
 8008798:	4798      	blx	r3
 800879a:	3601      	adds	r6, #1
 800879c:	e7ee      	b.n	800877c <__libc_init_array+0xc>
 800879e:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a2:	4798      	blx	r3
 80087a4:	3601      	adds	r6, #1
 80087a6:	e7f2      	b.n	800878e <__libc_init_array+0x1e>
 80087a8:	08008998 	.word	0x08008998
 80087ac:	08008998 	.word	0x08008998
 80087b0:	08008998 	.word	0x08008998
 80087b4:	0800899c 	.word	0x0800899c

080087b8 <__retarget_lock_acquire_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_release_recursive>:
 80087ba:	4770      	bx	lr

080087bc <memcpy>:
 80087bc:	440a      	add	r2, r1
 80087be:	4291      	cmp	r1, r2
 80087c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c4:	d100      	bne.n	80087c8 <memcpy+0xc>
 80087c6:	4770      	bx	lr
 80087c8:	b510      	push	{r4, lr}
 80087ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087d2:	4291      	cmp	r1, r2
 80087d4:	d1f9      	bne.n	80087ca <memcpy+0xe>
 80087d6:	bd10      	pop	{r4, pc}

080087d8 <_free_r>:
 80087d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087da:	2900      	cmp	r1, #0
 80087dc:	d044      	beq.n	8008868 <_free_r+0x90>
 80087de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e2:	9001      	str	r0, [sp, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f1a1 0404 	sub.w	r4, r1, #4
 80087ea:	bfb8      	it	lt
 80087ec:	18e4      	addlt	r4, r4, r3
 80087ee:	f000 f83f 	bl	8008870 <__malloc_lock>
 80087f2:	4a1e      	ldr	r2, [pc, #120]	; (800886c <_free_r+0x94>)
 80087f4:	9801      	ldr	r0, [sp, #4]
 80087f6:	6813      	ldr	r3, [r2, #0]
 80087f8:	b933      	cbnz	r3, 8008808 <_free_r+0x30>
 80087fa:	6063      	str	r3, [r4, #4]
 80087fc:	6014      	str	r4, [r2, #0]
 80087fe:	b003      	add	sp, #12
 8008800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008804:	f000 b83a 	b.w	800887c <__malloc_unlock>
 8008808:	42a3      	cmp	r3, r4
 800880a:	d908      	bls.n	800881e <_free_r+0x46>
 800880c:	6825      	ldr	r5, [r4, #0]
 800880e:	1961      	adds	r1, r4, r5
 8008810:	428b      	cmp	r3, r1
 8008812:	bf01      	itttt	eq
 8008814:	6819      	ldreq	r1, [r3, #0]
 8008816:	685b      	ldreq	r3, [r3, #4]
 8008818:	1949      	addeq	r1, r1, r5
 800881a:	6021      	streq	r1, [r4, #0]
 800881c:	e7ed      	b.n	80087fa <_free_r+0x22>
 800881e:	461a      	mov	r2, r3
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	b10b      	cbz	r3, 8008828 <_free_r+0x50>
 8008824:	42a3      	cmp	r3, r4
 8008826:	d9fa      	bls.n	800881e <_free_r+0x46>
 8008828:	6811      	ldr	r1, [r2, #0]
 800882a:	1855      	adds	r5, r2, r1
 800882c:	42a5      	cmp	r5, r4
 800882e:	d10b      	bne.n	8008848 <_free_r+0x70>
 8008830:	6824      	ldr	r4, [r4, #0]
 8008832:	4421      	add	r1, r4
 8008834:	1854      	adds	r4, r2, r1
 8008836:	42a3      	cmp	r3, r4
 8008838:	6011      	str	r1, [r2, #0]
 800883a:	d1e0      	bne.n	80087fe <_free_r+0x26>
 800883c:	681c      	ldr	r4, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	6053      	str	r3, [r2, #4]
 8008842:	440c      	add	r4, r1
 8008844:	6014      	str	r4, [r2, #0]
 8008846:	e7da      	b.n	80087fe <_free_r+0x26>
 8008848:	d902      	bls.n	8008850 <_free_r+0x78>
 800884a:	230c      	movs	r3, #12
 800884c:	6003      	str	r3, [r0, #0]
 800884e:	e7d6      	b.n	80087fe <_free_r+0x26>
 8008850:	6825      	ldr	r5, [r4, #0]
 8008852:	1961      	adds	r1, r4, r5
 8008854:	428b      	cmp	r3, r1
 8008856:	bf04      	itt	eq
 8008858:	6819      	ldreq	r1, [r3, #0]
 800885a:	685b      	ldreq	r3, [r3, #4]
 800885c:	6063      	str	r3, [r4, #4]
 800885e:	bf04      	itt	eq
 8008860:	1949      	addeq	r1, r1, r5
 8008862:	6021      	streq	r1, [r4, #0]
 8008864:	6054      	str	r4, [r2, #4]
 8008866:	e7ca      	b.n	80087fe <_free_r+0x26>
 8008868:	b003      	add	sp, #12
 800886a:	bd30      	pop	{r4, r5, pc}
 800886c:	20001cd8 	.word	0x20001cd8

08008870 <__malloc_lock>:
 8008870:	4801      	ldr	r0, [pc, #4]	; (8008878 <__malloc_lock+0x8>)
 8008872:	f7ff bfa1 	b.w	80087b8 <__retarget_lock_acquire_recursive>
 8008876:	bf00      	nop
 8008878:	20001cd4 	.word	0x20001cd4

0800887c <__malloc_unlock>:
 800887c:	4801      	ldr	r0, [pc, #4]	; (8008884 <__malloc_unlock+0x8>)
 800887e:	f7ff bf9c 	b.w	80087ba <__retarget_lock_release_recursive>
 8008882:	bf00      	nop
 8008884:	20001cd4 	.word	0x20001cd4

08008888 <_init>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	bf00      	nop
 800888c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888e:	bc08      	pop	{r3}
 8008890:	469e      	mov	lr, r3
 8008892:	4770      	bx	lr

08008894 <_fini>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	bf00      	nop
 8008898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889a:	bc08      	pop	{r3}
 800889c:	469e      	mov	lr, r3
 800889e:	4770      	bx	lr
