
STM32L476-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005484  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800575c  0800575c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800575c  0800575c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800575c  0800575c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043c0  20000064  080057c8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004424  080057c8  00024424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fab  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c85  00000000  00000000  00034082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00036d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea9  00000000  00000000  00038020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002922c  00000000  00000000  00038ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001526e  00000000  00000000  000620f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fadaa  00000000  00000000  00077363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051ec  00000000  00000000  00172110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001772fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055fc 	.word	0x080055fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080055fc 	.word	0x080055fc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20001510 	.word	0x20001510

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000284:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <vApplicationGetIdleTaskMemory+0x30>)
 800028a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000080 	.word	0x20000080
 80002a4:	20000120 	.word	0x20000120

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ae:	f000 faf7 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b2:	f000 f84f 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b6:	f000 f89f 	bl	80003f8 <MX_GPIO_Init>
  /* Enable the Cortex-M4 CYCCNT counter register.
   * Address: 0xE0001000
   * Access: Read/Write
   * Reset State: 0x40000000
  */
  DWT_CTRL |= (1 << 0);
 80002ba:	4b1f      	ldr	r3, [pc, #124]	; (8000338 <main+0x90>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a1e      	ldr	r2, [pc, #120]	; (8000338 <main+0x90>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80002c6:	f003 fc4b 	bl	8003b60 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80002ca:	f004 fb27 	bl	800491c <SEGGER_SYSVIEW_Start>


  xStatus = xTaskCreate(led_1_task, "LED1", 200, NULL, 2, &xTaskLed1);
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <main+0x94>)
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2302      	movs	r3, #2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2300      	movs	r3, #0
 80002d8:	22c8      	movs	r2, #200	; 0xc8
 80002da:	4919      	ldr	r1, [pc, #100]	; (8000340 <main+0x98>)
 80002dc:	4819      	ldr	r0, [pc, #100]	; (8000344 <main+0x9c>)
 80002de:	f002 f82a 	bl	8002336 <xTaskCreate>
 80002e2:	60f8      	str	r0, [r7, #12]
  configASSERT(xStatus == pdPASS);
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d00a      	beq.n	8000300 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ee:	f383 8811 	msr	BASEPRI, r3
 80002f2:	f3bf 8f6f 	isb	sy
 80002f6:	f3bf 8f4f 	dsb	sy
 80002fa:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002fc:	bf00      	nop
 80002fe:	e7fe      	b.n	80002fe <main+0x56>

  xStatus = xTaskCreate(led_2_task, "LED2", 200, NULL, 3, &xTaskLed2);
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <main+0xa0>)
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	2303      	movs	r3, #3
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2300      	movs	r3, #0
 800030a:	22c8      	movs	r2, #200	; 0xc8
 800030c:	490f      	ldr	r1, [pc, #60]	; (800034c <main+0xa4>)
 800030e:	4810      	ldr	r0, [pc, #64]	; (8000350 <main+0xa8>)
 8000310:	f002 f811 	bl	8002336 <xTaskCreate>
 8000314:	60f8      	str	r0, [r7, #12]
  configASSERT(xStatus == pdPASS);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d00a      	beq.n	8000332 <main+0x8a>
        __asm volatile
 800031c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000320:	f383 8811 	msr	BASEPRI, r3
 8000324:	f3bf 8f6f 	isb	sy
 8000328:	f3bf 8f4f 	dsb	sy
 800032c:	607b      	str	r3, [r7, #4]
    }
 800032e:	bf00      	nop
 8000330:	e7fe      	b.n	8000330 <main+0x88>


  // start the freeRTOS scheduler
   vTaskStartScheduler();
 8000332:	f002 fa71 	bl	8002818 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000336:	e7fe      	b.n	8000336 <main+0x8e>
 8000338:	e0001000 	.word	0xe0001000
 800033c:	20000320 	.word	0x20000320
 8000340:	08005614 	.word	0x08005614
 8000344:	080005f5 	.word	0x080005f5
 8000348:	20000324 	.word	0x20000324
 800034c:	0800561c 	.word	0x0800561c
 8000350:	08000619 	.word	0x08000619

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b096      	sub	sp, #88	; 0x58
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2244      	movs	r2, #68	; 0x44
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f005 f860 	bl	8005428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	463b      	mov	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000376:	f44f 7000 	mov.w	r0, #512	; 0x200
 800037a:	f000 fdd9 	bl	8000f30 <HAL_PWREx_ControlVoltageScaling>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000384:	f000 f980 	bl	8000688 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2302      	movs	r3, #2
 800038a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000390:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000392:	2310      	movs	r3, #16
 8000394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800039a:	2302      	movs	r3, #2
 800039c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800039e:	2301      	movs	r3, #1
 80003a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003a2:	230a      	movs	r3, #10
 80003a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003a6:	2307      	movs	r3, #7
 80003a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003aa:	2302      	movs	r3, #2
 80003ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ae:	2302      	movs	r3, #2
 80003b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 fe10 	bl	8000fdc <HAL_RCC_OscConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003c2:	f000 f961 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c6:	230f      	movs	r3, #15
 80003c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ca:	2303      	movs	r3, #3
 80003cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003da:	463b      	mov	r3, r7
 80003dc:	2104      	movs	r1, #4
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 f9d8 	bl	8001794 <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ea:	f000 f94d 	bl	8000688 <Error_Handler>
  }
}
 80003ee:	bf00      	nop
 80003f0:	3758      	adds	r7, #88	; 0x58
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	; 0x28
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 0314 	add.w	r3, r7, #20
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040e:	4b52      	ldr	r3, [pc, #328]	; (8000558 <MX_GPIO_Init+0x160>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	4a51      	ldr	r2, [pc, #324]	; (8000558 <MX_GPIO_Init+0x160>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041a:	4b4f      	ldr	r3, [pc, #316]	; (8000558 <MX_GPIO_Init+0x160>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	f003 0304 	and.w	r3, r3, #4
 8000422:	613b      	str	r3, [r7, #16]
 8000424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000426:	4b4c      	ldr	r3, [pc, #304]	; (8000558 <MX_GPIO_Init+0x160>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	4a4b      	ldr	r2, [pc, #300]	; (8000558 <MX_GPIO_Init+0x160>)
 800042c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000432:	4b49      	ldr	r3, [pc, #292]	; (8000558 <MX_GPIO_Init+0x160>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b46      	ldr	r3, [pc, #280]	; (8000558 <MX_GPIO_Init+0x160>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	4a45      	ldr	r2, [pc, #276]	; (8000558 <MX_GPIO_Init+0x160>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044a:	4b43      	ldr	r3, [pc, #268]	; (8000558 <MX_GPIO_Init+0x160>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	4b40      	ldr	r3, [pc, #256]	; (8000558 <MX_GPIO_Init+0x160>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	4a3f      	ldr	r2, [pc, #252]	; (8000558 <MX_GPIO_Init+0x160>)
 800045c:	f043 0302 	orr.w	r3, r3, #2
 8000460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000462:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <MX_GPIO_Init+0x160>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000466:	f003 0302 	and.w	r3, r3, #2
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2103      	movs	r1, #3
 8000472:	483a      	ldr	r0, [pc, #232]	; (800055c <MX_GPIO_Init+0x164>)
 8000474:	f000 fd04 	bl	8000e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2120      	movs	r1, #32
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f000 fcfe 	bl	8000e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2101      	movs	r1, #1
 8000488:	4835      	ldr	r0, [pc, #212]	; (8000560 <MX_GPIO_Init+0x168>)
 800048a:	f000 fcf9 	bl	8000e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800048e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000494:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	4619      	mov	r1, r3
 80004a4:	482d      	ldr	r0, [pc, #180]	; (800055c <MX_GPIO_Init+0x164>)
 80004a6:	f000 fb41 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004aa:	2303      	movs	r3, #3
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	2300      	movs	r3, #0
 80004b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	4619      	mov	r1, r3
 80004c0:	4826      	ldr	r0, [pc, #152]	; (800055c <MX_GPIO_Init+0x164>)
 80004c2:	f000 fb33 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004c6:	230c      	movs	r3, #12
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004d2:	2303      	movs	r3, #3
 80004d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004d6:	2307      	movs	r3, #7
 80004d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f000 fb22 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004e8:	2320      	movs	r3, #32
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4619      	mov	r1, r3
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f000 fb13 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000506:	2301      	movs	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2300      	movs	r3, #0
 8000514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	4810      	ldr	r0, [pc, #64]	; (8000560 <MX_GPIO_Init+0x168>)
 800051e:	f000 fb05 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000528:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800052e:	2302      	movs	r3, #2
 8000530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4619      	mov	r1, r3
 8000538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053c:	f000 faf6 	bl	8000b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	2106      	movs	r1, #6
 8000544:	2028      	movs	r0, #40	; 0x28
 8000546:	f000 fac7 	bl	8000ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800054a:	2028      	movs	r0, #40	; 0x28
 800054c:	f000 fae0 	bl	8000b10 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000550:	bf00      	nop
 8000552:	3728      	adds	r7, #40	; 0x28
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000
 800055c:	48000800 	.word	0x48000800
 8000560:	48000400 	.word	0x48000400

08000564 <switchPrio>:

/* USER CODE BEGIN 4 */

void switchPrio(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
	bool switchFlag = false;
 800056a:	2300      	movs	r3, #0
 800056c:	75fb      	strb	r3, [r7, #23]
	xTaskHandle t1,t2,curr;
	UBaseType_t p1,p2;

	portENTER_CRITICAL();
 800056e:	f002 fff1 	bl	8003554 <vPortEnterCritical>
	if(buttonFlag == true)
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <switchPrio+0x84>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d004      	beq.n	8000586 <switchPrio+0x22>
	{
		switchFlag = true;
 800057c:	2301      	movs	r3, #1
 800057e:	75fb      	strb	r3, [r7, #23]
		buttonFlag = false;
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <switchPrio+0x84>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
	}
	portEXIT_CRITICAL();
 8000586:	f003 f815 	bl	80035b4 <vPortExitCritical>

	if(switchFlag == true)
 800058a:	7dfb      	ldrb	r3, [r7, #23]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d027      	beq.n	80005e0 <switchPrio+0x7c>
	{

		t1 = xTaskGetHandle("LED1");
 8000590:	4816      	ldr	r0, [pc, #88]	; (80005ec <switchPrio+0x88>)
 8000592:	f002 fb4f 	bl	8002c34 <xTaskGetHandle>
 8000596:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("LED2");
 8000598:	4815      	ldr	r0, [pc, #84]	; (80005f0 <switchPrio+0x8c>)
 800059a:	f002 fb4b 	bl	8002c34 <xTaskGetHandle>
 800059e:	60f8      	str	r0, [r7, #12]
		curr = xTaskGetCurrentTaskHandle();
 80005a0:	f002 fe18 	bl	80031d4 <xTaskGetCurrentTaskHandle>
 80005a4:	60b8      	str	r0, [r7, #8]

		p1 = uxTaskPriorityGet(t1);
 80005a6:	6938      	ldr	r0, [r7, #16]
 80005a8:	f002 f85c 	bl	8002664 <uxTaskPriorityGet>
 80005ac:	6078      	str	r0, [r7, #4]
		p2 = uxTaskPriorityGet(t2);
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f002 f858 	bl	8002664 <uxTaskPriorityGet>
 80005b4:	6038      	str	r0, [r7, #0]

		if(curr == t1)
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d108      	bne.n	80005d0 <switchPrio+0x6c>
		{
			vTaskPrioritySet(t1,p2);
 80005be:	6839      	ldr	r1, [r7, #0]
 80005c0:	6938      	ldr	r0, [r7, #16]
 80005c2:	f002 f869 	bl	8002698 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f002 f865 	bl	8002698 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
		}

	}

}
 80005ce:	e007      	b.n	80005e0 <switchPrio+0x7c>
			vTaskPrioritySet(t2,p1);
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f002 f860 	bl	8002698 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 80005d8:	6839      	ldr	r1, [r7, #0]
 80005da:	6938      	ldr	r0, [r7, #16]
 80005dc:	f002 f85c 	bl	8002698 <vTaskPrioritySet>
}
 80005e0:	bf00      	nop
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000328 	.word	0x20000328
 80005ec:	08005614 	.word	0x08005614
 80005f0:	0800561c 	.word	0x0800561c

080005f4 <led_1_task>:

static void led_1_task(void* pvParameters)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80005fc:	2101      	movs	r1, #1
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <led_1_task+0x20>)
 8000600:	f000 fc56 	bl	8000eb0 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000608:	f000 f98a 	bl	8000920 <HAL_Delay>
		switchPrio();
 800060c:	f7ff ffaa 	bl	8000564 <switchPrio>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000610:	e7f4      	b.n	80005fc <led_1_task+0x8>
 8000612:	bf00      	nop
 8000614:	48000800 	.word	0x48000800

08000618 <led_2_task>:
	}
}

static void led_2_task(void* pvParameters)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000620:	2102      	movs	r1, #2
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <led_2_task+0x1c>)
 8000624:	f000 fc44 	bl	8000eb0 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f000 f979 	bl	8000920 <HAL_Delay>
		switchPrio();
 800062e:	f7ff ff99 	bl	8000564 <switchPrio>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000632:	e7f5      	b.n	8000620 <led_2_task+0x8>
 8000634:	48000800 	.word	0x48000800

08000638 <HAL_GPIO_EXTI_Callback>:
	}
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  if(GPIO_Pin == GPIO_PIN_10)
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000648:	d106      	bne.n	8000658 <HAL_GPIO_EXTI_Callback+0x20>
  {
	  traceISR_ENTER();
 800064a:	f004 fc2f 	bl	8004eac <SEGGER_SYSVIEW_RecordEnterISR>
	  buttonFlag = true;
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <HAL_GPIO_EXTI_Callback+0x28>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
	  traceISR_EXIT();
 8000654:	f004 fc6c 	bl	8004f30 <SEGGER_SYSVIEW_RecordExitISR>
  }
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000328 	.word	0x20000328

08000664 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d101      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000676:	f000 f933 	bl	80008e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40001000 	.word	0x40001000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x44>)
 800069c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_MspInit+0x44>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6613      	str	r3, [r2, #96]	; 0x60
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x44>)
 80006a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x44>)
 80006b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_MspInit+0x44>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	6593      	str	r3, [r2, #88]	; 0x58
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x44>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  // This initializes a variable which is related to priority grouping
  // This initialization is actually done by the scheduler, but the problem
  // is that the priority grouping initialization is required for the SEGGER
  // start function.
  vInitPrioGroupValue();
 80006ca:	f002 fec5 	bl	8003458 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08e      	sub	sp, #56	; 0x38
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006ea:	4b34      	ldr	r3, [pc, #208]	; (80007bc <HAL_InitTick+0xe0>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ee:	4a33      	ldr	r2, [pc, #204]	; (80007bc <HAL_InitTick+0xe0>)
 80006f0:	f043 0310 	orr.w	r3, r3, #16
 80006f4:	6593      	str	r3, [r2, #88]	; 0x58
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <HAL_InitTick+0xe0>)
 80006f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fa:	f003 0310 	and.w	r3, r3, #16
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000702:	f107 0210 	add.w	r2, r7, #16
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f001 f9ef 	bl	8001af0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800071c:	f001 f9d2 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 8000720:	6378      	str	r0, [r7, #52]	; 0x34
 8000722:	e004      	b.n	800072e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000724:	f001 f9ce 	bl	8001ac4 <HAL_RCC_GetPCLK1Freq>
 8000728:	4603      	mov	r3, r0
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800072e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000730:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <HAL_InitTick+0xe4>)
 8000732:	fba2 2303 	umull	r2, r3, r2, r3
 8000736:	0c9b      	lsrs	r3, r3, #18
 8000738:	3b01      	subs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <HAL_InitTick+0xe8>)
 800073e:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <HAL_InitTick+0xec>)
 8000740:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <HAL_InitTick+0xe8>)
 8000744:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000748:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800074a:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <HAL_InitTick+0xe8>)
 800074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <HAL_InitTick+0xe8>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_InitTick+0xe8>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <HAL_InitTick+0xe8>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000762:	4818      	ldr	r0, [pc, #96]	; (80007c4 <HAL_InitTick+0xe8>)
 8000764:	f001 fa56 	bl	8001c14 <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800076e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000772:	2b00      	cmp	r3, #0
 8000774:	d11b      	bne.n	80007ae <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <HAL_InitTick+0xe8>)
 8000778:	f001 faae 	bl	8001cd8 <HAL_TIM_Base_Start_IT>
 800077c:	4603      	mov	r3, r0
 800077e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000786:	2b00      	cmp	r3, #0
 8000788:	d111      	bne.n	80007ae <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800078a:	2036      	movs	r0, #54	; 0x36
 800078c:	f000 f9c0 	bl	8000b10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b0f      	cmp	r3, #15
 8000794:	d808      	bhi.n	80007a8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000796:	2200      	movs	r2, #0
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	2036      	movs	r0, #54	; 0x36
 800079c:	f000 f99c 	bl	8000ad8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_InitTick+0xf0>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	e002      	b.n	80007ae <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3738      	adds	r7, #56	; 0x38
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	431bde83 	.word	0x431bde83
 80007c4:	2000032c 	.word	0x2000032c
 80007c8:	40001000 	.word	0x40001000
 80007cc:	20000004 	.word	0x20000004

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <MemManage_Handler+0x4>

080007e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <UsageFault_Handler+0x4>

080007ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000800:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000804:	f000 fb6e 	bl	8000ee4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000808:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800080c:	f000 fb6a 	bl	8000ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <TIM6_DAC_IRQHandler+0x10>)
 800081a:	f001 facd 	bl	8001db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000032c 	.word	0x2000032c

08000828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <SystemInit+0x20>)
 800082e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <SystemInit+0x20>)
 8000834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800084c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000884 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000850:	f7ff ffea 	bl	8000828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <LoopForever+0x6>)
  ldr r1, =_edata
 8000856:	490d      	ldr	r1, [pc, #52]	; (800088c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <LoopForever+0xe>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800086c:	4c0a      	ldr	r4, [pc, #40]	; (8000898 <LoopForever+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087a:	f004 fe33 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800087e:	f7ff fd13 	bl	80002a8 <main>

08000882 <LoopForever>:

LoopForever:
    b LoopForever
 8000882:	e7fe      	b.n	8000882 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000884:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000890:	08005764 	.word	0x08005764
  ldr r2, =_sbss
 8000894:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000898:	20004424 	.word	0x20004424

0800089c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_2_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_Init+0x3c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <HAL_Init+0x3c>)
 80008b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b6:	2003      	movs	r0, #3
 80008b8:	f000 f903 	bl	8000ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008bc:	200f      	movs	r0, #15
 80008be:	f7ff ff0d 	bl	80006dc <HAL_InitTick>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	e001      	b.n	80008d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ce:	f7ff fee1 	bl	8000694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x20>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x24>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_IncTick+0x24>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008
 8000904:	20000378 	.word	0x20000378

08000908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_GetTick+0x14>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000378 	.word	0x20000378

08000920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000928:	f7ff ffee 	bl	8000908 <HAL_GetTick>
 800092c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000938:	d005      	beq.n	8000946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_Delay+0x44>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000946:	bf00      	nop
 8000948:	f7ff ffde 	bl	8000908 <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8f7      	bhi.n	8000948 <HAL_Delay+0x28>
  {
  }
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000008 	.word	0x20000008

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	db0b      	blt.n	80009f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	f003 021f 	and.w	r2, r3, #31
 80009e4:	4907      	ldr	r1, [pc, #28]	; (8000a04 <__NVIC_EnableIRQ+0x38>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	095b      	lsrs	r3, r3, #5
 80009ec:	2001      	movs	r0, #1
 80009ee:	fa00 f202 	lsl.w	r2, r0, r2
 80009f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000e100 	.word	0xe000e100

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0a      	blt.n	8000a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <__NVIC_SetPriority+0x4c>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a30:	e00a      	b.n	8000a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4908      	ldr	r1, [pc, #32]	; (8000a58 <__NVIC_SetPriority+0x50>)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	0112      	lsls	r2, r2, #4
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	761a      	strb	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2304      	movcs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	2b06      	cmp	r3, #6
 8000a84:	d902      	bls.n	8000a8c <NVIC_EncodePriority+0x30>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	e000      	b.n	8000a8e <NVIC_EncodePriority+0x32>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43d9      	mvns	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	4313      	orrs	r3, r2
         );
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff4c 	bl	8000968 <__NVIC_SetPriorityGrouping>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aea:	f7ff ff61 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8000aee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	6978      	ldr	r0, [r7, #20]
 8000af6:	f7ff ffb1 	bl	8000a5c <NVIC_EncodePriority>
 8000afa:	4602      	mov	r2, r0
 8000afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff80 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff54 	bl	80009cc <__NVIC_EnableIRQ>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	e17f      	b.n	8000e3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	2101      	movs	r1, #1
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8171 	beq.w	8000e36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d005      	beq.n	8000b6c <HAL_GPIO_Init+0x40>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d130      	bne.n	8000bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	091b      	lsrs	r3, r3, #4
 8000bb8:	f003 0201 	and.w	r2, r3, #1
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d118      	bne.n	8000c0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000be0:	2201      	movs	r2, #1
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	f003 0201 	and.w	r2, r3, #1
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d017      	beq.n	8000c48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d123      	bne.n	8000c9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	08da      	lsrs	r2, r3, #3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3208      	adds	r2, #8
 8000c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	08da      	lsrs	r2, r3, #3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3208      	adds	r2, #8
 8000c96:	6939      	ldr	r1, [r7, #16]
 8000c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0203 	and.w	r2, r3, #3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 80ac 	beq.w	8000e36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b5f      	ldr	r3, [pc, #380]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce2:	4a5e      	ldr	r2, [pc, #376]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cea:	4b5c      	ldr	r3, [pc, #368]	; (8000e5c <HAL_GPIO_Init+0x330>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf6:	4a5a      	ldr	r2, [pc, #360]	; (8000e60 <HAL_GPIO_Init+0x334>)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d20:	d025      	beq.n	8000d6e <HAL_GPIO_Init+0x242>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4f      	ldr	r2, [pc, #316]	; (8000e64 <HAL_GPIO_Init+0x338>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d01f      	beq.n	8000d6a <HAL_GPIO_Init+0x23e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4e      	ldr	r2, [pc, #312]	; (8000e68 <HAL_GPIO_Init+0x33c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d019      	beq.n	8000d66 <HAL_GPIO_Init+0x23a>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4d      	ldr	r2, [pc, #308]	; (8000e6c <HAL_GPIO_Init+0x340>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0x236>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <HAL_GPIO_Init+0x344>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d00d      	beq.n	8000d5e <HAL_GPIO_Init+0x232>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4b      	ldr	r2, [pc, #300]	; (8000e74 <HAL_GPIO_Init+0x348>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d007      	beq.n	8000d5a <HAL_GPIO_Init+0x22e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4a      	ldr	r2, [pc, #296]	; (8000e78 <HAL_GPIO_Init+0x34c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_GPIO_Init+0x22a>
 8000d52:	2306      	movs	r3, #6
 8000d54:	e00c      	b.n	8000d70 <HAL_GPIO_Init+0x244>
 8000d56:	2307      	movs	r3, #7
 8000d58:	e00a      	b.n	8000d70 <HAL_GPIO_Init+0x244>
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	e008      	b.n	8000d70 <HAL_GPIO_Init+0x244>
 8000d5e:	2304      	movs	r3, #4
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x244>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e004      	b.n	8000d70 <HAL_GPIO_Init+0x244>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e002      	b.n	8000d70 <HAL_GPIO_Init+0x244>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <HAL_GPIO_Init+0x244>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	f002 0203 	and.w	r2, r2, #3
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	4093      	lsls	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d80:	4937      	ldr	r1, [pc, #220]	; (8000e60 <HAL_GPIO_Init+0x334>)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	3302      	adds	r3, #2
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d8e:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <HAL_GPIO_Init+0x350>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000db2:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <HAL_GPIO_Init+0x350>)
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000db8:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <HAL_GPIO_Init+0x350>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ddc:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <HAL_GPIO_Init+0x350>)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_GPIO_Init+0x350>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e06:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <HAL_GPIO_Init+0x350>)
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_GPIO_Init+0x350>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e30:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <HAL_GPIO_Init+0x350>)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa22 f303 	lsr.w	r3, r2, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f47f ae78 	bne.w	8000b3c <HAL_GPIO_Init+0x10>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	371c      	adds	r7, #28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010000 	.word	0x40010000
 8000e64:	48000400 	.word	0x48000400
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	48000c00 	.word	0x48000c00
 8000e70:	48001000 	.word	0x48001000
 8000e74:	48001400 	.word	0x48001400
 8000e78:	48001800 	.word	0x48001800
 8000e7c:	40010400 	.word	0x40010400

08000e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e90:	787b      	ldrb	r3, [r7, #1]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	041a      	lsls	r2, r3, #16
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43d9      	mvns	r1, r3
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	400b      	ands	r3, r1
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	619a      	str	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fb98 	bl	8000638 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_PWREx_GetVoltageRange+0x18>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40007000 	.word	0x40007000

08000f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f3e:	d130      	bne.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f4c:	d038      	beq.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f56:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2232      	movs	r2, #50	; 0x32
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	0c9b      	lsrs	r3, r3, #18
 8000f70:	3301      	adds	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f74:	e002      	b.n	8000f7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f88:	d102      	bne.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f2      	bne.n	8000f76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f9c:	d110      	bne.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e00f      	b.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fae:	d007      	beq.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb8:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40007000 	.word	0x40007000
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	431bde83 	.word	0x431bde83

08000fdc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e3ca      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fee:	4b97      	ldr	r3, [pc, #604]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff8:	4b94      	ldr	r3, [pc, #592]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80e4 	beq.w	80011d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <HAL_RCC_OscConfig+0x4a>
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2b0c      	cmp	r3, #12
 800101a:	f040 808b 	bne.w	8001134 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b01      	cmp	r3, #1
 8001022:	f040 8087 	bne.w	8001134 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001026:	4b89      	ldr	r3, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x62>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e3a2      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1a      	ldr	r2, [r3, #32]
 8001042:	4b82      	ldr	r3, [pc, #520]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d004      	beq.n	8001058 <HAL_RCC_OscConfig+0x7c>
 800104e:	4b7f      	ldr	r3, [pc, #508]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001056:	e005      	b.n	8001064 <HAL_RCC_OscConfig+0x88>
 8001058:	4b7c      	ldr	r3, [pc, #496]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001064:	4293      	cmp	r3, r2
 8001066:	d223      	bcs.n	80010b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fd71 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e383      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800107c:	4b73      	ldr	r3, [pc, #460]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a72      	ldr	r2, [pc, #456]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b70      	ldr	r3, [pc, #448]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	496d      	ldr	r1, [pc, #436]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800109a:	4b6c      	ldr	r3, [pc, #432]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	4968      	ldr	r1, [pc, #416]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
 80010ae:	e025      	b.n	80010fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b0:	4b66      	ldr	r3, [pc, #408]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a65      	ldr	r2, [pc, #404]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b63      	ldr	r3, [pc, #396]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4960      	ldr	r1, [pc, #384]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	495b      	ldr	r1, [pc, #364]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d109      	bne.n	80010fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fd31 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e343      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010fc:	f000 fc4a 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001100:	4602      	mov	r2, r0
 8001102:	4b52      	ldr	r3, [pc, #328]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	4950      	ldr	r1, [pc, #320]	; (8001250 <HAL_RCC_OscConfig+0x274>)
 800110e:	5ccb      	ldrb	r3, [r1, r3]
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_RCC_OscConfig+0x278>)
 800111a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <HAL_RCC_OscConfig+0x27c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fadb 	bl	80006dc <HAL_InitTick>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d052      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	e327      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d032      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800113c:	4b43      	ldr	r3, [pc, #268]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a42      	ldr	r2, [pc, #264]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001148:	f7ff fbde 	bl	8000908 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001150:	f7ff fbda 	bl	8000908 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e310      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	4931      	ldr	r1, [pc, #196]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	492c      	ldr	r1, [pc, #176]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
 80011a0:	e01a      	b.n	80011d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a29      	ldr	r2, [pc, #164]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fbab 	bl	8000908 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b6:	f7ff fba7 	bl	8000908 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e2dd      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f0      	bne.n	80011b6 <HAL_RCC_OscConfig+0x1da>
 80011d4:	e000      	b.n	80011d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d074      	beq.n	80012ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x21a>
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	2b0c      	cmp	r3, #12
 80011ee:	d10e      	bne.n	800120e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d10b      	bne.n	800120e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_RCC_OscConfig+0x270>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d064      	beq.n	80012cc <HAL_RCC_OscConfig+0x2f0>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d160      	bne.n	80012cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e2ba      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x24a>
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800121e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	e026      	b.n	8001274 <HAL_RCC_OscConfig+0x298>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122e:	d115      	bne.n	800125c <HAL_RCC_OscConfig+0x280>
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a02      	ldr	r2, [pc, #8]	; (800124c <HAL_RCC_OscConfig+0x270>)
 8001242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	e014      	b.n	8001274 <HAL_RCC_OscConfig+0x298>
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	080056ec 	.word	0x080056ec
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004
 800125c:	4ba0      	ldr	r3, [pc, #640]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a9f      	ldr	r2, [pc, #636]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b9d      	ldr	r3, [pc, #628]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a9c      	ldr	r2, [pc, #624]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 800126e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fb44 	bl	8000908 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fb40 	bl	8000908 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e276      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001296:	4b92      	ldr	r3, [pc, #584]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x2a8>
 80012a2:	e014      	b.n	80012ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fb30 	bl	8000908 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fb2c 	bl	8000908 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e262      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012be:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x2d0>
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d060      	beq.n	800139c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d005      	beq.n	80012ec <HAL_RCC_OscConfig+0x310>
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d119      	bne.n	800131a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d116      	bne.n	800131a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ec:	4b7c      	ldr	r3, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x328>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e23f      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b76      	ldr	r3, [pc, #472]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	061b      	lsls	r3, r3, #24
 8001312:	4973      	ldr	r1, [pc, #460]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001318:	e040      	b.n	800139c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d023      	beq.n	800136a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001322:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6e      	ldr	r2, [pc, #440]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff faeb 	bl	8000908 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fae7 	bl	8000908 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e21d      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001348:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b62      	ldr	r3, [pc, #392]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	495f      	ldr	r1, [pc, #380]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
 8001368:	e018      	b.n	800139c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a5c      	ldr	r2, [pc, #368]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fac7 	bl	8000908 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fac3 	bl	8000908 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1f9      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d03c      	beq.n	8001422 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d01c      	beq.n	80013ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b0:	4b4b      	ldr	r3, [pc, #300]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80013b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b6:	4a4a      	ldr	r2, [pc, #296]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff faa2 	bl	8000908 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fa9e 	bl	8000908 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1d4      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80013dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0ef      	beq.n	80013c8 <HAL_RCC_OscConfig+0x3ec>
 80013e8:	e01b      	b.n	8001422 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80013ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f0:	4a3b      	ldr	r2, [pc, #236]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fa:	f7ff fa85 	bl	8000908 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001402:	f7ff fa81 	bl	8000908 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e1b7      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ef      	bne.n	8001402 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 80a6 	beq.w	800157c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10d      	bne.n	800145c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	4a26      	ldr	r2, [pc, #152]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	6593      	str	r3, [r2, #88]	; 0x58
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001458:	2301      	movs	r3, #1
 800145a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_RCC_OscConfig+0x508>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d118      	bne.n	800149a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_RCC_OscConfig+0x508>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_RCC_OscConfig+0x508>)
 800146e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001472:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001474:	f7ff fa48 	bl	8000908 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147c:	f7ff fa44 	bl	8000908 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e17a      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_RCC_OscConfig+0x508>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d108      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4d8>
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80014a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b2:	e029      	b.n	8001508 <HAL_RCC_OscConfig+0x52c>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d115      	bne.n	80014e8 <HAL_RCC_OscConfig+0x50c>
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80014ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d2:	4a03      	ldr	r2, [pc, #12]	; (80014e0 <HAL_RCC_OscConfig+0x504>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014dc:	e014      	b.n	8001508 <HAL_RCC_OscConfig+0x52c>
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40007000 	.word	0x40007000
 80014e8:	4b9c      	ldr	r3, [pc, #624]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80014ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ee:	4a9b      	ldr	r2, [pc, #620]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f8:	4b98      	ldr	r3, [pc, #608]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80014fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fe:	4a97      	ldr	r2, [pc, #604]	; (800175c <HAL_RCC_OscConfig+0x780>)
 8001500:	f023 0304 	bic.w	r3, r3, #4
 8001504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d016      	beq.n	800153e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff f9fa 	bl	8000908 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff f9f6 	bl	8000908 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e12a      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152e:	4b8b      	ldr	r3, [pc, #556]	; (800175c <HAL_RCC_OscConfig+0x780>)
 8001530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0ed      	beq.n	8001518 <HAL_RCC_OscConfig+0x53c>
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153e:	f7ff f9e3 	bl	8000908 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff f9df 	bl	8000908 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e113      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800155c:	4b7f      	ldr	r3, [pc, #508]	; (800175c <HAL_RCC_OscConfig+0x780>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1ed      	bne.n	8001546 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156a:	7ffb      	ldrb	r3, [r7, #31]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001570:	4b7a      	ldr	r3, [pc, #488]	; (800175c <HAL_RCC_OscConfig+0x780>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	4a79      	ldr	r2, [pc, #484]	; (800175c <HAL_RCC_OscConfig+0x780>)
 8001576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80fe 	beq.w	8001782 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	2b02      	cmp	r3, #2
 800158c:	f040 80d0 	bne.w	8001730 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001590:	4b72      	ldr	r3, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x780>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f003 0203 	and.w	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d130      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	3b01      	subs	r3, #1
 80015b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d127      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d11f      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015d0:	2a07      	cmp	r2, #7
 80015d2:	bf14      	ite	ne
 80015d4:	2201      	movne	r2, #1
 80015d6:	2200      	moveq	r2, #0
 80015d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015da:	4293      	cmp	r3, r2
 80015dc:	d113      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	3b01      	subs	r3, #1
 80015ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d06e      	beq.n	80016e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b0c      	cmp	r3, #12
 800160a:	d069      	beq.n	80016e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_OscConfig+0x780>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_OscConfig+0x780>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0ad      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001628:	4b4c      	ldr	r3, [pc, #304]	; (800175c <HAL_RCC_OscConfig+0x780>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a4b      	ldr	r2, [pc, #300]	; (800175c <HAL_RCC_OscConfig+0x780>)
 800162e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001632:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001634:	f7ff f968 	bl	8000908 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff f964 	bl	8000908 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e09a      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_RCC_OscConfig+0x780>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <HAL_RCC_OscConfig+0x780>)
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <HAL_RCC_OscConfig+0x784>)
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800166a:	3a01      	subs	r2, #1
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	4311      	orrs	r1, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001674:	0212      	lsls	r2, r2, #8
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800167c:	0852      	lsrs	r2, r2, #1
 800167e:	3a01      	subs	r2, #1
 8001680:	0552      	lsls	r2, r2, #21
 8001682:	4311      	orrs	r1, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001688:	0852      	lsrs	r2, r2, #1
 800168a:	3a01      	subs	r2, #1
 800168c:	0652      	lsls	r2, r2, #25
 800168e:	4311      	orrs	r1, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001694:	0912      	lsrs	r2, r2, #4
 8001696:	0452      	lsls	r2, r2, #17
 8001698:	430a      	orrs	r2, r1
 800169a:	4930      	ldr	r1, [pc, #192]	; (800175c <HAL_RCC_OscConfig+0x780>)
 800169c:	4313      	orrs	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016a0:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2d      	ldr	r2, [pc, #180]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80016a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4a2a      	ldr	r2, [pc, #168]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80016b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016b8:	f7ff f926 	bl	8000908 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff f922 	bl	8000908 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e058      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016de:	e050      	b.n	8001782 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e04f      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d148      	bne.n	8001782 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80016f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_RCC_OscConfig+0x780>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <HAL_RCC_OscConfig+0x780>)
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001706:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001708:	f7ff f8fe 	bl	8000908 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff f8fa 	bl	8000908 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e030      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_RCC_OscConfig+0x780>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x734>
 800172e:	e028      	b.n	8001782 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d023      	beq.n	800177e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_OscConfig+0x780>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_RCC_OscConfig+0x780>)
 800173c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff f8e1 	bl	8000908 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001748:	e00c      	b.n	8001764 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f8dd 	bl	8000908 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d905      	bls.n	8001764 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e013      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
 800175c:	40021000 	.word	0x40021000
 8001760:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_OscConfig+0x7b0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ec      	bne.n	800174a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_RCC_OscConfig+0x7b0>)
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	4905      	ldr	r1, [pc, #20]	; (800178c <HAL_RCC_OscConfig+0x7b0>)
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_RCC_OscConfig+0x7b4>)
 8001778:	4013      	ands	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
 800177c:	e001      	b.n	8001782 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	feeefffc 	.word	0xfeeefffc

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0e7      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b75      	ldr	r3, [pc, #468]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d910      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b72      	ldr	r3, [pc, #456]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 0207 	bic.w	r2, r3, #7
 80017be:	4970      	ldr	r1, [pc, #448]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b6e      	ldr	r3, [pc, #440]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0cf      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d010      	beq.n	8001806 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d908      	bls.n	8001806 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4960      	ldr	r1, [pc, #384]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d04c      	beq.n	80018ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181a:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d121      	bne.n	800186a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0a6      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001832:	4b54      	ldr	r3, [pc, #336]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d115      	bne.n	800186a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e09a      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800184a:	4b4e      	ldr	r3, [pc, #312]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e08e      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e086      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4943      	ldr	r1, [pc, #268]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800187c:	f7ff f844 	bl	8000908 <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7ff f840 	bl	8000908 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e06e      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d208      	bcs.n	80018da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	492b      	ldr	r1, [pc, #172]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d210      	bcs.n	800190a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 0207 	bic.w	r2, r3, #7
 80018f0:	4923      	ldr	r1, [pc, #140]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_RCC_ClockConfig+0x1ec>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d001      	beq.n	800190a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e036      	b.n	8001978 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	4918      	ldr	r1, [pc, #96]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d009      	beq.n	8001948 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4910      	ldr	r1, [pc, #64]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001948:	f000 f824 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	490b      	ldr	r1, [pc, #44]	; (8001988 <HAL_RCC_ClockConfig+0x1f4>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_ClockConfig+0x1fc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe feb5 	bl	80006dc <HAL_InitTick>
 8001972:	4603      	mov	r3, r0
 8001974:	72fb      	strb	r3, [r7, #11]

  return status;
 8001976:	7afb      	ldrb	r3, [r7, #11]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40022000 	.word	0x40022000
 8001984:	40021000 	.word	0x40021000
 8001988:	080056ec 	.word	0x080056ec
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a2:	4b3e      	ldr	r3, [pc, #248]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ac:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x34>
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d121      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d11e      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e005      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019f0:	4a2b      	ldr	r2, [pc, #172]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10d      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	e004      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d134      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d003      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0xac>
 8001a38:	e005      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a3c:	617b      	str	r3, [r7, #20]
      break;
 8001a3e:	e005      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a42:	617b      	str	r3, [r7, #20]
      break;
 8001a44:	e002      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	617b      	str	r3, [r7, #20]
      break;
 8001a4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	3301      	adds	r3, #1
 8001a58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	fb03 f202 	mul.w	r2, r3, r2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	0e5b      	lsrs	r3, r3, #25
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	08005704 	.word	0x08005704
 8001aa4:	00f42400 	.word	0x00f42400
 8001aa8:	007a1200 	.word	0x007a1200

08001aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000

08001ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ac8:	f7ff fff0 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4904      	ldr	r1, [pc, #16]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	080056fc 	.word	0x080056fc

08001af0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220f      	movs	r2, #15
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_RCC_GetClockConfig+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40022000 	.word	0x40022000

08001b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b6c:	f7ff f9d2 	bl	8000f14 <HAL_PWREx_GetVoltageRange>
 8001b70:	6178      	str	r0, [r7, #20]
 8001b72:	e014      	b.n	8001b9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b8c:	f7ff f9c2 	bl	8000f14 <HAL_PWREx_GetVoltageRange>
 8001b90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba4:	d10b      	bne.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b80      	cmp	r3, #128	; 0x80
 8001baa:	d919      	bls.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2ba0      	cmp	r3, #160	; 0xa0
 8001bb0:	d902      	bls.n	8001bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e013      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bb8:	2301      	movs	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	e010      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b80      	cmp	r3, #128	; 0x80
 8001bc2:	d902      	bls.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e00a      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b80      	cmp	r3, #128	; 0x80
 8001bce:	d102      	bne.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e004      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b70      	cmp	r3, #112	; 0x70
 8001bda:	d101      	bne.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bdc:	2301      	movs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 0207 	bic.w	r2, r3, #7
 8001be8:	4909      	ldr	r1, [pc, #36]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e049      	b.n	8001cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f841 	bl	8001cc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f000 f9da 	bl	800200c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d001      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e04f      	b.n	8001d90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01d      	beq.n	8001d4e <HAL_TIM_Base_Start_IT+0x76>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1a:	d018      	beq.n	8001d4e <HAL_TIM_Base_Start_IT+0x76>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_TIM_Base_Start_IT+0x76>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00e      	beq.n	8001d4e <HAL_TIM_Base_Start_IT+0x76>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_TIM_Base_Start_IT+0x76>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <HAL_TIM_Base_Start_IT+0xd4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d004      	beq.n	8001d4e <HAL_TIM_Base_Start_IT+0x76>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d115      	bne.n	8001d7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b06      	cmp	r3, #6
 8001d5e:	d015      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d011      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d78:	e008      	b.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e000      	b.n	8001d8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40012c00 	.word	0x40012c00
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40000800 	.word	0x40000800
 8001da8:	40000c00 	.word	0x40000c00
 8001dac:	40013400 	.word	0x40013400
 8001db0:	40014000 	.word	0x40014000
 8001db4:	00010007 	.word	0x00010007

08001db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0202 	mvn.w	r2, #2
 8001dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8e4 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8d6 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f8e7 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d020      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0204 	mvn.w	r2, #4
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8be 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8b0 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8c1 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d020      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0208 	mvn.w	r2, #8
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f898 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f88a 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f89b 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d020      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0210 	mvn.w	r2, #16
 8001ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f872 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001eec:	e005      	b.n	8001efa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f864 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f875 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0201 	mvn.w	r2, #1
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fba0 	bl	8000664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f906 	bl	8002154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8fe 	bl	8002168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f834 	bl	8001ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0220 	mvn.w	r2, #32
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8c6 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <TIM_Base_SetConfig+0x114>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202a:	d00f      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3d      	ldr	r2, [pc, #244]	; (8002124 <TIM_Base_SetConfig+0x118>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00b      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3c      	ldr	r2, [pc, #240]	; (8002128 <TIM_Base_SetConfig+0x11c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3b      	ldr	r2, [pc, #236]	; (800212c <TIM_Base_SetConfig+0x120>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <TIM_Base_SetConfig+0x124>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d108      	bne.n	800205e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <TIM_Base_SetConfig+0x114>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01f      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d01b      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2c      	ldr	r2, [pc, #176]	; (8002124 <TIM_Base_SetConfig+0x118>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d017      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <TIM_Base_SetConfig+0x11c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2a      	ldr	r2, [pc, #168]	; (800212c <TIM_Base_SetConfig+0x120>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00f      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <TIM_Base_SetConfig+0x124>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00b      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a28      	ldr	r2, [pc, #160]	; (8002134 <TIM_Base_SetConfig+0x128>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <TIM_Base_SetConfig+0x12c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d003      	beq.n	80020a6 <TIM_Base_SetConfig+0x9a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a26      	ldr	r2, [pc, #152]	; (800213c <TIM_Base_SetConfig+0x130>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d108      	bne.n	80020b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <TIM_Base_SetConfig+0x114>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00f      	beq.n	8002104 <TIM_Base_SetConfig+0xf8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <TIM_Base_SetConfig+0x124>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00b      	beq.n	8002104 <TIM_Base_SetConfig+0xf8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a11      	ldr	r2, [pc, #68]	; (8002134 <TIM_Base_SetConfig+0x128>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d007      	beq.n	8002104 <TIM_Base_SetConfig+0xf8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <TIM_Base_SetConfig+0x12c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d003      	beq.n	8002104 <TIM_Base_SetConfig+0xf8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <TIM_Base_SetConfig+0x130>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d103      	bne.n	800210c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	615a      	str	r2, [r3, #20]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800
 800212c:	40000c00 	.word	0x40000c00
 8002130:	40013400 	.word	0x40013400
 8002134:	40014000 	.word	0x40014000
 8002138:	40014400 	.word	0x40014400
 800213c:	40014800 	.word	0x40014800

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0208 	add.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f103 0208 	add.w	r2, r3, #8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0208 	add.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6892      	ldr	r2, [r2, #8]
 8002234:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6852      	ldr	r2, [r2, #4]
 800223e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	d103      	bne.n	8002252 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002272:	b580      	push	{r7, lr}
 8002274:	b08e      	sub	sp, #56	; 0x38
 8002276:	af04      	add	r7, sp, #16
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <xTaskCreateStatic+0x2a>
        __asm volatile
 8002286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228a:	f383 8811 	msr	BASEPRI, r3
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	f3bf 8f4f 	dsb	sy
 8002296:	623b      	str	r3, [r7, #32]
    }
 8002298:	bf00      	nop
 800229a:	e7fe      	b.n	800229a <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10a      	bne.n	80022b8 <xTaskCreateStatic+0x46>
        __asm volatile
 80022a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a6:	f383 8811 	msr	BASEPRI, r3
 80022aa:	f3bf 8f6f 	isb	sy
 80022ae:	f3bf 8f4f 	dsb	sy
 80022b2:	61fb      	str	r3, [r7, #28]
    }
 80022b4:	bf00      	nop
 80022b6:	e7fe      	b.n	80022b6 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80022b8:	23a0      	movs	r3, #160	; 0xa0
 80022ba:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2ba0      	cmp	r3, #160	; 0xa0
 80022c0:	d00a      	beq.n	80022d8 <xTaskCreateStatic+0x66>
        __asm volatile
 80022c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c6:	f383 8811 	msr	BASEPRI, r3
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	61bb      	str	r3, [r7, #24]
    }
 80022d4:	bf00      	nop
 80022d6:	e7fe      	b.n	80022d6 <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80022d8:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80022da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d023      	beq.n	8002328 <xTaskCreateStatic+0xb6>
 80022e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d020      	beq.n	8002328 <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022ea:	22a0      	movs	r2, #160	; 0xa0
 80022ec:	2100      	movs	r1, #0
 80022ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022f0:	f003 f89a 	bl	8005428 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002302:	2300      	movs	r3, #0
 8002304:	9303      	str	r3, [sp, #12]
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f856 	bl	80023cc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002322:	f000 f8ef 	bl	8002504 <prvAddNewTaskToReadyList>
 8002326:	e001      	b.n	800232c <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800232c:	697b      	ldr	r3, [r7, #20]
    }
 800232e:	4618      	mov	r0, r3
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002336:	b580      	push	{r7, lr}
 8002338:	b08c      	sub	sp, #48	; 0x30
 800233a:	af04      	add	r7, sp, #16
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4618      	mov	r0, r3
 800234c:	f001 fa2e 	bl	80037ac <pvPortMalloc>
 8002350:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002358:	20a0      	movs	r0, #160	; 0xa0
 800235a:	f001 fa27 	bl	80037ac <pvPortMalloc>
 800235e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002366:	22a0      	movs	r2, #160	; 0xa0
 8002368:	2100      	movs	r1, #0
 800236a:	69f8      	ldr	r0, [r7, #28]
 800236c:	f003 f85c 	bl	8005428 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	631a      	str	r2, [r3, #48]	; 0x30
 8002376:	e005      	b.n	8002384 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002378:	6978      	ldr	r0, [r7, #20]
 800237a:	f001 fad1 	bl	8003920 <vPortFree>
 800237e:	e001      	b.n	8002384 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d017      	beq.n	80023ba <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	2300      	movs	r3, #0
 8002396:	9303      	str	r3, [sp, #12]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f80f 	bl	80023cc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023ae:	69f8      	ldr	r0, [r7, #28]
 80023b0:	f000 f8a8 	bl	8002504 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023b4:	2301      	movs	r3, #1
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e002      	b.n	80023c0 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023c0:	69bb      	ldr	r3, [r7, #24]
    }
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023e4:	3b01      	subs	r3, #1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f023 0307 	bic.w	r3, r3, #7
 80023f2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <prvInitialiseNewTask+0x48>
        __asm volatile
 80023fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002402:	f383 8811 	msr	BASEPRI, r3
 8002406:	f3bf 8f6f 	isb	sy
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	617b      	str	r3, [r7, #20]
    }
 8002410:	bf00      	nop
 8002412:	e7fe      	b.n	8002412 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01e      	beq.n	8002458 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e012      	b.n	8002446 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	7819      	ldrb	r1, [r3, #0]
 8002428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	3334      	adds	r3, #52	; 0x34
 8002430:	460a      	mov	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3301      	adds	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d9e9      	bls.n	8002420 <prvInitialiseNewTask+0x54>
 800244c:	e000      	b.n	8002450 <prvInitialiseNewTask+0x84>
            {
                break;
 800244e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	2b06      	cmp	r3, #6
 800245c:	d90a      	bls.n	8002474 <prvInitialiseNewTask+0xa8>
        __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	613b      	str	r3, [r7, #16]
    }
 8002470:	bf00      	nop
 8002472:	e7fe      	b.n	8002472 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002476:	2b06      	cmp	r3, #6
 8002478:	d901      	bls.n	800247e <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800247a:	2306      	movs	r3, #6
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	3304      	adds	r3, #4
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fe94 	bl	80021bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	3318      	adds	r3, #24
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fe8f 	bl	80021bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	f1c3 0207 	rsb	r2, r3, #7
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	334c      	adds	r3, #76	; 0x4c
 80024b8:	224c      	movs	r2, #76	; 0x4c
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 ffb3 	bl	8005428 <memset>
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <prvInitialiseNewTask+0x12c>)
 80024c6:	651a      	str	r2, [r3, #80]	; 0x50
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <prvInitialiseNewTask+0x130>)
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <prvInitialiseNewTask+0x134>)
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	68f9      	ldr	r1, [r7, #12]
 80024d8:	69b8      	ldr	r0, [r7, #24]
 80024da:	f000 fe8b 	bl	80031f4 <pxPortInitialiseStack>
 80024de:	4602      	mov	r2, r0
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024f0:	bf00      	nop
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200042e4 	.word	0x200042e4
 80024fc:	2000434c 	.word	0x2000434c
 8002500:	200043b4 	.word	0x200043b4

08002504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af02      	add	r7, sp, #8
 800250a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800250c:	f001 f822 	bl	8003554 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002510:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <prvAddNewTaskToReadyList+0x144>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a4c      	ldr	r2, [pc, #304]	; (8002648 <prvAddNewTaskToReadyList+0x144>)
 8002518:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800251a:	4b4c      	ldr	r3, [pc, #304]	; (800264c <prvAddNewTaskToReadyList+0x148>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002522:	4a4a      	ldr	r2, [pc, #296]	; (800264c <prvAddNewTaskToReadyList+0x148>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002528:	4b47      	ldr	r3, [pc, #284]	; (8002648 <prvAddNewTaskToReadyList+0x144>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d110      	bne.n	8002552 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002530:	f000 fd8e 	bl	8003050 <prvInitialiseTaskLists>
 8002534:	e00d      	b.n	8002552 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002536:	4b46      	ldr	r3, [pc, #280]	; (8002650 <prvAddNewTaskToReadyList+0x14c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800253e:	4b43      	ldr	r3, [pc, #268]	; (800264c <prvAddNewTaskToReadyList+0x148>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	429a      	cmp	r2, r3
 800254a:	d802      	bhi.n	8002552 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800254c:	4a3f      	ldr	r2, [pc, #252]	; (800264c <prvAddNewTaskToReadyList+0x148>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002552:	4b40      	ldr	r3, [pc, #256]	; (8002654 <prvAddNewTaskToReadyList+0x150>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	4a3e      	ldr	r2, [pc, #248]	; (8002654 <prvAddNewTaskToReadyList+0x150>)
 800255a:	6013      	str	r3, [r2, #0]
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <prvAddNewTaskToReadyList+0x8c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fd37 	bl	8004fd8 <SEGGER_SYSVIEW_OnTaskCreate>
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	461d      	mov	r5, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461c      	mov	r4, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	1ae3      	subs	r3, r4, r3
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	462b      	mov	r3, r5
 800258c:	f001 fb8a 	bl	8003ca4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fda4 	bl	80050e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	2201      	movs	r2, #1
 800259e:	409a      	lsls	r2, r3
 80025a0:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <prvAddNewTaskToReadyList+0x154>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	4a2c      	ldr	r2, [pc, #176]	; (8002658 <prvAddNewTaskToReadyList+0x154>)
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ae:	492b      	ldr	r1, [pc, #172]	; (800265c <prvAddNewTaskToReadyList+0x158>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3304      	adds	r3, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	3204      	adds	r2, #4
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1d1a      	adds	r2, r3, #4
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <prvAddNewTaskToReadyList+0x158>)
 80025ee:	441a      	add	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f8:	4918      	ldr	r1, [pc, #96]	; (800265c <prvAddNewTaskToReadyList+0x158>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1c59      	adds	r1, r3, #1
 8002608:	4814      	ldr	r0, [pc, #80]	; (800265c <prvAddNewTaskToReadyList+0x158>)
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4403      	add	r3, r0
 8002614:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002616:	f000 ffcd 	bl	80035b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <prvAddNewTaskToReadyList+0x14c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00e      	beq.n	8002640 <prvAddNewTaskToReadyList+0x13c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <prvAddNewTaskToReadyList+0x148>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <prvAddNewTaskToReadyList+0x13c>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <prvAddNewTaskToReadyList+0x15c>)
 8002632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bdb0      	pop	{r4, r5, r7, pc}
 8002648:	2000047c 	.word	0x2000047c
 800264c:	2000037c 	.word	0x2000037c
 8002650:	20000488 	.word	0x20000488
 8002654:	20000498 	.word	0x20000498
 8002658:	20000484 	.word	0x20000484
 800265c:	20000380 	.word	0x20000380
 8002660:	e000ed04 	.word	0xe000ed04

08002664 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 800266c:	f000 ff72 	bl	8003554 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <uxTaskPriorityGet+0x18>
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <uxTaskPriorityGet+0x30>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	e000      	b.n	800267e <uxTaskPriorityGet+0x1a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002686:	f000 ff95 	bl	80035b4 <vPortExitCritical>

        return uxReturn;
 800268a:	68bb      	ldr	r3, [r7, #8]
    }
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	2000037c 	.word	0x2000037c

08002698 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af02      	add	r7, sp, #8
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b06      	cmp	r3, #6
 80026aa:	d90a      	bls.n	80026c2 <vTaskPrioritySet+0x2a>
        __asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	60fb      	str	r3, [r7, #12]
    }
 80026be:	bf00      	nop
 80026c0:	e7fe      	b.n	80026c0 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b06      	cmp	r3, #6
 80026c6:	d901      	bls.n	80026cc <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026c8:	2306      	movs	r3, #6
 80026ca:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80026cc:	f000 ff42 	bl	8003554 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <vTaskPrioritySet+0x44>
 80026d6:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <vTaskPrioritySet+0x170>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e000      	b.n	80026de <vTaskPrioritySet+0x46>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 fd3e 	bl	8005164 <SEGGER_SYSVIEW_ShrinkId>
 80026e8:	4603      	mov	r3, r0
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	2028      	movs	r0, #40	; 0x28
 80026f0:	f002 f8ba 	bl	8004868 <SEGGER_SYSVIEW_RecordU32x2>
 80026f4:	69b8      	ldr	r0, [r7, #24]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	461a      	mov	r2, r3
 8002702:	2300      	movs	r3, #0
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	f001 fb33 	bl	8003d74 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d06f      	beq.n	80027fc <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	d90d      	bls.n	8002740 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 8002724:	4b38      	ldr	r3, [pc, #224]	; (8002808 <vTaskPrioritySet+0x170>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	429a      	cmp	r2, r3
 800272c:	d00f      	beq.n	800274e <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <vTaskPrioritySet+0x170>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d309      	bcc.n	800274e <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 800273a:	2301      	movs	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e006      	b.n	800274e <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <vTaskPrioritySet+0x170>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	429a      	cmp	r2, r3
 8002748:	d101      	bne.n	800274e <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800274a:	2301      	movs	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	429a      	cmp	r2, r3
 800275e:	d102      	bne.n	8002766 <vTaskPrioritySet+0xce>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db04      	blt.n	800277e <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f1c3 0207 	rsb	r2, r3, #7
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6959      	ldr	r1, [r3, #20]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4a1f      	ldr	r2, [pc, #124]	; (800280c <vTaskPrioritySet+0x174>)
 800278e:	4413      	add	r3, r2
 8002790:	4299      	cmp	r1, r3
 8002792:	d128      	bne.n	80027e6 <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	3304      	adds	r3, #4
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fd40 	bl	800221e <uxListRemove>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80027a4:	2201      	movs	r2, #1
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43da      	mvns	r2, r3
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <vTaskPrioritySet+0x178>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4013      	ands	r3, r2
 80027b4:	4a16      	ldr	r2, [pc, #88]	; (8002810 <vTaskPrioritySet+0x178>)
 80027b6:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2201      	movs	r2, #1
 80027be:	409a      	lsls	r2, r3
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <vTaskPrioritySet+0x178>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <vTaskPrioritySet+0x178>)
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4a0d      	ldr	r2, [pc, #52]	; (800280c <vTaskPrioritySet+0x174>)
 80027d8:	441a      	add	r2, r3
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3304      	adds	r3, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7ff fcf8 	bl	80021d6 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <vTaskPrioritySet+0x17c>)
 80027ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80027fc:	f000 feda 	bl	80035b4 <vPortExitCritical>
    }
 8002800:	bf00      	nop
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	2000037c 	.word	0x2000037c
 800280c:	20000380 	.word	0x20000380
 8002810:	20000484 	.word	0x20000484
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002826:	463a      	mov	r2, r7
 8002828:	1d39      	adds	r1, r7, #4
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fd20 	bl	8000274 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	9202      	str	r2, [sp, #8]
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2300      	movs	r3, #0
 8002844:	460a      	mov	r2, r1
 8002846:	492b      	ldr	r1, [pc, #172]	; (80028f4 <vTaskStartScheduler+0xdc>)
 8002848:	482b      	ldr	r0, [pc, #172]	; (80028f8 <vTaskStartScheduler+0xe0>)
 800284a:	f7ff fd12 	bl	8002272 <xTaskCreateStatic>
 800284e:	4603      	mov	r3, r0
 8002850:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <vTaskStartScheduler+0xe4>)
 8002852:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8002854:	4b29      	ldr	r3, [pc, #164]	; (80028fc <vTaskStartScheduler+0xe4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800285c:	2301      	movs	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	e001      	b.n	8002866 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d12e      	bne.n	80028ca <vTaskStartScheduler+0xb2>
        __asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	613b      	str	r3, [r7, #16]
    }
 800287e:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <vTaskStartScheduler+0xe8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	334c      	adds	r3, #76	; 0x4c
 8002886:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <vTaskStartScheduler+0xec>)
 8002888:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <vTaskStartScheduler+0xf0>)
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <vTaskStartScheduler+0xf4>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <vTaskStartScheduler+0xf8>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <vTaskStartScheduler+0xe8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3334      	adds	r3, #52	; 0x34
 80028a4:	2205      	movs	r2, #5
 80028a6:	4913      	ldr	r1, [pc, #76]	; (80028f4 <vTaskStartScheduler+0xdc>)
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 fdad 	bl	8005408 <memcmp>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <vTaskStartScheduler+0xa8>
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <vTaskStartScheduler+0xe8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 fbcf 	bl	800505c <SEGGER_SYSVIEW_OnTaskStartExec>
 80028be:	e001      	b.n	80028c4 <vTaskStartScheduler+0xac>
 80028c0:	f002 fb6e 	bl	8004fa0 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80028c4:	f000 fd26 	bl	8003314 <xPortStartScheduler>
 80028c8:	e00e      	b.n	80028e8 <vTaskStartScheduler+0xd0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d10a      	bne.n	80028e8 <vTaskStartScheduler+0xd0>
        __asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	60fb      	str	r3, [r7, #12]
    }
 80028e4:	bf00      	nop
 80028e6:	e7fe      	b.n	80028e6 <vTaskStartScheduler+0xce>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <vTaskStartScheduler+0xfc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	bf00      	nop
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	08005624 	.word	0x08005624
 80028f8:	08003021 	.word	0x08003021
 80028fc:	200004a0 	.word	0x200004a0
 8002900:	2000037c 	.word	0x2000037c
 8002904:	20000060 	.word	0x20000060
 8002908:	2000049c 	.word	0x2000049c
 800290c:	20000488 	.word	0x20000488
 8002910:	20000480 	.word	0x20000480
 8002914:	2000000c 	.word	0x2000000c

08002918 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <vTaskSuspendAll+0x18>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	4a03      	ldr	r2, [pc, #12]	; (8002930 <vTaskSuspendAll+0x18>)
 8002924:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	200004a4 	.word	0x200004a4

08002934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002942:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <xTaskResumeAll+0x1dc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <xTaskResumeAll+0x2c>
        __asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	607b      	str	r3, [r7, #4]
    }
 800295c:	bf00      	nop
 800295e:	e7fe      	b.n	800295e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002960:	f000 fdf8 	bl	8003554 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002964:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <xTaskResumeAll+0x1dc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <xTaskResumeAll+0x1dc>)
 800296c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800296e:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <xTaskResumeAll+0x1dc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 80c4 	bne.w	8002b00 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002978:	4b66      	ldr	r3, [pc, #408]	; (8002b14 <xTaskResumeAll+0x1e0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80bf 	beq.w	8002b00 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002982:	e08e      	b.n	8002aa2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <xTaskResumeAll+0x1e4>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	6a12      	ldr	r2, [r2, #32]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	69d2      	ldr	r2, [r2, #28]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3318      	adds	r3, #24
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d103      	bne.n	80029ba <xTaskResumeAll+0x86>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	6a1a      	ldr	r2, [r3, #32]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	2200      	movs	r2, #0
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	68d2      	ldr	r2, [r2, #12]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	3304      	adds	r3, #4
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d103      	bne.n	80029f8 <xTaskResumeAll+0xc4>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1e5a      	subs	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 fb68 	bl	80050e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	2201      	movs	r2, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <xTaskResumeAll+0x1e8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <xTaskResumeAll+0x1e8>)
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	493e      	ldr	r1, [pc, #248]	; (8002b20 <xTaskResumeAll+0x1ec>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3304      	adds	r3, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	3204      	adds	r2, #4
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	1d1a      	adds	r2, r3, #4
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4a2e      	ldr	r2, [pc, #184]	; (8002b20 <xTaskResumeAll+0x1ec>)
 8002a66:	441a      	add	r2, r3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	615a      	str	r2, [r3, #20]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	492b      	ldr	r1, [pc, #172]	; (8002b20 <xTaskResumeAll+0x1ec>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	4827      	ldr	r0, [pc, #156]	; (8002b20 <xTaskResumeAll+0x1ec>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4403      	add	r3, r0
 8002a8c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <xTaskResumeAll+0x1f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d302      	bcc.n	8002aa2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <xTaskResumeAll+0x1f4>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <xTaskResumeAll+0x1e4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f47f af6c 	bne.w	8002984 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ab2:	f000 fb73 	bl	800319c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <xTaskResumeAll+0x1f8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ac2:	f000 f91d 	bl	8002d00 <xTaskIncrementTick>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <xTaskResumeAll+0x1f4>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f1      	bne.n	8002ac2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <xTaskResumeAll+0x1f8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <xTaskResumeAll+0x1f4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <xTaskResumeAll+0x1fc>)
 8002af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b00:	f000 fd58 	bl	80035b4 <vPortExitCritical>

    return xAlreadyYielded;
 8002b04:	69bb      	ldr	r3, [r7, #24]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200004a4 	.word	0x200004a4
 8002b14:	2000047c 	.word	0x2000047c
 8002b18:	2000043c 	.word	0x2000043c
 8002b1c:	20000484 	.word	0x20000484
 8002b20:	20000380 	.word	0x20000380
 8002b24:	2000037c 	.word	0x2000037c
 8002b28:	20000490 	.word	0x20000490
 8002b2c:	2000048c 	.word	0x2000048c
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b3a:	f000 fdf7 	bl	800372c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <xTaskGetTickCountFromISR+0x20>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b48:	683b      	ldr	r3, [r7, #0]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000480 	.word	0x20000480

08002b58 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB;
        TCB_t * pxFirstTCB;
        TCB_t * pxReturn = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d05b      	beq.n	8002c26 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	3308      	adds	r3, #8
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d104      	bne.n	8002b92 <prvSearchForNameWithinSingleList+0x3a>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	3308      	adds	r3, #8
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d104      	bne.n	8002bbe <prvSearchForNameWithinSingleList+0x66>
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	e01c      	b.n	8002c0a <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3334      	adds	r3, #52	; 0x34
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	7afa      	ldrb	r2, [r7, #11]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d002      	beq.n	8002bf0 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	e006      	b.n	8002bfe <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d106      	bne.n	8002c12 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	3301      	adds	r3, #1
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d9df      	bls.n	8002bd0 <prvSearchForNameWithinSingleList+0x78>
 8002c10:	e000      	b.n	8002c14 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8002c12:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d104      	bne.n	8002c24 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d1bb      	bne.n	8002b9a <prvSearchForNameWithinSingleList+0x42>
 8002c22:	e000      	b.n	8002c26 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8002c24:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002c28:	4618      	mov	r0, r3
 8002c2a:	372c      	adds	r7, #44	; 0x2c
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7fd fb0f 	bl	8000264 <strlen>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b0f      	cmp	r3, #15
 8002c4a:	d90a      	bls.n	8002c62 <xTaskGetHandle+0x2e>
        __asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	60fb      	str	r3, [r7, #12]
    }
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8002c62:	f7ff fe59 	bl	8002918 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <xTaskGetHandle+0xb8>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff6b 	bl	8002b58 <prvSearchForNameWithinSingleList>
 8002c82:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ea      	bne.n	8002c66 <xTaskGetHandle+0x32>
 8002c90:	e000      	b.n	8002c94 <xTaskGetHandle+0x60>
                    break;
 8002c92:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <xTaskGetHandle+0xbc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff59 	bl	8002b58 <prvSearchForNameWithinSingleList>
 8002ca6:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <xTaskGetHandle+0xc0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff4f 	bl	8002b58 <prvSearchForNameWithinSingleList>
 8002cba:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d104      	bne.n	8002ccc <xTaskGetHandle+0x98>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <xTaskGetHandle+0xc4>)
 8002cc6:	f7ff ff47 	bl	8002b58 <prvSearchForNameWithinSingleList>
 8002cca:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <xTaskGetHandle+0xa8>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4809      	ldr	r0, [pc, #36]	; (8002cfc <xTaskGetHandle+0xc8>)
 8002cd6:	f7ff ff3f 	bl	8002b58 <prvSearchForNameWithinSingleList>
 8002cda:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 8002cdc:	f7ff fe2a 	bl	8002934 <xTaskResumeAll>

        return pxTCB;
 8002ce0:	693b      	ldr	r3, [r7, #16]
    }
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000380 	.word	0x20000380
 8002cf0:	20000434 	.word	0x20000434
 8002cf4:	20000438 	.word	0x20000438
 8002cf8:	20000468 	.word	0x20000468
 8002cfc:	20000450 	.word	0x20000450

08002d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d0a:	4b7f      	ldr	r3, [pc, #508]	; (8002f08 <xTaskIncrementTick+0x208>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 80f0 	bne.w	8002ef4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d14:	4b7d      	ldr	r3, [pc, #500]	; (8002f0c <xTaskIncrementTick+0x20c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d1c:	4a7b      	ldr	r2, [pc, #492]	; (8002f0c <xTaskIncrementTick+0x20c>)
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d120      	bne.n	8002d6a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d28:	4b79      	ldr	r3, [pc, #484]	; (8002f10 <xTaskIncrementTick+0x210>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	607b      	str	r3, [r7, #4]
    }
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <xTaskIncrementTick+0x46>
 8002d48:	4b71      	ldr	r3, [pc, #452]	; (8002f10 <xTaskIncrementTick+0x210>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	4b71      	ldr	r3, [pc, #452]	; (8002f14 <xTaskIncrementTick+0x214>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6f      	ldr	r2, [pc, #444]	; (8002f10 <xTaskIncrementTick+0x210>)
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4a6f      	ldr	r2, [pc, #444]	; (8002f14 <xTaskIncrementTick+0x214>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b6e      	ldr	r3, [pc, #440]	; (8002f18 <xTaskIncrementTick+0x218>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a6d      	ldr	r2, [pc, #436]	; (8002f18 <xTaskIncrementTick+0x218>)
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	f000 fa19 	bl	800319c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d6a:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <xTaskIncrementTick+0x21c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a3a      	ldr	r2, [r7, #32]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f0c0 80aa 	bcc.w	8002eca <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d76:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <xTaskIncrementTick+0x210>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d80:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <xTaskIncrementTick+0x21c>)
 8002d82:	f04f 32ff 	mov.w	r2, #4294967295
 8002d86:	601a      	str	r2, [r3, #0]
                    break;
 8002d88:	e09f      	b.n	8002eca <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8a:	4b61      	ldr	r3, [pc, #388]	; (8002f10 <xTaskIncrementTick+0x210>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d9a:	6a3a      	ldr	r2, [r7, #32]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d203      	bcs.n	8002daa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002da2:	4a5e      	ldr	r2, [pc, #376]	; (8002f1c <xTaskIncrementTick+0x21c>)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002da8:	e08f      	b.n	8002eca <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	68d2      	ldr	r2, [r2, #12]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	6892      	ldr	r2, [r2, #8]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d103      	bne.n	8002dd8 <xTaskIncrementTick+0xd8>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	615a      	str	r2, [r3, #20]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1e5a      	subs	r2, r3, #1
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01e      	beq.n	8002e2e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	6a12      	ldr	r2, [r2, #32]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	69d2      	ldr	r2, [r2, #28]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3318      	adds	r3, #24
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d103      	bne.n	8002e1e <xTaskIncrementTick+0x11e>
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2200      	movs	r2, #0
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	1e5a      	subs	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f002 f955 	bl	80050e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <xTaskIncrementTick+0x220>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	4a36      	ldr	r2, [pc, #216]	; (8002f20 <xTaskIncrementTick+0x220>)
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4c:	4935      	ldr	r1, [pc, #212]	; (8002f24 <xTaskIncrementTick+0x224>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3304      	adds	r3, #4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	3204      	adds	r2, #4
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	1d1a      	adds	r2, r3, #4
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <xTaskIncrementTick+0x224>)
 8002e8c:	441a      	add	r2, r3
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	615a      	str	r2, [r3, #20]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	4923      	ldr	r1, [pc, #140]	; (8002f24 <xTaskIncrementTick+0x224>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1c59      	adds	r1, r3, #1
 8002ea6:	481f      	ldr	r0, [pc, #124]	; (8002f24 <xTaskIncrementTick+0x224>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4403      	add	r3, r0
 8002eb2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <xTaskIncrementTick+0x228>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	f67f af59 	bls.w	8002d76 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ec8:	e755      	b.n	8002d76 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <xTaskIncrementTick+0x228>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed0:	4914      	ldr	r1, [pc, #80]	; (8002f24 <xTaskIncrementTick+0x224>)
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d901      	bls.n	8002ee6 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <xTaskIncrementTick+0x22c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	e004      	b.n	8002efe <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <xTaskIncrementTick+0x230>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	4a0d      	ldr	r2, [pc, #52]	; (8002f30 <xTaskIncrementTick+0x230>)
 8002efc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3728      	adds	r7, #40	; 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200004a4 	.word	0x200004a4
 8002f0c:	20000480 	.word	0x20000480
 8002f10:	20000434 	.word	0x20000434
 8002f14:	20000438 	.word	0x20000438
 8002f18:	20000494 	.word	0x20000494
 8002f1c:	2000049c 	.word	0x2000049c
 8002f20:	20000484 	.word	0x20000484
 8002f24:	20000380 	.word	0x20000380
 8002f28:	2000037c 	.word	0x2000037c
 8002f2c:	20000490 	.word	0x20000490
 8002f30:	2000048c 	.word	0x2000048c

08002f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f3a:	4b32      	ldr	r3, [pc, #200]	; (8003004 <vTaskSwitchContext+0xd0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <vTaskSwitchContext+0xd4>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f48:	e057      	b.n	8002ffa <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <vTaskSwitchContext+0xd4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <vTaskSwitchContext+0xd8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
 8002f60:	f1c3 031f 	rsb	r3, r3, #31
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	492a      	ldr	r1, [pc, #168]	; (8003010 <vTaskSwitchContext+0xdc>)
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	607b      	str	r3, [r7, #4]
    }
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <vTaskSwitchContext+0x5a>
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <vTaskSwitchContext+0xdc>)
 8002f9c:	4413      	add	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d104      	bne.n	8002fc0 <vTaskSwitchContext+0x8c>
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4a13      	ldr	r2, [pc, #76]	; (8003014 <vTaskSwitchContext+0xe0>)
 8002fc8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <vTaskSwitchContext+0xe0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3334      	adds	r3, #52	; 0x34
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	4911      	ldr	r1, [pc, #68]	; (8003018 <vTaskSwitchContext+0xe4>)
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f002 fa17 	bl	8005408 <memcmp>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <vTaskSwitchContext+0xb8>
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <vTaskSwitchContext+0xe0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 f839 	bl	800505c <SEGGER_SYSVIEW_OnTaskStartExec>
 8002fea:	e001      	b.n	8002ff0 <vTaskSwitchContext+0xbc>
 8002fec:	f001 ffd8 	bl	8004fa0 <SEGGER_SYSVIEW_OnIdle>
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <vTaskSwitchContext+0xe0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	334c      	adds	r3, #76	; 0x4c
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <vTaskSwitchContext+0xe8>)
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200004a4 	.word	0x200004a4
 8003008:	20000490 	.word	0x20000490
 800300c:	20000484 	.word	0x20000484
 8003010:	20000380 	.word	0x20000380
 8003014:	2000037c 	.word	0x2000037c
 8003018:	08005624 	.word	0x08005624
 800301c:	20000060 	.word	0x20000060

08003020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003028:	f000 f852 	bl	80030d0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <prvIdleTask+0x28>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d9f9      	bls.n	8003028 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <prvIdleTask+0x2c>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003044:	e7f0      	b.n	8003028 <prvIdleTask+0x8>
 8003046:	bf00      	nop
 8003048:	20000380 	.word	0x20000380
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	e00c      	b.n	8003076 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <prvInitialiseTaskLists+0x60>)
 8003068:	4413      	add	r3, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff f886 	bl	800217c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3301      	adds	r3, #1
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b06      	cmp	r3, #6
 800307a:	d9ef      	bls.n	800305c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800307c:	480d      	ldr	r0, [pc, #52]	; (80030b4 <prvInitialiseTaskLists+0x64>)
 800307e:	f7ff f87d 	bl	800217c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003082:	480d      	ldr	r0, [pc, #52]	; (80030b8 <prvInitialiseTaskLists+0x68>)
 8003084:	f7ff f87a 	bl	800217c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003088:	480c      	ldr	r0, [pc, #48]	; (80030bc <prvInitialiseTaskLists+0x6c>)
 800308a:	f7ff f877 	bl	800217c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800308e:	480c      	ldr	r0, [pc, #48]	; (80030c0 <prvInitialiseTaskLists+0x70>)
 8003090:	f7ff f874 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003094:	480b      	ldr	r0, [pc, #44]	; (80030c4 <prvInitialiseTaskLists+0x74>)
 8003096:	f7ff f871 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <prvInitialiseTaskLists+0x78>)
 800309c:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <prvInitialiseTaskLists+0x64>)
 800309e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <prvInitialiseTaskLists+0x7c>)
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <prvInitialiseTaskLists+0x68>)
 80030a4:	601a      	str	r2, [r3, #0]
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000380 	.word	0x20000380
 80030b4:	2000040c 	.word	0x2000040c
 80030b8:	20000420 	.word	0x20000420
 80030bc:	2000043c 	.word	0x2000043c
 80030c0:	20000450 	.word	0x20000450
 80030c4:	20000468 	.word	0x20000468
 80030c8:	20000434 	.word	0x20000434
 80030cc:	20000438 	.word	0x20000438

080030d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030d6:	e019      	b.n	800310c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80030d8:	f000 fa3c 	bl	8003554 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030dc:	4b10      	ldr	r3, [pc, #64]	; (8003120 <prvCheckTasksWaitingTermination+0x50>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f898 	bl	800221e <uxListRemove>
                --uxCurrentNumberOfTasks;
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <prvCheckTasksWaitingTermination+0x54>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <prvCheckTasksWaitingTermination+0x54>)
 80030f6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <prvCheckTasksWaitingTermination+0x58>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <prvCheckTasksWaitingTermination+0x58>)
 8003100:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003102:	f000 fa57 	bl	80035b4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f810 	bl	800312c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <prvCheckTasksWaitingTermination+0x58>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e1      	bne.n	80030d8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000450 	.word	0x20000450
 8003124:	2000047c 	.word	0x2000047c
 8003128:	20000464 	.word	0x20000464

0800312c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <prvDeleteTCB+0x6c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	334c      	adds	r3, #76	; 0x4c
 800313a:	4618      	mov	r0, r3
 800313c:	f002 f97c 	bl	8005438 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003146:	2b00      	cmp	r3, #0
 8003148:	d108      	bne.n	800315c <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fbe6 	bl	8003920 <vPortFree>
                vPortFree( pxTCB );
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fbe3 	bl	8003920 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800315a:	e018      	b.n	800318e <prvDeleteTCB+0x62>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003162:	2b01      	cmp	r3, #1
 8003164:	d103      	bne.n	800316e <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fbda 	bl	8003920 <vPortFree>
    }
 800316c:	e00f      	b.n	800318e <prvDeleteTCB+0x62>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003174:	2b02      	cmp	r3, #2
 8003176:	d00a      	beq.n	800318e <prvDeleteTCB+0x62>
        __asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	60fb      	str	r3, [r7, #12]
    }
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <prvDeleteTCB+0x60>
    }
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000037c 	.word	0x2000037c

0800319c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <prvResetNextTaskUnblockTime+0x30>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <prvResetNextTaskUnblockTime+0x34>)
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031b2:	e005      	b.n	80031c0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <prvResetNextTaskUnblockTime+0x30>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <prvResetNextTaskUnblockTime+0x34>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000434 	.word	0x20000434
 80031d0:	2000049c 	.word	0x2000049c

080031d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <xTaskGetCurrentTaskHandle+0x1c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	607b      	str	r3, [r7, #4]

        return xReturn;
 80031e0:	687b      	ldr	r3, [r7, #4]
    }
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	2000037c 	.word	0x2000037c

080031f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3b04      	subs	r3, #4
 8003204:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800320c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3b04      	subs	r3, #4
 8003212:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0201 	bic.w	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b04      	subs	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <pxPortInitialiseStack+0x64>)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3b14      	subs	r3, #20
 800322e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b04      	subs	r3, #4
 800323a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f06f 0202 	mvn.w	r2, #2
 8003242:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3b20      	subs	r3, #32
 8003248:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	0800325d 	.word	0x0800325d

0800325c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <prvTaskExitError+0x54>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d00a      	beq.n	8003286 <prvTaskExitError+0x2a>
        __asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	60fb      	str	r3, [r7, #12]
    }
 8003282:	bf00      	nop
 8003284:	e7fe      	b.n	8003284 <prvTaskExitError+0x28>
        __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	60bb      	str	r3, [r7, #8]
    }
 8003298:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800329a:	bf00      	nop
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0fc      	beq.n	800329c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	20000010 	.word	0x20000010
	...

080032c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <pxCurrentTCBConst2>)
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	6808      	ldr	r0, [r1, #0]
 80032c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ca:	f380 8809 	msr	PSP, r0
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f04f 0000 	mov.w	r0, #0
 80032d6:	f380 8811 	msr	BASEPRI, r0
 80032da:	4770      	bx	lr
 80032dc:	f3af 8000 	nop.w

080032e0 <pxCurrentTCBConst2>:
 80032e0:	2000037c 	.word	0x2000037c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80032e8:	4808      	ldr	r0, [pc, #32]	; (800330c <prvPortStartFirstTask+0x24>)
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	6800      	ldr	r0, [r0, #0]
 80032ee:	f380 8808 	msr	MSP, r0
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f380 8814 	msr	CONTROL, r0
 80032fa:	b662      	cpsie	i
 80032fc:	b661      	cpsie	f
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	df00      	svc	0
 8003308:	bf00      	nop
 800330a:	0000      	.short	0x0000
 800330c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop

08003314 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800331a:	4b46      	ldr	r3, [pc, #280]	; (8003434 <xPortStartScheduler+0x120>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a46      	ldr	r2, [pc, #280]	; (8003438 <xPortStartScheduler+0x124>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10a      	bne.n	800333a <xPortStartScheduler+0x26>
        __asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	613b      	str	r3, [r7, #16]
    }
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <xPortStartScheduler+0x120>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a3f      	ldr	r2, [pc, #252]	; (800343c <xPortStartScheduler+0x128>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10a      	bne.n	800335a <xPortStartScheduler+0x46>
        __asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	60fb      	str	r3, [r7, #12]
    }
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800335a:	4b39      	ldr	r3, [pc, #228]	; (8003440 <xPortStartScheduler+0x12c>)
 800335c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b31      	ldr	r3, [pc, #196]	; (8003444 <xPortStartScheduler+0x130>)
 8003380:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003382:	4b31      	ldr	r3, [pc, #196]	; (8003448 <xPortStartScheduler+0x134>)
 8003384:	2207      	movs	r2, #7
 8003386:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003388:	e009      	b.n	800339e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800338a:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <xPortStartScheduler+0x134>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3b01      	subs	r3, #1
 8003390:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <xPortStartScheduler+0x134>)
 8003392:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b80      	cmp	r3, #128	; 0x80
 80033a8:	d0ef      	beq.n	800338a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033aa:	4b27      	ldr	r3, [pc, #156]	; (8003448 <xPortStartScheduler+0x134>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1c3 0307 	rsb	r3, r3, #7
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00a      	beq.n	80033cc <xPortStartScheduler+0xb8>
        __asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	60bb      	str	r3, [r7, #8]
    }
 80033c8:	bf00      	nop
 80033ca:	e7fe      	b.n	80033ca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <xPortStartScheduler+0x134>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <xPortStartScheduler+0x134>)
 80033d4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <xPortStartScheduler+0x134>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033de:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <xPortStartScheduler+0x134>)
 80033e0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80033ea:	4b18      	ldr	r3, [pc, #96]	; (800344c <xPortStartScheduler+0x138>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a17      	ldr	r2, [pc, #92]	; (800344c <xPortStartScheduler+0x138>)
 80033f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <xPortStartScheduler+0x138>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a14      	ldr	r2, [pc, #80]	; (800344c <xPortStartScheduler+0x138>)
 80033fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003400:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003402:	f000 f963 	bl	80036cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <xPortStartScheduler+0x13c>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800340c:	f000 f982 	bl	8003714 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003410:	4b10      	ldr	r3, [pc, #64]	; (8003454 <xPortStartScheduler+0x140>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <xPortStartScheduler+0x140>)
 8003416:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800341a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800341c:	f7ff ff64 	bl	80032e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003420:	f7ff fd88 	bl	8002f34 <vTaskSwitchContext>
    prvTaskExitError();
 8003424:	f7ff ff1a 	bl	800325c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	410fc271 	.word	0x410fc271
 800343c:	410fc270 	.word	0x410fc270
 8003440:	e000e400 	.word	0xe000e400
 8003444:	200004a8 	.word	0x200004a8
 8003448:	200004ac 	.word	0x200004ac
 800344c:	e000ed20 	.word	0xe000ed20
 8003450:	20000010 	.word	0x20000010
 8003454:	e000ef34 	.word	0xe000ef34

08003458 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <vInitPrioGroupValue+0xe4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a37      	ldr	r2, [pc, #220]	; (8003540 <vInitPrioGroupValue+0xe8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d10a      	bne.n	800347e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	613b      	str	r3, [r7, #16]
    }
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800347e:	4b2f      	ldr	r3, [pc, #188]	; (800353c <vInitPrioGroupValue+0xe4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a30      	ldr	r2, [pc, #192]	; (8003544 <vInitPrioGroupValue+0xec>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10a      	bne.n	800349e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	60fb      	str	r3, [r7, #12]
    }
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800349e:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <vInitPrioGroupValue+0xf0>)
 80034a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	22ff      	movs	r2, #255	; 0xff
 80034ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <vInitPrioGroupValue+0xf4>)
 80034c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034c6:	4b22      	ldr	r3, [pc, #136]	; (8003550 <vInitPrioGroupValue+0xf8>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034cc:	e009      	b.n	80034e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <vInitPrioGroupValue+0xf8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <vInitPrioGroupValue+0xf8>)
 80034d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d0ef      	beq.n	80034ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034ee:	4b18      	ldr	r3, [pc, #96]	; (8003550 <vInitPrioGroupValue+0xf8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1c3 0307 	rsb	r3, r3, #7
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d00a      	beq.n	8003510 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	60bb      	str	r3, [r7, #8]
    }
 800350c:	bf00      	nop
 800350e:	e7fe      	b.n	800350e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <vInitPrioGroupValue+0xf8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <vInitPrioGroupValue+0xf8>)
 8003518:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <vInitPrioGroupValue+0xf8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003522:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <vInitPrioGroupValue+0xf8>)
 8003524:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000ed00 	.word	0xe000ed00
 8003540:	410fc271 	.word	0x410fc271
 8003544:	410fc270 	.word	0x410fc270
 8003548:	e000e400 	.word	0xe000e400
 800354c:	200004a8 	.word	0x200004a8
 8003550:	200004ac 	.word	0x200004ac

08003554 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
        __asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	607b      	str	r3, [r7, #4]
    }
 800356c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <vPortEnterCritical+0x58>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3301      	adds	r3, #1
 8003574:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <vPortEnterCritical+0x58>)
 8003576:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <vPortEnterCritical+0x58>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10f      	bne.n	80035a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <vPortEnterCritical+0x5c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	603b      	str	r3, [r7, #0]
    }
 800359c:	bf00      	nop
 800359e:	e7fe      	b.n	800359e <vPortEnterCritical+0x4a>
    }
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	20000010 	.word	0x20000010
 80035b0:	e000ed04 	.word	0xe000ed04

080035b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <vPortExitCritical+0x50>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <vPortExitCritical+0x24>
        __asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	607b      	str	r3, [r7, #4]
    }
 80035d4:	bf00      	nop
 80035d6:	e7fe      	b.n	80035d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <vPortExitCritical+0x50>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3b01      	subs	r3, #1
 80035de:	4a09      	ldr	r2, [pc, #36]	; (8003604 <vPortExitCritical+0x50>)
 80035e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <vPortExitCritical+0x50>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <vPortExitCritical+0x42>
 80035ea:	2300      	movs	r3, #0
 80035ec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80035f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000010 	.word	0x20000010
	...

08003610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003610:	f3ef 8009 	mrs	r0, PSP
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <pxCurrentTCBConst>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	f01e 0f10 	tst.w	lr, #16
 8003620:	bf08      	it	eq
 8003622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362a:	6010      	str	r0, [r2, #0]
 800362c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003634:	f380 8811 	msr	BASEPRI, r0
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f7ff fc78 	bl	8002f34 <vTaskSwitchContext>
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f380 8811 	msr	BASEPRI, r0
 800364c:	bc09      	pop	{r0, r3}
 800364e:	6819      	ldr	r1, [r3, #0]
 8003650:	6808      	ldr	r0, [r1, #0]
 8003652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003656:	f01e 0f10 	tst.w	lr, #16
 800365a:	bf08      	it	eq
 800365c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003660:	f380 8809 	msr	PSP, r0
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	f3af 8000 	nop.w

08003670 <pxCurrentTCBConst>:
 8003670:	2000037c 	.word	0x2000037c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop

08003678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
        __asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	607b      	str	r3, [r7, #4]
    }
 8003690:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003692:	f001 fc0b 	bl	8004eac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003696:	f7ff fb33 	bl	8002d00 <xTaskIncrementTick>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d006      	beq.n	80036ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80036a0:	f001 fc62 	bl	8004f68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <SysTick_Handler+0x50>)
 80036a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e001      	b.n	80036b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80036ae:	f001 fc3f 	bl	8004f30 <SEGGER_SYSVIEW_RecordExitISR>
 80036b2:	2300      	movs	r3, #0
 80036b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f383 8811 	msr	BASEPRI, r3
    }
 80036bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <vPortSetupTimerInterrupt+0x34>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036d6:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <vPortSetupTimerInterrupt+0x38>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <vPortSetupTimerInterrupt+0x3c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <vPortSetupTimerInterrupt+0x40>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	4a09      	ldr	r2, [pc, #36]	; (8003710 <vPortSetupTimerInterrupt+0x44>)
 80036ea:	3b01      	subs	r3, #1
 80036ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <vPortSetupTimerInterrupt+0x34>)
 80036f0:	2207      	movs	r2, #7
 80036f2:	601a      	str	r2, [r3, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e010 	.word	0xe000e010
 8003704:	e000e018 	.word	0xe000e018
 8003708:	20000000 	.word	0x20000000
 800370c:	10624dd3 	.word	0x10624dd3
 8003710:	e000e014 	.word	0xe000e014

08003714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003724 <vPortEnableVFP+0x10>
 8003718:	6801      	ldr	r1, [r0, #0]
 800371a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800371e:	6001      	str	r1, [r0, #0]
 8003720:	4770      	bx	lr
 8003722:	0000      	.short	0x0000
 8003724:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop

0800372c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003732:	f3ef 8305 	mrs	r3, IPSR
 8003736:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	d914      	bls.n	8003768 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800373e:	4a17      	ldr	r2, [pc, #92]	; (800379c <vPortValidateInterruptPriority+0x70>)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003748:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <vPortValidateInterruptPriority+0x74>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	7afa      	ldrb	r2, [r7, #11]
 800374e:	429a      	cmp	r2, r3
 8003750:	d20a      	bcs.n	8003768 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	607b      	str	r3, [r7, #4]
    }
 8003764:	bf00      	nop
 8003766:	e7fe      	b.n	8003766 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <vPortValidateInterruptPriority+0x78>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <vPortValidateInterruptPriority+0x7c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d90a      	bls.n	800378e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	603b      	str	r3, [r7, #0]
    }
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <vPortValidateInterruptPriority+0x60>
    }
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	e000e3f0 	.word	0xe000e3f0
 80037a0:	200004a8 	.word	0x200004a8
 80037a4:	e000ed0c 	.word	0xe000ed0c
 80037a8:	200004ac 	.word	0x200004ac

080037ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80037b8:	f7ff f8ae 	bl	8002918 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80037bc:	4b53      	ldr	r3, [pc, #332]	; (800390c <pvPortMalloc+0x160>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037c4:	f000 f908 	bl	80039d8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d012      	beq.n	80037f4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80037ce:	2208      	movs	r2, #8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	3308      	adds	r3, #8
 80037da:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	43db      	mvns	r3, r3
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d804      	bhi.n	80037f0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	e001      	b.n	80037f4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	db70      	blt.n	80038dc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d06d      	beq.n	80038dc <pvPortMalloc+0x130>
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <pvPortMalloc+0x164>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	429a      	cmp	r2, r3
 8003808:	d868      	bhi.n	80038dc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800380a:	4b42      	ldr	r3, [pc, #264]	; (8003914 <pvPortMalloc+0x168>)
 800380c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <pvPortMalloc+0x168>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003814:	e004      	b.n	8003820 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d903      	bls.n	8003832 <pvPortMalloc+0x86>
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f1      	bne.n	8003816 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003832:	4b36      	ldr	r3, [pc, #216]	; (800390c <pvPortMalloc+0x160>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003838:	429a      	cmp	r2, r3
 800383a:	d04f      	beq.n	80038dc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2208      	movs	r2, #8
 8003842:	4413      	add	r3, r2
 8003844:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	2308      	movs	r3, #8
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	429a      	cmp	r2, r3
 800385c:	d91f      	bls.n	800389e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <pvPortMalloc+0xda>
        __asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	613b      	str	r3, [r7, #16]
    }
 8003882:	bf00      	nop
 8003884:	e7fe      	b.n	8003884 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	1ad2      	subs	r2, r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003898:	6978      	ldr	r0, [r7, #20]
 800389a:	f000 f8f9 	bl	8003a90 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <pvPortMalloc+0x164>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <pvPortMalloc+0x164>)
 80038aa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038ac:	4b18      	ldr	r3, [pc, #96]	; (8003910 <pvPortMalloc+0x164>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <pvPortMalloc+0x16c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d203      	bcs.n	80038c0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <pvPortMalloc+0x164>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a16      	ldr	r2, [pc, #88]	; (8003918 <pvPortMalloc+0x16c>)
 80038be:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <pvPortMalloc+0x170>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	4a10      	ldr	r2, [pc, #64]	; (800391c <pvPortMalloc+0x170>)
 80038da:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80038dc:	f7ff f82a 	bl	8002934 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <pvPortMalloc+0x154>
        __asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	60fb      	str	r3, [r7, #12]
    }
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <pvPortMalloc+0x152>
    return pvReturn;
 8003900:	69fb      	ldr	r3, [r7, #28]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3728      	adds	r7, #40	; 0x28
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20001458 	.word	0x20001458
 8003910:	2000145c 	.word	0x2000145c
 8003914:	20001450 	.word	0x20001450
 8003918:	20001460 	.word	0x20001460
 800391c:	20001464 	.word	0x20001464

08003920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d049      	beq.n	80039c6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003932:	2308      	movs	r3, #8
 8003934:	425b      	negs	r3, r3
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4413      	add	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	db0a      	blt.n	800395e <vPortFree+0x3e>
        __asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	60fb      	str	r3, [r7, #12]
    }
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <vPortFree+0x5c>
        __asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	60bb      	str	r3, [r7, #8]
    }
 8003978:	bf00      	nop
 800397a:	e7fe      	b.n	800397a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0fdb      	lsrs	r3, r3, #31
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01c      	beq.n	80039c6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d118      	bne.n	80039c6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80039a0:	f7fe ffba 	bl	8002918 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <vPortFree+0xb0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <vPortFree+0xb0>)
 80039b0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039b2:	6938      	ldr	r0, [r7, #16]
 80039b4:	f000 f86c 	bl	8003a90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <vPortFree+0xb4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <vPortFree+0xb4>)
 80039c0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80039c2:	f7fe ffb7 	bl	8002934 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2000145c 	.word	0x2000145c
 80039d4:	20001468 	.word	0x20001468

080039d8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039de:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80039e2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <prvHeapInit+0xa4>)
 80039e6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3307      	adds	r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0307 	bic.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <prvHeapInit+0xa4>)
 8003a08:	4413      	add	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a10:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <prvHeapInit+0xa8>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a16:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <prvHeapInit+0xa8>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	4413      	add	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a24:	2208      	movs	r2, #8
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0307 	bic.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <prvHeapInit+0xac>)
 8003a38:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <prvHeapInit+0xac>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <prvHeapInit+0xac>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	1ad2      	subs	r2, r2, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <prvHeapInit+0xac>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <prvHeapInit+0xb0>)
 8003a66:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <prvHeapInit+0xb4>)
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	200004b0 	.word	0x200004b0
 8003a80:	20001450 	.word	0x20001450
 8003a84:	20001458 	.word	0x20001458
 8003a88:	20001460 	.word	0x20001460
 8003a8c:	2000145c 	.word	0x2000145c

08003a90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a98:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <prvInsertBlockIntoFreeList+0xac>)
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e002      	b.n	8003aa4 <prvInsertBlockIntoFreeList+0x14>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d8f7      	bhi.n	8003a9e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	4413      	add	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d108      	bne.n	8003ad2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	441a      	add	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	441a      	add	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d118      	bne.n	8003b18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <prvInsertBlockIntoFreeList+0xb0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d00d      	beq.n	8003b0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	e008      	b.n	8003b20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <prvInsertBlockIntoFreeList+0xb0>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e003      	b.n	8003b20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d002      	beq.n	8003b2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20001450 	.word	0x20001450
 8003b40:	20001458 	.word	0x20001458

08003b44 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003b48:	4803      	ldr	r0, [pc, #12]	; (8003b58 <_cbSendSystemDesc+0x14>)
 8003b4a:	f001 f959 	bl	8004e00 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003b4e:	4803      	ldr	r0, [pc, #12]	; (8003b5c <_cbSendSystemDesc+0x18>)
 8003b50:	f001 f956 	bl	8004e00 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003b54:	bf00      	nop
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	0800562c 	.word	0x0800562c
 8003b5c:	08005668 	.word	0x08005668

08003b60 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <SEGGER_SYSVIEW_Conf+0x24>)
 8003b6e:	4a06      	ldr	r2, [pc, #24]	; (8003b88 <SEGGER_SYSVIEW_Conf+0x28>)
 8003b70:	f000 fdcc 	bl	800470c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003b74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b78:	f000 fe0c 	bl	8004794 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000000 	.word	0x20000000
 8003b84:	08003b45 	.word	0x08003b45
 8003b88:	08005734 	.word	0x08005734

08003b8c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	e033      	b.n	8003c00 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003b98:	491e      	ldr	r1, [pc, #120]	; (8003c14 <_cbSendTaskList+0x88>)
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	491a      	ldr	r1, [pc, #104]	; (8003c14 <_cbSendTaskList+0x88>)
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	4c16      	ldr	r4, [pc, #88]	; (8003c14 <_cbSendTaskList+0x88>)
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4423      	add	r3, r4
 8003bc8:	3308      	adds	r3, #8
 8003bca:	681c      	ldr	r4, [r3, #0]
 8003bcc:	4d11      	ldr	r5, [pc, #68]	; (8003c14 <_cbSendTaskList+0x88>)
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	442b      	add	r3, r5
 8003bda:	330c      	adds	r3, #12
 8003bdc:	681d      	ldr	r5, [r3, #0]
 8003bde:	4e0d      	ldr	r6, [pc, #52]	; (8003c14 <_cbSendTaskList+0x88>)
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4433      	add	r3, r6
 8003bec:	3310      	adds	r3, #16
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	f000 f92d 	bl	8003e54 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <_cbSendTaskList+0x8c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d3c6      	bcc.n	8003b98 <_cbSendTaskList+0xc>
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c14:	2000146c 	.word	0x2000146c
 8003c18:	2000150c 	.word	0x2000150c

08003c1c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003c24:	f7fe ff86 	bl	8002b34 <xTaskGetTickCountFromISR>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	469a      	mov	sl, r3
 8003c2e:	4693      	mov	fp, r2
 8003c30:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	f04f 0a00 	mov.w	sl, #0
 8003c40:	f04f 0b00 	mov.w	fp, #0
 8003c44:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003c48:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003c4c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003c50:	4652      	mov	r2, sl
 8003c52:	465b      	mov	r3, fp
 8003c54:	1a14      	subs	r4, r2, r0
 8003c56:	eb63 0501 	sbc.w	r5, r3, r1
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	00ab      	lsls	r3, r5, #2
 8003c64:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003c68:	00a2      	lsls	r2, r4, #2
 8003c6a:	4614      	mov	r4, r2
 8003c6c:	461d      	mov	r5, r3
 8003c6e:	eb14 0800 	adds.w	r8, r4, r0
 8003c72:	eb45 0901 	adc.w	r9, r5, r1
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c8a:	4690      	mov	r8, r2
 8003c8c:	4699      	mov	r9, r3
 8003c8e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003c92:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003ca4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003cb2:	2205      	movs	r2, #5
 8003cb4:	492b      	ldr	r1, [pc, #172]	; (8003d64 <SYSVIEW_AddTask+0xc0>)
 8003cb6:	68b8      	ldr	r0, [r7, #8]
 8003cb8:	f001 fba6 	bl	8005408 <memcmp>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04b      	beq.n	8003d5a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <SYSVIEW_AddTask+0xc4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b07      	cmp	r3, #7
 8003cc8:	d903      	bls.n	8003cd2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003cca:	4828      	ldr	r0, [pc, #160]	; (8003d6c <SYSVIEW_AddTask+0xc8>)
 8003ccc:	f001 fb40 	bl	8005350 <SEGGER_SYSVIEW_Warn>
    return;
 8003cd0:	e044      	b.n	8003d5c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003cd2:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <SYSVIEW_AddTask+0xc4>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4926      	ldr	r1, [pc, #152]	; (8003d70 <SYSVIEW_AddTask+0xcc>)
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <SYSVIEW_AddTask+0xc4>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4921      	ldr	r1, [pc, #132]	; (8003d70 <SYSVIEW_AddTask+0xcc>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <SYSVIEW_AddTask+0xc4>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	491b      	ldr	r1, [pc, #108]	; (8003d70 <SYSVIEW_AddTask+0xcc>)
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <SYSVIEW_AddTask+0xc4>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4916      	ldr	r1, [pc, #88]	; (8003d70 <SYSVIEW_AddTask+0xcc>)
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	330c      	adds	r3, #12
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <SYSVIEW_AddTask+0xc4>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4910      	ldr	r1, [pc, #64]	; (8003d70 <SYSVIEW_AddTask+0xcc>)
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	3310      	adds	r3, #16
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <SYSVIEW_AddTask+0xc4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <SYSVIEW_AddTask+0xc4>)
 8003d46:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f87e 	bl	8003e54 <SYSVIEW_SendTaskInfo>
 8003d58:	e000      	b.n	8003d5c <SYSVIEW_AddTask+0xb8>
    return;
 8003d5a:	bf00      	nop

}
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	08005678 	.word	0x08005678
 8003d68:	2000150c 	.word	0x2000150c
 8003d6c:	08005680 	.word	0x08005680
 8003d70:	2000146c 	.word	0x2000146c

08003d74 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d82:	2205      	movs	r2, #5
 8003d84:	4930      	ldr	r1, [pc, #192]	; (8003e48 <SYSVIEW_UpdateTask+0xd4>)
 8003d86:	68b8      	ldr	r0, [r7, #8]
 8003d88:	f001 fb3e 	bl	8005408 <memcmp>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d056      	beq.n	8003e40 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	e00d      	b.n	8003db4 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003d98:	492c      	ldr	r1, [pc, #176]	; (8003e4c <SYSVIEW_UpdateTask+0xd8>)
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d008      	beq.n	8003dc0 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	3301      	adds	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <SYSVIEW_UpdateTask+0xdc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d3ec      	bcc.n	8003d98 <SYSVIEW_UpdateTask+0x24>
 8003dbe:	e000      	b.n	8003dc2 <SYSVIEW_UpdateTask+0x4e>
      break;
 8003dc0:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <SYSVIEW_UpdateTask+0xdc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d230      	bcs.n	8003e2e <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8003dcc:	491f      	ldr	r1, [pc, #124]	; (8003e4c <SYSVIEW_UpdateTask+0xd8>)
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3304      	adds	r3, #4
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003de0:	491a      	ldr	r1, [pc, #104]	; (8003e4c <SYSVIEW_UpdateTask+0xd8>)
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	3308      	adds	r3, #8
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003df4:	4915      	ldr	r1, [pc, #84]	; (8003e4c <SYSVIEW_UpdateTask+0xd8>)
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	330c      	adds	r3, #12
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8003e08:	4910      	ldr	r1, [pc, #64]	; (8003e4c <SYSVIEW_UpdateTask+0xd8>)
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3310      	adds	r3, #16
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f814 	bl	8003e54 <SYSVIEW_SendTaskInfo>
 8003e2c:	e009      	b.n	8003e42 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff ff33 	bl	8003ca4 <SYSVIEW_AddTask>
 8003e3e:	e000      	b.n	8003e42 <SYSVIEW_UpdateTask+0xce>
    return;
 8003e40:	bf00      	nop
  }
}
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	08005678 	.word	0x08005678
 8003e4c:	2000146c 	.word	0x2000146c
 8003e50:	2000150c 	.word	0x2000150c

08003e54 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003e62:	f107 0314 	add.w	r3, r7, #20
 8003e66:	2214      	movs	r2, #20
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 fadc 	bl	8005428 <memset>
  TaskInfo.TaskID     = TaskID;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fec1 	bl	8004c10 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003e8e:	bf00      	nop
 8003e90:	3728      	adds	r7, #40	; 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e9e:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <_DoInit+0xa0>)
 8003ea0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003ea2:	22a8      	movs	r2, #168	; 0xa8
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	6838      	ldr	r0, [r7, #0]
 8003ea8:	f001 fabe 	bl	8005428 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2203      	movs	r2, #3
 8003eb0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <_DoInit+0xa4>)
 8003ebc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <_DoInit+0xa8>)
 8003ec2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eca:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <_DoInit+0xa4>)
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <_DoInit+0xac>)
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2210      	movs	r2, #16
 8003eee:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003f02:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e00c      	b.n	8003f26 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f1c3 030f 	rsb	r3, r3, #15
 8003f12:	4a0d      	ldr	r2, [pc, #52]	; (8003f48 <_DoInit+0xb0>)
 8003f14:	5cd1      	ldrb	r1, [r2, r3]
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	460a      	mov	r2, r1
 8003f1e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3301      	adds	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b0f      	cmp	r3, #15
 8003f2a:	d9ef      	bls.n	8003f0c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003f2c:	f3bf 8f5f 	dmb	sy
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20001510 	.word	0x20001510
 8003f3c:	080056d0 	.word	0x080056d0
 8003f40:	200015b8 	.word	0x200015b8
 8003f44:	200019b8 	.word	0x200019b8
 8003f48:	0800573c 	.word	0x0800573c

08003f4c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	; 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f58:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f5a:	623b      	str	r3, [r7, #32]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b53      	cmp	r3, #83	; 0x53
 8003f64:	d001      	beq.n	8003f6a <SEGGER_RTT_ReadNoLock+0x1e>
 8003f66:	f7ff ff97 	bl	8003e98 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	4413      	add	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	3360      	adds	r3, #96	; 0x60
 8003f76:	4a37      	ldr	r2, [pc, #220]	; (8004054 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d92b      	bls.n	8003ff0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	bf28      	it	cs
 8003faa:	4613      	movcs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	4413      	add	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	6939      	ldr	r1, [r7, #16]
 8003fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fbe:	f001 fab7 	bl	8005530 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	4413      	add	r3, r2
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4413      	add	r3, r2
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d101      	bne.n	8003ff0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003fec:	2300      	movs	r3, #0
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	bf28      	it	cs
 8004000:	4613      	movcs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d019      	beq.n	800403e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	4413      	add	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	6939      	ldr	r1, [r7, #16]
 8004018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800401a:	f001 fa89 	bl	8005530 <memcpy>
    NumBytesRead += NumBytesRem;
 800401e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4413      	add	r3, r2
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4413      	add	r3, r2
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	4413      	add	r3, r2
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004048:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800404c:	4618      	mov	r0, r3
 800404e:	3730      	adds	r7, #48	; 0x30
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20001510 	.word	0x20001510

08004058 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b53      	cmp	r3, #83	; 0x53
 8004072:	d001      	beq.n	8004078 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004074:	f7ff ff10 	bl	8003e98 <_DoInit>
  SEGGER_RTT_LOCK();
 8004078:	f3ef 8311 	mrs	r3, BASEPRI
 800407c:	f04f 0120 	mov.w	r1, #32
 8004080:	f381 8811 	msr	BASEPRI, r1
 8004084:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004086:	4b35      	ldr	r3, [pc, #212]	; (800415c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004088:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800408e:	6939      	ldr	r1, [r7, #16]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	4613      	mov	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4413      	add	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	440b      	add	r3, r1
 800409e:	3304      	adds	r3, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3301      	adds	r3, #1
 80040aa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	dbeb      	blt.n	800408e <SEGGER_RTT_AllocUpBuffer+0x36>
 80040b6:	e000      	b.n	80040ba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80040b8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	da3f      	bge.n	8004144 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80040c4:	6939      	ldr	r1, [r7, #16]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80040d8:	6939      	ldr	r1, [r7, #16]
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	3304      	adds	r3, #4
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80040ee:	6939      	ldr	r1, [r7, #16]
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	4613      	mov	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	3320      	adds	r3, #32
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004102:	6939      	ldr	r1, [r7, #16]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	3328      	adds	r3, #40	; 0x28
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004116:	6939      	ldr	r1, [r7, #16]
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800412a:	6939      	ldr	r1, [r7, #16]
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	4613      	mov	r3, r2
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	332c      	adds	r3, #44	; 0x2c
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800413e:	f3bf 8f5f 	dmb	sy
 8004142:	e002      	b.n	800414a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004144:	f04f 33ff 	mov.w	r3, #4294967295
 8004148:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004150:	69fb      	ldr	r3, [r7, #28]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20001510 	.word	0x20001510

08004160 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800416e:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b53      	cmp	r3, #83	; 0x53
 800417a:	d001      	beq.n	8004180 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800417c:	f7ff fe8c 	bl	8003e98 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004180:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004182:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d82c      	bhi.n	80041e4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800418a:	f3ef 8311 	mrs	r3, BASEPRI
 800418e:	f04f 0120 	mov.w	r1, #32
 8004192:	f381 8811 	msr	BASEPRI, r1
 8004196:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	3360      	adds	r3, #96	; 0x60
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	4413      	add	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2200      	movs	r2, #0
 80041c6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2200      	movs	r2, #0
 80041cc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041d4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80041de:	2300      	movs	r3, #0
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
 80041e2:	e002      	b.n	80041ea <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3728      	adds	r7, #40	; 0x28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20001510 	.word	0x20001510

080041f8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	60fa      	str	r2, [r7, #12]
 800420e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d90a      	bls.n	800422c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800421a:	e007      	b.n	800422c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	1c53      	adds	r3, r2, #1
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1c59      	adds	r1, r3, #1
 8004226:	60f9      	str	r1, [r7, #12]
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	1e5a      	subs	r2, r3, #1
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <_EncodeStr+0x46>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1ee      	bne.n	800421c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	b2da      	uxtb	r2, r3
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800424a:	68fb      	ldr	r3, [r7, #12]
}
 800424c:	4618      	mov	r0, r3
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3307      	adds	r3, #7
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004276:	4b34      	ldr	r3, [pc, #208]	; (8004348 <_HandleIncomingPacket+0xd8>)
 8004278:	7e1b      	ldrb	r3, [r3, #24]
 800427a:	4618      	mov	r0, r3
 800427c:	1cfb      	adds	r3, r7, #3
 800427e:	2201      	movs	r2, #1
 8004280:	4619      	mov	r1, r3
 8004282:	f7ff fe63 	bl	8003f4c <SEGGER_RTT_ReadNoLock>
 8004286:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d057      	beq.n	800433e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d031      	beq.n	80042f8 <_HandleIncomingPacket+0x88>
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	dc40      	bgt.n	800431a <_HandleIncomingPacket+0xaa>
 8004298:	2b07      	cmp	r3, #7
 800429a:	dc15      	bgt.n	80042c8 <_HandleIncomingPacket+0x58>
 800429c:	2b00      	cmp	r3, #0
 800429e:	dd3c      	ble.n	800431a <_HandleIncomingPacket+0xaa>
 80042a0:	3b01      	subs	r3, #1
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d839      	bhi.n	800431a <_HandleIncomingPacket+0xaa>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <_HandleIncomingPacket+0x3c>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042cf 	.word	0x080042cf
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042db 	.word	0x080042db
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042e7 	.word	0x080042e7
 80042c0:	080042ed 	.word	0x080042ed
 80042c4:	080042f3 	.word	0x080042f3
 80042c8:	2b7f      	cmp	r3, #127	; 0x7f
 80042ca:	d033      	beq.n	8004334 <_HandleIncomingPacket+0xc4>
 80042cc:	e025      	b.n	800431a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80042ce:	f000 fb25 	bl	800491c <SEGGER_SYSVIEW_Start>
      break;
 80042d2:	e034      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80042d4:	f000 fbdc 	bl	8004a90 <SEGGER_SYSVIEW_Stop>
      break;
 80042d8:	e031      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80042da:	f000 fdb5 	bl	8004e48 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80042de:	e02e      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80042e0:	f000 fd7a 	bl	8004dd8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80042e4:	e02b      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80042e6:	f000 fbf9 	bl	8004adc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80042ea:	e028      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80042ec:	f000 fff2 	bl	80052d4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80042f0:	e025      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80042f2:	f000 ffd1 	bl	8005298 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80042f6:	e022      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <_HandleIncomingPacket+0xd8>)
 80042fa:	7e1b      	ldrb	r3, [r3, #24]
 80042fc:	4618      	mov	r0, r3
 80042fe:	1cfb      	adds	r3, r7, #3
 8004300:	2201      	movs	r2, #1
 8004302:	4619      	mov	r1, r3
 8004304:	f7ff fe22 	bl	8003f4c <SEGGER_RTT_ReadNoLock>
 8004308:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 ff36 	bl	8005184 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004318:	e00e      	b.n	8004338 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	b25b      	sxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	da0c      	bge.n	800433c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <_HandleIncomingPacket+0xd8>)
 8004324:	7e1b      	ldrb	r3, [r3, #24]
 8004326:	4618      	mov	r0, r3
 8004328:	1cfb      	adds	r3, r7, #3
 800432a:	2201      	movs	r2, #1
 800432c:	4619      	mov	r1, r3
 800432e:	f7ff fe0d 	bl	8003f4c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004332:	e003      	b.n	800433c <_HandleIncomingPacket+0xcc>
      break;
 8004334:	bf00      	nop
 8004336:	e002      	b.n	800433e <_HandleIncomingPacket+0xce>
      break;
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <_HandleIncomingPacket+0xce>
      break;
 800433c:	bf00      	nop
    }
  }
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200041d0 	.word	0x200041d0

0800434c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	; 0x30
 8004350:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004352:	2301      	movs	r3, #1
 8004354:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	3301      	adds	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004360:	4b31      	ldr	r3, [pc, #196]	; (8004428 <_TrySendOverflowPacket+0xdc>)
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
 8004366:	e00b      	b.n	8004380 <_TrySendOverflowPacket+0x34>
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	b2da      	uxtb	r2, r3
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	1c59      	adds	r1, r3, #1
 8004370:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	09db      	lsrs	r3, r3, #7
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	2b7f      	cmp	r3, #127	; 0x7f
 8004384:	d8f0      	bhi.n	8004368 <_TrySendOverflowPacket+0x1c>
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800438c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004396:	4b25      	ldr	r3, [pc, #148]	; (800442c <_TrySendOverflowPacket+0xe0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800439c:	4b22      	ldr	r3, [pc, #136]	; (8004428 <_TrySendOverflowPacket+0xdc>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	623b      	str	r3, [r7, #32]
 80043ae:	e00b      	b.n	80043c8 <_TrySendOverflowPacket+0x7c>
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	6279      	str	r1, [r7, #36]	; 0x24
 80043ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	09db      	lsrs	r3, r3, #7
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	2b7f      	cmp	r3, #127	; 0x7f
 80043cc:	d8f0      	bhi.n	80043b0 <_TrySendOverflowPacket+0x64>
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	627a      	str	r2, [r7, #36]	; 0x24
 80043d4:	6a3a      	ldr	r2, [r7, #32]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <_TrySendOverflowPacket+0xdc>)
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	4618      	mov	r0, r3
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	1d3b      	adds	r3, r7, #4
 80043ee:	4619      	mov	r1, r3
 80043f0:	f7fb feee 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043f4:	4603      	mov	r3, r0
 80043f6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <_TrySendOverflowPacket+0xdc>)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <_TrySendOverflowPacket+0xdc>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	3b01      	subs	r3, #1
 800440a:	b2da      	uxtb	r2, r3
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <_TrySendOverflowPacket+0xdc>)
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e004      	b.n	800441c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <_TrySendOverflowPacket+0xdc>)
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	3301      	adds	r3, #1
 8004418:	4a03      	ldr	r2, [pc, #12]	; (8004428 <_TrySendOverflowPacket+0xdc>)
 800441a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800441c:	693b      	ldr	r3, [r7, #16]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3730      	adds	r7, #48	; 0x30
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200041d0 	.word	0x200041d0
 800442c:	e0001004 	.word	0xe0001004

08004430 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800443c:	4b98      	ldr	r3, [pc, #608]	; (80046a0 <_SendPacket+0x270>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d010      	beq.n	8004466 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004444:	4b96      	ldr	r3, [pc, #600]	; (80046a0 <_SendPacket+0x270>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 812d 	beq.w	80046a8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800444e:	4b94      	ldr	r3, [pc, #592]	; (80046a0 <_SendPacket+0x270>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d109      	bne.n	800446a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004456:	f7ff ff79 	bl	800434c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800445a:	4b91      	ldr	r3, [pc, #580]	; (80046a0 <_SendPacket+0x270>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	f040 8124 	bne.w	80046ac <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004464:	e001      	b.n	800446a <_SendPacket+0x3a>
    goto Send;
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <_SendPacket+0x3c>
Send:
 800446a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b1f      	cmp	r3, #31
 8004470:	d809      	bhi.n	8004486 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004472:	4b8b      	ldr	r3, [pc, #556]	; (80046a0 <_SendPacket+0x270>)
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	f040 8115 	bne.w	80046b0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b17      	cmp	r3, #23
 800448a:	d807      	bhi.n	800449c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3b01      	subs	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e0c4      	b.n	8004626 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b7f      	cmp	r3, #127	; 0x7f
 80044a8:	d912      	bls.n	80044d0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	09da      	lsrs	r2, r3, #7
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	3a01      	subs	r2, #1
 80044c2:	60fa      	str	r2, [r7, #12]
 80044c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e006      	b.n	80044de <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b7e      	cmp	r3, #126	; 0x7e
 80044e2:	d807      	bhi.n	80044f4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e098      	b.n	8004626 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044fa:	d212      	bcs.n	8004522 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	09da      	lsrs	r2, r3, #7
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	3a01      	subs	r2, #1
 8004514:	60fa      	str	r2, [r7, #12]
 8004516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e081      	b.n	8004626 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004528:	d21d      	bcs.n	8004566 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	0b9a      	lsrs	r2, r3, #14
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3b01      	subs	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	09db      	lsrs	r3, r3, #7
 800453e:	b2db      	uxtb	r3, r3
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	3a01      	subs	r2, #1
 8004544:	60fa      	str	r2, [r7, #12]
 8004546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	3a01      	subs	r2, #1
 8004558:	60fa      	str	r2, [r7, #12]
 800455a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e05f      	b.n	8004626 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456c:	d228      	bcs.n	80045c0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0d5a      	lsrs	r2, r3, #21
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b01      	subs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0b9b      	lsrs	r3, r3, #14
 8004582:	b2db      	uxtb	r3, r3
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	3a01      	subs	r2, #1
 8004588:	60fa      	str	r2, [r7, #12]
 800458a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	09db      	lsrs	r3, r3, #7
 8004598:	b2db      	uxtb	r3, r3
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	3a01      	subs	r2, #1
 800459e:	60fa      	str	r2, [r7, #12]
 80045a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	3a01      	subs	r2, #1
 80045b2:	60fa      	str	r2, [r7, #12]
 80045b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e032      	b.n	8004626 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	0f1a      	lsrs	r2, r3, #28
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	0d5b      	lsrs	r3, r3, #21
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	3a01      	subs	r2, #1
 80045da:	60fa      	str	r2, [r7, #12]
 80045dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0b9b      	lsrs	r3, r3, #14
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	3a01      	subs	r2, #1
 80045f0:	60fa      	str	r2, [r7, #12]
 80045f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	09db      	lsrs	r3, r3, #7
 8004600:	b2db      	uxtb	r3, r3
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	3a01      	subs	r2, #1
 8004606:	60fa      	str	r2, [r7, #12]
 8004608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	3a01      	subs	r2, #1
 800461a:	60fa      	str	r2, [r7, #12]
 800461c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004626:	4b1f      	ldr	r3, [pc, #124]	; (80046a4 <_SendPacket+0x274>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800462c:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <_SendPacket+0x270>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	623b      	str	r3, [r7, #32]
 800463e:	e00b      	b.n	8004658 <_SendPacket+0x228>
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	6279      	str	r1, [r7, #36]	; 0x24
 800464a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	09db      	lsrs	r3, r3, #7
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	2b7f      	cmp	r3, #127	; 0x7f
 800465c:	d8f0      	bhi.n	8004640 <_SendPacket+0x210>
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	627a      	str	r2, [r7, #36]	; 0x24
 8004664:	6a3a      	ldr	r2, [r7, #32]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <_SendPacket+0x270>)
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	4618      	mov	r0, r3
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	461a      	mov	r2, r3
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	f7fb fda7 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004682:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800468a:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <_SendPacket+0x270>)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	60d3      	str	r3, [r2, #12]
 8004690:	e00f      	b.n	80046b2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004692:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <_SendPacket+0x270>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	3301      	adds	r3, #1
 8004698:	b2da      	uxtb	r2, r3
 800469a:	4b01      	ldr	r3, [pc, #4]	; (80046a0 <_SendPacket+0x270>)
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e008      	b.n	80046b2 <_SendPacket+0x282>
 80046a0:	200041d0 	.word	0x200041d0
 80046a4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80046a8:	bf00      	nop
 80046aa:	e002      	b.n	80046b2 <_SendPacket+0x282>
      goto SendDone;
 80046ac:	bf00      	nop
 80046ae:	e000      	b.n	80046b2 <_SendPacket+0x282>
      goto SendDone;
 80046b0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <_SendPacket+0x2d4>)
 80046b4:	7e1b      	ldrb	r3, [r3, #24]
 80046b6:	4619      	mov	r1, r3
 80046b8:	4a13      	ldr	r2, [pc, #76]	; (8004708 <_SendPacket+0x2d8>)
 80046ba:	460b      	mov	r3, r1
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	440b      	add	r3, r1
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	336c      	adds	r3, #108	; 0x6c
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <_SendPacket+0x2d4>)
 80046ca:	7e1b      	ldrb	r3, [r3, #24]
 80046cc:	4618      	mov	r0, r3
 80046ce:	490e      	ldr	r1, [pc, #56]	; (8004708 <_SendPacket+0x2d8>)
 80046d0:	4603      	mov	r3, r0
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4403      	add	r3, r0
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	440b      	add	r3, r1
 80046da:	3370      	adds	r3, #112	; 0x70
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d00b      	beq.n	80046fa <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <_SendPacket+0x2d4>)
 80046e4:	789b      	ldrb	r3, [r3, #2]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <_SendPacket+0x2d4>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80046f0:	f7ff fdbe 	bl	8004270 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <_SendPacket+0x2d4>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80046fa:	bf00      	nop
 80046fc:	3728      	adds	r7, #40	; 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200041d0 	.word	0x200041d0
 8004708:	20001510 	.word	0x20001510

0800470c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800471a:	2300      	movs	r3, #0
 800471c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004720:	4917      	ldr	r1, [pc, #92]	; (8004780 <SEGGER_SYSVIEW_Init+0x74>)
 8004722:	4818      	ldr	r0, [pc, #96]	; (8004784 <SEGGER_SYSVIEW_Init+0x78>)
 8004724:	f7ff fc98 	bl	8004058 <SEGGER_RTT_AllocUpBuffer>
 8004728:	4603      	mov	r3, r0
 800472a:	b2da      	uxtb	r2, r3
 800472c:	4b16      	ldr	r3, [pc, #88]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800472e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004730:	4b15      	ldr	r3, [pc, #84]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004732:	785a      	ldrb	r2, [r3, #1]
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004736:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800473a:	7e1b      	ldrb	r3, [r3, #24]
 800473c:	4618      	mov	r0, r3
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2308      	movs	r3, #8
 8004744:	4a11      	ldr	r2, [pc, #68]	; (800478c <SEGGER_SYSVIEW_Init+0x80>)
 8004746:	490f      	ldr	r1, [pc, #60]	; (8004784 <SEGGER_SYSVIEW_Init+0x78>)
 8004748:	f7ff fd0a 	bl	8004160 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800474e:	2200      	movs	r2, #0
 8004750:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004752:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <SEGGER_SYSVIEW_Init+0x84>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004758:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800475a:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004760:	4a09      	ldr	r2, [pc, #36]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004766:	4a08      	ldr	r2, [pc, #32]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800476c:	4a06      	ldr	r2, [pc, #24]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200019c8 	.word	0x200019c8
 8004784:	080056e4 	.word	0x080056e4
 8004788:	200041d0 	.word	0x200041d0
 800478c:	200041c8 	.word	0x200041c8
 8004790:	e0001004 	.word	0xe0001004

08004794 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6113      	str	r3, [r2, #16]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	200041d0 	.word	0x200041d0

080047b4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047bc:	f3ef 8311 	mrs	r3, BASEPRI
 80047c0:	f04f 0120 	mov.w	r1, #32
 80047c4:	f381 8811 	msr	BASEPRI, r1
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	4808      	ldr	r0, [pc, #32]	; (80047ec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80047cc:	f7ff fd44 	bl	8004258 <_PreparePacket>
 80047d0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	68b8      	ldr	r0, [r7, #8]
 80047d8:	f7ff fe2a 	bl	8004430 <_SendPacket>
  RECORD_END();
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f383 8811 	msr	BASEPRI, r3
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20004200 	.word	0x20004200

080047f0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80047fa:	f3ef 8311 	mrs	r3, BASEPRI
 80047fe:	f04f 0120 	mov.w	r1, #32
 8004802:	f381 8811 	msr	BASEPRI, r1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	4816      	ldr	r0, [pc, #88]	; (8004864 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800480a:	f7ff fd25 	bl	8004258 <_PreparePacket>
 800480e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	61bb      	str	r3, [r7, #24]
 800481c:	e00b      	b.n	8004836 <SEGGER_SYSVIEW_RecordU32+0x46>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	1c59      	adds	r1, r3, #1
 8004826:	61f9      	str	r1, [r7, #28]
 8004828:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	09db      	lsrs	r3, r3, #7
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b7f      	cmp	r3, #127	; 0x7f
 800483a:	d8f0      	bhi.n	800481e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	61fa      	str	r2, [r7, #28]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	6938      	ldr	r0, [r7, #16]
 8004852:	f7ff fded 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f383 8811 	msr	BASEPRI, r3
}
 800485c:	bf00      	nop
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20004200 	.word	0x20004200

08004868 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	; 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004874:	f3ef 8311 	mrs	r3, BASEPRI
 8004878:	f04f 0120 	mov.w	r1, #32
 800487c:	f381 8811 	msr	BASEPRI, r1
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	4825      	ldr	r0, [pc, #148]	; (8004918 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004884:	f7ff fce8 	bl	8004258 <_PreparePacket>
 8004888:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
 8004896:	e00b      	b.n	80048b0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	b2da      	uxtb	r2, r3
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	09db      	lsrs	r3, r3, #7
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b7f      	cmp	r3, #127	; 0x7f
 80048b4:	d8f0      	bhi.n	8004898 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	e00b      	b.n	80048e8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	1c59      	adds	r1, r3, #1
 80048d8:	6279      	str	r1, [r7, #36]	; 0x24
 80048da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	09db      	lsrs	r3, r3, #7
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2b7f      	cmp	r3, #127	; 0x7f
 80048ec:	d8f0      	bhi.n	80048d0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	627a      	str	r2, [r7, #36]	; 0x24
 80048f4:	6a3a      	ldr	r2, [r7, #32]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	6979      	ldr	r1, [r7, #20]
 8004902:	69b8      	ldr	r0, [r7, #24]
 8004904:	f7ff fd94 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f383 8811 	msr	BASEPRI, r3
}
 800490e:	bf00      	nop
 8004910:	3730      	adds	r7, #48	; 0x30
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20004200 	.word	0x20004200

0800491c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	; 0x30
 8004920:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004922:	4b58      	ldr	r3, [pc, #352]	; (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004928:	f3ef 8311 	mrs	r3, BASEPRI
 800492c:	f04f 0120 	mov.w	r1, #32
 8004930:	f381 8811 	msr	BASEPRI, r1
 8004934:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004936:	4b53      	ldr	r3, [pc, #332]	; (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	220a      	movs	r2, #10
 800493c:	4952      	ldr	r1, [pc, #328]	; (8004a88 <SEGGER_SYSVIEW_Start+0x16c>)
 800493e:	4618      	mov	r0, r3
 8004940:	f7fb fc46 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800494a:	200a      	movs	r0, #10
 800494c:	f7ff ff32 	bl	80047b4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004950:	f3ef 8311 	mrs	r3, BASEPRI
 8004954:	f04f 0120 	mov.w	r1, #32
 8004958:	f381 8811 	msr	BASEPRI, r1
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	484b      	ldr	r0, [pc, #300]	; (8004a8c <SEGGER_SYSVIEW_Start+0x170>)
 8004960:	f7ff fc7a 	bl	8004258 <_PreparePacket>
 8004964:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496e:	4b45      	ldr	r3, [pc, #276]	; (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
 8004974:	e00b      	b.n	800498e <SEGGER_SYSVIEW_Start+0x72>
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	b2da      	uxtb	r2, r3
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	1c59      	adds	r1, r3, #1
 800497e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	09db      	lsrs	r3, r3, #7
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	2b7f      	cmp	r3, #127	; 0x7f
 8004992:	d8f0      	bhi.n	8004976 <SEGGER_SYSVIEW_Start+0x5a>
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800499a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
 80049a8:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	e00b      	b.n	80049c8 <SEGGER_SYSVIEW_Start+0xac>
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	6279      	str	r1, [r7, #36]	; 0x24
 80049ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	09db      	lsrs	r3, r3, #7
 80049c6:	623b      	str	r3, [r7, #32]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2b7f      	cmp	r3, #127	; 0x7f
 80049cc:	d8f0      	bhi.n	80049b0 <SEGGER_SYSVIEW_Start+0x94>
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	627a      	str	r2, [r7, #36]	; 0x24
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	4b28      	ldr	r3, [pc, #160]	; (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	e00b      	b.n	8004a02 <SEGGER_SYSVIEW_Start+0xe6>
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	1c59      	adds	r1, r3, #1
 80049f2:	61f9      	str	r1, [r7, #28]
 80049f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	09db      	lsrs	r3, r3, #7
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b7f      	cmp	r3, #127	; 0x7f
 8004a06:	d8f0      	bhi.n	80049ea <SEGGER_SYSVIEW_Start+0xce>
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	61fa      	str	r2, [r7, #28]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e00b      	b.n	8004a3a <SEGGER_SYSVIEW_Start+0x11e>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	1c59      	adds	r1, r3, #1
 8004a2a:	6179      	str	r1, [r7, #20]
 8004a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	09db      	lsrs	r3, r3, #7
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a3e:	d8f0      	bhi.n	8004a22 <SEGGER_SYSVIEW_Start+0x106>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	617a      	str	r2, [r7, #20]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a50:	2218      	movs	r2, #24
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff fceb 	bl	8004430 <_SendPacket>
      RECORD_END();
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a60:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004a6e:	f000 f9eb 	bl	8004e48 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004a72:	f000 f9b1 	bl	8004dd8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004a76:	f000 fc2d 	bl	80052d4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004a7a:	bf00      	nop
 8004a7c:	3730      	adds	r7, #48	; 0x30
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200041d0 	.word	0x200041d0
 8004a88:	08005750 	.word	0x08005750
 8004a8c:	20004200 	.word	0x20004200

08004a90 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a96:	f3ef 8311 	mrs	r3, BASEPRI
 8004a9a:	f04f 0120 	mov.w	r1, #32
 8004a9e:	f381 8811 	msr	BASEPRI, r1
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	480b      	ldr	r0, [pc, #44]	; (8004ad4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004aa6:	f7ff fbd7 	bl	8004258 <_PreparePacket>
 8004aaa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004ab4:	220b      	movs	r2, #11
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	6838      	ldr	r0, [r7, #0]
 8004aba:	f7ff fcb9 	bl	8004430 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f383 8811 	msr	BASEPRI, r3
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20004200 	.word	0x20004200
 8004ad8:	200041d0 	.word	0x200041d0

08004adc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae6:	f04f 0120 	mov.w	r1, #32
 8004aea:	f381 8811 	msr	BASEPRI, r1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	4845      	ldr	r0, [pc, #276]	; (8004c08 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004af2:	f7ff fbb1 	bl	8004258 <_PreparePacket>
 8004af6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b00:	4b42      	ldr	r3, [pc, #264]	; (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b06:	e00b      	b.n	8004b20 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	09db      	lsrs	r3, r3, #7
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	2b7f      	cmp	r3, #127	; 0x7f
 8004b24:	d8f0      	bhi.n	8004b08 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3a:	4b34      	ldr	r3, [pc, #208]	; (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	e00b      	b.n	8004b5a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	1c59      	adds	r1, r3, #1
 8004b4a:	6279      	str	r1, [r7, #36]	; 0x24
 8004b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	09db      	lsrs	r3, r3, #7
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b5e:	d8f0      	bhi.n	8004b42 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	627a      	str	r2, [r7, #36]	; 0x24
 8004b66:	6a3a      	ldr	r2, [r7, #32]
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	e00b      	b.n	8004b94 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	1c59      	adds	r1, r3, #1
 8004b84:	61f9      	str	r1, [r7, #28]
 8004b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	09db      	lsrs	r3, r3, #7
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b7f      	cmp	r3, #127	; 0x7f
 8004b98:	d8f0      	bhi.n	8004b7c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	61fa      	str	r2, [r7, #28]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	e00b      	b.n	8004bcc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	6179      	str	r1, [r7, #20]
 8004bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	09db      	lsrs	r3, r3, #7
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b7f      	cmp	r3, #127	; 0x7f
 8004bd0:	d8f0      	bhi.n	8004bb4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	617a      	str	r2, [r7, #20]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004be2:	2218      	movs	r2, #24
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f7ff fc22 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004bfa:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	4798      	blx	r3
  }
}
 8004c00:	bf00      	nop
 8004c02:	3730      	adds	r7, #48	; 0x30
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20004200 	.word	0x20004200
 8004c0c:	200041d0 	.word	0x200041d0

08004c10 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b092      	sub	sp, #72	; 0x48
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004c18:	f3ef 8311 	mrs	r3, BASEPRI
 8004c1c:	f04f 0120 	mov.w	r1, #32
 8004c20:	f381 8811 	msr	BASEPRI, r1
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	486a      	ldr	r0, [pc, #424]	; (8004dd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004c28:	f7ff fb16 	bl	8004258 <_PreparePacket>
 8004c2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	647b      	str	r3, [r7, #68]	; 0x44
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b66      	ldr	r3, [pc, #408]	; (8004dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	643b      	str	r3, [r7, #64]	; 0x40
 8004c42:	e00b      	b.n	8004c5c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4a:	1c59      	adds	r1, r3, #1
 8004c4c:	6479      	str	r1, [r7, #68]	; 0x44
 8004c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c58:	09db      	lsrs	r3, r3, #7
 8004c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c60:	d8f0      	bhi.n	8004c44 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	647a      	str	r2, [r7, #68]	; 0x44
 8004c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c7c:	e00b      	b.n	8004c96 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c84:	1c59      	adds	r1, r3, #1
 8004c86:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004c88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	09db      	lsrs	r3, r3, #7
 8004c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9a:	d8f0      	bhi.n	8004c7e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004caa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7ff fa9f 	bl	80041f8 <_EncodeStr>
 8004cba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004cbc:	2209      	movs	r2, #9
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	6938      	ldr	r0, [r7, #16]
 8004cc2:	f7ff fbb5 	bl	8004430 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b40      	ldr	r3, [pc, #256]	; (8004dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cda:	e00b      	b.n	8004cf4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	6379      	str	r1, [r7, #52]	; 0x34
 8004ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	09db      	lsrs	r3, r3, #7
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf8:	d8f0      	bhi.n	8004cdc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	637a      	str	r2, [r7, #52]	; 0x34
 8004d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d14:	e00b      	b.n	8004d2e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	1c59      	adds	r1, r3, #1
 8004d1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	09db      	lsrs	r3, r3, #7
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	2b7f      	cmp	r3, #127	; 0x7f
 8004d32:	d8f0      	bhi.n	8004d16 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	e00b      	b.n	8004d68 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	1c59      	adds	r1, r3, #1
 8004d58:	6279      	str	r1, [r7, #36]	; 0x24
 8004d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	09db      	lsrs	r3, r3, #7
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6c:	d8f0      	bhi.n	8004d50 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	627a      	str	r2, [r7, #36]	; 0x24
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e00b      	b.n	8004da0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	1c59      	adds	r1, r3, #1
 8004d90:	61f9      	str	r1, [r7, #28]
 8004d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	09db      	lsrs	r3, r3, #7
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b7f      	cmp	r3, #127	; 0x7f
 8004da4:	d8f0      	bhi.n	8004d88 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	61fa      	str	r2, [r7, #28]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004db6:	2215      	movs	r2, #21
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	6938      	ldr	r0, [r7, #16]
 8004dbc:	f7ff fb38 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f383 8811 	msr	BASEPRI, r3
}
 8004dc6:	bf00      	nop
 8004dc8:	3748      	adds	r7, #72	; 0x48
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20004200 	.word	0x20004200
 8004dd4:	200041d0 	.word	0x200041d0

08004dd8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004dee:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4798      	blx	r3
  }
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200041d0 	.word	0x200041d0

08004e00 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e08:	f3ef 8311 	mrs	r3, BASEPRI
 8004e0c:	f04f 0120 	mov.w	r1, #32
 8004e10:	f381 8811 	msr	BASEPRI, r1
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	480b      	ldr	r0, [pc, #44]	; (8004e44 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004e18:	f7ff fa1e 	bl	8004258 <_PreparePacket>
 8004e1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e1e:	2280      	movs	r2, #128	; 0x80
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	6938      	ldr	r0, [r7, #16]
 8004e24:	f7ff f9e8 	bl	80041f8 <_EncodeStr>
 8004e28:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004e2a:	220e      	movs	r2, #14
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	6938      	ldr	r0, [r7, #16]
 8004e30:	f7ff fafe 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f383 8811 	msr	BASEPRI, r3
}
 8004e3a:	bf00      	nop
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20004200 	.word	0x20004200

08004e48 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d01a      	beq.n	8004e8c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d015      	beq.n	8004e8c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004e60:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4798      	blx	r3
 8004e68:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e6c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	000a      	movs	r2, r1
 8004e7c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e7e:	4613      	mov	r3, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4621      	mov	r1, r4
 8004e84:	200d      	movs	r0, #13
 8004e86:	f7ff fcef 	bl	8004868 <SEGGER_SYSVIEW_RecordU32x2>
 8004e8a:	e006      	b.n	8004e9a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4619      	mov	r1, r3
 8004e92:	200c      	movs	r0, #12
 8004e94:	f7ff fcac 	bl	80047f0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd90      	pop	{r4, r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200041d0 	.word	0x200041d0
 8004ea8:	e0001004 	.word	0xe0001004

08004eac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb6:	f04f 0120 	mov.w	r1, #32
 8004eba:	f381 8811 	msr	BASEPRI, r1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	4819      	ldr	r0, [pc, #100]	; (8004f28 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004ec2:	f7ff f9c9 	bl	8004258 <_PreparePacket>
 8004ec6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ecc:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	e00b      	b.n	8004ef8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	6179      	str	r1, [r7, #20]
 8004eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	09db      	lsrs	r3, r3, #7
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b7f      	cmp	r3, #127	; 0x7f
 8004efc:	d8f0      	bhi.n	8004ee0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	617a      	str	r2, [r7, #20]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004f0e:	2202      	movs	r2, #2
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	68b8      	ldr	r0, [r7, #8]
 8004f14:	f7ff fa8c 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20004200 	.word	0x20004200
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f36:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3a:	f04f 0120 	mov.w	r1, #32
 8004f3e:	f381 8811 	msr	BASEPRI, r1
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	4807      	ldr	r0, [pc, #28]	; (8004f64 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004f46:	f7ff f987 	bl	8004258 <_PreparePacket>
 8004f4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	6838      	ldr	r0, [r7, #0]
 8004f52:	f7ff fa6d 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f383 8811 	msr	BASEPRI, r3
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20004200 	.word	0x20004200

08004f68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f72:	f04f 0120 	mov.w	r1, #32
 8004f76:	f381 8811 	msr	BASEPRI, r1
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	4807      	ldr	r0, [pc, #28]	; (8004f9c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004f7e:	f7ff f96b 	bl	8004258 <_PreparePacket>
 8004f82:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004f84:	2212      	movs	r2, #18
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	6838      	ldr	r0, [r7, #0]
 8004f8a:	f7ff fa51 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f383 8811 	msr	BASEPRI, r3
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20004200 	.word	0x20004200

08004fa0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8004faa:	f04f 0120 	mov.w	r1, #32
 8004fae:	f381 8811 	msr	BASEPRI, r1
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	4807      	ldr	r0, [pc, #28]	; (8004fd4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004fb6:	f7ff f94f 	bl	8004258 <_PreparePacket>
 8004fba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004fbc:	2211      	movs	r2, #17
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6838      	ldr	r0, [r7, #0]
 8004fc2:	f7ff fa35 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f383 8811 	msr	BASEPRI, r3
}
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20004200 	.word	0x20004200

08004fd8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe4:	f04f 0120 	mov.w	r1, #32
 8004fe8:	f381 8811 	msr	BASEPRI, r1
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	4819      	ldr	r0, [pc, #100]	; (8005054 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004ff0:	f7ff f932 	bl	8004258 <_PreparePacket>
 8004ff4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ffa:	4b17      	ldr	r3, [pc, #92]	; (8005058 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	e00b      	b.n	8005026 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	1c59      	adds	r1, r3, #1
 8005016:	61f9      	str	r1, [r7, #28]
 8005018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	09db      	lsrs	r3, r3, #7
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b7f      	cmp	r3, #127	; 0x7f
 800502a:	d8f0      	bhi.n	800500e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	61fa      	str	r2, [r7, #28]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800503c:	2208      	movs	r2, #8
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	6938      	ldr	r0, [r7, #16]
 8005042:	f7ff f9f5 	bl	8004430 <_SendPacket>
  RECORD_END();
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f383 8811 	msr	BASEPRI, r3
}
 800504c:	bf00      	nop
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20004200 	.word	0x20004200
 8005058:	200041d0 	.word	0x200041d0

0800505c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005064:	f3ef 8311 	mrs	r3, BASEPRI
 8005068:	f04f 0120 	mov.w	r1, #32
 800506c:	f381 8811 	msr	BASEPRI, r1
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	4819      	ldr	r0, [pc, #100]	; (80050d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005074:	f7ff f8f0 	bl	8004258 <_PreparePacket>
 8005078:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800507e:	4b17      	ldr	r3, [pc, #92]	; (80050dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e00b      	b.n	80050aa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	b2da      	uxtb	r2, r3
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	1c59      	adds	r1, r3, #1
 800509a:	61f9      	str	r1, [r7, #28]
 800509c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	09db      	lsrs	r3, r3, #7
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b7f      	cmp	r3, #127	; 0x7f
 80050ae:	d8f0      	bhi.n	8005092 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	61fa      	str	r2, [r7, #28]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80050c0:	2204      	movs	r2, #4
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	6938      	ldr	r0, [r7, #16]
 80050c6:	f7ff f9b3 	bl	8004430 <_SendPacket>
  RECORD_END();
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f383 8811 	msr	BASEPRI, r3
}
 80050d0:	bf00      	nop
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20004200 	.word	0x20004200
 80050dc:	200041d0 	.word	0x200041d0

080050e0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050e8:	f3ef 8311 	mrs	r3, BASEPRI
 80050ec:	f04f 0120 	mov.w	r1, #32
 80050f0:	f381 8811 	msr	BASEPRI, r1
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	4819      	ldr	r0, [pc, #100]	; (800515c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80050f8:	f7ff f8ae 	bl	8004258 <_PreparePacket>
 80050fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005102:	4b17      	ldr	r3, [pc, #92]	; (8005160 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	e00b      	b.n	800512e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	b2da      	uxtb	r2, r3
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	1c59      	adds	r1, r3, #1
 800511e:	61f9      	str	r1, [r7, #28]
 8005120:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	09db      	lsrs	r3, r3, #7
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b7f      	cmp	r3, #127	; 0x7f
 8005132:	d8f0      	bhi.n	8005116 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	61fa      	str	r2, [r7, #28]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005144:	2206      	movs	r2, #6
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	6938      	ldr	r0, [r7, #16]
 800514a:	f7ff f971 	bl	8004430 <_SendPacket>
  RECORD_END();
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f383 8811 	msr	BASEPRI, r3
}
 8005154:	bf00      	nop
 8005156:	3720      	adds	r7, #32
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20004200 	.word	0x20004200
 8005160:	200041d0 	.word	0x200041d0

08005164 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	1ad3      	subs	r3, r2, r3
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	200041d0 	.word	0x200041d0

08005184 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800518e:	4b40      	ldr	r3, [pc, #256]	; (8005290 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d077      	beq.n	8005286 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005196:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800519c:	2300      	movs	r3, #0
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a0:	e008      	b.n	80051b4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	3301      	adds	r3, #1
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d3f2      	bcc.n	80051a2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80051bc:	e000      	b.n	80051c0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80051be:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d055      	beq.n	8005272 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051c6:	f3ef 8311 	mrs	r3, BASEPRI
 80051ca:	f04f 0120 	mov.w	r1, #32
 80051ce:	f381 8811 	msr	BASEPRI, r1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	482f      	ldr	r0, [pc, #188]	; (8005294 <SEGGER_SYSVIEW_SendModule+0x110>)
 80051d6:	f7ff f83f 	bl	8004258 <_PreparePacket>
 80051da:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	623b      	str	r3, [r7, #32]
 80051e8:	e00b      	b.n	8005202 <SEGGER_SYSVIEW_SendModule+0x7e>
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	1c59      	adds	r1, r3, #1
 80051f2:	6279      	str	r1, [r7, #36]	; 0x24
 80051f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	09db      	lsrs	r3, r3, #7
 8005200:	623b      	str	r3, [r7, #32]
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	2b7f      	cmp	r3, #127	; 0x7f
 8005206:	d8f0      	bhi.n	80051ea <SEGGER_SYSVIEW_SendModule+0x66>
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	627a      	str	r2, [r7, #36]	; 0x24
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	e00b      	b.n	800523c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	b2da      	uxtb	r2, r3
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	1c59      	adds	r1, r3, #1
 800522c:	61f9      	str	r1, [r7, #28]
 800522e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	09db      	lsrs	r3, r3, #7
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b7f      	cmp	r3, #127	; 0x7f
 8005240:	d8f0      	bhi.n	8005224 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	61fa      	str	r2, [r7, #28]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2280      	movs	r2, #128	; 0x80
 8005258:	4619      	mov	r1, r3
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7fe ffcc 	bl	80041f8 <_EncodeStr>
 8005260:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005262:	2216      	movs	r2, #22
 8005264:	68f9      	ldr	r1, [r7, #12]
 8005266:	6938      	ldr	r0, [r7, #16]
 8005268:	f7ff f8e2 	bl	8004430 <_SendPacket>
      RECORD_END();
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <SEGGER_SYSVIEW_SendModule+0x102>
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4798      	blx	r3
    }
  }
}
 8005286:	bf00      	nop
 8005288:	3730      	adds	r7, #48	; 0x30
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	200041f8 	.word	0x200041f8
 8005294:	20004200 	.word	0x20004200

08005298 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00f      	beq.n	80052c6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f2      	bne.n	80052ac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200041f8 	.word	0x200041f8

080052d4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80052da:	f3ef 8311 	mrs	r3, BASEPRI
 80052de:	f04f 0120 	mov.w	r1, #32
 80052e2:	f381 8811 	msr	BASEPRI, r1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	4817      	ldr	r0, [pc, #92]	; (8005348 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80052ea:	f7fe ffb5 	bl	8004258 <_PreparePacket>
 80052ee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	4b14      	ldr	r3, [pc, #80]	; (800534c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e00b      	b.n	8005318 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	1c59      	adds	r1, r3, #1
 8005308:	6179      	str	r1, [r7, #20]
 800530a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	09db      	lsrs	r3, r3, #7
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b7f      	cmp	r3, #127	; 0x7f
 800531c:	d8f0      	bhi.n	8005300 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	617a      	str	r2, [r7, #20]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800532e:	221b      	movs	r2, #27
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	68b8      	ldr	r0, [r7, #8]
 8005334:	f7ff f87c 	bl	8004430 <_SendPacket>
  RECORD_END();
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f383 8811 	msr	BASEPRI, r3
}
 800533e:	bf00      	nop
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20004200 	.word	0x20004200
 800534c:	200041fc 	.word	0x200041fc

08005350 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005358:	f3ef 8311 	mrs	r3, BASEPRI
 800535c:	f04f 0120 	mov.w	r1, #32
 8005360:	f381 8811 	msr	BASEPRI, r1
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	4827      	ldr	r0, [pc, #156]	; (8005404 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005368:	f7fe ff76 	bl	8004258 <_PreparePacket>
 800536c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	6938      	ldr	r0, [r7, #16]
 8005374:	f7fe ff40 	bl	80041f8 <_EncodeStr>
 8005378:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
 800537e:	2301      	movs	r3, #1
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	e00b      	b.n	800539c <SEGGER_SYSVIEW_Warn+0x4c>
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	6279      	str	r1, [r7, #36]	; 0x24
 800538e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	09db      	lsrs	r3, r3, #7
 800539a:	623b      	str	r3, [r7, #32]
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	2b7f      	cmp	r3, #127	; 0x7f
 80053a0:	d8f0      	bhi.n	8005384 <SEGGER_SYSVIEW_Warn+0x34>
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	627a      	str	r2, [r7, #36]	; 0x24
 80053a8:	6a3a      	ldr	r2, [r7, #32]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	2300      	movs	r3, #0
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	e00b      	b.n	80053d4 <SEGGER_SYSVIEW_Warn+0x84>
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	1c59      	adds	r1, r3, #1
 80053c4:	61f9      	str	r1, [r7, #28]
 80053c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	09db      	lsrs	r3, r3, #7
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	2b7f      	cmp	r3, #127	; 0x7f
 80053d8:	d8f0      	bhi.n	80053bc <SEGGER_SYSVIEW_Warn+0x6c>
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	61fa      	str	r2, [r7, #28]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80053ea:	221a      	movs	r2, #26
 80053ec:	68f9      	ldr	r1, [r7, #12]
 80053ee:	6938      	ldr	r0, [r7, #16]
 80053f0:	f7ff f81e 	bl	8004430 <_SendPacket>
  RECORD_END();
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f383 8811 	msr	BASEPRI, r3
}
 80053fa:	bf00      	nop
 80053fc:	3728      	adds	r7, #40	; 0x28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20004200 	.word	0x20004200

08005408 <memcmp>:
 8005408:	b510      	push	{r4, lr}
 800540a:	3901      	subs	r1, #1
 800540c:	4402      	add	r2, r0
 800540e:	4290      	cmp	r0, r2
 8005410:	d101      	bne.n	8005416 <memcmp+0xe>
 8005412:	2000      	movs	r0, #0
 8005414:	e005      	b.n	8005422 <memcmp+0x1a>
 8005416:	7803      	ldrb	r3, [r0, #0]
 8005418:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800541c:	42a3      	cmp	r3, r4
 800541e:	d001      	beq.n	8005424 <memcmp+0x1c>
 8005420:	1b18      	subs	r0, r3, r4
 8005422:	bd10      	pop	{r4, pc}
 8005424:	3001      	adds	r0, #1
 8005426:	e7f2      	b.n	800540e <memcmp+0x6>

08005428 <memset>:
 8005428:	4402      	add	r2, r0
 800542a:	4603      	mov	r3, r0
 800542c:	4293      	cmp	r3, r2
 800542e:	d100      	bne.n	8005432 <memset+0xa>
 8005430:	4770      	bx	lr
 8005432:	f803 1b01 	strb.w	r1, [r3], #1
 8005436:	e7f9      	b.n	800542c <memset+0x4>

08005438 <_reclaim_reent>:
 8005438:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <_reclaim_reent+0xa8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4283      	cmp	r3, r0
 800543e:	b570      	push	{r4, r5, r6, lr}
 8005440:	4604      	mov	r4, r0
 8005442:	d04b      	beq.n	80054dc <_reclaim_reent+0xa4>
 8005444:	69c3      	ldr	r3, [r0, #28]
 8005446:	b143      	cbz	r3, 800545a <_reclaim_reent+0x22>
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d144      	bne.n	80054d8 <_reclaim_reent+0xa0>
 800544e:	69e3      	ldr	r3, [r4, #28]
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	b111      	cbz	r1, 800545a <_reclaim_reent+0x22>
 8005454:	4620      	mov	r0, r4
 8005456:	f000 f879 	bl	800554c <_free_r>
 800545a:	6961      	ldr	r1, [r4, #20]
 800545c:	b111      	cbz	r1, 8005464 <_reclaim_reent+0x2c>
 800545e:	4620      	mov	r0, r4
 8005460:	f000 f874 	bl	800554c <_free_r>
 8005464:	69e1      	ldr	r1, [r4, #28]
 8005466:	b111      	cbz	r1, 800546e <_reclaim_reent+0x36>
 8005468:	4620      	mov	r0, r4
 800546a:	f000 f86f 	bl	800554c <_free_r>
 800546e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005470:	b111      	cbz	r1, 8005478 <_reclaim_reent+0x40>
 8005472:	4620      	mov	r0, r4
 8005474:	f000 f86a 	bl	800554c <_free_r>
 8005478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800547a:	b111      	cbz	r1, 8005482 <_reclaim_reent+0x4a>
 800547c:	4620      	mov	r0, r4
 800547e:	f000 f865 	bl	800554c <_free_r>
 8005482:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005484:	b111      	cbz	r1, 800548c <_reclaim_reent+0x54>
 8005486:	4620      	mov	r0, r4
 8005488:	f000 f860 	bl	800554c <_free_r>
 800548c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800548e:	b111      	cbz	r1, 8005496 <_reclaim_reent+0x5e>
 8005490:	4620      	mov	r0, r4
 8005492:	f000 f85b 	bl	800554c <_free_r>
 8005496:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005498:	b111      	cbz	r1, 80054a0 <_reclaim_reent+0x68>
 800549a:	4620      	mov	r0, r4
 800549c:	f000 f856 	bl	800554c <_free_r>
 80054a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054a2:	b111      	cbz	r1, 80054aa <_reclaim_reent+0x72>
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 f851 	bl	800554c <_free_r>
 80054aa:	6a23      	ldr	r3, [r4, #32]
 80054ac:	b1b3      	cbz	r3, 80054dc <_reclaim_reent+0xa4>
 80054ae:	4620      	mov	r0, r4
 80054b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80054b4:	4718      	bx	r3
 80054b6:	5949      	ldr	r1, [r1, r5]
 80054b8:	b941      	cbnz	r1, 80054cc <_reclaim_reent+0x94>
 80054ba:	3504      	adds	r5, #4
 80054bc:	69e3      	ldr	r3, [r4, #28]
 80054be:	2d80      	cmp	r5, #128	; 0x80
 80054c0:	68d9      	ldr	r1, [r3, #12]
 80054c2:	d1f8      	bne.n	80054b6 <_reclaim_reent+0x7e>
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 f841 	bl	800554c <_free_r>
 80054ca:	e7c0      	b.n	800544e <_reclaim_reent+0x16>
 80054cc:	680e      	ldr	r6, [r1, #0]
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 f83c 	bl	800554c <_free_r>
 80054d4:	4631      	mov	r1, r6
 80054d6:	e7ef      	b.n	80054b8 <_reclaim_reent+0x80>
 80054d8:	2500      	movs	r5, #0
 80054da:	e7ef      	b.n	80054bc <_reclaim_reent+0x84>
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
 80054de:	bf00      	nop
 80054e0:	20000060 	.word	0x20000060

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4d0d      	ldr	r5, [pc, #52]	; (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	; (8005520 <__libc_init_array+0x3c>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2600      	movs	r6, #0
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4d0b      	ldr	r5, [pc, #44]	; (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	; (8005528 <__libc_init_array+0x44>)
 80054f8:	f000 f880 	bl	80055fc <_init>
 80054fc:	1b64      	subs	r4, r4, r5
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2600      	movs	r6, #0
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	0800575c 	.word	0x0800575c
 8005520:	0800575c 	.word	0x0800575c
 8005524:	0800575c 	.word	0x0800575c
 8005528:	08005760 	.word	0x08005760

0800552c <__retarget_lock_acquire_recursive>:
 800552c:	4770      	bx	lr

0800552e <__retarget_lock_release_recursive>:
 800552e:	4770      	bx	lr

08005530 <memcpy>:
 8005530:	440a      	add	r2, r1
 8005532:	4291      	cmp	r1, r2
 8005534:	f100 33ff 	add.w	r3, r0, #4294967295
 8005538:	d100      	bne.n	800553c <memcpy+0xc>
 800553a:	4770      	bx	lr
 800553c:	b510      	push	{r4, lr}
 800553e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005546:	4291      	cmp	r1, r2
 8005548:	d1f9      	bne.n	800553e <memcpy+0xe>
 800554a:	bd10      	pop	{r4, pc}

0800554c <_free_r>:
 800554c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800554e:	2900      	cmp	r1, #0
 8005550:	d044      	beq.n	80055dc <_free_r+0x90>
 8005552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005556:	9001      	str	r0, [sp, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f1a1 0404 	sub.w	r4, r1, #4
 800555e:	bfb8      	it	lt
 8005560:	18e4      	addlt	r4, r4, r3
 8005562:	f000 f83f 	bl	80055e4 <__malloc_lock>
 8005566:	4a1e      	ldr	r2, [pc, #120]	; (80055e0 <_free_r+0x94>)
 8005568:	9801      	ldr	r0, [sp, #4]
 800556a:	6813      	ldr	r3, [r2, #0]
 800556c:	b933      	cbnz	r3, 800557c <_free_r+0x30>
 800556e:	6063      	str	r3, [r4, #4]
 8005570:	6014      	str	r4, [r2, #0]
 8005572:	b003      	add	sp, #12
 8005574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005578:	f000 b83a 	b.w	80055f0 <__malloc_unlock>
 800557c:	42a3      	cmp	r3, r4
 800557e:	d908      	bls.n	8005592 <_free_r+0x46>
 8005580:	6825      	ldr	r5, [r4, #0]
 8005582:	1961      	adds	r1, r4, r5
 8005584:	428b      	cmp	r3, r1
 8005586:	bf01      	itttt	eq
 8005588:	6819      	ldreq	r1, [r3, #0]
 800558a:	685b      	ldreq	r3, [r3, #4]
 800558c:	1949      	addeq	r1, r1, r5
 800558e:	6021      	streq	r1, [r4, #0]
 8005590:	e7ed      	b.n	800556e <_free_r+0x22>
 8005592:	461a      	mov	r2, r3
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	b10b      	cbz	r3, 800559c <_free_r+0x50>
 8005598:	42a3      	cmp	r3, r4
 800559a:	d9fa      	bls.n	8005592 <_free_r+0x46>
 800559c:	6811      	ldr	r1, [r2, #0]
 800559e:	1855      	adds	r5, r2, r1
 80055a0:	42a5      	cmp	r5, r4
 80055a2:	d10b      	bne.n	80055bc <_free_r+0x70>
 80055a4:	6824      	ldr	r4, [r4, #0]
 80055a6:	4421      	add	r1, r4
 80055a8:	1854      	adds	r4, r2, r1
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	6011      	str	r1, [r2, #0]
 80055ae:	d1e0      	bne.n	8005572 <_free_r+0x26>
 80055b0:	681c      	ldr	r4, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	6053      	str	r3, [r2, #4]
 80055b6:	440c      	add	r4, r1
 80055b8:	6014      	str	r4, [r2, #0]
 80055ba:	e7da      	b.n	8005572 <_free_r+0x26>
 80055bc:	d902      	bls.n	80055c4 <_free_r+0x78>
 80055be:	230c      	movs	r3, #12
 80055c0:	6003      	str	r3, [r0, #0]
 80055c2:	e7d6      	b.n	8005572 <_free_r+0x26>
 80055c4:	6825      	ldr	r5, [r4, #0]
 80055c6:	1961      	adds	r1, r4, r5
 80055c8:	428b      	cmp	r3, r1
 80055ca:	bf04      	itt	eq
 80055cc:	6819      	ldreq	r1, [r3, #0]
 80055ce:	685b      	ldreq	r3, [r3, #4]
 80055d0:	6063      	str	r3, [r4, #4]
 80055d2:	bf04      	itt	eq
 80055d4:	1949      	addeq	r1, r1, r5
 80055d6:	6021      	streq	r1, [r4, #0]
 80055d8:	6054      	str	r4, [r2, #4]
 80055da:	e7ca      	b.n	8005572 <_free_r+0x26>
 80055dc:	b003      	add	sp, #12
 80055de:	bd30      	pop	{r4, r5, pc}
 80055e0:	20004420 	.word	0x20004420

080055e4 <__malloc_lock>:
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <__malloc_lock+0x8>)
 80055e6:	f7ff bfa1 	b.w	800552c <__retarget_lock_acquire_recursive>
 80055ea:	bf00      	nop
 80055ec:	2000441c 	.word	0x2000441c

080055f0 <__malloc_unlock>:
 80055f0:	4801      	ldr	r0, [pc, #4]	; (80055f8 <__malloc_unlock+0x8>)
 80055f2:	f7ff bf9c 	b.w	800552e <__retarget_lock_release_recursive>
 80055f6:	bf00      	nop
 80055f8:	2000441c 	.word	0x2000441c

080055fc <_init>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	bf00      	nop
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr

08005608 <_fini>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr
