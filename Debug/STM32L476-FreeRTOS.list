
STM32L476-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d4  080054d4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080054d4  080054d4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054d4  080054d4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080054dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043b4  20000064  08005540  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004418  08005540  00024418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145f4  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e45  00000000  00000000  000346cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00037510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f16  00000000  00000000  000388c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000293c5  00000000  00000000  000397d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b3c  00000000  00000000  00062b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fafcd  00000000  00000000  000786d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005410  00000000  00000000  001736a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00178ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800536c 	.word	0x0800536c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800536c 	.word	0x0800536c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20001504 	.word	0x20001504

08000264 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	4a07      	ldr	r2, [pc, #28]	; (8000290 <vApplicationGetIdleTaskMemory+0x2c>)
 8000274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	4a06      	ldr	r2, [pc, #24]	; (8000294 <vApplicationGetIdleTaskMemory+0x30>)
 800027a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2280      	movs	r2, #128	; 0x80
 8000280:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000080 	.word	0x20000080
 8000294:	20000120 	.word	0x20000120

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b08a      	sub	sp, #40	; 0x28
 800029c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 fac7 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f86b 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f000 f8bb 	bl	8000420 <MX_GPIO_Init>
  /* Enable the Cortex-M4 CYCCNT counter register.
   * Address: 0xE0001000
   * Access: Read/Write
   * Reset State: 0x40000000
  */
  DWT_CTRL |= (1 << 0);
 80002aa:	4b2d      	ldr	r3, [pc, #180]	; (8000360 <main+0xc8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a2c      	ldr	r2, [pc, #176]	; (8000360 <main+0xc8>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80002b6:	f003 fb8b 	bl	80039d0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80002ba:	f004 f9f7 	bl	80046ac <SEGGER_SYSVIEW_Start>


  xStatus = xTaskCreate(led_1_task, "LED1", 200, NULL, 2, &xTask1);
 80002be:	f107 030c 	add.w	r3, r7, #12
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	2302      	movs	r3, #2
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2300      	movs	r3, #0
 80002ca:	22c8      	movs	r2, #200	; 0xc8
 80002cc:	4925      	ldr	r1, [pc, #148]	; (8000364 <main+0xcc>)
 80002ce:	4826      	ldr	r0, [pc, #152]	; (8000368 <main+0xd0>)
 80002d0:	f002 f872 	bl	80023b8 <xTaskCreate>
 80002d4:	61f8      	str	r0, [r7, #28]
  configASSERT(xStatus == pdPASS);
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d00a      	beq.n	80002f2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002e0:	f383 8811 	msr	BASEPRI, r3
 80002e4:	f3bf 8f6f 	isb	sy
 80002e8:	f3bf 8f4f 	dsb	sy
 80002ec:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002ee:	bf00      	nop
 80002f0:	e7fe      	b.n	80002f0 <main+0x58>

  xStatus = xTaskCreate(led_2_task, "LED2", 200, NULL, 2, &xTask2);
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	2302      	movs	r3, #2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	2300      	movs	r3, #0
 80002fe:	22c8      	movs	r2, #200	; 0xc8
 8000300:	491a      	ldr	r1, [pc, #104]	; (800036c <main+0xd4>)
 8000302:	481b      	ldr	r0, [pc, #108]	; (8000370 <main+0xd8>)
 8000304:	f002 f858 	bl	80023b8 <xTaskCreate>
 8000308:	61f8      	str	r0, [r7, #28]
  configASSERT(xStatus == pdPASS);
 800030a:	69fb      	ldr	r3, [r7, #28]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d00a      	beq.n	8000326 <main+0x8e>
        __asm volatile
 8000310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000314:	f383 8811 	msr	BASEPRI, r3
 8000318:	f3bf 8f6f 	isb	sy
 800031c:	f3bf 8f4f 	dsb	sy
 8000320:	617b      	str	r3, [r7, #20]
    }
 8000322:	bf00      	nop
 8000324:	e7fe      	b.n	8000324 <main+0x8c>

  xStatus = xTaskCreate(led_3_task, "LED3", 200, NULL, 2, &xTask3);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2302      	movs	r3, #2
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	2300      	movs	r3, #0
 8000330:	22c8      	movs	r2, #200	; 0xc8
 8000332:	4910      	ldr	r1, [pc, #64]	; (8000374 <main+0xdc>)
 8000334:	4810      	ldr	r0, [pc, #64]	; (8000378 <main+0xe0>)
 8000336:	f002 f83f 	bl	80023b8 <xTaskCreate>
 800033a:	61f8      	str	r0, [r7, #28]
  configASSERT(xStatus == pdPASS);
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d00a      	beq.n	8000358 <main+0xc0>
        __asm volatile
 8000342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000346:	f383 8811 	msr	BASEPRI, r3
 800034a:	f3bf 8f6f 	isb	sy
 800034e:	f3bf 8f4f 	dsb	sy
 8000352:	613b      	str	r3, [r7, #16]
    }
 8000354:	bf00      	nop
 8000356:	e7fe      	b.n	8000356 <main+0xbe>


  // start the freeRTOS scheduler
   vTaskStartScheduler();
 8000358:	f002 f9fc 	bl	8002754 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800035c:	e7fe      	b.n	800035c <main+0xc4>
 800035e:	bf00      	nop
 8000360:	e0001000 	.word	0xe0001000
 8000364:	08005384 	.word	0x08005384
 8000368:	0800057d 	.word	0x0800057d
 800036c:	0800538c 	.word	0x0800538c
 8000370:	080005a1 	.word	0x080005a1
 8000374:	08005394 	.word	0x08005394
 8000378:	080005c5 	.word	0x080005c5

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b096      	sub	sp, #88	; 0x58
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2244      	movs	r2, #68	; 0x44
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f004 ff04 	bl	8005198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800039e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003a2:	f000 fda9 	bl	8000ef8 <HAL_PWREx_ControlVoltageScaling>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003ac:	f000 f934 	bl	8000618 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b0:	2302      	movs	r3, #2
 80003b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ba:	2310      	movs	r3, #16
 80003bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c2:	2302      	movs	r3, #2
 80003c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003ca:	230a      	movs	r3, #10
 80003cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003ce:	2307      	movs	r3, #7
 80003d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fe28 	bl	8001034 <HAL_RCC_OscConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003ea:	f000 f915 	bl	8000618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ee:	230f      	movs	r3, #15
 80003f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f2:	2303      	movs	r3, #3
 80003f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000402:	463b      	mov	r3, r7
 8000404:	2104      	movs	r1, #4
 8000406:	4618      	mov	r0, r3
 8000408:	f001 f9f0 	bl	80017ec <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000412:	f000 f901 	bl	8000618 <Error_Handler>
  }
}
 8000416:	bf00      	nop
 8000418:	3758      	adds	r7, #88	; 0x58
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b4e      	ldr	r3, [pc, #312]	; (8000570 <MX_GPIO_Init+0x150>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	4a4d      	ldr	r2, [pc, #308]	; (8000570 <MX_GPIO_Init+0x150>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000442:	4b4b      	ldr	r3, [pc, #300]	; (8000570 <MX_GPIO_Init+0x150>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800044e:	4b48      	ldr	r3, [pc, #288]	; (8000570 <MX_GPIO_Init+0x150>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	4a47      	ldr	r2, [pc, #284]	; (8000570 <MX_GPIO_Init+0x150>)
 8000454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045a:	4b45      	ldr	r3, [pc, #276]	; (8000570 <MX_GPIO_Init+0x150>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b42      	ldr	r3, [pc, #264]	; (8000570 <MX_GPIO_Init+0x150>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	4a41      	ldr	r2, [pc, #260]	; (8000570 <MX_GPIO_Init+0x150>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000472:	4b3f      	ldr	r3, [pc, #252]	; (8000570 <MX_GPIO_Init+0x150>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b3c      	ldr	r3, [pc, #240]	; (8000570 <MX_GPIO_Init+0x150>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	4a3b      	ldr	r2, [pc, #236]	; (8000570 <MX_GPIO_Init+0x150>)
 8000484:	f043 0302 	orr.w	r3, r3, #2
 8000488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800048a:	4b39      	ldr	r3, [pc, #228]	; (8000570 <MX_GPIO_Init+0x150>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	f003 0302 	and.w	r3, r3, #2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2103      	movs	r1, #3
 800049a:	4836      	ldr	r0, [pc, #216]	; (8000574 <MX_GPIO_Init+0x154>)
 800049c:	f000 fc94 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2120      	movs	r1, #32
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a8:	f000 fc8e 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2101      	movs	r1, #1
 80004b0:	4831      	ldr	r0, [pc, #196]	; (8000578 <MX_GPIO_Init+0x158>)
 80004b2:	f000 fc89 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4619      	mov	r1, r3
 80004cc:	4829      	ldr	r0, [pc, #164]	; (8000574 <MX_GPIO_Init+0x154>)
 80004ce:	f000 fad1 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004d2:	2303      	movs	r3, #3
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2300      	movs	r3, #0
 80004e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4619      	mov	r1, r3
 80004e8:	4822      	ldr	r0, [pc, #136]	; (8000574 <MX_GPIO_Init+0x154>)
 80004ea:	f000 fac3 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004ee:	230c      	movs	r3, #12
 80004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004fa:	2303      	movs	r3, #3
 80004fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004fe:	2307      	movs	r3, #7
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4619      	mov	r1, r3
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f000 fab2 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000510:	2320      	movs	r3, #32
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	2301      	movs	r3, #1
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	4619      	mov	r1, r3
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f000 faa3 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800052e:	2301      	movs	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <MX_GPIO_Init+0x158>)
 8000546:	f000 fa95 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800054a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000554:	2302      	movs	r3, #2
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	4619      	mov	r1, r3
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f000 fa87 	bl	8000a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000566:	bf00      	nop
 8000568:	3728      	adds	r7, #40	; 0x28
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	48000800 	.word	0x48000800
 8000578:	48000400 	.word	0x48000400

0800057c <led_1_task>:

/* USER CODE BEGIN 4 */

static void led_1_task(void* pvParameters)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
 8000584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000588:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800058a:	2101      	movs	r1, #1
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <led_1_task+0x20>)
 800058e:	f000 fc33 	bl	8000df8 <HAL_GPIO_TogglePin>

		vTaskDelay(xDelay); // 	Periodic task with vTaskDelau()
 8000592:	68f8      	ldr	r0, [r7, #12]
 8000594:	f002 f8a6 	bl	80026e4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000598:	e7f7      	b.n	800058a <led_1_task+0xe>
 800059a:	bf00      	nop
 800059c:	48000800 	.word	0x48000800

080005a0 <led_2_task>:
	}
}

static void led_2_task(void* pvParameters)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = 800 / portTICK_PERIOD_MS;
 80005a8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80005ac:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80005ae:	2102      	movs	r1, #2
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <led_2_task+0x20>)
 80005b2:	f000 fc21 	bl	8000df8 <HAL_GPIO_TogglePin>

		vTaskDelay(xDelay); // 	Periodic task with vTaskDelau()
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	f002 f894 	bl	80026e4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80005bc:	e7f7      	b.n	80005ae <led_2_task+0xe>
 80005be:	bf00      	nop
 80005c0:	48000800 	.word	0x48000800

080005c4 <led_3_task>:
	}
}

static void led_3_task(void* pvParameters)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005cc:	2101      	movs	r1, #1
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <led_3_task+0x1c>)
 80005d0:	f000 fc12 	bl	8000df8 <HAL_GPIO_TogglePin>

		vTaskDelay(pdMS_TO_TICKS(400));  // 	Periodic task with vTaskDelau()
 80005d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80005d8:	f002 f884 	bl	80026e4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005dc:	e7f6      	b.n	80005cc <led_3_task+0x8>
 80005de:	bf00      	nop
 80005e0:	48000400 	.word	0x48000400

080005e4 <vApplicationIdleHook>:
	}
}

void vApplicationIdleHook( void )
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	// Enter low-power mode
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80005e8:	2101      	movs	r1, #1
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fc42 	bl	8000e74 <HAL_PWR_EnterSLEEPMode>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d101      	bne.n	800060a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000606:	f000 f933 	bl	8000870 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40001000 	.word	0x40001000

08000618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
}
 800061e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000620:	e7fe      	b.n	8000620 <Error_Handler+0x8>
	...

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_MspInit+0x44>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_MspInit+0x44>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6613      	str	r3, [r2, #96]	; 0x60
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x44>)
 8000638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_MspInit+0x44>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_MspInit+0x44>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6593      	str	r3, [r2, #88]	; 0x58
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_MspInit+0x44>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  // This initializes a variable which is related to priority grouping
  // This initialization is actually done by the scheduler, but the problem
  // is that the priority grouping initialization is required for the SEGGER
  // start function.
  vInitPrioGroupValue();
 800065a:	f002 fe35 	bl	80032c8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08e      	sub	sp, #56	; 0x38
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000674:	2300      	movs	r3, #0
 8000676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800067a:	4b34      	ldr	r3, [pc, #208]	; (800074c <HAL_InitTick+0xe0>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	4a33      	ldr	r2, [pc, #204]	; (800074c <HAL_InitTick+0xe0>)
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	6593      	str	r3, [r2, #88]	; 0x58
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <HAL_InitTick+0xe0>)
 8000688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000692:	f107 0210 	add.w	r2, r7, #16
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fa53 	bl	8001b48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006a2:	6a3b      	ldr	r3, [r7, #32]
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d103      	bne.n	80006b4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006ac:	f001 fa36 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 80006b0:	6378      	str	r0, [r7, #52]	; 0x34
 80006b2:	e004      	b.n	80006be <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006b4:	f001 fa32 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 80006b8:	4603      	mov	r3, r0
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c0:	4a23      	ldr	r2, [pc, #140]	; (8000750 <HAL_InitTick+0xe4>)
 80006c2:	fba2 2303 	umull	r2, r3, r2, r3
 80006c6:	0c9b      	lsrs	r3, r3, #18
 80006c8:	3b01      	subs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <HAL_InitTick+0xe8>)
 80006ce:	4a22      	ldr	r2, [pc, #136]	; (8000758 <HAL_InitTick+0xec>)
 80006d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_InitTick+0xe8>)
 80006d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <HAL_InitTick+0xe8>)
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_InitTick+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <HAL_InitTick+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_InitTick+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80006f2:	4818      	ldr	r0, [pc, #96]	; (8000754 <HAL_InitTick+0xe8>)
 80006f4:	f001 faba 	bl	8001c6c <HAL_TIM_Base_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000702:	2b00      	cmp	r3, #0
 8000704:	d11b      	bne.n	800073e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000706:	4813      	ldr	r0, [pc, #76]	; (8000754 <HAL_InitTick+0xe8>)
 8000708:	f001 fb12 	bl	8001d30 <HAL_TIM_Base_Start_IT>
 800070c:	4603      	mov	r3, r0
 800070e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000716:	2b00      	cmp	r3, #0
 8000718:	d111      	bne.n	800073e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800071a:	2036      	movs	r0, #54	; 0x36
 800071c:	f000 f99c 	bl	8000a58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b0f      	cmp	r3, #15
 8000724:	d808      	bhi.n	8000738 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000726:	2200      	movs	r2, #0
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	2036      	movs	r0, #54	; 0x36
 800072c:	f000 f978 	bl	8000a20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <HAL_InitTick+0xf0>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	e002      	b.n	800073e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800073e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000742:	4618      	mov	r0, r3
 8000744:	3738      	adds	r7, #56	; 0x38
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	431bde83 	.word	0x431bde83
 8000754:	20000320 	.word	0x20000320
 8000758:	40001000 	.word	0x40001000
 800075c:	20000004 	.word	0x20000004

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000790:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000794:	f000 fb4a 	bl	8000e2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000798:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800079c:	f000 fb46 	bl	8000e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <TIM6_DAC_IRQHandler+0x10>)
 80007aa:	f001 fb31 	bl	8001e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000320 	.word	0x20000320

080007b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <SystemInit+0x20>)
 80007be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <SystemInit+0x20>)
 80007c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000814 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e0:	f7ff ffea 	bl	80007b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490d      	ldr	r1, [pc, #52]	; (800081c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0a      	ldr	r4, [pc, #40]	; (8000828 <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080a:	f004 fd23 	bl	8005254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080e:	f7ff fd43 	bl	8000298 <main>

08000812 <LoopForever>:

LoopForever:
    b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000814:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000820:	080054dc 	.word	0x080054dc
  ldr r2, =_sbss
 8000824:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000828:	20004418 	.word	0x20004418

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_Init+0x3c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <HAL_Init+0x3c>)
 8000840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000844:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000846:	2003      	movs	r0, #3
 8000848:	f000 f8df 	bl	8000a0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084c:	200f      	movs	r0, #15
 800084e:	f7ff ff0d 	bl	800066c <HAL_InitTick>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	e001      	b.n	8000862 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800085e:	f7ff fee1 	bl	8000624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000862:	79fb      	ldrb	r3, [r7, #7]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x20>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_IncTick+0x24>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_IncTick+0x24>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008
 8000894:	2000036c 	.word	0x2000036c

08000898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <HAL_GetTick+0x14>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000036c 	.word	0x2000036c

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ff4c 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a32:	f7ff ff61 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	6978      	ldr	r0, [r7, #20]
 8000a3e:	f7ff ffb1 	bl	80009a4 <NVIC_EncodePriority>
 8000a42:	4602      	mov	r2, r0
 8000a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff80 	bl	8000950 <__NVIC_SetPriority>
}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff54 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	e17f      	b.n	8000d84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8171 	beq.w	8000d7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d005      	beq.n	8000ab4 <HAL_GPIO_Init+0x40>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	f003 0201 	and.w	r2, r3, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d118      	bne.n	8000b54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	f003 0201 	and.w	r2, r3, #1
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0303 	and.w	r3, r3, #3
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d017      	beq.n	8000b90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d123      	bne.n	8000be4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	08da      	lsrs	r2, r3, #3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3208      	adds	r2, #8
 8000ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	08da      	lsrs	r2, r3, #3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3208      	adds	r2, #8
 8000bde:	6939      	ldr	r1, [r7, #16]
 8000be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0203 	and.w	r2, r3, #3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 80ac 	beq.w	8000d7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b5f      	ldr	r3, [pc, #380]	; (8000da4 <HAL_GPIO_Init+0x330>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	4a5e      	ldr	r2, [pc, #376]	; (8000da4 <HAL_GPIO_Init+0x330>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6613      	str	r3, [r2, #96]	; 0x60
 8000c32:	4b5c      	ldr	r3, [pc, #368]	; (8000da4 <HAL_GPIO_Init+0x330>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c3e:	4a5a      	ldr	r2, [pc, #360]	; (8000da8 <HAL_GPIO_Init+0x334>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c68:	d025      	beq.n	8000cb6 <HAL_GPIO_Init+0x242>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a4f      	ldr	r2, [pc, #316]	; (8000dac <HAL_GPIO_Init+0x338>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d01f      	beq.n	8000cb2 <HAL_GPIO_Init+0x23e>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a4e      	ldr	r2, [pc, #312]	; (8000db0 <HAL_GPIO_Init+0x33c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d019      	beq.n	8000cae <HAL_GPIO_Init+0x23a>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a4d      	ldr	r2, [pc, #308]	; (8000db4 <HAL_GPIO_Init+0x340>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d013      	beq.n	8000caa <HAL_GPIO_Init+0x236>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a4c      	ldr	r2, [pc, #304]	; (8000db8 <HAL_GPIO_Init+0x344>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d00d      	beq.n	8000ca6 <HAL_GPIO_Init+0x232>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4b      	ldr	r2, [pc, #300]	; (8000dbc <HAL_GPIO_Init+0x348>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d007      	beq.n	8000ca2 <HAL_GPIO_Init+0x22e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a4a      	ldr	r2, [pc, #296]	; (8000dc0 <HAL_GPIO_Init+0x34c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d101      	bne.n	8000c9e <HAL_GPIO_Init+0x22a>
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	e00c      	b.n	8000cb8 <HAL_GPIO_Init+0x244>
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	e00a      	b.n	8000cb8 <HAL_GPIO_Init+0x244>
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	e008      	b.n	8000cb8 <HAL_GPIO_Init+0x244>
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x244>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e004      	b.n	8000cb8 <HAL_GPIO_Init+0x244>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_Init+0x244>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x244>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	f002 0203 	and.w	r2, r2, #3
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	4093      	lsls	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cc8:	4937      	ldr	r1, [pc, #220]	; (8000da8 <HAL_GPIO_Init+0x334>)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3302      	adds	r3, #2
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <HAL_GPIO_Init+0x350>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cfa:	4a32      	ldr	r2, [pc, #200]	; (8000dc4 <HAL_GPIO_Init+0x350>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_GPIO_Init+0x350>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <HAL_GPIO_Init+0x350>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_GPIO_Init+0x350>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_GPIO_Init+0x350>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_GPIO_Init+0x350>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d78:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <HAL_GPIO_Init+0x350>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f47f ae78 	bne.w	8000a84 <HAL_GPIO_Init+0x10>
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	371c      	adds	r7, #28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010000 	.word	0x40010000
 8000dac:	48000400 	.word	0x48000400
 8000db0:	48000800 	.word	0x48000800
 8000db4:	48000c00 	.word	0x48000c00
 8000db8:	48001000 	.word	0x48001000
 8000dbc:	48001400 	.word	0x48001400
 8000dc0:	48001800 	.word	0x48001800
 8000dc4:	40010400 	.word	0x40010400

08000dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd8:	787b      	ldrb	r3, [r7, #1]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de4:	e002      	b.n	8000dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e0a:	887a      	ldrh	r2, [r7, #2]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	041a      	lsls	r2, r3, #16
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43d9      	mvns	r1, r3
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	400b      	ands	r3, r1
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f806 	bl	8000e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e92:	d10e      	bne.n	8000eb2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8000e94:	f000 f896 	bl	8000fc4 <HAL_PWREx_DisableLowPowerRunMode>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d009      	beq.n	8000eb2 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8000e9e:	e016      	b.n	8000ece <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eac:	d001      	beq.n	8000eb2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8000eae:	f000 f879 	bl	8000fa4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000ec4:	bf30      	wfi
 8000ec6:	e002      	b.n	8000ece <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000ec8:	bf40      	sev
    __WFE();
 8000eca:	bf20      	wfe
    __WFE();
 8000ecc:	bf20      	wfe
  }

}
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40007000 	.word	0x40007000
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f06:	d130      	bne.n	8000f6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f14:	d038      	beq.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f1e:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2232      	movs	r2, #50	; 0x32
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0c9b      	lsrs	r3, r3, #18
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f3c:	e002      	b.n	8000f44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f50:	d102      	bne.n	8000f58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f2      	bne.n	8000f3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f64:	d110      	bne.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e00f      	b.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f76:	d007      	beq.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40007000 	.word	0x40007000
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	431bde83 	.word	0x431bde83

08000fa4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a16      	ldr	r2, [pc, #88]	; (8001028 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000fd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fd4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2232      	movs	r2, #50	; 0x32
 8000fdc:	fb02 f303 	mul.w	r3, r2, r3
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	0c9b      	lsrs	r3, r3, #18
 8000fe8:	3301      	adds	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8000fec:	e002      	b.n	8000ff4 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001000:	d102      	bne.n	8001008 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f2      	bne.n	8000fee <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001014:	d101      	bne.n	800101a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e000      	b.n	800101c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40007000 	.word	0x40007000
 800102c:	20000000 	.word	0x20000000
 8001030:	431bde83 	.word	0x431bde83

08001034 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e3ca      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001046:	4b97      	ldr	r3, [pc, #604]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001050:	4b94      	ldr	r3, [pc, #592]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 80e4 	beq.w	8001230 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <HAL_RCC_OscConfig+0x4a>
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	2b0c      	cmp	r3, #12
 8001072:	f040 808b 	bne.w	800118c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b01      	cmp	r3, #1
 800107a:	f040 8087 	bne.w	800118c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800107e:	4b89      	ldr	r3, [pc, #548]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <HAL_RCC_OscConfig+0x62>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e3a2      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1a      	ldr	r2, [r3, #32]
 800109a:	4b82      	ldr	r3, [pc, #520]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <HAL_RCC_OscConfig+0x7c>
 80010a6:	4b7f      	ldr	r3, [pc, #508]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010ae:	e005      	b.n	80010bc <HAL_RCC_OscConfig+0x88>
 80010b0:	4b7c      	ldr	r3, [pc, #496]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010bc:	4293      	cmp	r3, r2
 80010be:	d223      	bcs.n	8001108 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fd71 	bl	8001bac <RCC_SetFlashLatencyFromMSIRange>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e383      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d4:	4b73      	ldr	r3, [pc, #460]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a72      	ldr	r2, [pc, #456]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	496d      	ldr	r1, [pc, #436]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f2:	4b6c      	ldr	r3, [pc, #432]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	4968      	ldr	r1, [pc, #416]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001102:	4313      	orrs	r3, r2
 8001104:	604b      	str	r3, [r1, #4]
 8001106:	e025      	b.n	8001154 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001108:	4b66      	ldr	r3, [pc, #408]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a65      	ldr	r2, [pc, #404]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4960      	ldr	r1, [pc, #384]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001122:	4313      	orrs	r3, r2
 8001124:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001126:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	495b      	ldr	r1, [pc, #364]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001136:	4313      	orrs	r3, r2
 8001138:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d109      	bne.n	8001154 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fd31 	bl	8001bac <RCC_SetFlashLatencyFromMSIRange>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e343      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001154:	f000 fc4a 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 8001158:	4602      	mov	r2, r0
 800115a:	4b52      	ldr	r3, [pc, #328]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	4950      	ldr	r1, [pc, #320]	; (80012a8 <HAL_RCC_OscConfig+0x274>)
 8001166:	5ccb      	ldrb	r3, [r1, r3]
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	fa22 f303 	lsr.w	r3, r2, r3
 8001170:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <HAL_RCC_OscConfig+0x278>)
 8001172:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001174:	4b4e      	ldr	r3, [pc, #312]	; (80012b0 <HAL_RCC_OscConfig+0x27c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fa77 	bl	800066c <HAL_InitTick>
 800117e:	4603      	mov	r3, r0
 8001180:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d052      	beq.n	800122e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	e327      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d032      	beq.n	80011fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a42      	ldr	r2, [pc, #264]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fb7a 	bl	8000898 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a8:	f7ff fb76 	bl	8000898 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e310      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c6:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a36      	ldr	r2, [pc, #216]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4931      	ldr	r1, [pc, #196]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	492c      	ldr	r1, [pc, #176]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
 80011f8:	e01a      	b.n	8001230 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001206:	f7ff fb47 	bl	8000898 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800120e:	f7ff fb43 	bl	8000898 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e2dd      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f0      	bne.n	800120e <HAL_RCC_OscConfig+0x1da>
 800122c:	e000      	b.n	8001230 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800122e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d074      	beq.n	8001326 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b08      	cmp	r3, #8
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x21a>
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	d10e      	bne.n	8001266 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d10b      	bne.n	8001266 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d064      	beq.n	8001324 <HAL_RCC_OscConfig+0x2f0>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d160      	bne.n	8001324 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e2ba      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x24a>
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e026      	b.n	80012cc <HAL_RCC_OscConfig+0x298>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001286:	d115      	bne.n	80012b4 <HAL_RCC_OscConfig+0x280>
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800128e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a02      	ldr	r2, [pc, #8]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800129a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e014      	b.n	80012cc <HAL_RCC_OscConfig+0x298>
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	08005464 	.word	0x08005464
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004
 80012b4:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a9f      	ldr	r2, [pc, #636]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b9d      	ldr	r3, [pc, #628]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a9c      	ldr	r2, [pc, #624]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fae0 	bl	8000898 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fadc 	bl	8000898 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e276      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ee:	4b92      	ldr	r3, [pc, #584]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x2a8>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff facc 	bl	8000898 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fac8 	bl	8000898 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e262      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x2d0>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d060      	beq.n	80013f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b04      	cmp	r3, #4
 8001336:	d005      	beq.n	8001344 <HAL_RCC_OscConfig+0x310>
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2b0c      	cmp	r3, #12
 800133c:	d119      	bne.n	8001372 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d116      	bne.n	8001372 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001344:	4b7c      	ldr	r3, [pc, #496]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x328>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e23f      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	061b      	lsls	r3, r3, #24
 800136a:	4973      	ldr	r1, [pc, #460]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001370:	e040      	b.n	80013f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d023      	beq.n	80013c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137a:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6e      	ldr	r2, [pc, #440]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7ff fa87 	bl	8000898 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fa83 	bl	8000898 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e21d      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a0:	4b65      	ldr	r3, [pc, #404]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b62      	ldr	r3, [pc, #392]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	061b      	lsls	r3, r3, #24
 80013ba:	495f      	ldr	r1, [pc, #380]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e018      	b.n	80013f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a5c      	ldr	r2, [pc, #368]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7ff fa63 	bl	8000898 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fa5f 	bl	8000898 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e1f9      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d03c      	beq.n	800147a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01c      	beq.n	8001442 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001408:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800140a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140e:	4a4a      	ldr	r2, [pc, #296]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fa3e 	bl	8000898 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fa3a 	bl	8000898 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e1d4      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0ef      	beq.n	8001420 <HAL_RCC_OscConfig+0x3ec>
 8001440:	e01b      	b.n	800147a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001448:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001452:	f7ff fa21 	bl	8000898 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145a:	f7ff fa1d 	bl	8000898 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1b7      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800146c:	4b32      	ldr	r3, [pc, #200]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800146e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1ef      	bne.n	800145a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 80a6 	beq.w	80015d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10d      	bne.n	80014b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	4a26      	ldr	r2, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6593      	str	r3, [r2, #88]	; 0x58
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b0:	2301      	movs	r3, #1
 80014b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <HAL_RCC_OscConfig+0x508>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d118      	bne.n	80014f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_RCC_OscConfig+0x508>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_RCC_OscConfig+0x508>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014cc:	f7ff f9e4 	bl	8000898 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d4:	f7ff f9e0 	bl	8000898 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e17a      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_RCC_OscConfig+0x508>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d108      	bne.n	800150c <HAL_RCC_OscConfig+0x4d8>
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 80014fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800150a:	e029      	b.n	8001560 <HAL_RCC_OscConfig+0x52c>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b05      	cmp	r3, #5
 8001512:	d115      	bne.n	8001540 <HAL_RCC_OscConfig+0x50c>
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152a:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_RCC_OscConfig+0x504>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001534:	e014      	b.n	8001560 <HAL_RCC_OscConfig+0x52c>
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	40007000 	.word	0x40007000
 8001540:	4b9c      	ldr	r3, [pc, #624]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001546:	4a9b      	ldr	r2, [pc, #620]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001550:	4b98      	ldr	r3, [pc, #608]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001556:	4a97      	ldr	r2, [pc, #604]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d016      	beq.n	8001596 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff f996 	bl	8000898 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7ff f992 	bl	8000898 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e12a      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001586:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0ed      	beq.n	8001570 <HAL_RCC_OscConfig+0x53c>
 8001594:	e015      	b.n	80015c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001596:	f7ff f97f 	bl	8000898 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159c:	e00a      	b.n	80015b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff f97b 	bl	8000898 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e113      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b4:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ed      	bne.n	800159e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c2:	7ffb      	ldrb	r3, [r7, #31]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c8:	4b7a      	ldr	r3, [pc, #488]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	4a79      	ldr	r2, [pc, #484]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 80015ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80fe 	beq.w	80017da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	f040 80d0 	bne.w	8001788 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015e8:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d130      	bne.n	800165e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	3b01      	subs	r3, #1
 8001608:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d127      	bne.n	800165e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001618:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d11f      	bne.n	800165e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001628:	2a07      	cmp	r2, #7
 800162a:	bf14      	ite	ne
 800162c:	2201      	movne	r2, #1
 800162e:	2200      	moveq	r2, #0
 8001630:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001632:	4293      	cmp	r3, r2
 8001634:	d113      	bne.n	800165e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d109      	bne.n	800165e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d06e      	beq.n	800173c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b0c      	cmp	r3, #12
 8001662:	d069      	beq.n	8001738 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001664:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001670:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0ad      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4b      	ldr	r2, [pc, #300]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800168a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800168c:	f7ff f904 	bl	8000898 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff f900 	bl	8000898 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e09a      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b2:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <HAL_RCC_OscConfig+0x784>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016c2:	3a01      	subs	r2, #1
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	4311      	orrs	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016cc:	0212      	lsls	r2, r2, #8
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016d4:	0852      	lsrs	r2, r2, #1
 80016d6:	3a01      	subs	r2, #1
 80016d8:	0552      	lsls	r2, r2, #21
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016e0:	0852      	lsrs	r2, r2, #1
 80016e2:	3a01      	subs	r2, #1
 80016e4:	0652      	lsls	r2, r2, #25
 80016e6:	4311      	orrs	r1, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016ec:	0912      	lsrs	r2, r2, #4
 80016ee:	0452      	lsls	r2, r2, #17
 80016f0:	430a      	orrs	r2, r1
 80016f2:	4930      	ldr	r1, [pc, #192]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001702:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001710:	f7ff f8c2 	bl	8000898 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff f8be 	bl	8000898 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e058      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001736:	e050      	b.n	80017da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e04f      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d148      	bne.n	80017da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001752:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 800175a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001760:	f7ff f89a 	bl	8000898 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff f896 	bl	8000898 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e030      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x734>
 8001786:	e028      	b.n	80017da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d023      	beq.n	80017d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_RCC_OscConfig+0x780>)
 8001794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff f87d 	bl	8000898 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a0:	e00c      	b.n	80017bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff f879 	bl	8000898 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d905      	bls.n	80017bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e013      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
 80017b4:	40021000 	.word	0x40021000
 80017b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_OscConfig+0x7b0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ec      	bne.n	80017a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_OscConfig+0x7b0>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	4905      	ldr	r1, [pc, #20]	; (80017e4 <HAL_RCC_OscConfig+0x7b0>)
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_RCC_OscConfig+0x7b4>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
 80017d4:	e001      	b.n	80017da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	feeefffc 	.word	0xfeeefffc

080017ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0e7      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b75      	ldr	r3, [pc, #468]	; (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d910      	bls.n	8001830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	4970      	ldr	r1, [pc, #448]	; (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b6e      	ldr	r3, [pc, #440]	; (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0cf      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d010      	beq.n	800185e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4b66      	ldr	r3, [pc, #408]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001848:	429a      	cmp	r2, r3
 800184a:	d908      	bls.n	800185e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b63      	ldr	r3, [pc, #396]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4960      	ldr	r1, [pc, #384]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d04c      	beq.n	8001904 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d121      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0a6      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	4b54      	ldr	r3, [pc, #336]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d115      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e09a      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a2:	4b4e      	ldr	r3, [pc, #312]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e08e      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b2:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e086      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4943      	ldr	r1, [pc, #268]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d4:	f7fe ffe0 	bl	8000898 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7fe ffdc 	bl	8000898 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e06e      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800191c:	429a      	cmp	r2, r3
 800191e:	d208      	bcs.n	8001932 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	492b      	ldr	r1, [pc, #172]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001932:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d210      	bcs.n	8001962 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 0207 	bic.w	r2, r3, #7
 8001948:	4923      	ldr	r1, [pc, #140]	; (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001950:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_RCC_ClockConfig+0x1ec>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d001      	beq.n	8001962 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e036      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	4918      	ldr	r1, [pc, #96]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4910      	ldr	r1, [pc, #64]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019a0:	f000 f824 	bl	80019ec <HAL_RCC_GetSysClockFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	490b      	ldr	r1, [pc, #44]	; (80019e0 <HAL_RCC_ClockConfig+0x1f4>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
 80019bc:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1f8>)
 80019be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1fc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fe51 	bl	800066c <HAL_InitTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80019ce:	7afb      	ldrb	r3, [r7, #11]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40022000 	.word	0x40022000
 80019dc:	40021000 	.word	0x40021000
 80019e0:	08005464 	.word	0x08005464
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a04:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x34>
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d121      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d11e      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a2c:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e005      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a48:	4a2b      	ldr	r2, [pc, #172]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10d      	bne.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d102      	bne.n	8001a6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	e004      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d134      	bne.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d003      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0xac>
 8001a90:	e005      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a94:	617b      	str	r3, [r7, #20]
      break;
 8001a96:	e005      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a9a:	617b      	str	r3, [r7, #20]
      break;
 8001a9c:	e002      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	617b      	str	r3, [r7, #20]
      break;
 8001aa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	3301      	adds	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	fb03 f202 	mul.w	r2, r3, r2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	0e5b      	lsrs	r3, r3, #25
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	0800547c 	.word	0x0800547c
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4904      	ldr	r1, [pc, #16]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08005474 	.word	0x08005474

08001b48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	220f      	movs	r2, #15
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_RCC_GetClockConfig+0x60>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0207 	and.w	r2, r3, #7
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	601a      	str	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40022000 	.word	0x40022000

08001bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bc4:	f7ff f98a 	bl	8000edc <HAL_PWREx_GetVoltageRange>
 8001bc8:	6178      	str	r0, [r7, #20]
 8001bca:	e014      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001be4:	f7ff f97a 	bl	8000edc <HAL_PWREx_GetVoltageRange>
 8001be8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bfc:	d10b      	bne.n	8001c16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b80      	cmp	r3, #128	; 0x80
 8001c02:	d919      	bls.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2ba0      	cmp	r3, #160	; 0xa0
 8001c08:	d902      	bls.n	8001c10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e013      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e010      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d902      	bls.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e00a      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b80      	cmp	r3, #128	; 0x80
 8001c26:	d102      	bne.n	8001c2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c28:	2302      	movs	r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e004      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b70      	cmp	r3, #112	; 0x70
 8001c32:	d101      	bne.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c34:	2301      	movs	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 0207 	bic.w	r2, r3, #7
 8001c40:	4909      	ldr	r1, [pc, #36]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40022000 	.word	0x40022000

08001c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e049      	b.n	8001d12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f841 	bl	8001d1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4610      	mov	r0, r2
 8001cac:	f000 f9da 	bl	8002064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d001      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e04f      	b.n	8001de8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01d      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x76>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d72:	d018      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x76>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x76>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00e      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x76>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x76>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d004      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x76>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d115      	bne.n	8001dd2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d015      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0xb4>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbe:	d011      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd0:	e008      	b.n	8001de4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e000      	b.n	8001de6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40012c00 	.word	0x40012c00
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40000800 	.word	0x40000800
 8001e00:	40000c00 	.word	0x40000c00
 8001e04:	40013400 	.word	0x40013400
 8001e08:	40014000 	.word	0x40014000
 8001e0c:	00010007 	.word	0x00010007

08001e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d020      	beq.n	8001e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01b      	beq.n	8001e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0202 	mvn.w	r2, #2
 8001e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8e4 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8d6 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f8e7 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d020      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01b      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0204 	mvn.w	r2, #4
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8be 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8b0 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f8c1 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d020      	beq.n	8001f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0208 	mvn.w	r2, #8
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f898 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f88a 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f89b 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d020      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01b      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0210 	mvn.w	r2, #16
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f872 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f864 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f875 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0201 	mvn.w	r2, #1
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fb3c 	bl	80005f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00c      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f906 	bl	80021ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8fe 	bl	80021c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f834 	bl	8002050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0220 	mvn.w	r2, #32
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f8c6 	bl	8002198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a40      	ldr	r2, [pc, #256]	; (8002178 <TIM_Base_SetConfig+0x114>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002082:	d00f      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a3d      	ldr	r2, [pc, #244]	; (800217c <TIM_Base_SetConfig+0x118>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00b      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3c      	ldr	r2, [pc, #240]	; (8002180 <TIM_Base_SetConfig+0x11c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a3b      	ldr	r2, [pc, #236]	; (8002184 <TIM_Base_SetConfig+0x120>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3a      	ldr	r2, [pc, #232]	; (8002188 <TIM_Base_SetConfig+0x124>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d108      	bne.n	80020b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2f      	ldr	r2, [pc, #188]	; (8002178 <TIM_Base_SetConfig+0x114>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <TIM_Base_SetConfig+0x9a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c4:	d01b      	beq.n	80020fe <TIM_Base_SetConfig+0x9a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2c      	ldr	r2, [pc, #176]	; (800217c <TIM_Base_SetConfig+0x118>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d017      	beq.n	80020fe <TIM_Base_SetConfig+0x9a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a2b      	ldr	r2, [pc, #172]	; (8002180 <TIM_Base_SetConfig+0x11c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <TIM_Base_SetConfig+0x9a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a2a      	ldr	r2, [pc, #168]	; (8002184 <TIM_Base_SetConfig+0x120>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00f      	beq.n	80020fe <TIM_Base_SetConfig+0x9a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a29      	ldr	r2, [pc, #164]	; (8002188 <TIM_Base_SetConfig+0x124>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00b      	beq.n	80020fe <TIM_Base_SetConfig+0x9a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a28      	ldr	r2, [pc, #160]	; (800218c <TIM_Base_SetConfig+0x128>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <TIM_Base_SetConfig+0x9a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <TIM_Base_SetConfig+0x12c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d003      	beq.n	80020fe <TIM_Base_SetConfig+0x9a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a26      	ldr	r2, [pc, #152]	; (8002194 <TIM_Base_SetConfig+0x130>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d108      	bne.n	8002110 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <TIM_Base_SetConfig+0x114>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00f      	beq.n	800215c <TIM_Base_SetConfig+0xf8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <TIM_Base_SetConfig+0x124>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00b      	beq.n	800215c <TIM_Base_SetConfig+0xf8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <TIM_Base_SetConfig+0x128>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <TIM_Base_SetConfig+0xf8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a10      	ldr	r2, [pc, #64]	; (8002190 <TIM_Base_SetConfig+0x12c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0xf8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <TIM_Base_SetConfig+0x130>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	615a      	str	r2, [r3, #20]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40012c00 	.word	0x40012c00
 800217c:	40000400 	.word	0x40000400
 8002180:	40000800 	.word	0x40000800
 8002184:	40000c00 	.word	0x40000c00
 8002188:	40013400 	.word	0x40013400
 800218c:	40014000 	.word	0x40014000
 8002190:	40014400 	.word	0x40014400
 8002194:	40014800 	.word	0x40014800

08002198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f103 0208 	add.w	r2, r3, #8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f103 0208 	add.w	r2, r3, #8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f103 0208 	add.w	r2, r3, #8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d103      	bne.n	800224e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e00c      	b.n	8002268 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3308      	adds	r3, #8
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e002      	b.n	800225c <vListInsert+0x2e>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	429a      	cmp	r2, r3
 8002266:	d2f6      	bcs.n	8002256 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6892      	ldr	r2, [r2, #8]
 80022b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6852      	ldr	r2, [r2, #4]
 80022c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d103      	bne.n	80022d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	1e5a      	subs	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08e      	sub	sp, #56	; 0x38
 80022f8:	af04      	add	r7, sp, #16
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8002302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <xTaskCreateStatic+0x2a>
        __asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	623b      	str	r3, [r7, #32]
    }
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <xTaskCreateStatic+0x46>
        __asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	61fb      	str	r3, [r7, #28]
    }
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800233a:	23a0      	movs	r3, #160	; 0xa0
 800233c:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2ba0      	cmp	r3, #160	; 0xa0
 8002342:	d00a      	beq.n	800235a <xTaskCreateStatic+0x66>
        __asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	61bb      	str	r3, [r7, #24]
    }
 8002356:	bf00      	nop
 8002358:	e7fe      	b.n	8002358 <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800235a:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	2b00      	cmp	r3, #0
 8002360:	d023      	beq.n	80023aa <xTaskCreateStatic+0xb6>
 8002362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800236c:	22a0      	movs	r2, #160	; 0xa0
 800236e:	2100      	movs	r1, #0
 8002370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002372:	f002 ff11 	bl	8005198 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800237a:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	2202      	movs	r2, #2
 8002380:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002384:	2300      	movs	r3, #0
 8002386:	9303      	str	r3, [sp, #12]
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f855 	bl	800244c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023a4:	f000 f8ee 	bl	8002584 <prvAddNewTaskToReadyList>
 80023a8:	e001      	b.n	80023ae <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 80023ae:	697b      	ldr	r3, [r7, #20]
    }
 80023b0:	4618      	mov	r0, r3
 80023b2:	3728      	adds	r7, #40	; 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af04      	add	r7, sp, #16
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 f925 	bl	800361c <pvPortMalloc>
 80023d2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d013      	beq.n	8002402 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023da:	20a0      	movs	r0, #160	; 0xa0
 80023dc:	f001 f91e 	bl	800361c <pvPortMalloc>
 80023e0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80023e8:	22a0      	movs	r2, #160	; 0xa0
 80023ea:	2100      	movs	r1, #0
 80023ec:	69f8      	ldr	r0, [r7, #28]
 80023ee:	f002 fed3 	bl	8005198 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
 80023f8:	e005      	b.n	8002406 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80023fa:	6978      	ldr	r0, [r7, #20]
 80023fc:	f001 f9c8 	bl	8003790 <vPortFree>
 8002400:	e001      	b.n	8002406 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d017      	beq.n	800243c <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	2300      	movs	r3, #0
 8002418:	9303      	str	r3, [sp, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	9302      	str	r3, [sp, #8]
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f80e 	bl	800244c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002430:	69f8      	ldr	r0, [r7, #28]
 8002432:	f000 f8a7 	bl	8002584 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002436:	2301      	movs	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	e002      	b.n	8002442 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002442:	69bb      	ldr	r3, [r7, #24]
    }
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002464:	3b01      	subs	r3, #1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f023 0307 	bic.w	r3, r3, #7
 8002472:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <prvInitialiseNewTask+0x48>
        __asm volatile
 800247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002482:	f383 8811 	msr	BASEPRI, r3
 8002486:	f3bf 8f6f 	isb	sy
 800248a:	f3bf 8f4f 	dsb	sy
 800248e:	617b      	str	r3, [r7, #20]
    }
 8002490:	bf00      	nop
 8002492:	e7fe      	b.n	8002492 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01e      	beq.n	80024d8 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e012      	b.n	80024c6 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	7819      	ldrb	r1, [r3, #0]
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	3334      	adds	r3, #52	; 0x34
 80024b0:	460a      	mov	r2, r1
 80024b2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d9e9      	bls.n	80024a0 <prvInitialiseNewTask+0x54>
 80024cc:	e000      	b.n	80024d0 <prvInitialiseNewTask+0x84>
            {
                break;
 80024ce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d90a      	bls.n	80024f4 <prvInitialiseNewTask+0xa8>
        __asm volatile
 80024de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e2:	f383 8811 	msr	BASEPRI, r3
 80024e6:	f3bf 8f6f 	isb	sy
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	613b      	str	r3, [r7, #16]
    }
 80024f0:	bf00      	nop
 80024f2:	e7fe      	b.n	80024f2 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d901      	bls.n	80024fe <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024fa:	2306      	movs	r3, #6
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	3304      	adds	r3, #4
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fe80 	bl	8002214 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	3318      	adds	r3, #24
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fe7b 	bl	8002214 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002522:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002526:	f1c3 0207 	rsb	r2, r3, #7
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	334c      	adds	r3, #76	; 0x4c
 8002538:	224c      	movs	r2, #76	; 0x4c
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f002 fe2b 	bl	8005198 <memset>
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <prvInitialiseNewTask+0x12c>)
 8002546:	651a      	str	r2, [r3, #80]	; 0x50
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <prvInitialiseNewTask+0x130>)
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <prvInitialiseNewTask+0x134>)
 8002552:	659a      	str	r2, [r3, #88]	; 0x58
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	69b8      	ldr	r0, [r7, #24]
 800255a:	f000 fd87 	bl	800306c <pxPortInitialiseStack>
 800255e:	4602      	mov	r2, r0
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800256e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002570:	bf00      	nop
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200042d8 	.word	0x200042d8
 800257c:	20004340 	.word	0x20004340
 8002580:	200043a8 	.word	0x200043a8

08002584 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af02      	add	r7, sp, #8
 800258a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800258c:	f000 ff1a 	bl	80033c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002590:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <prvAddNewTaskToReadyList+0x144>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	4a4c      	ldr	r2, [pc, #304]	; (80026c8 <prvAddNewTaskToReadyList+0x144>)
 8002598:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800259a:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <prvAddNewTaskToReadyList+0x148>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025a2:	4a4a      	ldr	r2, [pc, #296]	; (80026cc <prvAddNewTaskToReadyList+0x148>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025a8:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <prvAddNewTaskToReadyList+0x144>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d110      	bne.n	80025d2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025b0:	f000 fc1a 	bl	8002de8 <prvInitialiseTaskLists>
 80025b4:	e00d      	b.n	80025d2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025b6:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <prvAddNewTaskToReadyList+0x14c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025be:	4b43      	ldr	r3, [pc, #268]	; (80026cc <prvAddNewTaskToReadyList+0x148>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d802      	bhi.n	80025d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025cc:	4a3f      	ldr	r2, [pc, #252]	; (80026cc <prvAddNewTaskToReadyList+0x148>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025d2:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <prvAddNewTaskToReadyList+0x150>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a3e      	ldr	r2, [pc, #248]	; (80026d4 <prvAddNewTaskToReadyList+0x150>)
 80025da:	6013      	str	r3, [r2, #0]
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <prvAddNewTaskToReadyList+0x8c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fbbf 	bl	8004d68 <SEGGER_SYSVIEW_OnTaskCreate>
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	461d      	mov	r5, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461c      	mov	r4, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	1ae3      	subs	r3, r4, r3
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	462b      	mov	r3, r5
 800260c:	f001 fa82 	bl	8003b14 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fc2c 	bl	8004e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <prvAddNewTaskToReadyList+0x154>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	4a2c      	ldr	r2, [pc, #176]	; (80026d8 <prvAddNewTaskToReadyList+0x154>)
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	492b      	ldr	r1, [pc, #172]	; (80026dc <prvAddNewTaskToReadyList+0x158>)
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3304      	adds	r3, #4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	3204      	adds	r2, #4
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	1d1a      	adds	r2, r3, #4
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <prvAddNewTaskToReadyList+0x158>)
 800266e:	441a      	add	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	615a      	str	r2, [r3, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002678:	4918      	ldr	r1, [pc, #96]	; (80026dc <prvAddNewTaskToReadyList+0x158>)
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1c59      	adds	r1, r3, #1
 8002688:	4814      	ldr	r0, [pc, #80]	; (80026dc <prvAddNewTaskToReadyList+0x158>)
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4403      	add	r3, r0
 8002694:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002696:	f000 fec5 	bl	8003424 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <prvAddNewTaskToReadyList+0x14c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00e      	beq.n	80026c0 <prvAddNewTaskToReadyList+0x13c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <prvAddNewTaskToReadyList+0x148>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d207      	bcs.n	80026c0 <prvAddNewTaskToReadyList+0x13c>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <prvAddNewTaskToReadyList+0x15c>)
 80026b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bdb0      	pop	{r4, r5, r7, pc}
 80026c8:	20000470 	.word	0x20000470
 80026cc:	20000370 	.word	0x20000370
 80026d0:	2000047c 	.word	0x2000047c
 80026d4:	2000048c 	.word	0x2000048c
 80026d8:	20000478 	.word	0x20000478
 80026dc:	20000374 	.word	0x20000374
 80026e0:	e000ed04 	.word	0xe000ed04

080026e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01b      	beq.n	800272e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <vTaskDelay+0x68>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <vTaskDelay+0x30>
        __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	60bb      	str	r3, [r7, #8]
    }
 8002710:	bf00      	nop
 8002712:	e7fe      	b.n	8002712 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002714:	f000 f89e 	bl	8002854 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	2023      	movs	r0, #35	; 0x23
 800271c:	f001 ff30 	bl	8004580 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002720:	2100      	movs	r1, #0
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fc22 	bl	8002f6c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002728:	f000 f8a2 	bl	8002870 <xTaskResumeAll>
 800272c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <vTaskDelay+0x6c>)
 8002736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000498 	.word	0x20000498
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002762:	463a      	mov	r2, r7
 8002764:	1d39      	adds	r1, r7, #4
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fd7a 	bl	8000264 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8002770:	6839      	ldr	r1, [r7, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	9202      	str	r2, [sp, #8]
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	2300      	movs	r3, #0
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2300      	movs	r3, #0
 8002780:	460a      	mov	r2, r1
 8002782:	492b      	ldr	r1, [pc, #172]	; (8002830 <vTaskStartScheduler+0xdc>)
 8002784:	482b      	ldr	r0, [pc, #172]	; (8002834 <vTaskStartScheduler+0xe0>)
 8002786:	f7ff fdb5 	bl	80022f4 <xTaskCreateStatic>
 800278a:	4603      	mov	r3, r0
 800278c:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <vTaskStartScheduler+0xe4>)
 800278e:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <vTaskStartScheduler+0xe4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8002798:	2301      	movs	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	e001      	b.n	80027a2 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d12e      	bne.n	8002806 <vTaskStartScheduler+0xb2>
        __asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	613b      	str	r3, [r7, #16]
    }
 80027ba:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <vTaskStartScheduler+0xe8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	334c      	adds	r3, #76	; 0x4c
 80027c2:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <vTaskStartScheduler+0xec>)
 80027c4:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <vTaskStartScheduler+0xf0>)
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <vTaskStartScheduler+0xf4>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <vTaskStartScheduler+0xf8>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <vTaskStartScheduler+0xe8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3334      	adds	r3, #52	; 0x34
 80027e0:	2205      	movs	r2, #5
 80027e2:	4913      	ldr	r1, [pc, #76]	; (8002830 <vTaskStartScheduler+0xdc>)
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fcc7 	bl	8005178 <memcmp>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <vTaskStartScheduler+0xa8>
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <vTaskStartScheduler+0xe8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 faf9 	bl	8004dec <SEGGER_SYSVIEW_OnTaskStartExec>
 80027fa:	e001      	b.n	8002800 <vTaskStartScheduler+0xac>
 80027fc:	f002 fa98 	bl	8004d30 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002800:	f000 fcc0 	bl	8003184 <xPortStartScheduler>
 8002804:	e00e      	b.n	8002824 <vTaskStartScheduler+0xd0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d10a      	bne.n	8002824 <vTaskStartScheduler+0xd0>
        __asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	60fb      	str	r3, [r7, #12]
    }
 8002820:	bf00      	nop
 8002822:	e7fe      	b.n	8002822 <vTaskStartScheduler+0xce>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <vTaskStartScheduler+0xfc>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	0800539c 	.word	0x0800539c
 8002834:	08002db5 	.word	0x08002db5
 8002838:	20000494 	.word	0x20000494
 800283c:	20000370 	.word	0x20000370
 8002840:	20000060 	.word	0x20000060
 8002844:	20000490 	.word	0x20000490
 8002848:	2000047c 	.word	0x2000047c
 800284c:	20000474 	.word	0x20000474
 8002850:	2000000c 	.word	0x2000000c

08002854 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <vTaskSuspendAll+0x18>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	4a03      	ldr	r2, [pc, #12]	; (800286c <vTaskSuspendAll+0x18>)
 8002860:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	20000498 	.word	0x20000498

08002870 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800287e:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <xTaskResumeAll+0x1dc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <xTaskResumeAll+0x2c>
        __asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	607b      	str	r3, [r7, #4]
    }
 8002898:	bf00      	nop
 800289a:	e7fe      	b.n	800289a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800289c:	f000 fd92 	bl	80033c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <xTaskResumeAll+0x1dc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	4a69      	ldr	r2, [pc, #420]	; (8002a4c <xTaskResumeAll+0x1dc>)
 80028a8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028aa:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <xTaskResumeAll+0x1dc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 80c4 	bne.w	8002a3c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028b4:	4b66      	ldr	r3, [pc, #408]	; (8002a50 <xTaskResumeAll+0x1e0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80bf 	beq.w	8002a3c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028be:	e08e      	b.n	80029de <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028c0:	4b64      	ldr	r3, [pc, #400]	; (8002a54 <xTaskResumeAll+0x1e4>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	6a12      	ldr	r2, [r2, #32]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	69d2      	ldr	r2, [r2, #28]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3318      	adds	r3, #24
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d103      	bne.n	80028f6 <xTaskResumeAll+0x86>
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	6a1a      	ldr	r2, [r3, #32]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	2200      	movs	r2, #0
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	68d2      	ldr	r2, [r2, #12]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	6892      	ldr	r2, [r2, #8]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	3304      	adds	r3, #4
 8002928:	429a      	cmp	r2, r3
 800292a:	d103      	bne.n	8002934 <xTaskResumeAll+0xc4>
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2200      	movs	r2, #0
 8002938:	615a      	str	r2, [r3, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fa92 	bl	8004e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	2201      	movs	r2, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <xTaskResumeAll+0x1e8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	4a3f      	ldr	r2, [pc, #252]	; (8002a58 <xTaskResumeAll+0x1e8>)
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002962:	493e      	ldr	r1, [pc, #248]	; (8002a5c <xTaskResumeAll+0x1ec>)
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3304      	adds	r3, #4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	3204      	adds	r2, #4
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <xTaskResumeAll+0x1ec>)
 80029a2:	441a      	add	r2, r3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	615a      	str	r2, [r3, #20]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	492b      	ldr	r1, [pc, #172]	; (8002a5c <xTaskResumeAll+0x1ec>)
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1c59      	adds	r1, r3, #1
 80029bc:	4827      	ldr	r0, [pc, #156]	; (8002a5c <xTaskResumeAll+0x1ec>)
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4403      	add	r3, r0
 80029c8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <xTaskResumeAll+0x1f0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d302      	bcc.n	80029de <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80029d8:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <xTaskResumeAll+0x1f4>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029de:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <xTaskResumeAll+0x1e4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f47f af6c 	bne.w	80028c0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80029ee:	f000 faa1 	bl	8002f34 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <xTaskResumeAll+0x1f8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d010      	beq.n	8002a20 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80029fe:	f000 f849 	bl	8002a94 <xTaskIncrementTick>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002a08:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <xTaskResumeAll+0x1f4>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f1      	bne.n	80029fe <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <xTaskResumeAll+0x1f8>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <xTaskResumeAll+0x1f4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <xTaskResumeAll+0x1fc>)
 8002a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a3c:	f000 fcf2 	bl	8003424 <vPortExitCritical>

    return xAlreadyYielded;
 8002a40:	69bb      	ldr	r3, [r7, #24]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000498 	.word	0x20000498
 8002a50:	20000470 	.word	0x20000470
 8002a54:	20000430 	.word	0x20000430
 8002a58:	20000478 	.word	0x20000478
 8002a5c:	20000374 	.word	0x20000374
 8002a60:	20000370 	.word	0x20000370
 8002a64:	20000484 	.word	0x20000484
 8002a68:	20000480 	.word	0x20000480
 8002a6c:	e000ed04 	.word	0xe000ed04

08002a70 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a76:	f000 fd91 	bl	800359c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <xTaskGetTickCountFromISR+0x20>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a84:	683b      	ldr	r3, [r7, #0]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000474 	.word	0x20000474

08002a94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <xTaskIncrementTick+0x208>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 80f0 	bne.w	8002c88 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002aa8:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <xTaskIncrementTick+0x20c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ab0:	4a7b      	ldr	r2, [pc, #492]	; (8002ca0 <xTaskIncrementTick+0x20c>)
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d120      	bne.n	8002afe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002abc:	4b79      	ldr	r3, [pc, #484]	; (8002ca4 <xTaskIncrementTick+0x210>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <xTaskIncrementTick+0x48>
        __asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	607b      	str	r3, [r7, #4]
    }
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <xTaskIncrementTick+0x46>
 8002adc:	4b71      	ldr	r3, [pc, #452]	; (8002ca4 <xTaskIncrementTick+0x210>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	4b71      	ldr	r3, [pc, #452]	; (8002ca8 <xTaskIncrementTick+0x214>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6f      	ldr	r2, [pc, #444]	; (8002ca4 <xTaskIncrementTick+0x210>)
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4a6f      	ldr	r2, [pc, #444]	; (8002ca8 <xTaskIncrementTick+0x214>)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b6e      	ldr	r3, [pc, #440]	; (8002cac <xTaskIncrementTick+0x218>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	4a6d      	ldr	r2, [pc, #436]	; (8002cac <xTaskIncrementTick+0x218>)
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	f000 fa1b 	bl	8002f34 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002afe:	4b6c      	ldr	r3, [pc, #432]	; (8002cb0 <xTaskIncrementTick+0x21c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6a3a      	ldr	r2, [r7, #32]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f0c0 80aa 	bcc.w	8002c5e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b0a:	4b66      	ldr	r3, [pc, #408]	; (8002ca4 <xTaskIncrementTick+0x210>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b14:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <xTaskIncrementTick+0x21c>)
 8002b16:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1a:	601a      	str	r2, [r3, #0]
                    break;
 8002b1c:	e09f      	b.n	8002c5e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b1e:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <xTaskIncrementTick+0x210>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002b2e:	6a3a      	ldr	r2, [r7, #32]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d203      	bcs.n	8002b3e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b36:	4a5e      	ldr	r2, [pc, #376]	; (8002cb0 <xTaskIncrementTick+0x21c>)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002b3c:	e08f      	b.n	8002c5e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	68d2      	ldr	r2, [r2, #12]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	6892      	ldr	r2, [r2, #8]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d103      	bne.n	8002b6c <xTaskIncrementTick+0xd8>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	615a      	str	r2, [r3, #20]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	1e5a      	subs	r2, r3, #1
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01e      	beq.n	8002bc2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	6a12      	ldr	r2, [r2, #32]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	69d2      	ldr	r2, [r2, #28]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	3318      	adds	r3, #24
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d103      	bne.n	8002bb2 <xTaskIncrementTick+0x11e>
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	6a1a      	ldr	r2, [r3, #32]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 f953 	bl	8004e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	2201      	movs	r2, #1
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <xTaskIncrementTick+0x220>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	4a36      	ldr	r2, [pc, #216]	; (8002cb4 <xTaskIncrementTick+0x220>)
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	4935      	ldr	r1, [pc, #212]	; (8002cb8 <xTaskIncrementTick+0x224>)
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3304      	adds	r3, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	3204      	adds	r2, #4
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1d1a      	adds	r2, r3, #4
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <xTaskIncrementTick+0x224>)
 8002c20:	441a      	add	r2, r3
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	615a      	str	r2, [r3, #20]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2a:	4923      	ldr	r1, [pc, #140]	; (8002cb8 <xTaskIncrementTick+0x224>)
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	1c59      	adds	r1, r3, #1
 8002c3a:	481f      	ldr	r0, [pc, #124]	; (8002cb8 <xTaskIncrementTick+0x224>)
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4403      	add	r3, r0
 8002c46:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <xTaskIncrementTick+0x228>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	429a      	cmp	r2, r3
 8002c54:	f67f af59 	bls.w	8002b0a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c5c:	e755      	b.n	8002b0a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <xTaskIncrementTick+0x228>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	4914      	ldr	r1, [pc, #80]	; (8002cb8 <xTaskIncrementTick+0x224>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d901      	bls.n	8002c7a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <xTaskIncrementTick+0x22c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
 8002c86:	e004      	b.n	8002c92 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <xTaskIncrementTick+0x230>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <xTaskIncrementTick+0x230>)
 8002c90:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3728      	adds	r7, #40	; 0x28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000498 	.word	0x20000498
 8002ca0:	20000474 	.word	0x20000474
 8002ca4:	20000428 	.word	0x20000428
 8002ca8:	2000042c 	.word	0x2000042c
 8002cac:	20000488 	.word	0x20000488
 8002cb0:	20000490 	.word	0x20000490
 8002cb4:	20000478 	.word	0x20000478
 8002cb8:	20000374 	.word	0x20000374
 8002cbc:	20000370 	.word	0x20000370
 8002cc0:	20000484 	.word	0x20000484
 8002cc4:	20000480 	.word	0x20000480

08002cc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cce:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <vTaskSwitchContext+0xd0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <vTaskSwitchContext+0xd4>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002cdc:	e057      	b.n	8002d8e <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <vTaskSwitchContext+0xd4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <vTaskSwitchContext+0xd8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
 8002cf4:	f1c3 031f 	rsb	r3, r3, #31
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	492a      	ldr	r1, [pc, #168]	; (8002da4 <vTaskSwitchContext+0xdc>)
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	607b      	str	r3, [r7, #4]
    }
 8002d20:	bf00      	nop
 8002d22:	e7fe      	b.n	8002d22 <vTaskSwitchContext+0x5a>
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <vTaskSwitchContext+0xdc>)
 8002d30:	4413      	add	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	3308      	adds	r3, #8
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d104      	bne.n	8002d54 <vTaskSwitchContext+0x8c>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <vTaskSwitchContext+0xe0>)
 8002d5c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <vTaskSwitchContext+0xe0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3334      	adds	r3, #52	; 0x34
 8002d64:	2205      	movs	r2, #5
 8002d66:	4911      	ldr	r1, [pc, #68]	; (8002dac <vTaskSwitchContext+0xe4>)
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 fa05 	bl	8005178 <memcmp>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <vTaskSwitchContext+0xb8>
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <vTaskSwitchContext+0xe0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f002 f837 	bl	8004dec <SEGGER_SYSVIEW_OnTaskStartExec>
 8002d7e:	e001      	b.n	8002d84 <vTaskSwitchContext+0xbc>
 8002d80:	f001 ffd6 	bl	8004d30 <SEGGER_SYSVIEW_OnIdle>
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <vTaskSwitchContext+0xe0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	334c      	adds	r3, #76	; 0x4c
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <vTaskSwitchContext+0xe8>)
 8002d8c:	6013      	str	r3, [r2, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000498 	.word	0x20000498
 8002d9c:	20000484 	.word	0x20000484
 8002da0:	20000478 	.word	0x20000478
 8002da4:	20000374 	.word	0x20000374
 8002da8:	20000370 	.word	0x20000370
 8002dac:	0800539c 	.word	0x0800539c
 8002db0:	20000060 	.word	0x20000060

08002db4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002dbc:	f000 f854 	bl	8002e68 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <prvIdleTask+0x2c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d907      	bls.n	8002dd8 <prvIdleTask+0x24>
            {
                taskYIELD();
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <prvIdleTask+0x30>)
 8002dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8002dd8:	f7fd fc04 	bl	80005e4 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8002ddc:	e7ee      	b.n	8002dbc <prvIdleTask+0x8>
 8002dde:	bf00      	nop
 8002de0:	20000374 	.word	0x20000374
 8002de4:	e000ed04 	.word	0xe000ed04

08002de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	e00c      	b.n	8002e0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <prvInitialiseTaskLists+0x60>)
 8002e00:	4413      	add	r3, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff f9e6 	bl	80021d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b06      	cmp	r3, #6
 8002e12:	d9ef      	bls.n	8002df4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e14:	480d      	ldr	r0, [pc, #52]	; (8002e4c <prvInitialiseTaskLists+0x64>)
 8002e16:	f7ff f9dd 	bl	80021d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e1a:	480d      	ldr	r0, [pc, #52]	; (8002e50 <prvInitialiseTaskLists+0x68>)
 8002e1c:	f7ff f9da 	bl	80021d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e20:	480c      	ldr	r0, [pc, #48]	; (8002e54 <prvInitialiseTaskLists+0x6c>)
 8002e22:	f7ff f9d7 	bl	80021d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002e26:	480c      	ldr	r0, [pc, #48]	; (8002e58 <prvInitialiseTaskLists+0x70>)
 8002e28:	f7ff f9d4 	bl	80021d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002e2c:	480b      	ldr	r0, [pc, #44]	; (8002e5c <prvInitialiseTaskLists+0x74>)
 8002e2e:	f7ff f9d1 	bl	80021d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <prvInitialiseTaskLists+0x78>)
 8002e34:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <prvInitialiseTaskLists+0x64>)
 8002e36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <prvInitialiseTaskLists+0x7c>)
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <prvInitialiseTaskLists+0x68>)
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000374 	.word	0x20000374
 8002e4c:	20000400 	.word	0x20000400
 8002e50:	20000414 	.word	0x20000414
 8002e54:	20000430 	.word	0x20000430
 8002e58:	20000444 	.word	0x20000444
 8002e5c:	2000045c 	.word	0x2000045c
 8002e60:	20000428 	.word	0x20000428
 8002e64:	2000042c 	.word	0x2000042c

08002e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e6e:	e019      	b.n	8002ea4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002e70:	f000 faa8 	bl	80033c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <prvCheckTasksWaitingTermination+0x50>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fa0d 	bl	80022a0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <prvCheckTasksWaitingTermination+0x54>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <prvCheckTasksWaitingTermination+0x54>)
 8002e8e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <prvCheckTasksWaitingTermination+0x58>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <prvCheckTasksWaitingTermination+0x58>)
 8002e98:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002e9a:	f000 fac3 	bl	8003424 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f810 	bl	8002ec4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <prvCheckTasksWaitingTermination+0x58>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e1      	bne.n	8002e70 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000444 	.word	0x20000444
 8002ebc:	20000470 	.word	0x20000470
 8002ec0:	20000458 	.word	0x20000458

08002ec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <prvDeleteTCB+0x6c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	334c      	adds	r3, #76	; 0x4c
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f002 f968 	bl	80051a8 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fc52 	bl	8003790 <vPortFree>
                vPortFree( pxTCB );
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fc4f 	bl	8003790 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ef2:	e018      	b.n	8002f26 <prvDeleteTCB+0x62>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d103      	bne.n	8002f06 <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fc46 	bl	8003790 <vPortFree>
    }
 8002f04:	e00f      	b.n	8002f26 <prvDeleteTCB+0x62>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d00a      	beq.n	8002f26 <prvDeleteTCB+0x62>
        __asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	60fb      	str	r3, [r7, #12]
    }
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <prvDeleteTCB+0x60>
    }
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000370 	.word	0x20000370

08002f34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <prvResetNextTaskUnblockTime+0x30>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <prvResetNextTaskUnblockTime+0x34>)
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f4a:	e005      	b.n	8002f58 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <prvResetNextTaskUnblockTime+0x30>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <prvResetNextTaskUnblockTime+0x34>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000428 	.word	0x20000428
 8002f68:	20000490 	.word	0x20000490

08002f6c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f76:	4b36      	ldr	r3, [pc, #216]	; (8003050 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3304      	adds	r3, #4
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff f98c 	bl	80022a0 <uxListRemove>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	2201      	movs	r2, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	; (8003058 <prvAddCurrentTaskToDelayedList+0xec>)
 8002fa4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d124      	bne.n	8002ff8 <prvAddCurrentTaskToDelayedList+0x8c>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d021      	beq.n	8002ff8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fb4:	4b29      	ldr	r3, [pc, #164]	; (800305c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	4b26      	ldr	r3, [pc, #152]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	6892      	ldr	r2, [r2, #8]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	4b21      	ldr	r3, [pc, #132]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	3204      	adds	r2, #4
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	1d1a      	adds	r2, r3, #4
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	; (800305c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002fe8:	615a      	str	r2, [r3, #20]
 8002fea:	4b1c      	ldr	r3, [pc, #112]	; (800305c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	; (800305c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002ff6:	e026      	b.n	8003046 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	d209      	bcs.n	8003024 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3304      	adds	r3, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4610      	mov	r0, r2
 800301e:	f7ff f906 	bl	800222e <vListInsert>
}
 8003022:	e010      	b.n	8003046 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <prvAddCurrentTaskToDelayedList+0xe8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3304      	adds	r3, #4
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f7ff f8fc 	bl	800222e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	429a      	cmp	r2, r3
 800303e:	d202      	bcs.n	8003046 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003040:	4a09      	ldr	r2, [pc, #36]	; (8003068 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6013      	str	r3, [r2, #0]
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000474 	.word	0x20000474
 8003054:	20000370 	.word	0x20000370
 8003058:	20000478 	.word	0x20000478
 800305c:	2000045c 	.word	0x2000045c
 8003060:	2000042c 	.word	0x2000042c
 8003064:	20000428 	.word	0x20000428
 8003068:	20000490 	.word	0x20000490

0800306c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3b04      	subs	r3, #4
 800307c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003084:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b04      	subs	r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3b04      	subs	r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800309c:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <pxPortInitialiseStack+0x64>)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3b14      	subs	r3, #20
 80030a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3b04      	subs	r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f06f 0202 	mvn.w	r2, #2
 80030ba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3b20      	subs	r3, #32
 80030c0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	080030d5 	.word	0x080030d5

080030d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <prvTaskExitError+0x54>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e6:	d00a      	beq.n	80030fe <prvTaskExitError+0x2a>
        __asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	60fb      	str	r3, [r7, #12]
    }
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <prvTaskExitError+0x28>
        __asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	60bb      	str	r3, [r7, #8]
    }
 8003110:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003112:	bf00      	nop
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0fc      	beq.n	8003114 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	20000010 	.word	0x20000010
 800312c:	00000000 	.word	0x00000000

08003130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <pxCurrentTCBConst2>)
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	6808      	ldr	r0, [r1, #0]
 8003136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313a:	f380 8809 	msr	PSP, r0
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f380 8811 	msr	BASEPRI, r0
 800314a:	4770      	bx	lr
 800314c:	f3af 8000 	nop.w

08003150 <pxCurrentTCBConst2>:
 8003150:	20000370 	.word	0x20000370
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop

08003158 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003158:	4808      	ldr	r0, [pc, #32]	; (800317c <prvPortStartFirstTask+0x24>)
 800315a:	6800      	ldr	r0, [r0, #0]
 800315c:	6800      	ldr	r0, [r0, #0]
 800315e:	f380 8808 	msr	MSP, r0
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f380 8814 	msr	CONTROL, r0
 800316a:	b662      	cpsie	i
 800316c:	b661      	cpsie	f
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	df00      	svc	0
 8003178:	bf00      	nop
 800317a:	0000      	.short	0x0000
 800317c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop

08003184 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800318a:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <xPortStartScheduler+0x120>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a46      	ldr	r2, [pc, #280]	; (80032a8 <xPortStartScheduler+0x124>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d10a      	bne.n	80031aa <xPortStartScheduler+0x26>
        __asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	613b      	str	r3, [r7, #16]
    }
 80031a6:	bf00      	nop
 80031a8:	e7fe      	b.n	80031a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031aa:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <xPortStartScheduler+0x120>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3f      	ldr	r2, [pc, #252]	; (80032ac <xPortStartScheduler+0x128>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10a      	bne.n	80031ca <xPortStartScheduler+0x46>
        __asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	60fb      	str	r3, [r7, #12]
    }
 80031c6:	bf00      	nop
 80031c8:	e7fe      	b.n	80031c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031ca:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <xPortStartScheduler+0x12c>)
 80031cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <xPortStartScheduler+0x130>)
 80031f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031f2:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <xPortStartScheduler+0x134>)
 80031f4:	2207      	movs	r2, #7
 80031f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031f8:	e009      	b.n	800320e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80031fa:	4b2f      	ldr	r3, [pc, #188]	; (80032b8 <xPortStartScheduler+0x134>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3b01      	subs	r3, #1
 8003200:	4a2d      	ldr	r2, [pc, #180]	; (80032b8 <xPortStartScheduler+0x134>)
 8003202:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	b2db      	uxtb	r3, r3
 800320c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b80      	cmp	r3, #128	; 0x80
 8003218:	d0ef      	beq.n	80031fa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <xPortStartScheduler+0x134>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	d00a      	beq.n	800323c <xPortStartScheduler+0xb8>
        __asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	60bb      	str	r3, [r7, #8]
    }
 8003238:	bf00      	nop
 800323a:	e7fe      	b.n	800323a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <xPortStartScheduler+0x134>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <xPortStartScheduler+0x134>)
 8003244:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003246:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <xPortStartScheduler+0x134>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <xPortStartScheduler+0x134>)
 8003250:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <xPortStartScheduler+0x138>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a17      	ldr	r2, [pc, #92]	; (80032bc <xPortStartScheduler+0x138>)
 8003260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003264:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <xPortStartScheduler+0x138>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a14      	ldr	r2, [pc, #80]	; (80032bc <xPortStartScheduler+0x138>)
 800326c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003270:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003272:	f000 f963 	bl	800353c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <xPortStartScheduler+0x13c>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800327c:	f000 f982 	bl	8003584 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <xPortStartScheduler+0x140>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0f      	ldr	r2, [pc, #60]	; (80032c4 <xPortStartScheduler+0x140>)
 8003286:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800328a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800328c:	f7ff ff64 	bl	8003158 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003290:	f7ff fd1a 	bl	8002cc8 <vTaskSwitchContext>
    prvTaskExitError();
 8003294:	f7ff ff1e 	bl	80030d4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000ed00 	.word	0xe000ed00
 80032a8:	410fc271 	.word	0x410fc271
 80032ac:	410fc270 	.word	0x410fc270
 80032b0:	e000e400 	.word	0xe000e400
 80032b4:	2000049c 	.word	0x2000049c
 80032b8:	200004a0 	.word	0x200004a0
 80032bc:	e000ed20 	.word	0xe000ed20
 80032c0:	20000010 	.word	0x20000010
 80032c4:	e000ef34 	.word	0xe000ef34

080032c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <vInitPrioGroupValue+0xe4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <vInitPrioGroupValue+0xe8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10a      	bne.n	80032ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	613b      	str	r3, [r7, #16]
    }
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032ee:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <vInitPrioGroupValue+0xe4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <vInitPrioGroupValue+0xec>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10a      	bne.n	800330e <vInitPrioGroupValue+0x46>
        __asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	60fb      	str	r3, [r7, #12]
    }
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <vInitPrioGroupValue+0xf0>)
 8003310:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	22ff      	movs	r2, #255	; 0xff
 800331e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <vInitPrioGroupValue+0xf4>)
 8003334:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <vInitPrioGroupValue+0xf8>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800333c:	e009      	b.n	8003352 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <vInitPrioGroupValue+0xf8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3b01      	subs	r3, #1
 8003344:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <vInitPrioGroupValue+0xf8>)
 8003346:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	2b80      	cmp	r3, #128	; 0x80
 800335c:	d0ef      	beq.n	800333e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <vInitPrioGroupValue+0xf8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	d00a      	beq.n	8003380 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	60bb      	str	r3, [r7, #8]
    }
 800337c:	bf00      	nop
 800337e:	e7fe      	b.n	800337e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <vInitPrioGroupValue+0xf8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <vInitPrioGroupValue+0xf8>)
 8003388:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <vInitPrioGroupValue+0xf8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003392:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <vInitPrioGroupValue+0xf8>)
 8003394:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000ed00 	.word	0xe000ed00
 80033b0:	410fc271 	.word	0x410fc271
 80033b4:	410fc270 	.word	0x410fc270
 80033b8:	e000e400 	.word	0xe000e400
 80033bc:	2000049c 	.word	0x2000049c
 80033c0:	200004a0 	.word	0x200004a0

080033c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
        __asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	607b      	str	r3, [r7, #4]
    }
 80033dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <vPortEnterCritical+0x58>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <vPortEnterCritical+0x58>)
 80033e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <vPortEnterCritical+0x58>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10f      	bne.n	8003410 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <vPortEnterCritical+0x5c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <vPortEnterCritical+0x4c>
        __asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	603b      	str	r3, [r7, #0]
    }
 800340c:	bf00      	nop
 800340e:	e7fe      	b.n	800340e <vPortEnterCritical+0x4a>
    }
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	20000010 	.word	0x20000010
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <vPortExitCritical+0x50>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <vPortExitCritical+0x24>
        __asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	607b      	str	r3, [r7, #4]
    }
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <vPortExitCritical+0x50>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <vPortExitCritical+0x50>)
 8003450:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <vPortExitCritical+0x50>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <vPortExitCritical+0x42>
 800345a:	2300      	movs	r3, #0
 800345c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003464:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000010 	.word	0x20000010
	...

08003480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003480:	f3ef 8009 	mrs	r0, PSP
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <pxCurrentTCBConst>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	f01e 0f10 	tst.w	lr, #16
 8003490:	bf08      	it	eq
 8003492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800349a:	6010      	str	r0, [r2, #0]
 800349c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034a4:	f380 8811 	msr	BASEPRI, r0
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f7ff fc0a 	bl	8002cc8 <vTaskSwitchContext>
 80034b4:	f04f 0000 	mov.w	r0, #0
 80034b8:	f380 8811 	msr	BASEPRI, r0
 80034bc:	bc09      	pop	{r0, r3}
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	6808      	ldr	r0, [r1, #0]
 80034c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c6:	f01e 0f10 	tst.w	lr, #16
 80034ca:	bf08      	it	eq
 80034cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034d0:	f380 8809 	msr	PSP, r0
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	f3af 8000 	nop.w

080034e0 <pxCurrentTCBConst>:
 80034e0:	20000370 	.word	0x20000370
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop

080034e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
        __asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	607b      	str	r3, [r7, #4]
    }
 8003500:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003502:	f001 fb9b 	bl	8004c3c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003506:	f7ff fac5 	bl	8002a94 <xTaskIncrementTick>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d006      	beq.n	800351e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003510:	f001 fbf2 	bl	8004cf8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <SysTick_Handler+0x50>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e001      	b.n	8003522 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800351e:	f001 fbcf 	bl	8004cc0 <SEGGER_SYSVIEW_RecordExitISR>
 8003522:	2300      	movs	r3, #0
 8003524:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f383 8811 	msr	BASEPRI, r3
    }
 800352c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <vPortSetupTimerInterrupt+0x34>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <vPortSetupTimerInterrupt+0x38>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <vPortSetupTimerInterrupt+0x3c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	; (800357c <vPortSetupTimerInterrupt+0x40>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	4a09      	ldr	r2, [pc, #36]	; (8003580 <vPortSetupTimerInterrupt+0x44>)
 800355a:	3b01      	subs	r3, #1
 800355c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800355e:	4b04      	ldr	r3, [pc, #16]	; (8003570 <vPortSetupTimerInterrupt+0x34>)
 8003560:	2207      	movs	r2, #7
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000e010 	.word	0xe000e010
 8003574:	e000e018 	.word	0xe000e018
 8003578:	20000000 	.word	0x20000000
 800357c:	10624dd3 	.word	0x10624dd3
 8003580:	e000e014 	.word	0xe000e014

08003584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003594 <vPortEnableVFP+0x10>
 8003588:	6801      	ldr	r1, [r0, #0]
 800358a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800358e:	6001      	str	r1, [r0, #0]
 8003590:	4770      	bx	lr
 8003592:	0000      	.short	0x0000
 8003594:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop

0800359c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80035a2:	f3ef 8305 	mrs	r3, IPSR
 80035a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b0f      	cmp	r3, #15
 80035ac:	d914      	bls.n	80035d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <vPortValidateInterruptPriority+0x70>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035b8:	4b15      	ldr	r3, [pc, #84]	; (8003610 <vPortValidateInterruptPriority+0x74>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	7afa      	ldrb	r2, [r7, #11]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d20a      	bcs.n	80035d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	607b      	str	r3, [r7, #4]
    }
 80035d4:	bf00      	nop
 80035d6:	e7fe      	b.n	80035d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80035d8:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <vPortValidateInterruptPriority+0x78>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <vPortValidateInterruptPriority+0x7c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d90a      	bls.n	80035fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	603b      	str	r3, [r7, #0]
    }
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <vPortValidateInterruptPriority+0x60>
    }
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000e3f0 	.word	0xe000e3f0
 8003610:	2000049c 	.word	0x2000049c
 8003614:	e000ed0c 	.word	0xe000ed0c
 8003618:	200004a0 	.word	0x200004a0

0800361c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003628:	f7ff f914 	bl	8002854 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <pvPortMalloc+0x160>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003634:	f000 f908 	bl	8003848 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800363e:	2208      	movs	r2, #8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	3308      	adds	r3, #8
 800364a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	43db      	mvns	r3, r3
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d804      	bhi.n	8003660 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	4413      	add	r3, r2
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	e001      	b.n	8003664 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db70      	blt.n	800374c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d06d      	beq.n	800374c <pvPortMalloc+0x130>
 8003670:	4b43      	ldr	r3, [pc, #268]	; (8003780 <pvPortMalloc+0x164>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	429a      	cmp	r2, r3
 8003678:	d868      	bhi.n	800374c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800367a:	4b42      	ldr	r3, [pc, #264]	; (8003784 <pvPortMalloc+0x168>)
 800367c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <pvPortMalloc+0x168>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003684:	e004      	b.n	8003690 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	429a      	cmp	r2, r3
 8003698:	d903      	bls.n	80036a2 <pvPortMalloc+0x86>
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f1      	bne.n	8003686 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <pvPortMalloc+0x160>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d04f      	beq.n	800374c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2208      	movs	r2, #8
 80036b2:	4413      	add	r3, r2
 80036b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1ad2      	subs	r2, r2, r3
 80036c6:	2308      	movs	r3, #8
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d91f      	bls.n	800370e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <pvPortMalloc+0xda>
        __asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	613b      	str	r3, [r7, #16]
    }
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	1ad2      	subs	r2, r2, r3
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003708:	6978      	ldr	r0, [r7, #20]
 800370a:	f000 f8f9 	bl	8003900 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <pvPortMalloc+0x164>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	4a19      	ldr	r2, [pc, #100]	; (8003780 <pvPortMalloc+0x164>)
 800371a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <pvPortMalloc+0x164>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <pvPortMalloc+0x16c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d203      	bcs.n	8003730 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <pvPortMalloc+0x164>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a16      	ldr	r2, [pc, #88]	; (8003788 <pvPortMalloc+0x16c>)
 800372e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <pvPortMalloc+0x170>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	4a10      	ldr	r2, [pc, #64]	; (800378c <pvPortMalloc+0x170>)
 800374a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800374c:	f7ff f890 	bl	8002870 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <pvPortMalloc+0x154>
        __asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	60fb      	str	r3, [r7, #12]
    }
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <pvPortMalloc+0x152>
    return pvReturn;
 8003770:	69fb      	ldr	r3, [r7, #28]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3728      	adds	r7, #40	; 0x28
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	2000144c 	.word	0x2000144c
 8003780:	20001450 	.word	0x20001450
 8003784:	20001444 	.word	0x20001444
 8003788:	20001454 	.word	0x20001454
 800378c:	20001458 	.word	0x20001458

08003790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d049      	beq.n	8003836 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80037a2:	2308      	movs	r3, #8
 80037a4:	425b      	negs	r3, r3
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4413      	add	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	db0a      	blt.n	80037ce <vPortFree+0x3e>
        __asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	60fb      	str	r3, [r7, #12]
    }
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <vPortFree+0x5c>
        __asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	60bb      	str	r3, [r7, #8]
    }
 80037e8:	bf00      	nop
 80037ea:	e7fe      	b.n	80037ea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	0fdb      	lsrs	r3, r3, #31
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01c      	beq.n	8003836 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d118      	bne.n	8003836 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003810:	f7ff f820 	bl	8002854 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <vPortFree+0xb0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4413      	add	r3, r2
 800381e:	4a08      	ldr	r2, [pc, #32]	; (8003840 <vPortFree+0xb0>)
 8003820:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003822:	6938      	ldr	r0, [r7, #16]
 8003824:	f000 f86c 	bl	8003900 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <vPortFree+0xb4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4a05      	ldr	r2, [pc, #20]	; (8003844 <vPortFree+0xb4>)
 8003830:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003832:	f7ff f81d 	bl	8002870 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20001450 	.word	0x20001450
 8003844:	2000145c 	.word	0x2000145c

08003848 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800384e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003852:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <prvHeapInit+0xa4>)
 8003856:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3307      	adds	r3, #7
 8003866:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0307 	bic.w	r3, r3, #7
 800386e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <prvHeapInit+0xa4>)
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <prvHeapInit+0xa8>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003886:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <prvHeapInit+0xa8>)
 8003888:	2200      	movs	r2, #0
 800388a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	4413      	add	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003894:	2208      	movs	r2, #8
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0307 	bic.w	r3, r3, #7
 80038a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <prvHeapInit+0xac>)
 80038a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <prvHeapInit+0xac>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2200      	movs	r2, #0
 80038b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <prvHeapInit+0xac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <prvHeapInit+0xac>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <prvHeapInit+0xb0>)
 80038d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a07      	ldr	r2, [pc, #28]	; (80038fc <prvHeapInit+0xb4>)
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	200004a4 	.word	0x200004a4
 80038f0:	20001444 	.word	0x20001444
 80038f4:	2000144c 	.word	0x2000144c
 80038f8:	20001454 	.word	0x20001454
 80038fc:	20001450 	.word	0x20001450

08003900 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003908:	4b28      	ldr	r3, [pc, #160]	; (80039ac <prvInsertBlockIntoFreeList+0xac>)
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e002      	b.n	8003914 <prvInsertBlockIntoFreeList+0x14>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d8f7      	bhi.n	800390e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d108      	bne.n	8003942 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	441a      	add	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d118      	bne.n	8003988 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <prvInsertBlockIntoFreeList+0xb0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d00d      	beq.n	800397e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e008      	b.n	8003990 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <prvInsertBlockIntoFreeList+0xb0>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e003      	b.n	8003990 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	d002      	beq.n	800399e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20001444 	.word	0x20001444
 80039b0:	2000144c 	.word	0x2000144c

080039b4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80039b8:	4803      	ldr	r0, [pc, #12]	; (80039c8 <_cbSendSystemDesc+0x14>)
 80039ba:	f001 f8e9 	bl	8004b90 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80039be:	4803      	ldr	r0, [pc, #12]	; (80039cc <_cbSendSystemDesc+0x18>)
 80039c0:	f001 f8e6 	bl	8004b90 <SEGGER_SYSVIEW_SendSysDesc>
}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	080053a4 	.word	0x080053a4
 80039cc:	080053e0 	.word	0x080053e0

080039d0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80039da:	6819      	ldr	r1, [r3, #0]
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80039de:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <SEGGER_SYSVIEW_Conf+0x28>)
 80039e0:	f000 fd5c 	bl	800449c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80039e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80039e8:	f000 fd9c 	bl	8004524 <SEGGER_SYSVIEW_SetRAMBase>
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000000 	.word	0x20000000
 80039f4:	080039b5 	.word	0x080039b5
 80039f8:	080054ac 	.word	0x080054ac

080039fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80039fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	e033      	b.n	8003a70 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003a08:	491e      	ldr	r1, [pc, #120]	; (8003a84 <_cbSendTaskList+0x88>)
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	491a      	ldr	r1, [pc, #104]	; (8003a84 <_cbSendTaskList+0x88>)
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3304      	adds	r3, #4
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	4c16      	ldr	r4, [pc, #88]	; (8003a84 <_cbSendTaskList+0x88>)
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4423      	add	r3, r4
 8003a38:	3308      	adds	r3, #8
 8003a3a:	681c      	ldr	r4, [r3, #0]
 8003a3c:	4d11      	ldr	r5, [pc, #68]	; (8003a84 <_cbSendTaskList+0x88>)
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	442b      	add	r3, r5
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	681d      	ldr	r5, [r3, #0]
 8003a4e:	4e0d      	ldr	r6, [pc, #52]	; (8003a84 <_cbSendTaskList+0x88>)
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4433      	add	r3, r6
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	462b      	mov	r3, r5
 8003a64:	4622      	mov	r2, r4
 8003a66:	f000 f8bd 	bl	8003be4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <_cbSendTaskList+0x8c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3c6      	bcc.n	8003a08 <_cbSendTaskList+0xc>
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a84:	20001460 	.word	0x20001460
 8003a88:	20001500 	.word	0x20001500

08003a8c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003a94:	f7fe ffec 	bl	8002a70 <xTaskGetTickCountFromISR>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	469a      	mov	sl, r3
 8003a9e:	4693      	mov	fp, r2
 8003aa0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	f04f 0a00 	mov.w	sl, #0
 8003ab0:	f04f 0b00 	mov.w	fp, #0
 8003ab4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003ab8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003abc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003ac0:	4652      	mov	r2, sl
 8003ac2:	465b      	mov	r3, fp
 8003ac4:	1a14      	subs	r4, r2, r0
 8003ac6:	eb63 0501 	sbc.w	r5, r3, r1
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	00ab      	lsls	r3, r5, #2
 8003ad4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003ad8:	00a2      	lsls	r2, r4, #2
 8003ada:	4614      	mov	r4, r2
 8003adc:	461d      	mov	r5, r3
 8003ade:	eb14 0800 	adds.w	r8, r4, r0
 8003ae2:	eb45 0901 	adc.w	r9, r5, r1
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afa:	4690      	mov	r8, r2
 8003afc:	4699      	mov	r9, r3
 8003afe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003b02:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003b14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003b22:	2205      	movs	r2, #5
 8003b24:	492b      	ldr	r1, [pc, #172]	; (8003bd4 <SYSVIEW_AddTask+0xc0>)
 8003b26:	68b8      	ldr	r0, [r7, #8]
 8003b28:	f001 fb26 	bl	8005178 <memcmp>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d04b      	beq.n	8003bca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003b32:	4b29      	ldr	r3, [pc, #164]	; (8003bd8 <SYSVIEW_AddTask+0xc4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b07      	cmp	r3, #7
 8003b38:	d903      	bls.n	8003b42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003b3a:	4828      	ldr	r0, [pc, #160]	; (8003bdc <SYSVIEW_AddTask+0xc8>)
 8003b3c:	f001 fac0 	bl	80050c0 <SEGGER_SYSVIEW_Warn>
    return;
 8003b40:	e044      	b.n	8003bcc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003b42:	4b25      	ldr	r3, [pc, #148]	; (8003bd8 <SYSVIEW_AddTask+0xc4>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4926      	ldr	r1, [pc, #152]	; (8003be0 <SYSVIEW_AddTask+0xcc>)
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <SYSVIEW_AddTask+0xc4>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4921      	ldr	r1, [pc, #132]	; (8003be0 <SYSVIEW_AddTask+0xcc>)
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	3304      	adds	r3, #4
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <SYSVIEW_AddTask+0xc4>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	491b      	ldr	r1, [pc, #108]	; (8003be0 <SYSVIEW_AddTask+0xcc>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <SYSVIEW_AddTask+0xc4>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4916      	ldr	r1, [pc, #88]	; (8003be0 <SYSVIEW_AddTask+0xcc>)
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	330c      	adds	r3, #12
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003b98:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <SYSVIEW_AddTask+0xc4>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4910      	ldr	r1, [pc, #64]	; (8003be0 <SYSVIEW_AddTask+0xcc>)
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3310      	adds	r3, #16
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <SYSVIEW_AddTask+0xc4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <SYSVIEW_AddTask+0xc4>)
 8003bb6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f80e 	bl	8003be4 <SYSVIEW_SendTaskInfo>
 8003bc8:	e000      	b.n	8003bcc <SYSVIEW_AddTask+0xb8>
    return;
 8003bca:	bf00      	nop

}
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	080053f0 	.word	0x080053f0
 8003bd8:	20001500 	.word	0x20001500
 8003bdc:	080053f8 	.word	0x080053f8
 8003be0:	20001460 	.word	0x20001460

08003be4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	; 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003bf2:	f107 0314 	add.w	r3, r7, #20
 8003bf6:	2214      	movs	r2, #20
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 facc 	bl	8005198 <memset>
  TaskInfo.TaskID     = TaskID;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fec1 	bl	80049a0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003c1e:	bf00      	nop
 8003c20:	3728      	adds	r7, #40	; 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <_DoInit+0xa0>)
 8003c30:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003c32:	22a8      	movs	r2, #168	; 0xa8
 8003c34:	2100      	movs	r1, #0
 8003c36:	6838      	ldr	r0, [r7, #0]
 8003c38:	f001 faae 	bl	8005198 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2203      	movs	r2, #3
 8003c46:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4a20      	ldr	r2, [pc, #128]	; (8003ccc <_DoInit+0xa4>)
 8003c4c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <_DoInit+0xa8>)
 8003c52:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c5a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <_DoInit+0xa4>)
 8003c72:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <_DoInit+0xac>)
 8003c78:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2200      	movs	r2, #0
 8003c84:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003c92:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	e00c      	b.n	8003cb6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1c3 030f 	rsb	r3, r3, #15
 8003ca2:	4a0d      	ldr	r2, [pc, #52]	; (8003cd8 <_DoInit+0xb0>)
 8003ca4:	5cd1      	ldrb	r1, [r2, r3]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4413      	add	r3, r2
 8003cac:	460a      	mov	r2, r1
 8003cae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d9ef      	bls.n	8003c9c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003cbc:	f3bf 8f5f 	dmb	sy
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20001504 	.word	0x20001504
 8003ccc:	08005448 	.word	0x08005448
 8003cd0:	200015ac 	.word	0x200015ac
 8003cd4:	200019ac 	.word	0x200019ac
 8003cd8:	080054b4 	.word	0x080054b4

08003cdc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	; (8003de4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b53      	cmp	r3, #83	; 0x53
 8003cf4:	d001      	beq.n	8003cfa <SEGGER_RTT_ReadNoLock+0x1e>
 8003cf6:	f7ff ff97 	bl	8003c28 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	4413      	add	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	3360      	adds	r3, #96	; 0x60
 8003d06:	4a37      	ldr	r2, [pc, #220]	; (8003de4 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d08:	4413      	add	r3, r2
 8003d0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d92b      	bls.n	8003d80 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bf28      	it	cs
 8003d3a:	4613      	movcs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	4413      	add	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	6939      	ldr	r1, [r7, #16]
 8003d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d4e:	f001 faa7 	bl	80052a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	4413      	add	r3, r2
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	4413      	add	r3, r2
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4413      	add	r3, r2
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d101      	bne.n	8003d80 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	bf28      	it	cs
 8003d90:	4613      	movcs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d019      	beq.n	8003dce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	4413      	add	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6939      	ldr	r1, [r7, #16]
 8003da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003daa:	f001 fa79 	bl	80052a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4413      	add	r3, r2
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4413      	add	r3, r2
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4413      	add	r3, r2
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3730      	adds	r7, #48	; 0x30
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20001504 	.word	0x20001504

08003de8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003df6:	4b3d      	ldr	r3, [pc, #244]	; (8003eec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b53      	cmp	r3, #83	; 0x53
 8003e02:	d001      	beq.n	8003e08 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e04:	f7ff ff10 	bl	8003c28 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e08:	f3ef 8311 	mrs	r3, BASEPRI
 8003e0c:	f04f 0120 	mov.w	r1, #32
 8003e10:	f381 8811 	msr	BASEPRI, r1
 8003e14:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e16:	4b35      	ldr	r3, [pc, #212]	; (8003eec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e18:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003e1e:	6939      	ldr	r1, [r7, #16]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3304      	adds	r3, #4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	dbeb      	blt.n	8003e1e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003e46:	e000      	b.n	8003e4a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003e48:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	da3f      	bge.n	8003ed4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003e54:	6939      	ldr	r1, [r7, #16]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e68:	6939      	ldr	r1, [r7, #16]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	440b      	add	r3, r1
 8003e78:	3304      	adds	r3, #4
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003e7e:	6939      	ldr	r1, [r7, #16]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	4613      	mov	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3320      	adds	r3, #32
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003e92:	6939      	ldr	r1, [r7, #16]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3328      	adds	r3, #40	; 0x28
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003ea6:	6939      	ldr	r1, [r7, #16]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003eba:	6939      	ldr	r1, [r7, #16]
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	440b      	add	r3, r1
 8003ec8:	332c      	adds	r3, #44	; 0x2c
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ece:	f3bf 8f5f 	dmb	sy
 8003ed2:	e002      	b.n	8003eda <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20001504 	.word	0x20001504

08003ef0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003efe:	4b21      	ldr	r3, [pc, #132]	; (8003f84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b53      	cmp	r3, #83	; 0x53
 8003f0a:	d001      	beq.n	8003f10 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003f0c:	f7ff fe8c 	bl	8003c28 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f10:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f12:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d82c      	bhi.n	8003f74 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f1e:	f04f 0120 	mov.w	r1, #32
 8003f22:	f381 8811 	msr	BASEPRI, r1
 8003f26:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	3360      	adds	r3, #96	; 0x60
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	4413      	add	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
 8003f72:	e002      	b.n	8003f7a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3728      	adds	r7, #40	; 0x28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20001504 	.word	0x20001504

08003f88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	60fa      	str	r2, [r7, #12]
 8003f9e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b80      	cmp	r3, #128	; 0x80
 8003fa4:	d90a      	bls.n	8003fbc <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003faa:	e007      	b.n	8003fbc <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	1c53      	adds	r3, r2, #1
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1c59      	adds	r1, r3, #1
 8003fb6:	60f9      	str	r1, [r7, #12]
 8003fb8:	7812      	ldrb	r2, [r2, #0]
 8003fba:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	1e5a      	subs	r2, r3, #1
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <_EncodeStr+0x46>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ee      	bne.n	8003fac <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3307      	adds	r3, #7
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004006:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <_HandleIncomingPacket+0xd8>)
 8004008:	7e1b      	ldrb	r3, [r3, #24]
 800400a:	4618      	mov	r0, r3
 800400c:	1cfb      	adds	r3, r7, #3
 800400e:	2201      	movs	r2, #1
 8004010:	4619      	mov	r1, r3
 8004012:	f7ff fe63 	bl	8003cdc <SEGGER_RTT_ReadNoLock>
 8004016:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d057      	beq.n	80040ce <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	2b80      	cmp	r3, #128	; 0x80
 8004022:	d031      	beq.n	8004088 <_HandleIncomingPacket+0x88>
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	dc40      	bgt.n	80040aa <_HandleIncomingPacket+0xaa>
 8004028:	2b07      	cmp	r3, #7
 800402a:	dc15      	bgt.n	8004058 <_HandleIncomingPacket+0x58>
 800402c:	2b00      	cmp	r3, #0
 800402e:	dd3c      	ble.n	80040aa <_HandleIncomingPacket+0xaa>
 8004030:	3b01      	subs	r3, #1
 8004032:	2b06      	cmp	r3, #6
 8004034:	d839      	bhi.n	80040aa <_HandleIncomingPacket+0xaa>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <_HandleIncomingPacket+0x3c>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	0800405f 	.word	0x0800405f
 8004040:	08004065 	.word	0x08004065
 8004044:	0800406b 	.word	0x0800406b
 8004048:	08004071 	.word	0x08004071
 800404c:	08004077 	.word	0x08004077
 8004050:	0800407d 	.word	0x0800407d
 8004054:	08004083 	.word	0x08004083
 8004058:	2b7f      	cmp	r3, #127	; 0x7f
 800405a:	d033      	beq.n	80040c4 <_HandleIncomingPacket+0xc4>
 800405c:	e025      	b.n	80040aa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800405e:	f000 fb25 	bl	80046ac <SEGGER_SYSVIEW_Start>
      break;
 8004062:	e034      	b.n	80040ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004064:	f000 fbdc 	bl	8004820 <SEGGER_SYSVIEW_Stop>
      break;
 8004068:	e031      	b.n	80040ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800406a:	f000 fdb5 	bl	8004bd8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800406e:	e02e      	b.n	80040ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004070:	f000 fd7a 	bl	8004b68 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004074:	e02b      	b.n	80040ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004076:	f000 fbf9 	bl	800486c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800407a:	e028      	b.n	80040ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800407c:	f000 ffe2 	bl	8005044 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004080:	e025      	b.n	80040ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004082:	f000 ffc1 	bl	8005008 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004086:	e022      	b.n	80040ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004088:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <_HandleIncomingPacket+0xd8>)
 800408a:	7e1b      	ldrb	r3, [r3, #24]
 800408c:	4618      	mov	r0, r3
 800408e:	1cfb      	adds	r3, r7, #3
 8004090:	2201      	movs	r2, #1
 8004092:	4619      	mov	r1, r3
 8004094:	f7ff fe22 	bl	8003cdc <SEGGER_RTT_ReadNoLock>
 8004098:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 ff26 	bl	8004ef4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80040a8:	e00e      	b.n	80040c8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da0c      	bge.n	80040cc <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <_HandleIncomingPacket+0xd8>)
 80040b4:	7e1b      	ldrb	r3, [r3, #24]
 80040b6:	4618      	mov	r0, r3
 80040b8:	1cfb      	adds	r3, r7, #3
 80040ba:	2201      	movs	r2, #1
 80040bc:	4619      	mov	r1, r3
 80040be:	f7ff fe0d 	bl	8003cdc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80040c2:	e003      	b.n	80040cc <_HandleIncomingPacket+0xcc>
      break;
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <_HandleIncomingPacket+0xce>
      break;
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <_HandleIncomingPacket+0xce>
      break;
 80040cc:	bf00      	nop
    }
  }
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200041c4 	.word	0x200041c4

080040dc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08c      	sub	sp, #48	; 0x30
 80040e0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80040e2:	2301      	movs	r3, #1
 80040e4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	3301      	adds	r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f0:	4b31      	ldr	r3, [pc, #196]	; (80041b8 <_TrySendOverflowPacket+0xdc>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f6:	e00b      	b.n	8004110 <_TrySendOverflowPacket+0x34>
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fe:	1c59      	adds	r1, r3, #1
 8004100:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	09db      	lsrs	r3, r3, #7
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	2b7f      	cmp	r3, #127	; 0x7f
 8004114:	d8f0      	bhi.n	80040f8 <_TrySendOverflowPacket+0x1c>
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800411c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <_TrySendOverflowPacket+0xe0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800412c:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <_TrySendOverflowPacket+0xdc>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	623b      	str	r3, [r7, #32]
 800413e:	e00b      	b.n	8004158 <_TrySendOverflowPacket+0x7c>
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	1c59      	adds	r1, r3, #1
 8004148:	6279      	str	r1, [r7, #36]	; 0x24
 800414a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	09db      	lsrs	r3, r3, #7
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	2b7f      	cmp	r3, #127	; 0x7f
 800415c:	d8f0      	bhi.n	8004140 <_TrySendOverflowPacket+0x64>
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	627a      	str	r2, [r7, #36]	; 0x24
 8004164:	6a3a      	ldr	r2, [r7, #32]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <_TrySendOverflowPacket+0xdc>)
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	4618      	mov	r0, r3
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	461a      	mov	r2, r3
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	4619      	mov	r1, r3
 8004180:	f7fc f826 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004184:	4603      	mov	r3, r0
 8004186:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <_TrySendOverflowPacket+0xdc>)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004194:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <_TrySendOverflowPacket+0xdc>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	3b01      	subs	r3, #1
 800419a:	b2da      	uxtb	r2, r3
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <_TrySendOverflowPacket+0xdc>)
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	e004      	b.n	80041ac <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <_TrySendOverflowPacket+0xdc>)
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	3301      	adds	r3, #1
 80041a8:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <_TrySendOverflowPacket+0xdc>)
 80041aa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80041ac:	693b      	ldr	r3, [r7, #16]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3730      	adds	r7, #48	; 0x30
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200041c4 	.word	0x200041c4
 80041bc:	e0001004 	.word	0xe0001004

080041c0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80041cc:	4b98      	ldr	r3, [pc, #608]	; (8004430 <_SendPacket+0x270>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d010      	beq.n	80041f6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80041d4:	4b96      	ldr	r3, [pc, #600]	; (8004430 <_SendPacket+0x270>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 812d 	beq.w	8004438 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80041de:	4b94      	ldr	r3, [pc, #592]	; (8004430 <_SendPacket+0x270>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d109      	bne.n	80041fa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80041e6:	f7ff ff79 	bl	80040dc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80041ea:	4b91      	ldr	r3, [pc, #580]	; (8004430 <_SendPacket+0x270>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	f040 8124 	bne.w	800443c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80041f4:	e001      	b.n	80041fa <_SendPacket+0x3a>
    goto Send;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <_SendPacket+0x3c>
Send:
 80041fa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b1f      	cmp	r3, #31
 8004200:	d809      	bhi.n	8004216 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004202:	4b8b      	ldr	r3, [pc, #556]	; (8004430 <_SendPacket+0x270>)
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 8115 	bne.w	8004440 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b17      	cmp	r3, #23
 800421a:	d807      	bhi.n	800422c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3b01      	subs	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e0c4      	b.n	80043b6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b7f      	cmp	r3, #127	; 0x7f
 8004238:	d912      	bls.n	8004260 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	09da      	lsrs	r2, r3, #7
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3b01      	subs	r3, #1
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	3a01      	subs	r2, #1
 8004252:	60fa      	str	r2, [r7, #12]
 8004254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e006      	b.n	800426e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3b01      	subs	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b7e      	cmp	r3, #126	; 0x7e
 8004272:	d807      	bhi.n	8004284 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b01      	subs	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e098      	b.n	80043b6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800428a:	d212      	bcs.n	80042b2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	09da      	lsrs	r2, r3, #7
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3b01      	subs	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	3a01      	subs	r2, #1
 80042a4:	60fa      	str	r2, [r7, #12]
 80042a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e081      	b.n	80043b6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b8:	d21d      	bcs.n	80042f6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0b9a      	lsrs	r2, r3, #14
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	09db      	lsrs	r3, r3, #7
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	3a01      	subs	r2, #1
 80042d4:	60fa      	str	r2, [r7, #12]
 80042d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	3a01      	subs	r2, #1
 80042e8:	60fa      	str	r2, [r7, #12]
 80042ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e05f      	b.n	80043b6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fc:	d228      	bcs.n	8004350 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0d5a      	lsrs	r2, r3, #21
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3b01      	subs	r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0b9b      	lsrs	r3, r3, #14
 8004312:	b2db      	uxtb	r3, r3
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	3a01      	subs	r2, #1
 8004318:	60fa      	str	r2, [r7, #12]
 800431a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	09db      	lsrs	r3, r3, #7
 8004328:	b2db      	uxtb	r3, r3
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	3a01      	subs	r2, #1
 800432e:	60fa      	str	r2, [r7, #12]
 8004330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	3a01      	subs	r2, #1
 8004342:	60fa      	str	r2, [r7, #12]
 8004344:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e032      	b.n	80043b6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	0f1a      	lsrs	r2, r3, #28
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3b01      	subs	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	0d5b      	lsrs	r3, r3, #21
 8004364:	b2db      	uxtb	r3, r3
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	3a01      	subs	r2, #1
 800436a:	60fa      	str	r2, [r7, #12]
 800436c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0b9b      	lsrs	r3, r3, #14
 800437a:	b2db      	uxtb	r3, r3
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	3a01      	subs	r2, #1
 8004380:	60fa      	str	r2, [r7, #12]
 8004382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004386:	b2da      	uxtb	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	09db      	lsrs	r3, r3, #7
 8004390:	b2db      	uxtb	r3, r3
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	3a01      	subs	r2, #1
 8004396:	60fa      	str	r2, [r7, #12]
 8004398:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	3a01      	subs	r2, #1
 80043aa:	60fa      	str	r2, [r7, #12]
 80043ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043b6:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <_SendPacket+0x274>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043bc:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <_SendPacket+0x270>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	623b      	str	r3, [r7, #32]
 80043ce:	e00b      	b.n	80043e8 <_SendPacket+0x228>
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	1c59      	adds	r1, r3, #1
 80043d8:	6279      	str	r1, [r7, #36]	; 0x24
 80043da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	09db      	lsrs	r3, r3, #7
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	2b7f      	cmp	r3, #127	; 0x7f
 80043ec:	d8f0      	bhi.n	80043d0 <_SendPacket+0x210>
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	627a      	str	r2, [r7, #36]	; 0x24
 80043f4:	6a3a      	ldr	r2, [r7, #32]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <_SendPacket+0x270>)
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	4618      	mov	r0, r3
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	461a      	mov	r2, r3
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	f7fb fedf 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004412:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800441a:	4a05      	ldr	r2, [pc, #20]	; (8004430 <_SendPacket+0x270>)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	60d3      	str	r3, [r2, #12]
 8004420:	e00f      	b.n	8004442 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004422:	4b03      	ldr	r3, [pc, #12]	; (8004430 <_SendPacket+0x270>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4b01      	ldr	r3, [pc, #4]	; (8004430 <_SendPacket+0x270>)
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e008      	b.n	8004442 <_SendPacket+0x282>
 8004430:	200041c4 	.word	0x200041c4
 8004434:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004438:	bf00      	nop
 800443a:	e002      	b.n	8004442 <_SendPacket+0x282>
      goto SendDone;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <_SendPacket+0x282>
      goto SendDone;
 8004440:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <_SendPacket+0x2d4>)
 8004444:	7e1b      	ldrb	r3, [r3, #24]
 8004446:	4619      	mov	r1, r3
 8004448:	4a13      	ldr	r2, [pc, #76]	; (8004498 <_SendPacket+0x2d8>)
 800444a:	460b      	mov	r3, r1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	440b      	add	r3, r1
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	336c      	adds	r3, #108	; 0x6c
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <_SendPacket+0x2d4>)
 800445a:	7e1b      	ldrb	r3, [r3, #24]
 800445c:	4618      	mov	r0, r3
 800445e:	490e      	ldr	r1, [pc, #56]	; (8004498 <_SendPacket+0x2d8>)
 8004460:	4603      	mov	r3, r0
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	4403      	add	r3, r0
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	440b      	add	r3, r1
 800446a:	3370      	adds	r3, #112	; 0x70
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d00b      	beq.n	800448a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <_SendPacket+0x2d4>)
 8004474:	789b      	ldrb	r3, [r3, #2]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <_SendPacket+0x2d4>)
 800447c:	2201      	movs	r2, #1
 800447e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004480:	f7ff fdbe 	bl	8004000 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <_SendPacket+0x2d4>)
 8004486:	2200      	movs	r2, #0
 8004488:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800448a:	bf00      	nop
 800448c:	3728      	adds	r7, #40	; 0x28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	200041c4 	.word	0x200041c4
 8004498:	20001504 	.word	0x20001504

0800449c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044aa:	2300      	movs	r3, #0
 80044ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80044b0:	4917      	ldr	r1, [pc, #92]	; (8004510 <SEGGER_SYSVIEW_Init+0x74>)
 80044b2:	4818      	ldr	r0, [pc, #96]	; (8004514 <SEGGER_SYSVIEW_Init+0x78>)
 80044b4:	f7ff fc98 	bl	8003de8 <SEGGER_RTT_AllocUpBuffer>
 80044b8:	4603      	mov	r3, r0
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044be:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80044c0:	4b15      	ldr	r3, [pc, #84]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044c2:	785a      	ldrb	r2, [r3, #1]
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044c6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044ca:	7e1b      	ldrb	r3, [r3, #24]
 80044cc:	4618      	mov	r0, r3
 80044ce:	2300      	movs	r3, #0
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2308      	movs	r3, #8
 80044d4:	4a11      	ldr	r2, [pc, #68]	; (800451c <SEGGER_SYSVIEW_Init+0x80>)
 80044d6:	490f      	ldr	r1, [pc, #60]	; (8004514 <SEGGER_SYSVIEW_Init+0x78>)
 80044d8:	f7ff fd0a 	bl	8003ef0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80044dc:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044de:	2200      	movs	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <SEGGER_SYSVIEW_Init+0x84>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a0c      	ldr	r2, [pc, #48]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044e8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80044ea:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80044f0:	4a09      	ldr	r2, [pc, #36]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80044f6:	4a08      	ldr	r2, [pc, #32]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80044fc:	4a06      	ldr	r2, [pc, #24]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <SEGGER_SYSVIEW_Init+0x7c>)
 8004504:	2200      	movs	r2, #0
 8004506:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200019bc 	.word	0x200019bc
 8004514:	0800545c 	.word	0x0800545c
 8004518:	200041c4 	.word	0x200041c4
 800451c:	200041bc 	.word	0x200041bc
 8004520:	e0001004 	.word	0xe0001004

08004524 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800452c:	4a04      	ldr	r2, [pc, #16]	; (8004540 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6113      	str	r3, [r2, #16]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	200041c4 	.word	0x200041c4

08004544 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800454c:	f3ef 8311 	mrs	r3, BASEPRI
 8004550:	f04f 0120 	mov.w	r1, #32
 8004554:	f381 8811 	msr	BASEPRI, r1
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	4808      	ldr	r0, [pc, #32]	; (800457c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800455c:	f7ff fd44 	bl	8003fe8 <_PreparePacket>
 8004560:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	68b8      	ldr	r0, [r7, #8]
 8004568:	f7ff fe2a 	bl	80041c0 <_SendPacket>
  RECORD_END();
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f383 8811 	msr	BASEPRI, r3
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	200041f4 	.word	0x200041f4

08004580 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800458a:	f3ef 8311 	mrs	r3, BASEPRI
 800458e:	f04f 0120 	mov.w	r1, #32
 8004592:	f381 8811 	msr	BASEPRI, r1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	4816      	ldr	r0, [pc, #88]	; (80045f4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800459a:	f7ff fd25 	bl	8003fe8 <_PreparePacket>
 800459e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	e00b      	b.n	80045c6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	1c59      	adds	r1, r3, #1
 80045b6:	61f9      	str	r1, [r7, #28]
 80045b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	09db      	lsrs	r3, r3, #7
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b7f      	cmp	r3, #127	; 0x7f
 80045ca:	d8f0      	bhi.n	80045ae <SEGGER_SYSVIEW_RecordU32+0x2e>
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	61fa      	str	r2, [r7, #28]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	6938      	ldr	r0, [r7, #16]
 80045e2:	f7ff fded 	bl	80041c0 <_SendPacket>
  RECORD_END();
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f383 8811 	msr	BASEPRI, r3
}
 80045ec:	bf00      	nop
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	200041f4 	.word	0x200041f4

080045f8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	; 0x30
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004604:	f3ef 8311 	mrs	r3, BASEPRI
 8004608:	f04f 0120 	mov.w	r1, #32
 800460c:	f381 8811 	msr	BASEPRI, r1
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	4825      	ldr	r0, [pc, #148]	; (80046a8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004614:	f7ff fce8 	bl	8003fe8 <_PreparePacket>
 8004618:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
 8004626:	e00b      	b.n	8004640 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	b2da      	uxtb	r2, r3
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	1c59      	adds	r1, r3, #1
 8004630:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004632:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	09db      	lsrs	r3, r3, #7
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	2b7f      	cmp	r3, #127	; 0x7f
 8004644:	d8f0      	bhi.n	8004628 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800464c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	e00b      	b.n	8004678 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	1c59      	adds	r1, r3, #1
 8004668:	6279      	str	r1, [r7, #36]	; 0x24
 800466a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	09db      	lsrs	r3, r3, #7
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	2b7f      	cmp	r3, #127	; 0x7f
 800467c:	d8f0      	bhi.n	8004660 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	627a      	str	r2, [r7, #36]	; 0x24
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	6979      	ldr	r1, [r7, #20]
 8004692:	69b8      	ldr	r0, [r7, #24]
 8004694:	f7ff fd94 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f383 8811 	msr	BASEPRI, r3
}
 800469e:	bf00      	nop
 80046a0:	3730      	adds	r7, #48	; 0x30
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	200041f4 	.word	0x200041f4

080046ac <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	; 0x30
 80046b0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80046b2:	4b58      	ldr	r3, [pc, #352]	; (8004814 <SEGGER_SYSVIEW_Start+0x168>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80046b8:	f3ef 8311 	mrs	r3, BASEPRI
 80046bc:	f04f 0120 	mov.w	r1, #32
 80046c0:	f381 8811 	msr	BASEPRI, r1
 80046c4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80046c6:	4b53      	ldr	r3, [pc, #332]	; (8004814 <SEGGER_SYSVIEW_Start+0x168>)
 80046c8:	785b      	ldrb	r3, [r3, #1]
 80046ca:	220a      	movs	r2, #10
 80046cc:	4952      	ldr	r1, [pc, #328]	; (8004818 <SEGGER_SYSVIEW_Start+0x16c>)
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fb fd7e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80046da:	200a      	movs	r0, #10
 80046dc:	f7ff ff32 	bl	8004544 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046e0:	f3ef 8311 	mrs	r3, BASEPRI
 80046e4:	f04f 0120 	mov.w	r1, #32
 80046e8:	f381 8811 	msr	BASEPRI, r1
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	484b      	ldr	r0, [pc, #300]	; (800481c <SEGGER_SYSVIEW_Start+0x170>)
 80046f0:	f7ff fc7a 	bl	8003fe8 <_PreparePacket>
 80046f4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fe:	4b45      	ldr	r3, [pc, #276]	; (8004814 <SEGGER_SYSVIEW_Start+0x168>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
 8004704:	e00b      	b.n	800471e <SEGGER_SYSVIEW_Start+0x72>
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	b2da      	uxtb	r2, r3
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	1c59      	adds	r1, r3, #1
 800470e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004710:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	09db      	lsrs	r3, r3, #7
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2b7f      	cmp	r3, #127	; 0x7f
 8004722:	d8f0      	bhi.n	8004706 <SEGGER_SYSVIEW_Start+0x5a>
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800472a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
 8004738:	4b36      	ldr	r3, [pc, #216]	; (8004814 <SEGGER_SYSVIEW_Start+0x168>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	e00b      	b.n	8004758 <SEGGER_SYSVIEW_Start+0xac>
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	1c59      	adds	r1, r3, #1
 8004748:	6279      	str	r1, [r7, #36]	; 0x24
 800474a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	09db      	lsrs	r3, r3, #7
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	2b7f      	cmp	r3, #127	; 0x7f
 800475c:	d8f0      	bhi.n	8004740 <SEGGER_SYSVIEW_Start+0x94>
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	627a      	str	r2, [r7, #36]	; 0x24
 8004764:	6a3a      	ldr	r2, [r7, #32]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	4b28      	ldr	r3, [pc, #160]	; (8004814 <SEGGER_SYSVIEW_Start+0x168>)
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	e00b      	b.n	8004792 <SEGGER_SYSVIEW_Start+0xe6>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	1c59      	adds	r1, r3, #1
 8004782:	61f9      	str	r1, [r7, #28]
 8004784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	09db      	lsrs	r3, r3, #7
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b7f      	cmp	r3, #127	; 0x7f
 8004796:	d8f0      	bhi.n	800477a <SEGGER_SYSVIEW_Start+0xce>
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	61fa      	str	r2, [r7, #28]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e00b      	b.n	80047ca <SEGGER_SYSVIEW_Start+0x11e>
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	1c59      	adds	r1, r3, #1
 80047ba:	6179      	str	r1, [r7, #20]
 80047bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	09db      	lsrs	r3, r3, #7
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b7f      	cmp	r3, #127	; 0x7f
 80047ce:	d8f0      	bhi.n	80047b2 <SEGGER_SYSVIEW_Start+0x106>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	617a      	str	r2, [r7, #20]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80047e0:	2218      	movs	r2, #24
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fceb 	bl	80041c0 <_SendPacket>
      RECORD_END();
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <SEGGER_SYSVIEW_Start+0x168>)
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <SEGGER_SYSVIEW_Start+0x168>)
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80047fe:	f000 f9eb 	bl	8004bd8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004802:	f000 f9b1 	bl	8004b68 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004806:	f000 fc1d 	bl	8005044 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800480a:	bf00      	nop
 800480c:	3730      	adds	r7, #48	; 0x30
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200041c4 	.word	0x200041c4
 8004818:	080054c8 	.word	0x080054c8
 800481c:	200041f4 	.word	0x200041f4

08004820 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004826:	f3ef 8311 	mrs	r3, BASEPRI
 800482a:	f04f 0120 	mov.w	r1, #32
 800482e:	f381 8811 	msr	BASEPRI, r1
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	480b      	ldr	r0, [pc, #44]	; (8004864 <SEGGER_SYSVIEW_Stop+0x44>)
 8004836:	f7ff fbd7 	bl	8003fe8 <_PreparePacket>
 800483a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <SEGGER_SYSVIEW_Stop+0x48>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004844:	220b      	movs	r2, #11
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	6838      	ldr	r0, [r7, #0]
 800484a:	f7ff fcb9 	bl	80041c0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <SEGGER_SYSVIEW_Stop+0x48>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f383 8811 	msr	BASEPRI, r3
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	200041f4 	.word	0x200041f4
 8004868:	200041c4 	.word	0x200041c4

0800486c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b08c      	sub	sp, #48	; 0x30
 8004870:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004872:	f3ef 8311 	mrs	r3, BASEPRI
 8004876:	f04f 0120 	mov.w	r1, #32
 800487a:	f381 8811 	msr	BASEPRI, r1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	4845      	ldr	r0, [pc, #276]	; (8004998 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004882:	f7ff fbb1 	bl	8003fe8 <_PreparePacket>
 8004886:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004890:	4b42      	ldr	r3, [pc, #264]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
 8004896:	e00b      	b.n	80048b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	b2da      	uxtb	r2, r3
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	09db      	lsrs	r3, r3, #7
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b7f      	cmp	r3, #127	; 0x7f
 80048b4:	d8f0      	bhi.n	8004898 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	4b34      	ldr	r3, [pc, #208]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	e00b      	b.n	80048ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	1c59      	adds	r1, r3, #1
 80048da:	6279      	str	r1, [r7, #36]	; 0x24
 80048dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	09db      	lsrs	r3, r3, #7
 80048e8:	623b      	str	r3, [r7, #32]
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	2b7f      	cmp	r3, #127	; 0x7f
 80048ee:	d8f0      	bhi.n	80048d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	627a      	str	r2, [r7, #36]	; 0x24
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	4b25      	ldr	r3, [pc, #148]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	e00b      	b.n	8004924 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	1c59      	adds	r1, r3, #1
 8004914:	61f9      	str	r1, [r7, #28]
 8004916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	09db      	lsrs	r3, r3, #7
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b7f      	cmp	r3, #127	; 0x7f
 8004928:	d8f0      	bhi.n	800490c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	61fa      	str	r2, [r7, #28]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	e00b      	b.n	800495c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	6179      	str	r1, [r7, #20]
 800494e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	09db      	lsrs	r3, r3, #7
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b7f      	cmp	r3, #127	; 0x7f
 8004960:	d8f0      	bhi.n	8004944 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	617a      	str	r2, [r7, #20]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004972:	2218      	movs	r2, #24
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	68b8      	ldr	r0, [r7, #8]
 8004978:	f7ff fc22 	bl	80041c0 <_SendPacket>
  RECORD_END();
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800498a:	4b04      	ldr	r3, [pc, #16]	; (800499c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	4798      	blx	r3
  }
}
 8004990:	bf00      	nop
 8004992:	3730      	adds	r7, #48	; 0x30
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	200041f4 	.word	0x200041f4
 800499c:	200041c4 	.word	0x200041c4

080049a0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b092      	sub	sp, #72	; 0x48
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80049a8:	f3ef 8311 	mrs	r3, BASEPRI
 80049ac:	f04f 0120 	mov.w	r1, #32
 80049b0:	f381 8811 	msr	BASEPRI, r1
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	486a      	ldr	r0, [pc, #424]	; (8004b60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80049b8:	f7ff fb16 	bl	8003fe8 <_PreparePacket>
 80049bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	647b      	str	r3, [r7, #68]	; 0x44
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b66      	ldr	r3, [pc, #408]	; (8004b64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	643b      	str	r3, [r7, #64]	; 0x40
 80049d2:	e00b      	b.n	80049ec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80049d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049da:	1c59      	adds	r1, r3, #1
 80049dc:	6479      	str	r1, [r7, #68]	; 0x44
 80049de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e8:	09db      	lsrs	r3, r3, #7
 80049ea:	643b      	str	r3, [r7, #64]	; 0x40
 80049ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ee:	2b7f      	cmp	r3, #127	; 0x7f
 80049f0:	d8f0      	bhi.n	80049d4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80049f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	647a      	str	r2, [r7, #68]	; 0x44
 80049f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a0c:	e00b      	b.n	8004a26 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a14:	1c59      	adds	r1, r3, #1
 8004a16:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	09db      	lsrs	r3, r3, #7
 8004a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	2b7f      	cmp	r3, #127	; 0x7f
 8004a2a:	d8f0      	bhi.n	8004a0e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	4619      	mov	r1, r3
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fa9f 	bl	8003f88 <_EncodeStr>
 8004a4a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004a4c:	2209      	movs	r2, #9
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	6938      	ldr	r0, [r7, #16]
 8004a52:	f7ff fbb5 	bl	80041c0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b40      	ldr	r3, [pc, #256]	; (8004b64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6a:	e00b      	b.n	8004a84 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	6379      	str	r1, [r7, #52]	; 0x34
 8004a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	09db      	lsrs	r3, r3, #7
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	2b7f      	cmp	r3, #127	; 0x7f
 8004a88:	d8f0      	bhi.n	8004a6c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa4:	e00b      	b.n	8004abe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	1c59      	adds	r1, r3, #1
 8004aae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	09db      	lsrs	r3, r3, #7
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ac2:	d8f0      	bhi.n	8004aa6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	e00b      	b.n	8004af8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	1c59      	adds	r1, r3, #1
 8004ae8:	6279      	str	r1, [r7, #36]	; 0x24
 8004aea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	09db      	lsrs	r3, r3, #7
 8004af6:	623b      	str	r3, [r7, #32]
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	2b7f      	cmp	r3, #127	; 0x7f
 8004afc:	d8f0      	bhi.n	8004ae0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	627a      	str	r2, [r7, #36]	; 0x24
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	e00b      	b.n	8004b30 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	61f9      	str	r1, [r7, #28]
 8004b22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	09db      	lsrs	r3, r3, #7
 8004b2e:	61bb      	str	r3, [r7, #24]
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b7f      	cmp	r3, #127	; 0x7f
 8004b34:	d8f0      	bhi.n	8004b18 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	61fa      	str	r2, [r7, #28]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004b46:	2215      	movs	r2, #21
 8004b48:	68f9      	ldr	r1, [r7, #12]
 8004b4a:	6938      	ldr	r0, [r7, #16]
 8004b4c:	f7ff fb38 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f383 8811 	msr	BASEPRI, r3
}
 8004b56:	bf00      	nop
 8004b58:	3748      	adds	r7, #72	; 0x48
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	200041f4 	.word	0x200041f4
 8004b64:	200041c4 	.word	0x200041c4

08004b68 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004b7e:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4798      	blx	r3
  }
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200041c4 	.word	0x200041c4

08004b90 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b98:	f3ef 8311 	mrs	r3, BASEPRI
 8004b9c:	f04f 0120 	mov.w	r1, #32
 8004ba0:	f381 8811 	msr	BASEPRI, r1
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	480b      	ldr	r0, [pc, #44]	; (8004bd4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004ba8:	f7ff fa1e 	bl	8003fe8 <_PreparePacket>
 8004bac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	6938      	ldr	r0, [r7, #16]
 8004bb4:	f7ff f9e8 	bl	8003f88 <_EncodeStr>
 8004bb8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004bba:	220e      	movs	r2, #14
 8004bbc:	68f9      	ldr	r1, [r7, #12]
 8004bbe:	6938      	ldr	r0, [r7, #16]
 8004bc0:	f7ff fafe 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f383 8811 	msr	BASEPRI, r3
}
 8004bca:	bf00      	nop
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200041f4 	.word	0x200041f4

08004bd8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01a      	beq.n	8004c1c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004bf0:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4798      	blx	r3
 8004bf8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004bfc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	000a      	movs	r2, r1
 8004c0c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c0e:	4613      	mov	r3, r2
 8004c10:	461a      	mov	r2, r3
 8004c12:	4621      	mov	r1, r4
 8004c14:	200d      	movs	r0, #13
 8004c16:	f7ff fcef 	bl	80045f8 <SEGGER_SYSVIEW_RecordU32x2>
 8004c1a:	e006      	b.n	8004c2a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4619      	mov	r1, r3
 8004c22:	200c      	movs	r0, #12
 8004c24:	f7ff fcac 	bl	8004580 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd90      	pop	{r4, r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200041c4 	.word	0x200041c4
 8004c38:	e0001004 	.word	0xe0001004

08004c3c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c42:	f3ef 8311 	mrs	r3, BASEPRI
 8004c46:	f04f 0120 	mov.w	r1, #32
 8004c4a:	f381 8811 	msr	BASEPRI, r1
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	4819      	ldr	r0, [pc, #100]	; (8004cb8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004c52:	f7ff f9c9 	bl	8003fe8 <_PreparePacket>
 8004c56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004c5c:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c64:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	e00b      	b.n	8004c88 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	6179      	str	r1, [r7, #20]
 8004c7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	09db      	lsrs	r3, r3, #7
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c8c:	d8f0      	bhi.n	8004c70 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	617a      	str	r2, [r7, #20]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	68b8      	ldr	r0, [r7, #8]
 8004ca4:	f7ff fa8c 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f383 8811 	msr	BASEPRI, r3
}
 8004cae:	bf00      	nop
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200041f4 	.word	0x200041f4
 8004cbc:	e000ed04 	.word	0xe000ed04

08004cc0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cca:	f04f 0120 	mov.w	r1, #32
 8004cce:	f381 8811 	msr	BASEPRI, r1
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	4807      	ldr	r0, [pc, #28]	; (8004cf4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004cd6:	f7ff f987 	bl	8003fe8 <_PreparePacket>
 8004cda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004cdc:	2203      	movs	r2, #3
 8004cde:	6839      	ldr	r1, [r7, #0]
 8004ce0:	6838      	ldr	r0, [r7, #0]
 8004ce2:	f7ff fa6d 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f383 8811 	msr	BASEPRI, r3
}
 8004cec:	bf00      	nop
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	200041f4 	.word	0x200041f4

08004cf8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8004d02:	f04f 0120 	mov.w	r1, #32
 8004d06:	f381 8811 	msr	BASEPRI, r1
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	4807      	ldr	r0, [pc, #28]	; (8004d2c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d0e:	f7ff f96b 	bl	8003fe8 <_PreparePacket>
 8004d12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d14:	2212      	movs	r2, #18
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	6838      	ldr	r0, [r7, #0]
 8004d1a:	f7ff fa51 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f383 8811 	msr	BASEPRI, r3
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	200041f4 	.word	0x200041f4

08004d30 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d36:	f3ef 8311 	mrs	r3, BASEPRI
 8004d3a:	f04f 0120 	mov.w	r1, #32
 8004d3e:	f381 8811 	msr	BASEPRI, r1
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	4807      	ldr	r0, [pc, #28]	; (8004d64 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004d46:	f7ff f94f 	bl	8003fe8 <_PreparePacket>
 8004d4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004d4c:	2211      	movs	r2, #17
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	6838      	ldr	r0, [r7, #0]
 8004d52:	f7ff fa35 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f383 8811 	msr	BASEPRI, r3
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	200041f4 	.word	0x200041f4

08004d68 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d70:	f3ef 8311 	mrs	r3, BASEPRI
 8004d74:	f04f 0120 	mov.w	r1, #32
 8004d78:	f381 8811 	msr	BASEPRI, r1
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	4819      	ldr	r0, [pc, #100]	; (8004de4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004d80:	f7ff f932 	bl	8003fe8 <_PreparePacket>
 8004d84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d8a:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e00b      	b.n	8004db6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	1c59      	adds	r1, r3, #1
 8004da6:	61f9      	str	r1, [r7, #28]
 8004da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	09db      	lsrs	r3, r3, #7
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dba:	d8f0      	bhi.n	8004d9e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	61fa      	str	r2, [r7, #28]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004dcc:	2208      	movs	r2, #8
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	6938      	ldr	r0, [r7, #16]
 8004dd2:	f7ff f9f5 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f383 8811 	msr	BASEPRI, r3
}
 8004ddc:	bf00      	nop
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	200041f4 	.word	0x200041f4
 8004de8:	200041c4 	.word	0x200041c4

08004dec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004df4:	f3ef 8311 	mrs	r3, BASEPRI
 8004df8:	f04f 0120 	mov.w	r1, #32
 8004dfc:	f381 8811 	msr	BASEPRI, r1
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	4819      	ldr	r0, [pc, #100]	; (8004e68 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e04:	f7ff f8f0 	bl	8003fe8 <_PreparePacket>
 8004e08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e0e:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e00b      	b.n	8004e3a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	1c59      	adds	r1, r3, #1
 8004e2a:	61f9      	str	r1, [r7, #28]
 8004e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	09db      	lsrs	r3, r3, #7
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e3e:	d8f0      	bhi.n	8004e22 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	61fa      	str	r2, [r7, #28]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004e50:	2204      	movs	r2, #4
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	6938      	ldr	r0, [r7, #16]
 8004e56:	f7ff f9b3 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f383 8811 	msr	BASEPRI, r3
}
 8004e60:	bf00      	nop
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	200041f4 	.word	0x200041f4
 8004e6c:	200041c4 	.word	0x200041c4

08004e70 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e78:	f3ef 8311 	mrs	r3, BASEPRI
 8004e7c:	f04f 0120 	mov.w	r1, #32
 8004e80:	f381 8811 	msr	BASEPRI, r1
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	4819      	ldr	r0, [pc, #100]	; (8004eec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004e88:	f7ff f8ae 	bl	8003fe8 <_PreparePacket>
 8004e8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e92:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	e00b      	b.n	8004ebe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	1c59      	adds	r1, r3, #1
 8004eae:	61f9      	str	r1, [r7, #28]
 8004eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	09db      	lsrs	r3, r3, #7
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec2:	d8f0      	bhi.n	8004ea6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	61fa      	str	r2, [r7, #28]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004ed4:	2206      	movs	r2, #6
 8004ed6:	68f9      	ldr	r1, [r7, #12]
 8004ed8:	6938      	ldr	r0, [r7, #16]
 8004eda:	f7ff f971 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f383 8811 	msr	BASEPRI, r3
}
 8004ee4:	bf00      	nop
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	200041f4 	.word	0x200041f4
 8004ef0:	200041c4 	.word	0x200041c4

08004ef4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08c      	sub	sp, #48	; 0x30
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004efe:	4b40      	ldr	r3, [pc, #256]	; (8005000 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d077      	beq.n	8004ff6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004f06:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f10:	e008      	b.n	8004f24 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	3301      	adds	r3, #1
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d3f2      	bcc.n	8004f12 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004f2c:	e000      	b.n	8004f30 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004f2e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d055      	beq.n	8004fe2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f36:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3a:	f04f 0120 	mov.w	r1, #32
 8004f3e:	f381 8811 	msr	BASEPRI, r1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	482f      	ldr	r0, [pc, #188]	; (8005004 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004f46:	f7ff f84f 	bl	8003fe8 <_PreparePacket>
 8004f4a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	e00b      	b.n	8004f72 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	1c59      	adds	r1, r3, #1
 8004f62:	6279      	str	r1, [r7, #36]	; 0x24
 8004f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	09db      	lsrs	r3, r3, #7
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	2b7f      	cmp	r3, #127	; 0x7f
 8004f76:	d8f0      	bhi.n	8004f5a <SEGGER_SYSVIEW_SendModule+0x66>
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f7e:	6a3a      	ldr	r2, [r7, #32]
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	e00b      	b.n	8004fac <SEGGER_SYSVIEW_SendModule+0xb8>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	1c59      	adds	r1, r3, #1
 8004f9c:	61f9      	str	r1, [r7, #28]
 8004f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	09db      	lsrs	r3, r3, #7
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb0:	d8f0      	bhi.n	8004f94 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	61fa      	str	r2, [r7, #28]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2280      	movs	r2, #128	; 0x80
 8004fc8:	4619      	mov	r1, r3
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7fe ffdc 	bl	8003f88 <_EncodeStr>
 8004fd0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004fd2:	2216      	movs	r2, #22
 8004fd4:	68f9      	ldr	r1, [r7, #12]
 8004fd6:	6938      	ldr	r0, [r7, #16]
 8004fd8:	f7ff f8f2 	bl	80041c0 <_SendPacket>
      RECORD_END();
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <SEGGER_SYSVIEW_SendModule+0x102>
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4798      	blx	r3
    }
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	3730      	adds	r7, #48	; 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200041ec 	.word	0x200041ec
 8005004:	200041f4 	.word	0x200041f4

08005008 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800500e:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00f      	beq.n	8005036 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f2      	bne.n	800501c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	200041ec 	.word	0x200041ec

08005044 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800504a:	f3ef 8311 	mrs	r3, BASEPRI
 800504e:	f04f 0120 	mov.w	r1, #32
 8005052:	f381 8811 	msr	BASEPRI, r1
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	4817      	ldr	r0, [pc, #92]	; (80050b8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800505a:	f7fe ffc5 	bl	8003fe8 <_PreparePacket>
 800505e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	4b14      	ldr	r3, [pc, #80]	; (80050bc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	e00b      	b.n	8005088 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1c59      	adds	r1, r3, #1
 8005078:	6179      	str	r1, [r7, #20]
 800507a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	09db      	lsrs	r3, r3, #7
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	2b7f      	cmp	r3, #127	; 0x7f
 800508c:	d8f0      	bhi.n	8005070 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	617a      	str	r2, [r7, #20]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800509e:	221b      	movs	r2, #27
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	68b8      	ldr	r0, [r7, #8]
 80050a4:	f7ff f88c 	bl	80041c0 <_SendPacket>
  RECORD_END();
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f383 8811 	msr	BASEPRI, r3
}
 80050ae:	bf00      	nop
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	200041f4 	.word	0x200041f4
 80050bc:	200041f0 	.word	0x200041f0

080050c0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050c8:	f3ef 8311 	mrs	r3, BASEPRI
 80050cc:	f04f 0120 	mov.w	r1, #32
 80050d0:	f381 8811 	msr	BASEPRI, r1
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	4827      	ldr	r0, [pc, #156]	; (8005174 <SEGGER_SYSVIEW_Warn+0xb4>)
 80050d8:	f7fe ff86 	bl	8003fe8 <_PreparePacket>
 80050dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050de:	2280      	movs	r2, #128	; 0x80
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	6938      	ldr	r0, [r7, #16]
 80050e4:	f7fe ff50 	bl	8003f88 <_EncodeStr>
 80050e8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
 80050ee:	2301      	movs	r3, #1
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	e00b      	b.n	800510c <SEGGER_SYSVIEW_Warn+0x4c>
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	1c59      	adds	r1, r3, #1
 80050fc:	6279      	str	r1, [r7, #36]	; 0x24
 80050fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	09db      	lsrs	r3, r3, #7
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2b7f      	cmp	r3, #127	; 0x7f
 8005110:	d8f0      	bhi.n	80050f4 <SEGGER_SYSVIEW_Warn+0x34>
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	627a      	str	r2, [r7, #36]	; 0x24
 8005118:	6a3a      	ldr	r2, [r7, #32]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e00b      	b.n	8005144 <SEGGER_SYSVIEW_Warn+0x84>
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	b2da      	uxtb	r2, r3
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	1c59      	adds	r1, r3, #1
 8005134:	61f9      	str	r1, [r7, #28]
 8005136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	09db      	lsrs	r3, r3, #7
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b7f      	cmp	r3, #127	; 0x7f
 8005148:	d8f0      	bhi.n	800512c <SEGGER_SYSVIEW_Warn+0x6c>
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	61fa      	str	r2, [r7, #28]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800515a:	221a      	movs	r2, #26
 800515c:	68f9      	ldr	r1, [r7, #12]
 800515e:	6938      	ldr	r0, [r7, #16]
 8005160:	f7ff f82e 	bl	80041c0 <_SendPacket>
  RECORD_END();
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f383 8811 	msr	BASEPRI, r3
}
 800516a:	bf00      	nop
 800516c:	3728      	adds	r7, #40	; 0x28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	200041f4 	.word	0x200041f4

08005178 <memcmp>:
 8005178:	b510      	push	{r4, lr}
 800517a:	3901      	subs	r1, #1
 800517c:	4402      	add	r2, r0
 800517e:	4290      	cmp	r0, r2
 8005180:	d101      	bne.n	8005186 <memcmp+0xe>
 8005182:	2000      	movs	r0, #0
 8005184:	e005      	b.n	8005192 <memcmp+0x1a>
 8005186:	7803      	ldrb	r3, [r0, #0]
 8005188:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800518c:	42a3      	cmp	r3, r4
 800518e:	d001      	beq.n	8005194 <memcmp+0x1c>
 8005190:	1b18      	subs	r0, r3, r4
 8005192:	bd10      	pop	{r4, pc}
 8005194:	3001      	adds	r0, #1
 8005196:	e7f2      	b.n	800517e <memcmp+0x6>

08005198 <memset>:
 8005198:	4402      	add	r2, r0
 800519a:	4603      	mov	r3, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <_reclaim_reent>:
 80051a8:	4b29      	ldr	r3, [pc, #164]	; (8005250 <_reclaim_reent+0xa8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4283      	cmp	r3, r0
 80051ae:	b570      	push	{r4, r5, r6, lr}
 80051b0:	4604      	mov	r4, r0
 80051b2:	d04b      	beq.n	800524c <_reclaim_reent+0xa4>
 80051b4:	69c3      	ldr	r3, [r0, #28]
 80051b6:	b143      	cbz	r3, 80051ca <_reclaim_reent+0x22>
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d144      	bne.n	8005248 <_reclaim_reent+0xa0>
 80051be:	69e3      	ldr	r3, [r4, #28]
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	b111      	cbz	r1, 80051ca <_reclaim_reent+0x22>
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 f879 	bl	80052bc <_free_r>
 80051ca:	6961      	ldr	r1, [r4, #20]
 80051cc:	b111      	cbz	r1, 80051d4 <_reclaim_reent+0x2c>
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 f874 	bl	80052bc <_free_r>
 80051d4:	69e1      	ldr	r1, [r4, #28]
 80051d6:	b111      	cbz	r1, 80051de <_reclaim_reent+0x36>
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 f86f 	bl	80052bc <_free_r>
 80051de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80051e0:	b111      	cbz	r1, 80051e8 <_reclaim_reent+0x40>
 80051e2:	4620      	mov	r0, r4
 80051e4:	f000 f86a 	bl	80052bc <_free_r>
 80051e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ea:	b111      	cbz	r1, 80051f2 <_reclaim_reent+0x4a>
 80051ec:	4620      	mov	r0, r4
 80051ee:	f000 f865 	bl	80052bc <_free_r>
 80051f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051f4:	b111      	cbz	r1, 80051fc <_reclaim_reent+0x54>
 80051f6:	4620      	mov	r0, r4
 80051f8:	f000 f860 	bl	80052bc <_free_r>
 80051fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80051fe:	b111      	cbz	r1, 8005206 <_reclaim_reent+0x5e>
 8005200:	4620      	mov	r0, r4
 8005202:	f000 f85b 	bl	80052bc <_free_r>
 8005206:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005208:	b111      	cbz	r1, 8005210 <_reclaim_reent+0x68>
 800520a:	4620      	mov	r0, r4
 800520c:	f000 f856 	bl	80052bc <_free_r>
 8005210:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005212:	b111      	cbz	r1, 800521a <_reclaim_reent+0x72>
 8005214:	4620      	mov	r0, r4
 8005216:	f000 f851 	bl	80052bc <_free_r>
 800521a:	6a23      	ldr	r3, [r4, #32]
 800521c:	b1b3      	cbz	r3, 800524c <_reclaim_reent+0xa4>
 800521e:	4620      	mov	r0, r4
 8005220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005224:	4718      	bx	r3
 8005226:	5949      	ldr	r1, [r1, r5]
 8005228:	b941      	cbnz	r1, 800523c <_reclaim_reent+0x94>
 800522a:	3504      	adds	r5, #4
 800522c:	69e3      	ldr	r3, [r4, #28]
 800522e:	2d80      	cmp	r5, #128	; 0x80
 8005230:	68d9      	ldr	r1, [r3, #12]
 8005232:	d1f8      	bne.n	8005226 <_reclaim_reent+0x7e>
 8005234:	4620      	mov	r0, r4
 8005236:	f000 f841 	bl	80052bc <_free_r>
 800523a:	e7c0      	b.n	80051be <_reclaim_reent+0x16>
 800523c:	680e      	ldr	r6, [r1, #0]
 800523e:	4620      	mov	r0, r4
 8005240:	f000 f83c 	bl	80052bc <_free_r>
 8005244:	4631      	mov	r1, r6
 8005246:	e7ef      	b.n	8005228 <_reclaim_reent+0x80>
 8005248:	2500      	movs	r5, #0
 800524a:	e7ef      	b.n	800522c <_reclaim_reent+0x84>
 800524c:	bd70      	pop	{r4, r5, r6, pc}
 800524e:	bf00      	nop
 8005250:	20000060 	.word	0x20000060

08005254 <__libc_init_array>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4d0d      	ldr	r5, [pc, #52]	; (800528c <__libc_init_array+0x38>)
 8005258:	4c0d      	ldr	r4, [pc, #52]	; (8005290 <__libc_init_array+0x3c>)
 800525a:	1b64      	subs	r4, r4, r5
 800525c:	10a4      	asrs	r4, r4, #2
 800525e:	2600      	movs	r6, #0
 8005260:	42a6      	cmp	r6, r4
 8005262:	d109      	bne.n	8005278 <__libc_init_array+0x24>
 8005264:	4d0b      	ldr	r5, [pc, #44]	; (8005294 <__libc_init_array+0x40>)
 8005266:	4c0c      	ldr	r4, [pc, #48]	; (8005298 <__libc_init_array+0x44>)
 8005268:	f000 f880 	bl	800536c <_init>
 800526c:	1b64      	subs	r4, r4, r5
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	2600      	movs	r6, #0
 8005272:	42a6      	cmp	r6, r4
 8005274:	d105      	bne.n	8005282 <__libc_init_array+0x2e>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	f855 3b04 	ldr.w	r3, [r5], #4
 800527c:	4798      	blx	r3
 800527e:	3601      	adds	r6, #1
 8005280:	e7ee      	b.n	8005260 <__libc_init_array+0xc>
 8005282:	f855 3b04 	ldr.w	r3, [r5], #4
 8005286:	4798      	blx	r3
 8005288:	3601      	adds	r6, #1
 800528a:	e7f2      	b.n	8005272 <__libc_init_array+0x1e>
 800528c:	080054d4 	.word	0x080054d4
 8005290:	080054d4 	.word	0x080054d4
 8005294:	080054d4 	.word	0x080054d4
 8005298:	080054d8 	.word	0x080054d8

0800529c <__retarget_lock_acquire_recursive>:
 800529c:	4770      	bx	lr

0800529e <__retarget_lock_release_recursive>:
 800529e:	4770      	bx	lr

080052a0 <memcpy>:
 80052a0:	440a      	add	r2, r1
 80052a2:	4291      	cmp	r1, r2
 80052a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052a8:	d100      	bne.n	80052ac <memcpy+0xc>
 80052aa:	4770      	bx	lr
 80052ac:	b510      	push	{r4, lr}
 80052ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052b6:	4291      	cmp	r1, r2
 80052b8:	d1f9      	bne.n	80052ae <memcpy+0xe>
 80052ba:	bd10      	pop	{r4, pc}

080052bc <_free_r>:
 80052bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052be:	2900      	cmp	r1, #0
 80052c0:	d044      	beq.n	800534c <_free_r+0x90>
 80052c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c6:	9001      	str	r0, [sp, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f1a1 0404 	sub.w	r4, r1, #4
 80052ce:	bfb8      	it	lt
 80052d0:	18e4      	addlt	r4, r4, r3
 80052d2:	f000 f83f 	bl	8005354 <__malloc_lock>
 80052d6:	4a1e      	ldr	r2, [pc, #120]	; (8005350 <_free_r+0x94>)
 80052d8:	9801      	ldr	r0, [sp, #4]
 80052da:	6813      	ldr	r3, [r2, #0]
 80052dc:	b933      	cbnz	r3, 80052ec <_free_r+0x30>
 80052de:	6063      	str	r3, [r4, #4]
 80052e0:	6014      	str	r4, [r2, #0]
 80052e2:	b003      	add	sp, #12
 80052e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052e8:	f000 b83a 	b.w	8005360 <__malloc_unlock>
 80052ec:	42a3      	cmp	r3, r4
 80052ee:	d908      	bls.n	8005302 <_free_r+0x46>
 80052f0:	6825      	ldr	r5, [r4, #0]
 80052f2:	1961      	adds	r1, r4, r5
 80052f4:	428b      	cmp	r3, r1
 80052f6:	bf01      	itttt	eq
 80052f8:	6819      	ldreq	r1, [r3, #0]
 80052fa:	685b      	ldreq	r3, [r3, #4]
 80052fc:	1949      	addeq	r1, r1, r5
 80052fe:	6021      	streq	r1, [r4, #0]
 8005300:	e7ed      	b.n	80052de <_free_r+0x22>
 8005302:	461a      	mov	r2, r3
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	b10b      	cbz	r3, 800530c <_free_r+0x50>
 8005308:	42a3      	cmp	r3, r4
 800530a:	d9fa      	bls.n	8005302 <_free_r+0x46>
 800530c:	6811      	ldr	r1, [r2, #0]
 800530e:	1855      	adds	r5, r2, r1
 8005310:	42a5      	cmp	r5, r4
 8005312:	d10b      	bne.n	800532c <_free_r+0x70>
 8005314:	6824      	ldr	r4, [r4, #0]
 8005316:	4421      	add	r1, r4
 8005318:	1854      	adds	r4, r2, r1
 800531a:	42a3      	cmp	r3, r4
 800531c:	6011      	str	r1, [r2, #0]
 800531e:	d1e0      	bne.n	80052e2 <_free_r+0x26>
 8005320:	681c      	ldr	r4, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	6053      	str	r3, [r2, #4]
 8005326:	440c      	add	r4, r1
 8005328:	6014      	str	r4, [r2, #0]
 800532a:	e7da      	b.n	80052e2 <_free_r+0x26>
 800532c:	d902      	bls.n	8005334 <_free_r+0x78>
 800532e:	230c      	movs	r3, #12
 8005330:	6003      	str	r3, [r0, #0]
 8005332:	e7d6      	b.n	80052e2 <_free_r+0x26>
 8005334:	6825      	ldr	r5, [r4, #0]
 8005336:	1961      	adds	r1, r4, r5
 8005338:	428b      	cmp	r3, r1
 800533a:	bf04      	itt	eq
 800533c:	6819      	ldreq	r1, [r3, #0]
 800533e:	685b      	ldreq	r3, [r3, #4]
 8005340:	6063      	str	r3, [r4, #4]
 8005342:	bf04      	itt	eq
 8005344:	1949      	addeq	r1, r1, r5
 8005346:	6021      	streq	r1, [r4, #0]
 8005348:	6054      	str	r4, [r2, #4]
 800534a:	e7ca      	b.n	80052e2 <_free_r+0x26>
 800534c:	b003      	add	sp, #12
 800534e:	bd30      	pop	{r4, r5, pc}
 8005350:	20004414 	.word	0x20004414

08005354 <__malloc_lock>:
 8005354:	4801      	ldr	r0, [pc, #4]	; (800535c <__malloc_lock+0x8>)
 8005356:	f7ff bfa1 	b.w	800529c <__retarget_lock_acquire_recursive>
 800535a:	bf00      	nop
 800535c:	20004410 	.word	0x20004410

08005360 <__malloc_unlock>:
 8005360:	4801      	ldr	r0, [pc, #4]	; (8005368 <__malloc_unlock+0x8>)
 8005362:	f7ff bf9c 	b.w	800529e <__retarget_lock_release_recursive>
 8005366:	bf00      	nop
 8005368:	20004410 	.word	0x20004410

0800536c <_init>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	bf00      	nop
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr

08005378 <_fini>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	bf00      	nop
 800537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537e:	bc08      	pop	{r3}
 8005380:	469e      	mov	lr, r3
 8005382:	4770      	bx	lr
