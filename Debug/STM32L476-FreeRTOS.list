
STM32L476-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800a670  0800a670  0001a670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a938  0800a938  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a938  0800a938  0001a938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a940  0800a940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a944  0800a944  0001a944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b88  20000070  0800a9b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bf8  0800a9b8  00024bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ebd  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004444  00000000  00000000  00040fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  000453e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014be  00000000  00000000  00046ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bc7f  00000000  00000000  0004835e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ced  00000000  00000000  00073fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108612  00000000  00000000  00094cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007298  00000000  00000000  0019d2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001a4574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a658 	.word	0x0800a658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a658 	.word	0x0800a658

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200030e4 	.word	0x200030e4

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b970 	b.w	8000580 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	9e08      	ldr	r6, [sp, #32]
 80002be:	460d      	mov	r5, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	460f      	mov	r7, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4694      	mov	ip, r2
 80002cc:	d965      	bls.n	800039a <__udivmoddi4+0xe2>
 80002ce:	fab2 f382 	clz	r3, r2
 80002d2:	b143      	cbz	r3, 80002e6 <__udivmoddi4+0x2e>
 80002d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	fa20 f202 	lsr.w	r2, r0, r2
 80002e2:	4317      	orrs	r7, r2
 80002e4:	409c      	lsls	r4, r3
 80002e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ea:	fa1f f58c 	uxth.w	r5, ip
 80002ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	4290      	cmp	r0, r2
 8000302:	d90a      	bls.n	800031a <__udivmoddi4+0x62>
 8000304:	eb1c 0202 	adds.w	r2, ip, r2
 8000308:	f101 37ff 	add.w	r7, r1, #4294967295
 800030c:	f080 811c 	bcs.w	8000548 <__udivmoddi4+0x290>
 8000310:	4290      	cmp	r0, r2
 8000312:	f240 8119 	bls.w	8000548 <__udivmoddi4+0x290>
 8000316:	3902      	subs	r1, #2
 8000318:	4462      	add	r2, ip
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032a:	fb00 f505 	mul.w	r5, r0, r5
 800032e:	42a5      	cmp	r5, r4
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x90>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	f080 8107 	bcs.w	800054c <__udivmoddi4+0x294>
 800033e:	42a5      	cmp	r5, r4
 8000340:	f240 8104 	bls.w	800054c <__udivmoddi4+0x294>
 8000344:	4464      	add	r4, ip
 8000346:	3802      	subs	r0, #2
 8000348:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	2100      	movs	r1, #0
 8000350:	b11e      	cbz	r6, 800035a <__udivmoddi4+0xa2>
 8000352:	40dc      	lsrs	r4, r3
 8000354:	2300      	movs	r3, #0
 8000356:	e9c6 4300 	strd	r4, r3, [r6]
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0xbc>
 8000362:	2e00      	cmp	r6, #0
 8000364:	f000 80ed 	beq.w	8000542 <__udivmoddi4+0x28a>
 8000368:	2100      	movs	r1, #0
 800036a:	e9c6 0500 	strd	r0, r5, [r6]
 800036e:	4608      	mov	r0, r1
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d149      	bne.n	8000410 <__udivmoddi4+0x158>
 800037c:	42ab      	cmp	r3, r5
 800037e:	d302      	bcc.n	8000386 <__udivmoddi4+0xce>
 8000380:	4282      	cmp	r2, r0
 8000382:	f200 80f8 	bhi.w	8000576 <__udivmoddi4+0x2be>
 8000386:	1a84      	subs	r4, r0, r2
 8000388:	eb65 0203 	sbc.w	r2, r5, r3
 800038c:	2001      	movs	r0, #1
 800038e:	4617      	mov	r7, r2
 8000390:	2e00      	cmp	r6, #0
 8000392:	d0e2      	beq.n	800035a <__udivmoddi4+0xa2>
 8000394:	e9c6 4700 	strd	r4, r7, [r6]
 8000398:	e7df      	b.n	800035a <__udivmoddi4+0xa2>
 800039a:	b902      	cbnz	r2, 800039e <__udivmoddi4+0xe6>
 800039c:	deff      	udf	#255	; 0xff
 800039e:	fab2 f382 	clz	r3, r2
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	f040 8090 	bne.w	80004c8 <__udivmoddi4+0x210>
 80003a8:	1a8a      	subs	r2, r1, r2
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2101      	movs	r1, #1
 80003b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b8:	fb07 2015 	mls	r0, r7, r5, r2
 80003bc:	0c22      	lsrs	r2, r4, #16
 80003be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c2:	fb0e f005 	mul.w	r0, lr, r5
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x124>
 80003ca:	eb1c 0202 	adds.w	r2, ip, r2
 80003ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x122>
 80003d4:	4290      	cmp	r0, r2
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2b8>
 80003da:	4645      	mov	r5, r8
 80003dc:	1a12      	subs	r2, r2, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e4:	fb07 2210 	mls	r2, r7, r0, r2
 80003e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x14e>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x14c>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2c2>
 8000404:	4610      	mov	r0, r2
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x98>
 8000410:	f1c1 0720 	rsb	r7, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa05 f401 	lsl.w	r4, r5, r1
 8000422:	fa20 f307 	lsr.w	r3, r0, r7
 8000426:	40fd      	lsrs	r5, r7
 8000428:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042c:	4323      	orrs	r3, r4
 800042e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	fb09 5518 	mls	r5, r9, r8, r5
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000440:	fb08 f50e 	mul.w	r5, r8, lr
 8000444:	42a5      	cmp	r5, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	fa00 f001 	lsl.w	r0, r0, r1
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b0>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2b4>
 800045c:	42a5      	cmp	r5, r4
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2b4>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4464      	add	r4, ip
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	b29d      	uxth	r5, r3
 800046c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000470:	fb09 4413 	mls	r4, r9, r3, r4
 8000474:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000478:	fb03 fe0e 	mul.w	lr, r3, lr
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1da>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f103 35ff 	add.w	r5, r3, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2ac>
 800048a:	45a6      	cmp	lr, r4
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800048e:	3b02      	subs	r3, #2
 8000490:	4464      	add	r4, ip
 8000492:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000496:	fba3 9502 	umull	r9, r5, r3, r2
 800049a:	eba4 040e 	sub.w	r4, r4, lr
 800049e:	42ac      	cmp	r4, r5
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46ae      	mov	lr, r5
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x29c>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x298>
 80004a8:	b156      	cbz	r6, 80004c0 <__udivmoddi4+0x208>
 80004aa:	ebb0 0208 	subs.w	r2, r0, r8
 80004ae:	eb64 040e 	sbc.w	r4, r4, lr
 80004b2:	fa04 f707 	lsl.w	r7, r4, r7
 80004b6:	40ca      	lsrs	r2, r1
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	4317      	orrs	r7, r2
 80004bc:	e9c6 7400 	strd	r7, r4, [r6]
 80004c0:	4618      	mov	r0, r3
 80004c2:	2100      	movs	r1, #0
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	f1c3 0120 	rsb	r1, r3, #32
 80004cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d0:	fa20 f201 	lsr.w	r2, r0, r1
 80004d4:	fa25 f101 	lsr.w	r1, r5, r1
 80004d8:	409d      	lsls	r5, r3
 80004da:	432a      	orrs	r2, r5
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ec:	0c11      	lsrs	r1, r2, #16
 80004ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f2:	fb00 f50e 	mul.w	r5, r0, lr
 80004f6:	428d      	cmp	r5, r1
 80004f8:	fa04 f403 	lsl.w	r4, r4, r3
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x258>
 80004fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b0>
 8000508:	428d      	cmp	r5, r1
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b0>
 800050c:	3802      	subs	r0, #2
 800050e:	4461      	add	r1, ip
 8000510:	1b49      	subs	r1, r1, r5
 8000512:	b292      	uxth	r2, r2
 8000514:	fbb1 f5f7 	udiv	r5, r1, r7
 8000518:	fb07 1115 	mls	r1, r7, r5, r1
 800051c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000520:	fb05 f10e 	mul.w	r1, r5, lr
 8000524:	4291      	cmp	r1, r2
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x282>
 8000528:	eb1c 0202 	adds.w	r2, ip, r2
 800052c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2a8>
 8000532:	4291      	cmp	r1, r2
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2a8>
 8000536:	3d02      	subs	r5, #2
 8000538:	4462      	add	r2, ip
 800053a:	1a52      	subs	r2, r2, r1
 800053c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0xfc>
 8000542:	4631      	mov	r1, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e708      	b.n	800035a <__udivmoddi4+0xa2>
 8000548:	4639      	mov	r1, r7
 800054a:	e6e6      	b.n	800031a <__udivmoddi4+0x62>
 800054c:	4610      	mov	r0, r2
 800054e:	e6fb      	b.n	8000348 <__udivmoddi4+0x90>
 8000550:	4548      	cmp	r0, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f0>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb65 0e0c 	sbc.w	lr, r5, ip
 800055c:	3b01      	subs	r3, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f0>
 8000560:	4645      	mov	r5, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x282>
 8000564:	462b      	mov	r3, r5
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1da>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x258>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b0>
 8000570:	3d02      	subs	r5, #2
 8000572:	4462      	add	r2, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x124>
 8000576:	4608      	mov	r0, r1
 8000578:	e70a      	b.n	8000390 <__udivmoddi4+0xd8>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x14e>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	2000008c 	.word	0x2000008c
 80005b4:	2000012c 	.word	0x2000012c

080005b8 <ledEffectTurnAllOff>:


#include "main.h"

void ledEffectTurnAllOff(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <ledEffectTurnAllOff+0x28>)
 80005c2:	f001 fa41 	bl	8001a48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2102      	movs	r1, #2
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <ledEffectTurnAllOff+0x28>)
 80005cc:	f001 fa3c 	bl	8001a48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <ledEffectTurnAllOff+0x2c>)
 80005d6:	f001 fa37 	bl	8001a48 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	48000800 	.word	0x48000800
 80005e4:	48000400 	.word	0x48000400

080005e8 <ledEffectTurnAllOn>:

void ledEffectTurnAllOn(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <ledEffectTurnAllOn+0x28>)
 80005f2:	f001 fa29 	bl	8001a48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2102      	movs	r1, #2
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <ledEffectTurnAllOn+0x28>)
 80005fc:	f001 fa24 	bl	8001a48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2101      	movs	r1, #1
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <ledEffectTurnAllOn+0x2c>)
 8000606:	f001 fa1f 	bl	8001a48 <HAL_GPIO_WritePin>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	48000800 	.word	0x48000800
 8000614:	48000400 	.word	0x48000400

08000618 <ledEffect1>:

void ledEffect1(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	 * 0 0 0
	 * 0 1 1 <-
	 * 1 0 1
	 * 1 1 0 <-
	 * */
	(flag ^= 1) ? ledEffectTurnAllOff() : ledEffectTurnAllOn();
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <ledEffect1+0x28>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	f083 0301 	eor.w	r3, r3, #1
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <ledEffect1+0x28>)
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <ledEffect1+0x28>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <ledEffect1+0x20>
 8000632:	f7ff ffc1 	bl	80005b8 <ledEffectTurnAllOff>
}
 8000636:	e001      	b.n	800063c <ledEffect1+0x24>
	(flag ^= 1) ? ledEffectTurnAllOff() : ledEffectTurnAllOn();
 8000638:	f7ff ffd6 	bl	80005e8 <ledEffectTurnAllOn>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000000 	.word	0x20000000

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b08f      	sub	sp, #60	; 0x3c
 8000648:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 feb1 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f92f 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f9d9 	bl	8000a08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000656:	f000 f9a7 	bl	80009a8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800065a:	f000 f97d 	bl	8000958 <MX_RTC_Init>
  /* Enable the Cortex-M4 CYCCNT counter register.
   * Address: 0xE0001000
   * Access: Read/Write
   * Reset State: 0x40000000
  */
  DWT_CTRL |= (1 << 0);
 800065e:	4b7d      	ldr	r3, [pc, #500]	; (8000854 <main+0x210>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a7c      	ldr	r2, [pc, #496]	; (8000854 <main+0x210>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800066a:	f008 f961 	bl	8008930 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800066e:	f009 f983 	bl	8009978 <SEGGER_SYSVIEW_Start>

  /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
  /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */


  uint32_t stackSize = (1024 * 1);
 8000672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t stack = stackSize / sizeof(StackType_t);
 8000678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	627b      	str	r3, [r7, #36]	; 0x24


  xStatus = xTaskCreate(menuTask, "MENU", (uint16_t)stack, (void *)&xPrintQueue, 2, &xMenuTask);
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b75      	ldr	r3, [pc, #468]	; (8000858 <main+0x214>)
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2302      	movs	r3, #2
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	4b74      	ldr	r3, [pc, #464]	; (800085c <main+0x218>)
 800068c:	4974      	ldr	r1, [pc, #464]	; (8000860 <main+0x21c>)
 800068e:	4875      	ldr	r0, [pc, #468]	; (8000864 <main+0x220>)
 8000690:	f005 fc84 	bl	8005f9c <xTaskCreate>
 8000694:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d00a      	beq.n	80006b2 <main+0x6e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800069c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a0:	f383 8811 	msr	BASEPRI, r3
 80006a4:	f3bf 8f6f 	isb	sy
 80006a8:	f3bf 8f4f 	dsb	sy
 80006ac:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006ae:	bf00      	nop
 80006b0:	e7fe      	b.n	80006b0 <main+0x6c>

  xStatus = xTaskCreate(cmdTask, "CMD", (uint16_t)stack, (void *)&xDataQueue, 2, &xCmdTask);
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b6c      	ldr	r3, [pc, #432]	; (8000868 <main+0x224>)
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2302      	movs	r3, #2
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	4b6b      	ldr	r3, [pc, #428]	; (800086c <main+0x228>)
 80006c0:	496b      	ldr	r1, [pc, #428]	; (8000870 <main+0x22c>)
 80006c2:	486c      	ldr	r0, [pc, #432]	; (8000874 <main+0x230>)
 80006c4:	f005 fc6a 	bl	8005f9c <xTaskCreate>
 80006c8:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d00a      	beq.n	80006e6 <main+0xa2>
        __asm volatile
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	61bb      	str	r3, [r7, #24]
    }
 80006e2:	bf00      	nop
 80006e4:	e7fe      	b.n	80006e4 <main+0xa0>

  xStatus = xTaskCreate(printTask, "PRINT", (uint16_t)stack, (void *)&xPrintQueue, 2, &xPrintTask);
 80006e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b63      	ldr	r3, [pc, #396]	; (8000878 <main+0x234>)
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2302      	movs	r3, #2
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b5a      	ldr	r3, [pc, #360]	; (800085c <main+0x218>)
 80006f4:	4961      	ldr	r1, [pc, #388]	; (800087c <main+0x238>)
 80006f6:	4862      	ldr	r0, [pc, #392]	; (8000880 <main+0x23c>)
 80006f8:	f005 fc50 	bl	8005f9c <xTaskCreate>
 80006fc:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d00a      	beq.n	800071a <main+0xd6>
        __asm volatile
 8000704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000708:	f383 8811 	msr	BASEPRI, r3
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	f3bf 8f4f 	dsb	sy
 8000714:	617b      	str	r3, [r7, #20]
    }
 8000716:	bf00      	nop
 8000718:	e7fe      	b.n	8000718 <main+0xd4>

  xStatus = xTaskCreate(rtcTask, "RTC", (uint16_t)stack, (void *)&xPrintQueue, 2, &xRtcTask);
 800071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b59      	ldr	r3, [pc, #356]	; (8000884 <main+0x240>)
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	2302      	movs	r3, #2
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b4d      	ldr	r3, [pc, #308]	; (800085c <main+0x218>)
 8000728:	4957      	ldr	r1, [pc, #348]	; (8000888 <main+0x244>)
 800072a:	4858      	ldr	r0, [pc, #352]	; (800088c <main+0x248>)
 800072c:	f005 fc36 	bl	8005f9c <xTaskCreate>
 8000730:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d00a      	beq.n	800074e <main+0x10a>
        __asm volatile
 8000738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800073c:	f383 8811 	msr	BASEPRI, r3
 8000740:	f3bf 8f6f 	isb	sy
 8000744:	f3bf 8f4f 	dsb	sy
 8000748:	613b      	str	r3, [r7, #16]
    }
 800074a:	bf00      	nop
 800074c:	e7fe      	b.n	800074c <main+0x108>

  xStatus = xTaskCreate(ledTask, "LED", (uint16_t)stack, (void *)&xPrintQueue, 2, &xLedTask);
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b4f      	ldr	r3, [pc, #316]	; (8000890 <main+0x24c>)
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	2302      	movs	r3, #2
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	4b40      	ldr	r3, [pc, #256]	; (800085c <main+0x218>)
 800075c:	494d      	ldr	r1, [pc, #308]	; (8000894 <main+0x250>)
 800075e:	484e      	ldr	r0, [pc, #312]	; (8000898 <main+0x254>)
 8000760:	f005 fc1c 	bl	8005f9c <xTaskCreate>
 8000764:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d00a      	beq.n	8000782 <main+0x13e>
        __asm volatile
 800076c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000770:	f383 8811 	msr	BASEPRI, r3
 8000774:	f3bf 8f6f 	isb	sy
 8000778:	f3bf 8f4f 	dsb	sy
 800077c:	60fb      	str	r3, [r7, #12]
    }
 800077e:	bf00      	nop
 8000780:	e7fe      	b.n	8000780 <main+0x13c>

  xDataQueue = xQueueCreate(16, sizeof(char));
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	2010      	movs	r0, #16
 8000788:	f004 fd9e 	bl	80052c8 <xQueueGenericCreate>
 800078c:	4603      	mov	r3, r0
 800078e:	4a37      	ldr	r2, [pc, #220]	; (800086c <main+0x228>)
 8000790:	6013      	str	r3, [r2, #0]
  configASSERT(xDataQueue != NULL);
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <main+0x228>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10a      	bne.n	80007b0 <main+0x16c>
        __asm volatile
 800079a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800079e:	f383 8811 	msr	BASEPRI, r3
 80007a2:	f3bf 8f6f 	isb	sy
 80007a6:	f3bf 8f4f 	dsb	sy
 80007aa:	60bb      	str	r3, [r7, #8]
    }
 80007ac:	bf00      	nop
 80007ae:	e7fe      	b.n	80007ae <main+0x16a>

  // String Queue (item size equal to a pointer pointing to a string)
  xPrintQueue = xQueueCreate(16, sizeof(size_t));
 80007b0:	2200      	movs	r2, #0
 80007b2:	2104      	movs	r1, #4
 80007b4:	2010      	movs	r0, #16
 80007b6:	f004 fd87 	bl	80052c8 <xQueueGenericCreate>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a27      	ldr	r2, [pc, #156]	; (800085c <main+0x218>)
 80007be:	6013      	str	r3, [r2, #0]
  configASSERT(xPrintQueue != NULL);
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <main+0x218>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10a      	bne.n	80007de <main+0x19a>
        __asm volatile
 80007c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	607b      	str	r3, [r7, #4]
    }
 80007da:	bf00      	nop
 80007dc:	e7fe      	b.n	80007dc <main+0x198>

  // Software timers for LED effects
  for(uint8_t idx = 0; idx < NUM_TIMERS; idx++)
 80007de:	2300      	movs	r3, #0
 80007e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007e4:	e029      	b.n	800083a <main+0x1f6>
  {
	  xLedTimerList[idx] = xTimerCreate("LED_TIMER", pdMS_TO_TICKS(500), pdTRUE, (void*)(idx+1), vLedEffectCB);
 80007e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ea:	3301      	adds	r3, #1
 80007ec:	461a      	mov	r2, r3
 80007ee:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80007f2:	4b2a      	ldr	r3, [pc, #168]	; (800089c <main+0x258>)
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	4613      	mov	r3, r2
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007fe:	4828      	ldr	r0, [pc, #160]	; (80008a0 <main+0x25c>)
 8000800:	f007 f8be 	bl	8007980 <xTimerCreate>
 8000804:	4603      	mov	r3, r0
 8000806:	4a27      	ldr	r2, [pc, #156]	; (80008a4 <main+0x260>)
 8000808:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  configASSERT( xLedTimerList[idx] );
 800080c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000810:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <main+0x260>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d10a      	bne.n	8000830 <main+0x1ec>
        __asm volatile
 800081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800081e:	f383 8811 	msr	BASEPRI, r3
 8000822:	f3bf 8f6f 	isb	sy
 8000826:	f3bf 8f4f 	dsb	sy
 800082a:	603b      	str	r3, [r7, #0]
    }
 800082c:	bf00      	nop
 800082e:	e7fe      	b.n	800082e <main+0x1ea>
  for(uint8_t idx = 0; idx < NUM_TIMERS; idx++)
 8000830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000834:	3301      	adds	r3, #1
 8000836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800083a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800083e:	2b03      	cmp	r3, #3
 8000840:	d9d1      	bls.n	80007e6 <main+0x1a2>
  }

  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	4918      	ldr	r1, [pc, #96]	; (80008a8 <main+0x264>)
 8000846:	4819      	ldr	r0, [pc, #100]	; (80008ac <main+0x268>)
 8000848:	f003 f8ac 	bl	80039a4 <HAL_UART_Receive_IT>

  // start the freeRTOS scheduler
   vTaskStartScheduler();
 800084c:	f005 fd3c 	bl	80062c8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000850:	e7fe      	b.n	8000850 <main+0x20c>
 8000852:	bf00      	nop
 8000854:	e0001000 	.word	0xe0001000
 8000858:	200003d8 	.word	0x200003d8
 800085c:	200003f0 	.word	0x200003f0
 8000860:	0800a670 	.word	0x0800a670
 8000864:	08001011 	.word	0x08001011
 8000868:	200003dc 	.word	0x200003dc
 800086c:	200003ec 	.word	0x200003ec
 8000870:	0800a678 	.word	0x0800a678
 8000874:	080010f9 	.word	0x080010f9
 8000878:	200003e0 	.word	0x200003e0
 800087c:	0800a67c 	.word	0x0800a67c
 8000880:	080011f9 	.word	0x080011f9
 8000884:	200003e8 	.word	0x200003e8
 8000888:	0800a684 	.word	0x0800a684
 800088c:	08001309 	.word	0x08001309
 8000890:	200003e4 	.word	0x200003e4
 8000894:	0800a688 	.word	0x0800a688
 8000898:	08001205 	.word	0x08001205
 800089c:	08000be5 	.word	0x08000be5
 80008a0:	0800a68c 	.word	0x0800a68c
 80008a4:	200003f4 	.word	0x200003f4
 80008a8:	20000404 	.word	0x20000404
 80008ac:	20000350 	.word	0x20000350

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b096      	sub	sp, #88	; 0x58
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2244      	movs	r2, #68	; 0x44
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f009 fde0 	bl	800a484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d6:	f001 f901 	bl	8001adc <HAL_PWREx_ControlVoltageScaling>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008e0:	f000 fa14 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008e4:	230a      	movs	r3, #10
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ee:	2310      	movs	r3, #16
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008f2:	2301      	movs	r3, #1
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fa:	2302      	movs	r3, #2
 80008fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000902:	230a      	movs	r3, #10
 8000904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000906:	2307      	movs	r3, #7
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800090a:	2302      	movs	r3, #2
 800090c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4618      	mov	r0, r3
 8000918:	f001 f936 	bl	8001b88 <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000922:	f000 f9f3 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	230f      	movs	r3, #15
 8000928:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2303      	movs	r3, #3
 800092c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	2104      	movs	r1, #4
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fcfe 	bl	8002340 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800094a:	f000 f9df 	bl	8000d0c <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3758      	adds	r7, #88	; 0x58
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_RTC_Init+0x48>)
 800095e:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <MX_RTC_Init+0x4c>)
 8000960:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_RTC_Init+0x48>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_RTC_Init+0x48>)
 800096a:	227f      	movs	r2, #127	; 0x7f
 800096c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_RTC_Init+0x48>)
 8000970:	22ff      	movs	r2, #255	; 0xff
 8000972:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_RTC_Init+0x48>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_RTC_Init+0x48>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_RTC_Init+0x48>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_RTC_Init+0x48>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_RTC_Init+0x48>)
 800098e:	f002 fbe9 	bl	8003164 <HAL_RTC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000998:	f000 f9b8 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000032c 	.word	0x2000032c
 80009a4:	40002800 	.word	0x40002800

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_USART2_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ec:	f002 ff8c 	bl	8003908 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f989 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000350 	.word	0x20000350
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b4a      	ldr	r3, [pc, #296]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a49      	ldr	r2, [pc, #292]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b44      	ldr	r3, [pc, #272]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a43      	ldr	r2, [pc, #268]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a3d      	ldr	r2, [pc, #244]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a37      	ldr	r2, [pc, #220]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <MX_GPIO_Init+0x140>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2103      	movs	r1, #3
 8000a82:	4832      	ldr	r0, [pc, #200]	; (8000b4c <MX_GPIO_Init+0x144>)
 8000a84:	f000 ffe0 	bl	8001a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f000 ffda 	bl	8001a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2101      	movs	r1, #1
 8000a98:	482d      	ldr	r0, [pc, #180]	; (8000b50 <MX_GPIO_Init+0x148>)
 8000a9a:	f000 ffd5 	bl	8001a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4825      	ldr	r0, [pc, #148]	; (8000b4c <MX_GPIO_Init+0x144>)
 8000ab6:	f000 fe1d 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aba:	2303      	movs	r3, #3
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481e      	ldr	r0, [pc, #120]	; (8000b4c <MX_GPIO_Init+0x144>)
 8000ad2:	f000 fe0f 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f000 fe00 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_GPIO_Init+0x148>)
 8000b0c:	f000 fdf2 	bl	80016f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f000 fde3 	bl	80016f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2106      	movs	r1, #6
 8000b32:	2028      	movs	r0, #40	; 0x28
 8000b34:	f000 fd34 	bl	80015a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b38:	2028      	movs	r0, #40	; 0x28
 8000b3a:	f000 fd4d 	bl	80015d8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000800 	.word	0x48000800
 8000b50:	48000400 	.word	0x48000400

08000b54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	6078      	str	r0, [r7, #4]
            the HAL_UART_RxCpltCallback can be implemented in the user file.
  */

  uint8_t dummy;

  if(xQueueIsQueueFullFromISR(xDataQueue) == pdFALSE)
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_UART_RxCpltCallback+0x80>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f005 f908 	bl	8005d76 <xQueueIsQueueFullFromISR>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d107      	bne.n	8000b7c <HAL_UART_RxCpltCallback+0x28>
  {
	  // enqueue data
	  xQueueSendFromISR(xDataQueue, (void *)&rxData, NULL);
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_UART_RxCpltCallback+0x80>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	2300      	movs	r3, #0
 8000b72:	2200      	movs	r2, #0
 8000b74:	4918      	ldr	r1, [pc, #96]	; (8000bd8 <HAL_UART_RxCpltCallback+0x84>)
 8000b76:	f004 fd45 	bl	8005604 <xQueueGenericSendFromISR>
 8000b7a:	e012      	b.n	8000ba2 <HAL_UART_RxCpltCallback+0x4e>
  }
  else
  {
	  if(rxData == 0x0D) // \r in ASCII table - end of data
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_UART_RxCpltCallback+0x84>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b0d      	cmp	r3, #13
 8000b82:	d10e      	bne.n	8000ba2 <HAL_UART_RxCpltCallback+0x4e>
	  {
		  // force the last byte as \r
		  xQueueReceiveFromISR(xDataQueue, (void *)&dummy, NULL);
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_UART_RxCpltCallback+0x80>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f107 010f 	add.w	r1, r7, #15
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f004 ff0e 	bl	80059b0 <xQueueReceiveFromISR>
		  xQueueSendFromISR(xDataQueue, (void *)&rxData, NULL);
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_UART_RxCpltCallback+0x80>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <HAL_UART_RxCpltCallback+0x84>)
 8000b9e:	f004 fd31 	bl	8005604 <xQueueGenericSendFromISR>
	  }
  }

  if(rxData == 0x0D) // \r in ASCII table - end of data
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_UART_RxCpltCallback+0x84>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b0d      	cmp	r3, #13
 8000ba8:	d10a      	bne.n	8000bc0 <HAL_UART_RxCpltCallback+0x6c>
  {
	  // send notification to cmdTask
	  xTaskNotifyFromISR(xCmdTask, 0, eNoAction, NULL);
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_UART_RxCpltCallback+0x88>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9301      	str	r3, [sp, #4]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f006 fcaa 	bl	8007514 <xTaskGenericNotifyFromISR>
  }

  // enable UART data byte reception again in IT mode
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4905      	ldr	r1, [pc, #20]	; (8000bd8 <HAL_UART_RxCpltCallback+0x84>)
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <HAL_UART_RxCpltCallback+0x8c>)
 8000bc6:	f002 feed 	bl	80039a4 <HAL_UART_Receive_IT>

}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200003ec 	.word	0x200003ec
 8000bd8:	20000404 	.word	0x20000404
 8000bdc:	200003dc 	.word	0x200003dc
 8000be0:	20000350 	.word	0x20000350

08000be4 <vLedEffectCB>:

// Define a callback function that will be used by multiple timer instance
void vLedEffectCB (TimerHandle_t xTimer)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	/* Optionally do something if the pxTimer parameter is NULL. */
	configASSERT( xTimer );
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10a      	bne.n	8000c08 <vLedEffectCB+0x24>
        __asm volatile
 8000bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf6:	f383 8811 	msr	BASEPRI, r3
 8000bfa:	f3bf 8f6f 	isb	sy
 8000bfe:	f3bf 8f4f 	dsb	sy
 8000c02:	60bb      	str	r3, [r7, #8]
    }
 8000c04:	bf00      	nop
 8000c06:	e7fe      	b.n	8000c06 <vLedEffectCB+0x22>

	uint32_t id = (uint32_t) pvTimerGetTimerID( xTimer );
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f007 f9bd 	bl	8007f88 <pvTimerGetTimerID>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	60fb      	str	r3, [r7, #12]

	switch(id)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d80d      	bhi.n	8000c36 <vLedEffectCB+0x52>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <vLedEffectCB+0x3c>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c37 	.word	0x08000c37
 8000c28:	08000c37 	.word	0x08000c37
 8000c2c:	08000c37 	.word	0x08000c37
	{
		case 1: {
			ledEffect1();
 8000c30:	f7ff fcf2 	bl	8000618 <ledEffect1>
		break;
 8000c34:	e000      	b.n	8000c38 <vLedEffectCB+0x54>

		break;
		}

		default:
			break;
 8000c36:	bf00      	nop
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <ledEffectStop>:

void ledEffectStop(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
	for(uint8_t idx; idx < NUM_TIMERS; idx++)
 8000c46:	e00e      	b.n	8000c66 <ledEffectStop+0x26>
	{
	  xTimerStop(xLedTimerList[idx], portMAX_DELAY);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <ledEffectStop+0x38>)
 8000c4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2300      	movs	r3, #0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	f006 feea 	bl	8007a34 <xTimerGenericCommand>
	for(uint8_t idx; idx < NUM_TIMERS; idx++)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	3301      	adds	r3, #1
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d9ed      	bls.n	8000c48 <ledEffectStop+0x8>
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200003f4 	.word	0x200003f4

08000c7c <ledEffectStart>:

void ledEffectStart(uint32_t opt)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	6078      	str	r0, [r7, #4]
	ledEffectStop();
 8000c84:	f7ff ffdc 	bl	8000c40 <ledEffectStop>
	xTimerStart(xLedTimerList[opt - 1], portMAX_DELAY);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <ledEffectStart+0x34>)
 8000c8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000c92:	f005 fcad 	bl	80065f0 <xTaskGetTickCount>
 8000c96:	4602      	mov	r2, r0
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f006 fec6 	bl	8007a34 <xTimerGenericCommand>
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	200003f4 	.word	0x200003f4

08000cb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <vApplicationGetTimerTaskMemory+0x2c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <vApplicationGetTimerTaskMemory+0x30>)
 8000cca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2240      	movs	r2, #64	; 0x40
 8000cd0:	601a      	str	r2, [r3, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000408 	.word	0x20000408
 8000ce4:	200004a8 	.word	0x200004a8

08000ce8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d101      	bne.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cfa:	f000 fb79 	bl	80013f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40001000 	.word	0x40001000

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  // This initializes a variable which is related to priority grouping
  // This initialization is actually done by the scheduler, but the problem
  // is that the priority grouping initialization is required for the SEGGER
  // start function.
  vInitPrioGroupValue();
 8000d4e:	f007 fa6b 	bl	8008228 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0a4      	sub	sp, #144	; 0x90
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	2288      	movs	r2, #136	; 0x88
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f009 fb87 	bl	800a484 <memset>
  if(hrtc->Instance==RTC)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_RTC_MspInit+0x5c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d118      	bne.n	8000db2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fd2a 	bl	80027ec <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d9e:	f7ff ffb5 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_RTC_MspInit+0x60>)
 8000da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_RTC_MspInit+0x60>)
 8000daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3790      	adds	r7, #144	; 0x90
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40002800 	.word	0x40002800
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ac      	sub	sp, #176	; 0xb0
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2288      	movs	r2, #136	; 0x88
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f009 fb4d 	bl	800a484 <memset>
  if(huart->Instance==USART2)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_UART_MspInit+0xc0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d143      	bne.n	8000e7c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fcf3 	bl	80027ec <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e0c:	f7ff ff7e 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e40:	230c      	movs	r3, #12
 8000e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f000 fc44 	bl	80016f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2106      	movs	r1, #6
 8000e70:	2026      	movs	r0, #38	; 0x26
 8000e72:	f000 fb95 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e76:	2026      	movs	r0, #38	; 0x26
 8000e78:	f000 fbae 	bl	80015d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	37b0      	adds	r7, #176	; 0xb0
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	; 0x38
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <HAL_InitTick+0xe0>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <HAL_InitTick+0xe0>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_InitTick+0xe0>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb2:	f107 0210 	add.w	r2, r7, #16
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 fc03 	bl	80026c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d103      	bne.n	8000ed4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ecc:	f001 fbd0 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8000ed0:	6378      	str	r0, [r7, #52]	; 0x34
 8000ed2:	e004      	b.n	8000ede <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ed4:	f001 fbcc 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee0:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <HAL_InitTick+0xe4>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_InitTick+0xe8>)
 8000eee:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_InitTick+0xec>)
 8000ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_InitTick+0xe8>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <HAL_InitTick+0xe8>)
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f12:	4818      	ldr	r0, [pc, #96]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f14:	f002 fa44 	bl	80033a0 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d11b      	bne.n	8000f5e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <HAL_InitTick+0xe8>)
 8000f28:	f002 fa9c 	bl	8003464 <HAL_TIM_Base_Start_IT>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d111      	bne.n	8000f5e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f3a:	2036      	movs	r0, #54	; 0x36
 8000f3c:	f000 fb4c 	bl	80015d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	d808      	bhi.n	8000f58 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f46:	2200      	movs	r2, #0
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	2036      	movs	r0, #54	; 0x36
 8000f4c:	f000 fb28 	bl	80015a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_InitTick+0xf0>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e002      	b.n	8000f5e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3738      	adds	r7, #56	; 0x38
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	431bde83 	.word	0x431bde83
 8000f74:	200005a8 	.word	0x200005a8
 8000f78:	40001000 	.word	0x40001000
 8000f7c:	20000010 	.word	0x20000010

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <USART2_IRQHandler+0x10>)
 8000fb2:	f002 fd43 	bl	8003a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000350 	.word	0x20000350

08000fc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000fc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fc8:	f000 fd56 	bl	8001a78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fd0:	f000 fd52 	bl	8001a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <TIM6_DAC_IRQHandler+0x10>)
 8000fde:	f002 fab1 	bl	8003544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200005a8 	.word	0x200005a8

08000fec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <menuTask>:
			  	  	  "Enter your choice here : ";

const char* msgInvalid = "////Invalid Option////\n";

void menuTask (void* pvParameters)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	uint32_t cmdAddr;
	cmd_t* cmd;

	xTaskHandle xLed, xRtc;
	xLed = xTaskGetHandle("LED");
 8001018:	4833      	ldr	r0, [pc, #204]	; (80010e8 <menuTask+0xd8>)
 800101a:	f005 fb85 	bl	8006728 <xTaskGetHandle>
 800101e:	61f8      	str	r0, [r7, #28]
	xRtc = xTaskGetHandle("RTC");
 8001020:	4832      	ldr	r0, [pc, #200]	; (80010ec <menuTask+0xdc>)
 8001022:	f005 fb81 	bl	8006728 <xTaskGetHandle>
 8001026:	61b8      	str	r0, [r7, #24]

	while(1)
	{
		xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgMenu, portMAX_DELAY);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	f04f 32ff 	mov.w	r2, #4294967295
 8001032:	492f      	ldr	r1, [pc, #188]	; (80010f0 <menuTask+0xe0>)
 8001034:	f004 f9c0 	bl	80053b8 <xQueueGenericSend>

		// wait until receive some notification with command address
		ret = xTaskNotifyWait(0,0, &cmdAddr, portMAX_DELAY);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	9200      	str	r2, [sp, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2000      	movs	r0, #0
 8001048:	f006 f8a8 	bl	800719c <xTaskGenericNotifyWait>
 800104c:	6178      	str	r0, [r7, #20]

		if(ret == pdTRUE)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d13e      	bne.n	80010d2 <menuTask+0xc2>
		{
			cmd = (cmd_t *)cmdAddr;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	613b      	str	r3, [r7, #16]

			if(cmd->buffSize == 1)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	7c1b      	ldrb	r3, [r3, #16]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d12e      	bne.n	80010be <menuTask+0xae>
			{
				operation_t opt = cmd->buff[0] - 48; // ASCII to number
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	3b30      	subs	r3, #48	; 0x30
 8001066:	73fb      	strb	r3, [r7, #15]

				switch(opt)
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d030      	beq.n	80010d0 <menuTask+0xc0>
 800106e:	2b02      	cmp	r3, #2
 8001070:	dc1c      	bgt.n	80010ac <menuTask+0x9c>
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <menuTask+0x6c>
 8001076:	2b01      	cmp	r3, #1
 8001078:	d00c      	beq.n	8001094 <menuTask+0x84>
 800107a:	e017      	b.n	80010ac <menuTask+0x9c>
				{
					case LED: {
						setState(LED_EFFECT);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 f95b 	bl	8001338 <setState>
						xTaskNotify(xLed, 0, eNoAction);
 8001082:	2300      	movs	r3, #0
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2300      	movs	r3, #0
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	69f8      	ldr	r0, [r7, #28]
 800108e:	f006 f90d 	bl	80072ac <xTaskGenericNotify>
					break;
 8001092:	e01e      	b.n	80010d2 <menuTask+0xc2>
					}

					case DATA_TIME: {
						setState(RTC_MENU);
 8001094:	2002      	movs	r0, #2
 8001096:	f000 f94f 	bl	8001338 <setState>
						xTaskNotify(xRtc, 0, eNoAction);
 800109a:	2300      	movs	r3, #0
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2300      	movs	r3, #0
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	69b8      	ldr	r0, [r7, #24]
 80010a6:	f006 f901 	bl	80072ac <xTaskGenericNotify>
					break;
 80010aa:	e012      	b.n	80010d2 <menuTask+0xc2>

					break;
					}

					default:
						xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgInvalid, portMAX_DELAY);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	2300      	movs	r3, #0
 80010b2:	f04f 32ff 	mov.w	r2, #4294967295
 80010b6:	490f      	ldr	r1, [pc, #60]	; (80010f4 <menuTask+0xe4>)
 80010b8:	f004 f97e 	bl	80053b8 <xQueueGenericSend>
						break;
 80010bc:	e009      	b.n	80010d2 <menuTask+0xc2>
				}
			}
			else
			{
				xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgInvalid, portMAX_DELAY);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	2300      	movs	r3, #0
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	490a      	ldr	r1, [pc, #40]	; (80010f4 <menuTask+0xe4>)
 80010ca:	f004 f975 	bl	80053b8 <xQueueGenericSend>
 80010ce:	e000      	b.n	80010d2 <menuTask+0xc2>
					break;
 80010d0:	bf00      	nop
			}
		}

		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2300      	movs	r3, #0
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2000      	movs	r0, #0
 80010e0:	f006 f85c 	bl	800719c <xTaskGenericNotifyWait>
		xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgMenu, portMAX_DELAY);
 80010e4:	e7a0      	b.n	8001028 <menuTask+0x18>
 80010e6:	bf00      	nop
 80010e8:	0800a7c8 	.word	0x0800a7c8
 80010ec:	0800a7cc 	.word	0x0800a7cc
 80010f0:	20000008 	.word	0x20000008
 80010f4:	2000000c 	.word	0x2000000c

080010f8 <cmdTask>:
	}
}

void cmdTask (void* pvParameters)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	uint8_t data, idx;

	cmd_t cmd;

	xTaskHandle xMenu, xLed;
	xMenu = xTaskGetHandle("MENU");
 8001100:	483b      	ldr	r0, [pc, #236]	; (80011f0 <cmdTask+0xf8>)
 8001102:	f005 fb11 	bl	8006728 <xTaskGetHandle>
 8001106:	62b8      	str	r0, [r7, #40]	; 0x28
	xLed = xTaskGetHandle("LED");
 8001108:	483a      	ldr	r0, [pc, #232]	; (80011f4 <cmdTask+0xfc>)
 800110a:	f005 fb0d 	bl	8006728 <xTaskGetHandle>
 800110e:	6278      	str	r0, [r7, #36]	; 0x24
//	xRtc = xTaskGetHandle("RTC");

	while(1)
	{
		// wait until receive some notification -> portMAX_DELAY
		ret = xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2000      	movs	r0, #0
 800111e:	f006 f83d 	bl	800719c <xTaskGenericNotifyWait>
 8001122:	6238      	str	r0, [r7, #32]

		// the notification is received
		if(ret == pdTRUE)
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d1f2      	bne.n	8001110 <cmdTask+0x18>
		{
			ret = uxQueueMessagesWaiting( (*(QueueHandle_t*)(pvParameters)) );
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f004 fcf3 	bl	8005b1a <uxQueueMessagesWaiting>
 8001134:	4603      	mov	r3, r0
 8001136:	623b      	str	r3, [r7, #32]

			if(ret != 0)
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0e8      	beq.n	8001110 <cmdTask+0x18>
			{
				memset(&cmd, 0, sizeof(cmd));
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2211      	movs	r2, #17
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f009 f99c 	bl	800a484 <memset>
				idx = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				data = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	77bb      	strb	r3, [r7, #30]

				while(1)
				{
					ret = xQueueReceive( (*(QueueHandle_t*)(pvParameters)), &data, 0);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f107 011e 	add.w	r1, r7, #30
 800115e:	2200      	movs	r2, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f004 fb15 	bl	8005790 <xQueueReceive>
 8001166:	6238      	str	r0, [r7, #32]
					if(ret == pdTRUE)
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d1f3      	bne.n	8001156 <cmdTask+0x5e>
					{
						if(data == 0xD)
 800116e:	7fbb      	ldrb	r3, [r7, #30]
 8001170:	2b0d      	cmp	r3, #13
 8001172:	d00c      	beq.n	800118e <cmdTask+0x96>
							break;

						cmd.buff[idx] = data;
 8001174:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001178:	7fba      	ldrb	r2, [r7, #30]
 800117a:	3330      	adds	r3, #48	; 0x30
 800117c:	443b      	add	r3, r7
 800117e:	f803 2c24 	strb.w	r2, [r3, #-36]
						idx++;
 8001182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001186:	3301      	adds	r3, #1
 8001188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					ret = xQueueReceive( (*(QueueHandle_t*)(pvParameters)), &data, 0);
 800118c:	e7e3      	b.n	8001156 <cmdTask+0x5e>
							break;
 800118e:	bf00      	nop
					}
				}
				cmd.buffSize = idx;
 8001190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001194:	773b      	strb	r3, [r7, #28]

				getState(&currState);
 8001196:	f107 031f 	add.w	r3, r7, #31
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f8ba 	bl	8001314 <getState>
				switch(currState)
 80011a0:	7ffb      	ldrb	r3, [r7, #31]
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d822      	bhi.n	80011ec <cmdTask+0xf4>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <cmdTask+0xb4>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011c5 	.word	0x080011c5
 80011b0:	080011d9 	.word	0x080011d9
 80011b4:	080011ed 	.word	0x080011ed
 80011b8:	080011ed 	.word	0x080011ed
 80011bc:	080011ed 	.word	0x080011ed
 80011c0:	080011ed 	.word	0x080011ed
				{
					case MAIN_MENU: {
						xTaskNotify(xMenu, (uint32_t)&cmd, eSetValueWithOverwrite);
 80011c4:	f107 020c 	add.w	r2, r7, #12
 80011c8:	2300      	movs	r3, #0
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2303      	movs	r3, #3
 80011ce:	2100      	movs	r1, #0
 80011d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011d2:	f006 f86b 	bl	80072ac <xTaskGenericNotify>
					break;
 80011d6:	e00a      	b.n	80011ee <cmdTask+0xf6>
					}

					case LED_EFFECT: {
						xTaskNotify(xLed, (uint32_t)&cmd, eSetValueWithOverwrite);
 80011d8:	f107 020c 	add.w	r2, r7, #12
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2303      	movs	r3, #3
 80011e2:	2100      	movs	r1, #0
 80011e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011e6:	f006 f861 	bl	80072ac <xTaskGenericNotify>
					break;
 80011ea:	e000      	b.n	80011ee <cmdTask+0xf6>

					break;
					}

					default:
						break;
 80011ec:	bf00      	nop
		ret = xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 80011ee:	e78f      	b.n	8001110 <cmdTask+0x18>
 80011f0:	0800a7d0 	.word	0x0800a7d0
 80011f4:	0800a7c8 	.word	0x0800a7c8

080011f8 <printTask>:
		}
	}
}

void printTask (void* pvParameters)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	while(1)
 8001200:	e7fe      	b.n	8001200 <printTask+0x8>
	...

08001204 <ledTask>:

	}
}

void ledTask (void* pvParameters)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af02      	add	r7, sp, #8
 800120a:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	uint32_t cmdAddr;
	cmd_t* cmd;

	xTaskHandle xMenu;
	xMenu = xTaskGetHandle("MENU");
 800120c:	4837      	ldr	r0, [pc, #220]	; (80012ec <ledTask+0xe8>)
 800120e:	f005 fa8b 	bl	8006728 <xTaskGetHandle>
 8001212:	6178      	str	r0, [r7, #20]

	while(1)
	{
		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2000      	movs	r0, #0
 8001222:	f005 ffbb 	bl	800719c <xTaskGenericNotifyWait>

		ret = xTaskNotifyWait(0,0, &cmdAddr, portMAX_DELAY);
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	f04f 32ff 	mov.w	r2, #4294967295
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2000      	movs	r0, #0
 8001236:	f005 ffb1 	bl	800719c <xTaskGenericNotifyWait>
 800123a:	6138      	str	r0, [r7, #16]

		if(ret == pdTRUE)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d1e8      	bne.n	8001214 <ledTask+0x10>
		{
			cmd = (cmd_t *)cmdAddr;
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	60fb      	str	r3, [r7, #12]

			if(cmd->buffSize <= 4)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	7c1b      	ldrb	r3, [r3, #16]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d83a      	bhi.n	80012c4 <ledTask+0xc0>
			{
				if(! strcmp( (char*)cmd->buff , "none"))
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4927      	ldr	r1, [pc, #156]	; (80012f0 <ledTask+0xec>)
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f806 	bl	8000264 <strcmp>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <ledTask+0x60>
					ledEffectStop();
 800125e:	f7ff fcef 	bl	8000c40 <ledEffectStop>
 8001262:	e7d7      	b.n	8001214 <ledTask+0x10>

				else if(! strcmp( (char*)cmd->buff , "e1"))
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4923      	ldr	r1, [pc, #140]	; (80012f4 <ledTask+0xf0>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe fffb 	bl	8000264 <strcmp>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d103      	bne.n	800127c <ledTask+0x78>
					ledEffectStart(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff fd01 	bl	8000c7c <ledEffectStart>
 800127a:	e7cb      	b.n	8001214 <ledTask+0x10>

				else if(! strcmp( (char*)cmd->buff , "e2"))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	491e      	ldr	r1, [pc, #120]	; (80012f8 <ledTask+0xf4>)
 8001280:	4618      	mov	r0, r3
 8001282:	f7fe ffef 	bl	8000264 <strcmp>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d103      	bne.n	8001294 <ledTask+0x90>
					ledEffectStart(2);
 800128c:	2002      	movs	r0, #2
 800128e:	f7ff fcf5 	bl	8000c7c <ledEffectStart>
 8001292:	e7bf      	b.n	8001214 <ledTask+0x10>

				else if(! strcmp( (char*)cmd->buff , "e3"))
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4919      	ldr	r1, [pc, #100]	; (80012fc <ledTask+0xf8>)
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe ffe3 	bl	8000264 <strcmp>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <ledTask+0xa8>
					ledEffectStart(3);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f7ff fce9 	bl	8000c7c <ledEffectStart>
 80012aa:	e7b3      	b.n	8001214 <ledTask+0x10>

				else if(! strcmp( (char*)cmd->buff , "e4"))
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4914      	ldr	r1, [pc, #80]	; (8001300 <ledTask+0xfc>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ffd7 	bl	8000264 <strcmp>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ab      	bne.n	8001214 <ledTask+0x10>
					ledEffectStart(4);
 80012bc:	2004      	movs	r0, #4
 80012be:	f7ff fcdd 	bl	8000c7c <ledEffectStart>
 80012c2:	e7a7      	b.n	8001214 <ledTask+0x10>
			}
			else
			{
				xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgInvalid, portMAX_DELAY);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	2300      	movs	r3, #0
 80012ca:	f04f 32ff 	mov.w	r2, #4294967295
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <ledTask+0x100>)
 80012d0:	f004 f872 	bl	80053b8 <xQueueGenericSend>
				setState(MAIN_MENU);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 f82f 	bl	8001338 <setState>
				xTaskNotify(xMenu, 0, eNoAction);
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	6978      	ldr	r0, [r7, #20]
 80012e6:	f005 ffe1 	bl	80072ac <xTaskGenericNotify>
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 80012ea:	e793      	b.n	8001214 <ledTask+0x10>
 80012ec:	0800a7d0 	.word	0x0800a7d0
 80012f0:	0800a7d8 	.word	0x0800a7d8
 80012f4:	0800a7e0 	.word	0x0800a7e0
 80012f8:	0800a7e4 	.word	0x0800a7e4
 80012fc:	0800a7e8 	.word	0x0800a7e8
 8001300:	0800a7ec 	.word	0x0800a7ec
 8001304:	2000000c 	.word	0x2000000c

08001308 <rtcTask>:
		}
	}
}

void rtcTask (void* pvParameters)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	while(1)
 8001310:	e7fe      	b.n	8001310 <rtcTask+0x8>
	...

08001314 <getState>:

	}
}

void getState(state_t* currState)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	portENTER_CRITICAL();
 800131c:	f007 f802 	bl	8008324 <vPortEnterCritical>
	(*currState) = state;
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <getState+0x20>)
 8001322:	781a      	ldrb	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	701a      	strb	r2, [r3, #0]
	portEXIT_CRITICAL();
 8001328:	f007 f82c 	bl	8008384 <vPortExitCritical>

}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200005f4 	.word	0x200005f4

08001338 <setState>:

void setState(state_t newState)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	portENTER_CRITICAL();
 8001342:	f006 ffef 	bl	8008324 <vPortEnterCritical>
	state = newState;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <setState+0x20>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	7013      	strb	r3, [r2, #0]
	portEXIT_CRITICAL();
 800134c:	f007 f81a 	bl	8008384 <vPortExitCritical>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200005f4 	.word	0x200005f4

0800135c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001360:	f7ff fe44 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <LoopForever+0x6>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	; (800139c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <LoopForever+0xe>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	; (80013a8 <LoopForever+0x16>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f009 f8d9 	bl	800a540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800138e:	f7ff f959 	bl	8000644 <main>

08001392 <LoopForever>:

LoopForever:
    b LoopForever
 8001392:	e7fe      	b.n	8001392 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001394:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013a0:	0800a948 	.word	0x0800a948
  ldr r2, =_sbss
 80013a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013a8:	20004bf8 	.word	0x20004bf8

080013ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC1_2_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_Init+0x3c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_Init+0x3c>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f000 f8df 	bl	800158a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013cc:	200f      	movs	r0, #15
 80013ce:	f7ff fd5d 	bl	8000e8c <HAL_InitTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	e001      	b.n	80013e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013de:	f7ff fc9b 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e2:	79fb      	ldrb	r3, [r7, #7]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000014 	.word	0x20000014
 8001414:	200005f8 	.word	0x200005f8

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200005f8 	.word	0x200005f8

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <__NVIC_EnableIRQ+0x38>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff4c 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b2:	f7ff ff61 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	6978      	ldr	r0, [r7, #20]
 80015be:	f7ff ffb1 	bl	8001524 <NVIC_EncodePriority>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff80 	bl	80014d0 <__NVIC_SetPriority>
}
 80015d0:	bf00      	nop
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff54 	bl	8001494 <__NVIC_EnableIRQ>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d008      	beq.n	800161e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2204      	movs	r2, #4
 8001610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e022      	b.n	8001664 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 020e 	bic.w	r2, r2, #14
 800162c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 021c 	and.w	r2, r3, #28
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	2101      	movs	r1, #1
 800164c:	fa01 f202 	lsl.w	r2, r1, r2
 8001650:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d005      	beq.n	8001694 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2204      	movs	r2, #4
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	e029      	b.n	80016e8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 020e 	bic.w	r2, r2, #14
 80016a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	f003 021c 	and.w	r2, r3, #28
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	2101      	movs	r1, #1
 80016c2:	fa01 f202 	lsl.w	r2, r1, r2
 80016c6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
    }
  }
  return status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	e17f      	b.n	8001a04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8171 	beq.w	80019fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d005      	beq.n	8001734 <HAL_GPIO_Init+0x40>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d130      	bne.n	8001796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176a:	2201      	movs	r2, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 0201 	and.w	r2, r3, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d118      	bne.n	80017d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	08db      	lsrs	r3, r3, #3
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80ac 	beq.w	80019fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b5f      	ldr	r3, [pc, #380]	; (8001a24 <HAL_GPIO_Init+0x330>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018aa:	4a5e      	ldr	r2, [pc, #376]	; (8001a24 <HAL_GPIO_Init+0x330>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6613      	str	r3, [r2, #96]	; 0x60
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <HAL_GPIO_Init+0x330>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018be:	4a5a      	ldr	r2, [pc, #360]	; (8001a28 <HAL_GPIO_Init+0x334>)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e8:	d025      	beq.n	8001936 <HAL_GPIO_Init+0x242>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4f      	ldr	r2, [pc, #316]	; (8001a2c <HAL_GPIO_Init+0x338>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x23e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_GPIO_Init+0x33c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x23a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_GPIO_Init+0x340>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x236>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4c      	ldr	r2, [pc, #304]	; (8001a38 <HAL_GPIO_Init+0x344>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x232>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4b      	ldr	r2, [pc, #300]	; (8001a3c <HAL_GPIO_Init+0x348>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x22e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4a      	ldr	r2, [pc, #296]	; (8001a40 <HAL_GPIO_Init+0x34c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x22a>
 800191a:	2306      	movs	r3, #6
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_Init+0x244>
 800191e:	2307      	movs	r3, #7
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_Init+0x244>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_Init+0x244>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x244>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_Init+0x244>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_Init+0x244>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x244>
 8001936:	2300      	movs	r3, #0
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	4093      	lsls	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001948:	4937      	ldr	r1, [pc, #220]	; (8001a28 <HAL_GPIO_Init+0x334>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_GPIO_Init+0x350>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <HAL_GPIO_Init+0x350>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_GPIO_Init+0x350>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a4:	4a27      	ldr	r2, [pc, #156]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ce:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_GPIO_Init+0x350>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f47f ae78 	bne.w	8001704 <HAL_GPIO_Init+0x10>
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	48000800 	.word	0x48000800
 8001a34:	48000c00 	.word	0x48000c00
 8001a38:	48001000 	.word	0x48001000
 8001a3c:	48001400 	.word	0x48001400
 8001a40:	48001800 	.word	0x48001800
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
 8001a54:	4613      	mov	r3, r2
 8001a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f806 	bl	8001aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40007000 	.word	0x40007000

08001adc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aea:	d130      	bne.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af8:	d038      	beq.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2232      	movs	r2, #50	; 0x32
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0c9b      	lsrs	r3, r3, #18
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b20:	e002      	b.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b34:	d102      	bne.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f2      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b48:	d110      	bne.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e00f      	b.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5a:	d007      	beq.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b64:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	20000004 	.word	0x20000004
 8001b84:	431bde83 	.word	0x431bde83

08001b88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e3ca      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b97      	ldr	r3, [pc, #604]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	4b94      	ldr	r3, [pc, #592]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80e4 	beq.w	8001d84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x4a>
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	f040 808b 	bne.w	8001ce0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	f040 8087 	bne.w	8001ce0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd2:	4b89      	ldr	r3, [pc, #548]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_RCC_OscConfig+0x62>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e3a2      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1a      	ldr	r2, [r3, #32]
 8001bee:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <HAL_RCC_OscConfig+0x7c>
 8001bfa:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c02:	e005      	b.n	8001c10 <HAL_RCC_OscConfig+0x88>
 8001c04:	4b7c      	ldr	r3, [pc, #496]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d223      	bcs.n	8001c5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fd87 	bl	800272c <RCC_SetFlashLatencyFromMSIRange>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e383      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c28:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a72      	ldr	r2, [pc, #456]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b70      	ldr	r3, [pc, #448]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	496d      	ldr	r1, [pc, #436]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c46:	4b6c      	ldr	r3, [pc, #432]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	4968      	ldr	r1, [pc, #416]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
 8001c5a:	e025      	b.n	8001ca8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a65      	ldr	r2, [pc, #404]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4960      	ldr	r1, [pc, #384]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	495b      	ldr	r1, [pc, #364]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fd47 	bl	800272c <RCC_SetFlashLatencyFromMSIRange>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e343      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca8:	f000 fc4a 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	4950      	ldr	r1, [pc, #320]	; (8001dfc <HAL_RCC_OscConfig+0x274>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	4a4e      	ldr	r2, [pc, #312]	; (8001e00 <HAL_RCC_OscConfig+0x278>)
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cc8:	4b4e      	ldr	r3, [pc, #312]	; (8001e04 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f8dd 	bl	8000e8c <HAL_InitTick>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d052      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	e327      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d032      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ce8:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a42      	ldr	r2, [pc, #264]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fb90 	bl	8001418 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fb8c 	bl	8001418 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e310      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a36      	ldr	r2, [pc, #216]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4931      	ldr	r1, [pc, #196]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d38:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	492c      	ldr	r1, [pc, #176]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
 8001d4c:	e01a      	b.n	8001d84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fb5d 	bl	8001418 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d62:	f7ff fb59 	bl	8001418 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e2dd      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f0      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1da>
 8001d80:	e000      	b.n	8001d84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d074      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x21a>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d10e      	bne.n	8001dba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d10b      	bne.n	8001dba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d064      	beq.n	8001e78 <HAL_RCC_OscConfig+0x2f0>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d160      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e2ba      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x24a>
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e026      	b.n	8001e20 <HAL_RCC_OscConfig+0x298>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dda:	d115      	bne.n	8001e08 <HAL_RCC_OscConfig+0x280>
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001de2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a02      	ldr	r2, [pc, #8]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e014      	b.n	8001e20 <HAL_RCC_OscConfig+0x298>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	0800a8c8 	.word	0x0800a8c8
 8001e00:	20000004 	.word	0x20000004
 8001e04:	20000010 	.word	0x20000010
 8001e08:	4ba0      	ldr	r3, [pc, #640]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a9f      	ldr	r2, [pc, #636]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b9d      	ldr	r3, [pc, #628]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a9c      	ldr	r2, [pc, #624]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7ff faf6 	bl	8001418 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff faf2 	bl	8001418 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e276      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e42:	4b92      	ldr	r3, [pc, #584]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x2a8>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff fae2 	bl	8001418 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff fade 	bl	8001418 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e262      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2d0>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d060      	beq.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x310>
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d119      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d116      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e98:	4b7c      	ldr	r3, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x328>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e23f      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	4973      	ldr	r1, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec4:	e040      	b.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d023      	beq.n	8001f16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ece:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff fa9d 	bl	8001418 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fa99 	bl	8001418 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e21d      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef4:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	061b      	lsls	r3, r3, #24
 8001f0e:	495f      	ldr	r1, [pc, #380]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	e018      	b.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b5d      	ldr	r3, [pc, #372]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a5c      	ldr	r2, [pc, #368]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa79 	bl	8001418 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fa75 	bl	8001418 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1f9      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d03c      	beq.n	8001fce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5c:	4b4b      	ldr	r3, [pc, #300]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	4a4a      	ldr	r2, [pc, #296]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fa54 	bl	8001418 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff fa50 	bl	8001418 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1d4      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ef      	beq.n	8001f74 <HAL_RCC_OscConfig+0x3ec>
 8001f94:	e01b      	b.n	8001fce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9c:	4a3b      	ldr	r2, [pc, #236]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fa37 	bl	8001418 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7ff fa33 	bl	8001418 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1b7      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ef      	bne.n	8001fae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80a6 	beq.w	8002128 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10d      	bne.n	8002008 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002004:	2301      	movs	r3, #1
 8002006:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_OscConfig+0x508>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d118      	bne.n	8002046 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_RCC_OscConfig+0x508>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_RCC_OscConfig+0x508>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002020:	f7ff f9fa 	bl	8001418 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7ff f9f6 	bl	8001418 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e17a      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCC_OscConfig+0x508>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0x4d8>
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205e:	e029      	b.n	80020b4 <HAL_RCC_OscConfig+0x52c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d115      	bne.n	8002094 <HAL_RCC_OscConfig+0x50c>
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_RCC_OscConfig+0x504>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_RCC_OscConfig+0x504>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a03      	ldr	r2, [pc, #12]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002088:	e014      	b.n	80020b4 <HAL_RCC_OscConfig+0x52c>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
 8002094:	4b9c      	ldr	r3, [pc, #624]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	4a9b      	ldr	r2, [pc, #620]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a4:	4b98      	ldr	r3, [pc, #608]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	4a97      	ldr	r2, [pc, #604]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80020ac:	f023 0304 	bic.w	r3, r3, #4
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d016      	beq.n	80020ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7ff f9ac 	bl	8001418 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7ff f9a8 	bl	8001418 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e12a      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020da:	4b8b      	ldr	r3, [pc, #556]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ed      	beq.n	80020c4 <HAL_RCC_OscConfig+0x53c>
 80020e8:	e015      	b.n	8002116 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7ff f995 	bl	8001418 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7ff f991 	bl	8001418 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e113      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002108:	4b7f      	ldr	r3, [pc, #508]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ed      	bne.n	80020f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a79      	ldr	r2, [pc, #484]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80fe 	beq.w	800232e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	2b02      	cmp	r3, #2
 8002138:	f040 80d0 	bne.w	80022dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800213c:	4b72      	ldr	r3, [pc, #456]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	429a      	cmp	r2, r3
 800214e:	d130      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	3b01      	subs	r3, #1
 800215c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d127      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d11f      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800217c:	2a07      	cmp	r2, #7
 800217e:	bf14      	ite	ne
 8002180:	2201      	movne	r2, #1
 8002182:	2200      	moveq	r2, #0
 8002184:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002186:	4293      	cmp	r3, r2
 8002188:	d113      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	3b01      	subs	r3, #1
 80021ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d06e      	beq.n	8002290 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	d069      	beq.n	800228c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021b8:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0ad      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021d4:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80021da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021e0:	f7ff f91a 	bl	8001418 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f916 	bl	8001418 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e09a      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fa:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b40      	ldr	r3, [pc, #256]	; (800230c <HAL_RCC_OscConfig+0x784>)
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002216:	3a01      	subs	r2, #1
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002220:	0212      	lsls	r2, r2, #8
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002228:	0852      	lsrs	r2, r2, #1
 800222a:	3a01      	subs	r2, #1
 800222c:	0552      	lsls	r2, r2, #21
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002234:	0852      	lsrs	r2, r2, #1
 8002236:	3a01      	subs	r2, #1
 8002238:	0652      	lsls	r2, r2, #25
 800223a:	4311      	orrs	r1, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002240:	0912      	lsrs	r2, r2, #4
 8002242:	0452      	lsls	r2, r2, #17
 8002244:	430a      	orrs	r2, r1
 8002246:	4930      	ldr	r1, [pc, #192]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 8002248:	4313      	orrs	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2d      	ldr	r2, [pc, #180]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a2a      	ldr	r2, [pc, #168]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002264:	f7ff f8d8 	bl	8001418 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff f8d4 	bl	8001418 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e058      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228a:	e050      	b.n	800232e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e04f      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d148      	bne.n	800232e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a16      	ldr	r2, [pc, #88]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022b4:	f7ff f8b0 	bl	8001418 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7ff f8ac 	bl	8001418 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e030      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x734>
 80022da:	e028      	b.n	800232e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d023      	beq.n	800232a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <HAL_RCC_OscConfig+0x780>)
 80022e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7ff f893 	bl	8001418 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f4:	e00c      	b.n	8002310 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f6:	f7ff f88f 	bl	8001418 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d905      	bls.n	8002310 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e013      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
 8002308:	40021000 	.word	0x40021000
 800230c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCC_OscConfig+0x7b0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ec      	bne.n	80022f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_OscConfig+0x7b0>)
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4905      	ldr	r1, [pc, #20]	; (8002338 <HAL_RCC_OscConfig+0x7b0>)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_OscConfig+0x7b4>)
 8002324:	4013      	ands	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
 8002328:	e001      	b.n	800232e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	feeefffc 	.word	0xfeeefffc

08002340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0e7      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b75      	ldr	r3, [pc, #468]	; (800252c <HAL_RCC_ClockConfig+0x1ec>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d910      	bls.n	8002384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <HAL_RCC_ClockConfig+0x1ec>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	4970      	ldr	r1, [pc, #448]	; (800252c <HAL_RCC_ClockConfig+0x1ec>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b6e      	ldr	r3, [pc, #440]	; (800252c <HAL_RCC_ClockConfig+0x1ec>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cf      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b66      	ldr	r3, [pc, #408]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800239c:	429a      	cmp	r2, r3
 800239e:	d908      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4960      	ldr	r1, [pc, #384]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d04c      	beq.n	8002458 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	4b5a      	ldr	r3, [pc, #360]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d121      	bne.n	8002416 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0a6      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023de:	4b54      	ldr	r3, [pc, #336]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d115      	bne.n	8002416 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e09a      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023f6:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e08e      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e086      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b46      	ldr	r3, [pc, #280]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4943      	ldr	r1, [pc, #268]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002428:	f7fe fff6 	bl	8001418 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe fff2 	bl	8001418 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e06e      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	429a      	cmp	r2, r3
 8002472:	d208      	bcs.n	8002486 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	492b      	ldr	r1, [pc, #172]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_RCC_ClockConfig+0x1ec>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d210      	bcs.n	80024b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_RCC_ClockConfig+0x1ec>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 0207 	bic.w	r2, r3, #7
 800249c:	4923      	ldr	r1, [pc, #140]	; (800252c <HAL_RCC_ClockConfig+0x1ec>)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_RCC_ClockConfig+0x1ec>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e036      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	4918      	ldr	r1, [pc, #96]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4910      	ldr	r1, [pc, #64]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024f4:	f000 f824 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	490b      	ldr	r1, [pc, #44]	; (8002534 <HAL_RCC_ClockConfig+0x1f4>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1f8>)
 8002512:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1fc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fcb7 	bl	8000e8c <HAL_InitTick>
 800251e:	4603      	mov	r3, r0
 8002520:	72fb      	strb	r3, [r7, #11]

  return status;
 8002522:	7afb      	ldrb	r3, [r7, #11]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40022000 	.word	0x40022000
 8002530:	40021000 	.word	0x40021000
 8002534:	0800a8c8 	.word	0x0800a8c8
 8002538:	20000004 	.word	0x20000004
 800253c:	20000010 	.word	0x20000010

08002540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254e:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <HAL_RCC_GetSysClockFreq+0x108>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002558:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_RCC_GetSysClockFreq+0x108>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x34>
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d121      	bne.n	80025b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d11e      	bne.n	80025b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002574:	4b34      	ldr	r3, [pc, #208]	; (8002648 <HAL_RCC_GetSysClockFreq+0x108>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d107      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_RCC_GetSysClockFreq+0x108>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e005      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800259c:	4a2b      	ldr	r2, [pc, #172]	; (800264c <HAL_RCC_GetSysClockFreq+0x10c>)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10d      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d102      	bne.n	80025be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	e004      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_RCC_GetSysClockFreq+0x114>)
 80025c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d134      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d003      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0xac>
 80025e4:	e005      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HAL_RCC_GetSysClockFreq+0x110>)
 80025e8:	617b      	str	r3, [r7, #20]
      break;
 80025ea:	e005      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ee:	617b      	str	r3, [r7, #20]
      break;
 80025f0:	e002      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	617b      	str	r3, [r7, #20]
      break;
 80025f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	3301      	adds	r3, #1
 8002604:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_RCC_GetSysClockFreq+0x108>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	fb03 f202 	mul.w	r2, r3, r2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_GetSysClockFreq+0x108>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	0e5b      	lsrs	r3, r3, #25
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	3301      	adds	r3, #1
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002638:	69bb      	ldr	r3, [r7, #24]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	0800a8e0 	.word	0x0800a8e0
 8002650:	00f42400 	.word	0x00f42400
 8002654:	007a1200 	.word	0x007a1200

08002658 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_RCC_GetHCLKFreq+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000004 	.word	0x20000004

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002674:	f7ff fff0 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4904      	ldr	r1, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	0800a8d8 	.word	0x0800a8d8

0800269c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026a0:	f7ff ffda 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0adb      	lsrs	r3, r3, #11
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4904      	ldr	r1, [pc, #16]	; (80026c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	0800a8d8 	.word	0x0800a8d8

080026c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	220f      	movs	r2, #15
 80026d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_GetClockConfig+0x5c>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_RCC_GetClockConfig+0x5c>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_RCC_GetClockConfig+0x5c>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_GetClockConfig+0x5c>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCC_GetClockConfig+0x60>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0207 	and.w	r2, r3, #7
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	601a      	str	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40022000 	.word	0x40022000

0800272c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002738:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002744:	f7ff f9bc 	bl	8001ac0 <HAL_PWREx_GetVoltageRange>
 8002748:	6178      	str	r0, [r7, #20]
 800274a:	e014      	b.n	8002776 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800274c:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	4a24      	ldr	r2, [pc, #144]	; (80027e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002756:	6593      	str	r3, [r2, #88]	; 0x58
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002764:	f7ff f9ac 	bl	8001ac0 <HAL_PWREx_GetVoltageRange>
 8002768:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277c:	d10b      	bne.n	8002796 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b80      	cmp	r3, #128	; 0x80
 8002782:	d919      	bls.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2ba0      	cmp	r3, #160	; 0xa0
 8002788:	d902      	bls.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800278a:	2302      	movs	r3, #2
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	e013      	b.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002790:	2301      	movs	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	e010      	b.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b80      	cmp	r3, #128	; 0x80
 800279a:	d902      	bls.n	80027a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800279c:	2303      	movs	r3, #3
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	e00a      	b.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d102      	bne.n	80027ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027a8:	2302      	movs	r3, #2
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	e004      	b.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d101      	bne.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027b4:	2301      	movs	r3, #1
 80027b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 0207 	bic.w	r2, r3, #7
 80027c0:	4909      	ldr	r1, [pc, #36]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d001      	beq.n	80027da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027f4:	2300      	movs	r3, #0
 80027f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f8:	2300      	movs	r3, #0
 80027fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002804:	2b00      	cmp	r3, #0
 8002806:	d041      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002810:	d02a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002812:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002816:	d824      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800281c:	d008      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800281e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002822:	d81e      	bhi.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800282c:	d010      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800282e:	e018      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002830:	4b86      	ldr	r3, [pc, #536]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a85      	ldr	r2, [pc, #532]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800283c:	e015      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fabb 	bl	8002dc0 <RCCEx_PLLSAI1_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800284e:	e00c      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3320      	adds	r3, #32
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fba6 	bl	8002fa8 <RCCEx_PLLSAI2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002860:	e003      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	74fb      	strb	r3, [r7, #19]
      break;
 8002866:	e000      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002870:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287e:	4973      	ldr	r1, [pc, #460]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002886:	e001      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d041      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800289c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028a0:	d02a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028a6:	d824      	bhi.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028ac:	d008      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028b2:	d81e      	bhi.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028bc:	d010      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028be:	e018      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028c0:	4b62      	ldr	r3, [pc, #392]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a61      	ldr	r2, [pc, #388]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028cc:	e015      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fa73 	bl	8002dc0 <RCCEx_PLLSAI1_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028de:	e00c      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3320      	adds	r3, #32
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fb5e 	bl	8002fa8 <RCCEx_PLLSAI2_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028f0:	e003      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	74fb      	strb	r3, [r7, #19]
      break;
 80028f6:	e000      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10b      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002900:	4b52      	ldr	r3, [pc, #328]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800290e:	494f      	ldr	r1, [pc, #316]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002916:	e001      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a0 	beq.w	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00d      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4a40      	ldr	r2, [pc, #256]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
 8002950:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295c:	2301      	movs	r3, #1
 800295e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002960:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a3a      	ldr	r2, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800296c:	f7fe fd54 	bl	8001418 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002972:	e009      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe fd50 	bl	8001418 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d902      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	74fb      	strb	r3, [r7, #19]
        break;
 8002986:	e005      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002988:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ef      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d15c      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800299a:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01f      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d019      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c4:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe fd0f 	bl	8001418 <HAL_GetTick>
 80029fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fc:	e00b      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fd0b 	bl	8001418 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d902      	bls.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	74fb      	strb	r3, [r7, #19]
            break;
 8002a14:	e006      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ec      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3a:	4904      	ldr	r1, [pc, #16]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a42:	e009      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	74bb      	strb	r3, [r7, #18]
 8002a48:	e006      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a58:	7c7b      	ldrb	r3, [r7, #17]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5e:	4b9e      	ldr	r3, [pc, #632]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	4a9d      	ldr	r2, [pc, #628]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a76:	4b98      	ldr	r3, [pc, #608]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f023 0203 	bic.w	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	4994      	ldr	r1, [pc, #592]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a98:	4b8f      	ldr	r3, [pc, #572]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 020c 	bic.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	498c      	ldr	r1, [pc, #560]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aba:	4b87      	ldr	r3, [pc, #540]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	4983      	ldr	r1, [pc, #524]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002adc:	4b7e      	ldr	r3, [pc, #504]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	497b      	ldr	r1, [pc, #492]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002afe:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0c:	4972      	ldr	r1, [pc, #456]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b20:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	496a      	ldr	r1, [pc, #424]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b42:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	4961      	ldr	r1, [pc, #388]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b64:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	4959      	ldr	r1, [pc, #356]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b86:	4b54      	ldr	r3, [pc, #336]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b94:	4950      	ldr	r1, [pc, #320]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba8:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	4948      	ldr	r1, [pc, #288]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bca:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	493f      	ldr	r1, [pc, #252]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d028      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bec:	4b3a      	ldr	r3, [pc, #232]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfa:	4937      	ldr	r1, [pc, #220]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c16:	60d3      	str	r3, [r2, #12]
 8002c18:	e011      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c22:	d10c      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f8c8 	bl	8002dc0 <RCCEx_PLLSAI1_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d028      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c4a:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	491f      	ldr	r1, [pc, #124]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c68:	d106      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c74:	60d3      	str	r3, [r2, #12]
 8002c76:	e011      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3304      	adds	r3, #4
 8002c86:	2101      	movs	r1, #1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f899 	bl	8002dc0 <RCCEx_PLLSAI1_Config>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d02b      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb6:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cc6:	d109      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a02      	ldr	r2, [pc, #8]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd2:	60d3      	str	r3, [r2, #12]
 8002cd4:	e014      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f867 	bl	8002dc0 <RCCEx_PLLSAI1_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02f      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1a:	4928      	ldr	r1, [pc, #160]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d2a:	d10d      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	2102      	movs	r1, #2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f844 	bl	8002dc0 <RCCEx_PLLSAI1_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d014      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	74bb      	strb	r3, [r7, #18]
 8002d46:	e011      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3320      	adds	r3, #32
 8002d56:	2102      	movs	r1, #2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f925 	bl	8002fa8 <RCCEx_PLLSAI2_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d86:	490d      	ldr	r1, [pc, #52]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002daa:	4904      	ldr	r1, [pc, #16]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002db2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dce:	4b75      	ldr	r3, [pc, #468]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d018      	beq.n	8002e0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dda:	4b72      	ldr	r3, [pc, #456]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0203 	and.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d10d      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
       ||
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002df2:	4b6c      	ldr	r3, [pc, #432]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
       ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d047      	beq.n	8002e96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
 8002e0a:	e044      	b.n	8002e96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d018      	beq.n	8002e46 <RCCEx_PLLSAI1_Config+0x86>
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d825      	bhi.n	8002e64 <RCCEx_PLLSAI1_Config+0xa4>
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d002      	beq.n	8002e22 <RCCEx_PLLSAI1_Config+0x62>
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d009      	beq.n	8002e34 <RCCEx_PLLSAI1_Config+0x74>
 8002e20:	e020      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e22:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d11d      	bne.n	8002e6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e32:	e01a      	b.n	8002e6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e34:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d116      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e44:	e013      	b.n	8002e6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e46:	4b57      	ldr	r3, [pc, #348]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10f      	bne.n	8002e72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e52:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e62:	e006      	b.n	8002e72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e004      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e002      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e000      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e72:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	4944      	ldr	r1, [pc, #272]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d17d      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e9c:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a40      	ldr	r2, [pc, #256]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fab6 	bl	8001418 <HAL_GetTick>
 8002eac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eae:	e009      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eb0:	f7fe fab2 	bl	8001418 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d902      	bls.n	8002ec4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ec2:	e005      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ec4:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ef      	bne.n	8002eb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d160      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d111      	bne.n	8002f00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6892      	ldr	r2, [r2, #8]
 8002eec:	0211      	lsls	r1, r2, #8
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	0912      	lsrs	r2, r2, #4
 8002ef4:	0452      	lsls	r2, r2, #17
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	492a      	ldr	r1, [pc, #168]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	610b      	str	r3, [r1, #16]
 8002efe:	e027      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d112      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f06:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6892      	ldr	r2, [r2, #8]
 8002f16:	0211      	lsls	r1, r2, #8
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6912      	ldr	r2, [r2, #16]
 8002f1c:	0852      	lsrs	r2, r2, #1
 8002f1e:	3a01      	subs	r2, #1
 8002f20:	0552      	lsls	r2, r2, #21
 8002f22:	430a      	orrs	r2, r1
 8002f24:	491f      	ldr	r1, [pc, #124]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	610b      	str	r3, [r1, #16]
 8002f2a:	e011      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6892      	ldr	r2, [r2, #8]
 8002f3c:	0211      	lsls	r1, r2, #8
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6952      	ldr	r2, [r2, #20]
 8002f42:	0852      	lsrs	r2, r2, #1
 8002f44:	3a01      	subs	r2, #1
 8002f46:	0652      	lsls	r2, r2, #25
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fe fa5c 	bl	8001418 <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f62:	e009      	b.n	8002f78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f64:	f7fe fa58 	bl	8001418 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	73fb      	strb	r3, [r7, #15]
          break;
 8002f76:	e005      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ef      	beq.n	8002f64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fb6:	4b6a      	ldr	r3, [pc, #424]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fc2:	4b67      	ldr	r3, [pc, #412]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0203 	and.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d10d      	bne.n	8002fee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fda:	4b61      	ldr	r3, [pc, #388]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d047      	beq.n	800307e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	e044      	b.n	800307e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d018      	beq.n	800302e <RCCEx_PLLSAI2_Config+0x86>
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d825      	bhi.n	800304c <RCCEx_PLLSAI2_Config+0xa4>
 8003000:	2b01      	cmp	r3, #1
 8003002:	d002      	beq.n	800300a <RCCEx_PLLSAI2_Config+0x62>
 8003004:	2b02      	cmp	r3, #2
 8003006:	d009      	beq.n	800301c <RCCEx_PLLSAI2_Config+0x74>
 8003008:	e020      	b.n	800304c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800300a:	4b55      	ldr	r3, [pc, #340]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11d      	bne.n	8003052 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301a:	e01a      	b.n	8003052 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800301c:	4b50      	ldr	r3, [pc, #320]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d116      	bne.n	8003056 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302c:	e013      	b.n	8003056 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800302e:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10f      	bne.n	800305a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800304a:	e006      	b.n	800305a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e004      	b.n	800305c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003052:	bf00      	nop
 8003054:	e002      	b.n	800305c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800305a:	bf00      	nop
    }

    if(status == HAL_OK)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10d      	bne.n	800307e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003062:	4b3f      	ldr	r3, [pc, #252]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6819      	ldr	r1, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	430b      	orrs	r3, r1
 8003078:	4939      	ldr	r1, [pc, #228]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d167      	bne.n	8003154 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a35      	ldr	r2, [pc, #212]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003090:	f7fe f9c2 	bl	8001418 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003096:	e009      	b.n	80030ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003098:	f7fe f9be 	bl	8001418 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d902      	bls.n	80030ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	73fb      	strb	r3, [r7, #15]
        break;
 80030aa:	e005      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030ac:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ef      	bne.n	8003098 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d14a      	bne.n	8003154 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d111      	bne.n	80030e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	0211      	lsls	r1, r2, #8
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68d2      	ldr	r2, [r2, #12]
 80030da:	0912      	lsrs	r2, r2, #4
 80030dc:	0452      	lsls	r2, r2, #17
 80030de:	430a      	orrs	r2, r1
 80030e0:	491f      	ldr	r1, [pc, #124]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	614b      	str	r3, [r1, #20]
 80030e6:	e011      	b.n	800310c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6892      	ldr	r2, [r2, #8]
 80030f8:	0211      	lsls	r1, r2, #8
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6912      	ldr	r2, [r2, #16]
 80030fe:	0852      	lsrs	r2, r2, #1
 8003100:	3a01      	subs	r2, #1
 8003102:	0652      	lsls	r2, r2, #25
 8003104:	430a      	orrs	r2, r1
 8003106:	4916      	ldr	r1, [pc, #88]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003108:	4313      	orrs	r3, r2
 800310a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a13      	ldr	r2, [pc, #76]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003116:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fe f97e 	bl	8001418 <HAL_GetTick>
 800311c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800311e:	e009      	b.n	8003134 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003120:	f7fe f97a 	bl	8001418 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d902      	bls.n	8003134 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	73fb      	strb	r3, [r7, #15]
          break;
 8003132:	e005      	b.n	8003140 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ef      	beq.n	8003120 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4904      	ldr	r1, [pc, #16]	; (8003160 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003150:	4313      	orrs	r3, r2
 8003152:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000

08003164 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d079      	beq.n	800326a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fde8 	bl	8000d60 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d058      	beq.n	8003258 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	22ca      	movs	r2, #202	; 0xca
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2253      	movs	r2, #83	; 0x53
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f880 	bl	80032bc <RTC_EnterInitMode>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d127      	bne.n	8003216 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80031d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6899      	ldr	r1, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68d2      	ldr	r2, [r2, #12]
 8003200:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6919      	ldr	r1, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	041a      	lsls	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f884 	bl	8003324 <RTC_ExitInitMode>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d113      	bne.n	800324e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0203 	bic.w	r2, r2, #3
 8003234:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
 8003256:	e001      	b.n	800325c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_RTC_WaitForSynchro+0x44>)
 8003282:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003284:	f7fe f8c8 	bl	8001418 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800328a:	e009      	b.n	80032a0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800328c:	f7fe f8c4 	bl	8001418 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800329a:	d901      	bls.n	80032a0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e007      	b.n	80032b0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ee      	beq.n	800328c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	0003ff5f 	.word	0x0003ff5f

080032bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d120      	bne.n	8003318 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f04f 32ff 	mov.w	r2, #4294967295
 80032de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032e0:	f7fe f89a 	bl	8001418 <HAL_GetTick>
 80032e4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032e6:	e00d      	b.n	8003304 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80032e8:	f7fe f896 	bl	8001418 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f6:	d905      	bls.n	8003304 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2203      	movs	r2, #3
 8003300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <RTC_EnterInitMode+0x5c>
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d1e7      	bne.n	80032e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <RTC_ExitInitMode+0x78>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <RTC_ExitInitMode+0x78>)
 8003336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800333a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <RTC_ExitInitMode+0x78>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10c      	bne.n	8003362 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff93 	bl	8003274 <HAL_RTC_WaitForSynchro>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01e      	beq.n	8003392 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2203      	movs	r2, #3
 8003358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e017      	b.n	8003392 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <RTC_ExitInitMode+0x78>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4a0d      	ldr	r2, [pc, #52]	; (800339c <RTC_ExitInitMode+0x78>)
 8003368:	f023 0320 	bic.w	r3, r3, #32
 800336c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ff80 	bl	8003274 <HAL_RTC_WaitForSynchro>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2203      	movs	r2, #3
 800337e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <RTC_ExitInitMode+0x78>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <RTC_ExitInitMode+0x78>)
 800338c:	f043 0320 	orr.w	r3, r3, #32
 8003390:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40002800 	.word	0x40002800

080033a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e049      	b.n	8003446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f841 	bl	800344e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f000 f9da 	bl	8003798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d001      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e04f      	b.n	800351c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a23      	ldr	r2, [pc, #140]	; (8003528 <HAL_TIM_Base_Start_IT+0xc4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01d      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d018      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_TIM_Base_Start_IT+0xc8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <HAL_TIM_Base_Start_IT+0xcc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <HAL_TIM_Base_Start_IT+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_TIM_Base_Start_IT+0xd4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_TIM_Base_Start_IT+0x76>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_TIM_Base_Start_IT+0xd8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d115      	bne.n	8003506 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_TIM_Base_Start_IT+0xdc>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d015      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0xb4>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f2:	d011      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003504:	e008      	b.n	8003518 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e000      	b.n	800351a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40013400 	.word	0x40013400
 800353c:	40014000 	.word	0x40014000
 8003540:	00010007 	.word	0x00010007

08003544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d020      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0202 	mvn.w	r2, #2
 8003578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8e4 	bl	800375c <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8d6 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f8e7 	bl	8003770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d020      	beq.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0204 	mvn.w	r2, #4
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8be 	bl	800375c <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8b0 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f8c1 	bl	8003770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d020      	beq.n	8003640 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0208 	mvn.w	r2, #8
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2204      	movs	r2, #4
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f898 	bl	800375c <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f88a 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f89b 	bl	8003770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d020      	beq.n	800368c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0210 	mvn.w	r2, #16
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2208      	movs	r2, #8
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f872 	bl	800375c <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f864 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f875 	bl	8003770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0201 	mvn.w	r2, #1
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd fb1c 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00c      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f906 	bl	80038e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8fe 	bl	80038f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f834 	bl	8003784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0220 	mvn.w	r2, #32
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8c6 	bl	80038cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a40      	ldr	r2, [pc, #256]	; (80038ac <TIM_Base_SetConfig+0x114>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d00f      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3d      	ldr	r2, [pc, #244]	; (80038b0 <TIM_Base_SetConfig+0x118>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00b      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a3c      	ldr	r2, [pc, #240]	; (80038b4 <TIM_Base_SetConfig+0x11c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a3b      	ldr	r2, [pc, #236]	; (80038b8 <TIM_Base_SetConfig+0x120>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a3a      	ldr	r2, [pc, #232]	; (80038bc <TIM_Base_SetConfig+0x124>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d108      	bne.n	80037ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <TIM_Base_SetConfig+0x114>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01f      	beq.n	8003832 <TIM_Base_SetConfig+0x9a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f8:	d01b      	beq.n	8003832 <TIM_Base_SetConfig+0x9a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a2c      	ldr	r2, [pc, #176]	; (80038b0 <TIM_Base_SetConfig+0x118>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d017      	beq.n	8003832 <TIM_Base_SetConfig+0x9a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <TIM_Base_SetConfig+0x11c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <TIM_Base_SetConfig+0x9a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <TIM_Base_SetConfig+0x120>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00f      	beq.n	8003832 <TIM_Base_SetConfig+0x9a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a29      	ldr	r2, [pc, #164]	; (80038bc <TIM_Base_SetConfig+0x124>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00b      	beq.n	8003832 <TIM_Base_SetConfig+0x9a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a28      	ldr	r2, [pc, #160]	; (80038c0 <TIM_Base_SetConfig+0x128>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <TIM_Base_SetConfig+0x9a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <TIM_Base_SetConfig+0x12c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_Base_SetConfig+0x9a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a26      	ldr	r2, [pc, #152]	; (80038c8 <TIM_Base_SetConfig+0x130>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d108      	bne.n	8003844 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a10      	ldr	r2, [pc, #64]	; (80038ac <TIM_Base_SetConfig+0x114>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00f      	beq.n	8003890 <TIM_Base_SetConfig+0xf8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a12      	ldr	r2, [pc, #72]	; (80038bc <TIM_Base_SetConfig+0x124>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00b      	beq.n	8003890 <TIM_Base_SetConfig+0xf8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <TIM_Base_SetConfig+0x128>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d007      	beq.n	8003890 <TIM_Base_SetConfig+0xf8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <TIM_Base_SetConfig+0x12c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_Base_SetConfig+0xf8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <TIM_Base_SetConfig+0x130>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d103      	bne.n	8003898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	615a      	str	r2, [r3, #20]
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40000800 	.word	0x40000800
 80038b8:	40000c00 	.word	0x40000c00
 80038bc:	40013400 	.word	0x40013400
 80038c0:	40014000 	.word	0x40014000
 80038c4:	40014400 	.word	0x40014400
 80038c8:	40014800 	.word	0x40014800

080038cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e040      	b.n	800399c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fa4a 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fe36 	bl	80045c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fb7b 	bl	8004050 <UART_SetConfig>
 800395a:	4603      	mov	r3, r0
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e01b      	b.n	800399c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 feb5 	bl	8004704 <UART_CheckIdleState>
 800399a:	4603      	mov	r3, r0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d137      	bne.n	8003a2c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_UART_Receive_IT+0x24>
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e030      	b.n	8003a2e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_UART_Receive_IT+0x94>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d01f      	beq.n	8003a1c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d018      	beq.n	8003a1c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	613b      	str	r3, [r7, #16]
   return(result);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	623b      	str	r3, [r7, #32]
 8003a0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	69f9      	ldr	r1, [r7, #28]
 8003a0e:	6a3a      	ldr	r2, [r7, #32]
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e6      	bne.n	80039ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 ff7e 	bl	8004924 <UART_Start_Receive_IT>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3728      	adds	r7, #40	; 0x28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40008000 	.word	0x40008000

08003a3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b0ba      	sub	sp, #232	; 0xe8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d115      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00f      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 82ae 	beq.w	8003ff6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
      }
      return;
 8003aa2:	e2a8      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8117 	beq.w	8003cdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003aba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003abe:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_UART_IRQHandler+0x298>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 810a 	beq.w	8003cdc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d011      	beq.n	8003af8 <HAL_UART_IRQHandler+0xbc>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d011      	beq.n	8003b28 <HAL_UART_IRQHandler+0xec>
 8003b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2202      	movs	r2, #2
 8003b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1e:	f043 0204 	orr.w	r2, r3, #4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d011      	beq.n	8003b58 <HAL_UART_IRQHandler+0x11c>
 8003b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2204      	movs	r2, #4
 8003b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4e:	f043 0202 	orr.w	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2208      	movs	r2, #8
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8a:	f043 0208 	orr.w	r2, r3, #8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x18a>
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8214 	beq.w	8003ffa <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d005      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04f      	beq.n	8003cbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 ff46 	bl	8004ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d141      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3308      	adds	r3, #8
 8003c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1d9      	bne.n	8003c32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_UART_IRQHandler+0x29c>)
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd fcec 	bl	8001670 <HAL_DMA_Abort_IT>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d017      	beq.n	8003cce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00f      	b.n	8003cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9b8 	bl	8004024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e00b      	b.n	8003cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f9b4 	bl	8004024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e007      	b.n	8003cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f9b0 	bl	8004024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003ccc:	e195      	b.n	8003ffa <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cce:	bf00      	nop
    return;
 8003cd0:	e193      	b.n	8003ffa <HAL_UART_IRQHandler+0x5be>
 8003cd2:	bf00      	nop
 8003cd4:	04000120 	.word	0x04000120
 8003cd8:	08004b79 	.word	0x08004b79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	f040 814e 	bne.w	8003f82 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8147 	beq.w	8003f82 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8140 	beq.w	8003f82 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2210      	movs	r2, #16
 8003d08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	f040 80b8 	bne.w	8003e8a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8167 	beq.w	8003ffe <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f080 815f 	bcs.w	8003ffe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 8086 	bne.w	8003e68 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1da      	bne.n	8003d5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e1      	bne.n	8003da6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3308      	adds	r3, #8
 8003e02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e3      	bne.n	8003de2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e38:	f023 0310 	bic.w	r3, r3, #16
 8003e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e4      	bne.n	8003e28 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd fbc6 	bl	80015f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8d8 	bl	8004038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e88:	e0b9      	b.n	8003ffe <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80ab 	beq.w	8004002 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003eac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a6 	beq.w	8004002 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e4      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	623b      	str	r3, [r7, #32]
   return(result);
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f10:	633a      	str	r2, [r7, #48]	; 0x30
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e3      	bne.n	8003eec <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f023 0310 	bic.w	r3, r3, #16
 8003f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	69b9      	ldr	r1, [r7, #24]
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	617b      	str	r3, [r7, #20]
   return(result);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e4      	bne.n	8003f38 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f85c 	bl	8004038 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f80:	e03f      	b.n	8004002 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00e      	beq.n	8003fac <HAL_UART_IRQHandler+0x570>
 8003f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 ffe3 	bl	8004f70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003faa:	e02d      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01c      	beq.n	8004006 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
    }
    return;
 8003fd4:	e017      	b.n	8004006 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <HAL_UART_IRQHandler+0x5cc>
 8003fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00c      	beq.n	8004008 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fdd8 	bl	8004ba4 <UART_EndTransmit_IT>
    return;
 8003ff4:	e008      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ff6:	bf00      	nop
 8003ff8:	e006      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003ffa:	bf00      	nop
 8003ffc:	e004      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004006:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004008:	37e8      	adds	r7, #232	; 0xe8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop

08004010 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b08a      	sub	sp, #40	; 0x28
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	431a      	orrs	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	431a      	orrs	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4313      	orrs	r3, r2
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4ba4      	ldr	r3, [pc, #656]	; (8004310 <UART_SetConfig+0x2c0>)
 8004080:	4013      	ands	r3, r2
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004088:	430b      	orrs	r3, r1
 800408a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a99      	ldr	r2, [pc, #612]	; (8004314 <UART_SetConfig+0x2c4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b8:	4313      	orrs	r3, r2
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a90      	ldr	r2, [pc, #576]	; (8004318 <UART_SetConfig+0x2c8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d126      	bne.n	8004128 <UART_SetConfig+0xd8>
 80040da:	4b90      	ldr	r3, [pc, #576]	; (800431c <UART_SetConfig+0x2cc>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d81b      	bhi.n	8004120 <UART_SetConfig+0xd0>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <UART_SetConfig+0xa0>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004101 	.word	0x08004101
 80040f4:	08004111 	.word	0x08004111
 80040f8:	08004109 	.word	0x08004109
 80040fc:	08004119 	.word	0x08004119
 8004100:	2301      	movs	r3, #1
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	e116      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004108:	2302      	movs	r3, #2
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410e:	e112      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004110:	2304      	movs	r3, #4
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004116:	e10e      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004118:	2308      	movs	r3, #8
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411e:	e10a      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004120:	2310      	movs	r3, #16
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004126:	e106      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a7c      	ldr	r2, [pc, #496]	; (8004320 <UART_SetConfig+0x2d0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d138      	bne.n	80041a4 <UART_SetConfig+0x154>
 8004132:	4b7a      	ldr	r3, [pc, #488]	; (800431c <UART_SetConfig+0x2cc>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d82d      	bhi.n	800419c <UART_SetConfig+0x14c>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0xf8>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800417d 	.word	0x0800417d
 800414c:	0800419d 	.word	0x0800419d
 8004150:	0800419d 	.word	0x0800419d
 8004154:	0800419d 	.word	0x0800419d
 8004158:	0800418d 	.word	0x0800418d
 800415c:	0800419d 	.word	0x0800419d
 8004160:	0800419d 	.word	0x0800419d
 8004164:	0800419d 	.word	0x0800419d
 8004168:	08004185 	.word	0x08004185
 800416c:	0800419d 	.word	0x0800419d
 8004170:	0800419d 	.word	0x0800419d
 8004174:	0800419d 	.word	0x0800419d
 8004178:	08004195 	.word	0x08004195
 800417c:	2300      	movs	r3, #0
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004182:	e0d8      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004184:	2302      	movs	r3, #2
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418a:	e0d4      	b.n	8004336 <UART_SetConfig+0x2e6>
 800418c:	2304      	movs	r3, #4
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004192:	e0d0      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004194:	2308      	movs	r3, #8
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419a:	e0cc      	b.n	8004336 <UART_SetConfig+0x2e6>
 800419c:	2310      	movs	r3, #16
 800419e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a2:	e0c8      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a5e      	ldr	r2, [pc, #376]	; (8004324 <UART_SetConfig+0x2d4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d125      	bne.n	80041fa <UART_SetConfig+0x1aa>
 80041ae:	4b5b      	ldr	r3, [pc, #364]	; (800431c <UART_SetConfig+0x2cc>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041b8:	2b30      	cmp	r3, #48	; 0x30
 80041ba:	d016      	beq.n	80041ea <UART_SetConfig+0x19a>
 80041bc:	2b30      	cmp	r3, #48	; 0x30
 80041be:	d818      	bhi.n	80041f2 <UART_SetConfig+0x1a2>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d00a      	beq.n	80041da <UART_SetConfig+0x18a>
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d814      	bhi.n	80041f2 <UART_SetConfig+0x1a2>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <UART_SetConfig+0x182>
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d008      	beq.n	80041e2 <UART_SetConfig+0x192>
 80041d0:	e00f      	b.n	80041f2 <UART_SetConfig+0x1a2>
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d8:	e0ad      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041da:	2302      	movs	r3, #2
 80041dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e0:	e0a9      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041e2:	2304      	movs	r3, #4
 80041e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e8:	e0a5      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041ea:	2308      	movs	r3, #8
 80041ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f0:	e0a1      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041f2:	2310      	movs	r3, #16
 80041f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f8:	e09d      	b.n	8004336 <UART_SetConfig+0x2e6>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a4a      	ldr	r2, [pc, #296]	; (8004328 <UART_SetConfig+0x2d8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d125      	bne.n	8004250 <UART_SetConfig+0x200>
 8004204:	4b45      	ldr	r3, [pc, #276]	; (800431c <UART_SetConfig+0x2cc>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800420e:	2bc0      	cmp	r3, #192	; 0xc0
 8004210:	d016      	beq.n	8004240 <UART_SetConfig+0x1f0>
 8004212:	2bc0      	cmp	r3, #192	; 0xc0
 8004214:	d818      	bhi.n	8004248 <UART_SetConfig+0x1f8>
 8004216:	2b80      	cmp	r3, #128	; 0x80
 8004218:	d00a      	beq.n	8004230 <UART_SetConfig+0x1e0>
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d814      	bhi.n	8004248 <UART_SetConfig+0x1f8>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <UART_SetConfig+0x1d8>
 8004222:	2b40      	cmp	r3, #64	; 0x40
 8004224:	d008      	beq.n	8004238 <UART_SetConfig+0x1e8>
 8004226:	e00f      	b.n	8004248 <UART_SetConfig+0x1f8>
 8004228:	2300      	movs	r3, #0
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	e082      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004230:	2302      	movs	r3, #2
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004236:	e07e      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004238:	2304      	movs	r3, #4
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423e:	e07a      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004240:	2308      	movs	r3, #8
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e076      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004248:	2310      	movs	r3, #16
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e072      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a35      	ldr	r2, [pc, #212]	; (800432c <UART_SetConfig+0x2dc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d12a      	bne.n	80042b0 <UART_SetConfig+0x260>
 800425a:	4b30      	ldr	r3, [pc, #192]	; (800431c <UART_SetConfig+0x2cc>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004268:	d01a      	beq.n	80042a0 <UART_SetConfig+0x250>
 800426a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426e:	d81b      	bhi.n	80042a8 <UART_SetConfig+0x258>
 8004270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004274:	d00c      	beq.n	8004290 <UART_SetConfig+0x240>
 8004276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427a:	d815      	bhi.n	80042a8 <UART_SetConfig+0x258>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <UART_SetConfig+0x238>
 8004280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004284:	d008      	beq.n	8004298 <UART_SetConfig+0x248>
 8004286:	e00f      	b.n	80042a8 <UART_SetConfig+0x258>
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e052      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004290:	2302      	movs	r3, #2
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e04e      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004298:	2304      	movs	r3, #4
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e04a      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042a0:	2308      	movs	r3, #8
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e046      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042a8:	2310      	movs	r3, #16
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e042      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a17      	ldr	r2, [pc, #92]	; (8004314 <UART_SetConfig+0x2c4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d13a      	bne.n	8004330 <UART_SetConfig+0x2e0>
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <UART_SetConfig+0x2cc>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c8:	d01a      	beq.n	8004300 <UART_SetConfig+0x2b0>
 80042ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ce:	d81b      	bhi.n	8004308 <UART_SetConfig+0x2b8>
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d4:	d00c      	beq.n	80042f0 <UART_SetConfig+0x2a0>
 80042d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042da:	d815      	bhi.n	8004308 <UART_SetConfig+0x2b8>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <UART_SetConfig+0x298>
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d008      	beq.n	80042f8 <UART_SetConfig+0x2a8>
 80042e6:	e00f      	b.n	8004308 <UART_SetConfig+0x2b8>
 80042e8:	2300      	movs	r3, #0
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e022      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042f0:	2302      	movs	r3, #2
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e01e      	b.n	8004336 <UART_SetConfig+0x2e6>
 80042f8:	2304      	movs	r3, #4
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e01a      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004300:	2308      	movs	r3, #8
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e016      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004308:	2310      	movs	r3, #16
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e012      	b.n	8004336 <UART_SetConfig+0x2e6>
 8004310:	efff69f3 	.word	0xefff69f3
 8004314:	40008000 	.word	0x40008000
 8004318:	40013800 	.word	0x40013800
 800431c:	40021000 	.word	0x40021000
 8004320:	40004400 	.word	0x40004400
 8004324:	40004800 	.word	0x40004800
 8004328:	40004c00 	.word	0x40004c00
 800432c:	40005000 	.word	0x40005000
 8004330:	2310      	movs	r3, #16
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a9f      	ldr	r2, [pc, #636]	; (80045b8 <UART_SetConfig+0x568>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d17a      	bne.n	8004436 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004344:	2b08      	cmp	r3, #8
 8004346:	d824      	bhi.n	8004392 <UART_SetConfig+0x342>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0x300>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004375 	.word	0x08004375
 8004354:	08004393 	.word	0x08004393
 8004358:	0800437d 	.word	0x0800437d
 800435c:	08004393 	.word	0x08004393
 8004360:	08004383 	.word	0x08004383
 8004364:	08004393 	.word	0x08004393
 8004368:	08004393 	.word	0x08004393
 800436c:	08004393 	.word	0x08004393
 8004370:	0800438b 	.word	0x0800438b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004374:	f7fe f97c 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8004378:	61f8      	str	r0, [r7, #28]
        break;
 800437a:	e010      	b.n	800439e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800437c:	4b8f      	ldr	r3, [pc, #572]	; (80045bc <UART_SetConfig+0x56c>)
 800437e:	61fb      	str	r3, [r7, #28]
        break;
 8004380:	e00d      	b.n	800439e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004382:	f7fe f8dd 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 8004386:	61f8      	str	r0, [r7, #28]
        break;
 8004388:	e009      	b.n	800439e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438e:	61fb      	str	r3, [r7, #28]
        break;
 8004390:	e005      	b.n	800439e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800439c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80fb 	beq.w	800459c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d305      	bcc.n	80043c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d903      	bls.n	80043ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043c8:	e0e8      	b.n	800459c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	2200      	movs	r2, #0
 80043ce:	461c      	mov	r4, r3
 80043d0:	4615      	mov	r5, r2
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	022b      	lsls	r3, r5, #8
 80043dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043e0:	0222      	lsls	r2, r4, #8
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	6849      	ldr	r1, [r1, #4]
 80043e6:	0849      	lsrs	r1, r1, #1
 80043e8:	2000      	movs	r0, #0
 80043ea:	4688      	mov	r8, r1
 80043ec:	4681      	mov	r9, r0
 80043ee:	eb12 0a08 	adds.w	sl, r2, r8
 80043f2:	eb43 0b09 	adc.w	fp, r3, r9
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004404:	4650      	mov	r0, sl
 8004406:	4659      	mov	r1, fp
 8004408:	f7fb ff3e 	bl	8000288 <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4613      	mov	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441a:	d308      	bcc.n	800442e <UART_SetConfig+0x3de>
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004422:	d204      	bcs.n	800442e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	60da      	str	r2, [r3, #12]
 800442c:	e0b6      	b.n	800459c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004434:	e0b2      	b.n	800459c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443e:	d15e      	bne.n	80044fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004444:	2b08      	cmp	r3, #8
 8004446:	d828      	bhi.n	800449a <UART_SetConfig+0x44a>
 8004448:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <UART_SetConfig+0x400>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004475 	.word	0x08004475
 8004454:	0800447d 	.word	0x0800447d
 8004458:	08004485 	.word	0x08004485
 800445c:	0800449b 	.word	0x0800449b
 8004460:	0800448b 	.word	0x0800448b
 8004464:	0800449b 	.word	0x0800449b
 8004468:	0800449b 	.word	0x0800449b
 800446c:	0800449b 	.word	0x0800449b
 8004470:	08004493 	.word	0x08004493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004474:	f7fe f8fc 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8004478:	61f8      	str	r0, [r7, #28]
        break;
 800447a:	e014      	b.n	80044a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800447c:	f7fe f90e 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 8004480:	61f8      	str	r0, [r7, #28]
        break;
 8004482:	e010      	b.n	80044a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004484:	4b4d      	ldr	r3, [pc, #308]	; (80045bc <UART_SetConfig+0x56c>)
 8004486:	61fb      	str	r3, [r7, #28]
        break;
 8004488:	e00d      	b.n	80044a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448a:	f7fe f859 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 800448e:	61f8      	str	r0, [r7, #28]
        break;
 8004490:	e009      	b.n	80044a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004496:	61fb      	str	r3, [r7, #28]
        break;
 8004498:	e005      	b.n	80044a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d077      	beq.n	800459c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	005a      	lsls	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b0f      	cmp	r3, #15
 80044c6:	d916      	bls.n	80044f6 <UART_SetConfig+0x4a6>
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ce:	d212      	bcs.n	80044f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f023 030f 	bic.w	r3, r3, #15
 80044d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	8afb      	ldrh	r3, [r7, #22]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	8afa      	ldrh	r2, [r7, #22]
 80044f2:	60da      	str	r2, [r3, #12]
 80044f4:	e052      	b.n	800459c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044fc:	e04e      	b.n	800459c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004502:	2b08      	cmp	r3, #8
 8004504:	d827      	bhi.n	8004556 <UART_SetConfig+0x506>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x4bc>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004531 	.word	0x08004531
 8004510:	08004539 	.word	0x08004539
 8004514:	08004541 	.word	0x08004541
 8004518:	08004557 	.word	0x08004557
 800451c:	08004547 	.word	0x08004547
 8004520:	08004557 	.word	0x08004557
 8004524:	08004557 	.word	0x08004557
 8004528:	08004557 	.word	0x08004557
 800452c:	0800454f 	.word	0x0800454f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe f89e 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8004534:	61f8      	str	r0, [r7, #28]
        break;
 8004536:	e014      	b.n	8004562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7fe f8b0 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 800453c:	61f8      	str	r0, [r7, #28]
        break;
 800453e:	e010      	b.n	8004562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <UART_SetConfig+0x56c>)
 8004542:	61fb      	str	r3, [r7, #28]
        break;
 8004544:	e00d      	b.n	8004562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004546:	f7fd fffb 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 800454a:	61f8      	str	r0, [r7, #28]
        break;
 800454c:	e009      	b.n	8004562 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004552:	61fb      	str	r3, [r7, #28]
        break;
 8004554:	e005      	b.n	8004562 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004560:	bf00      	nop
    }

    if (pclk != 0U)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d019      	beq.n	800459c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	085a      	lsrs	r2, r3, #1
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	441a      	add	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b0f      	cmp	r3, #15
 8004580:	d909      	bls.n	8004596 <UART_SetConfig+0x546>
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d205      	bcs.n	8004596 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
 8004594:	e002      	b.n	800459c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3728      	adds	r7, #40	; 0x28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b6:	bf00      	nop
 80045b8:	40008000 	.word	0x40008000
 80045bc:	00f42400 	.word	0x00f42400

080045c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01a      	beq.n	80046d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046be:	d10a      	bne.n	80046d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b098      	sub	sp, #96	; 0x60
 8004708:	af02      	add	r7, sp, #8
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004714:	f7fc fe80 	bl	8001418 <HAL_GetTick>
 8004718:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d12e      	bne.n	8004786 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f88c 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d021      	beq.n	8004786 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004756:	653b      	str	r3, [r7, #80]	; 0x50
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800476e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e6      	bne.n	8004742 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e062      	b.n	800484c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b04      	cmp	r3, #4
 8004792:	d149      	bne.n	8004828 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479c:	2200      	movs	r2, #0
 800479e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f856 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d03c      	beq.n	8004828 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	623b      	str	r3, [r7, #32]
   return(result);
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30
 80047ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e6      	bne.n	80047ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004800:	61fa      	str	r2, [r7, #28]
 8004802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	617b      	str	r3, [r7, #20]
   return(result);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e011      	b.n	800484c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3758      	adds	r7, #88	; 0x58
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004864:	e049      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d045      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486e:	f7fc fdd3 	bl	8001418 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	429a      	cmp	r2, r3
 800487c:	d302      	bcc.n	8004884 <UART_WaitOnFlagUntilTimeout+0x30>
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e048      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d031      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d110      	bne.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2208      	movs	r2, #8
 80048aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f8ff 	bl	8004ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2208      	movs	r2, #8
 80048b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e029      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d4:	d111      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f8e5 	bl	8004ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e00f      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	bf0c      	ite	eq
 800490a:	2301      	moveq	r3, #1
 800490c:	2300      	movne	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	429a      	cmp	r2, r3
 8004916:	d0a6      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004924:	b480      	push	{r7}
 8004926:	b097      	sub	sp, #92	; 0x5c
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d10e      	bne.n	8004976 <UART_Start_Receive_IT+0x52>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <UART_Start_Receive_IT+0x48>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004966:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800496a:	e02d      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	22ff      	movs	r2, #255	; 0xff
 8004970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004974:	e028      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <UART_Start_Receive_IT+0x76>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <UART_Start_Receive_IT+0x6c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	22ff      	movs	r2, #255	; 0xff
 800498a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800498e:	e01b      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	227f      	movs	r2, #127	; 0x7f
 8004994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004998:	e016      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a2:	d10d      	bne.n	80049c0 <UART_Start_Receive_IT+0x9c>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <UART_Start_Receive_IT+0x92>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	227f      	movs	r2, #127	; 0x7f
 80049b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049b4:	e008      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	223f      	movs	r2, #63	; 0x3f
 80049ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049be:	e003      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2222      	movs	r2, #34	; 0x22
 80049d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	657b      	str	r3, [r7, #84]	; 0x54
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80049fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e5      	bne.n	80049d8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a14:	d107      	bne.n	8004a26 <UART_Start_Receive_IT+0x102>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <UART_Start_Receive_IT+0x184>)
 8004a22:	669a      	str	r2, [r3, #104]	; 0x68
 8004a24:	e002      	b.n	8004a2c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a20      	ldr	r2, [pc, #128]	; (8004aac <UART_Start_Receive_IT+0x188>)
 8004a2a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d019      	beq.n	8004a68 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
 8004a54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e6      	bne.n	8004a34 <UART_Start_Receive_IT+0x110>
 8004a66:	e018      	b.n	8004a9a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	613b      	str	r3, [r7, #16]
   return(result);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f043 0320 	orr.w	r3, r3, #32
 8004a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	69f9      	ldr	r1, [r7, #28]
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e6      	bne.n	8004a68 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	375c      	adds	r7, #92	; 0x5c
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	08004db5 	.word	0x08004db5
 8004aac:	08004bf9 	.word	0x08004bf9

08004ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b095      	sub	sp, #84	; 0x54
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e6      	bne.n	8004ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3308      	adds	r3, #8
 8004b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d118      	bne.n	8004b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 0310 	bic.w	r3, r3, #16
 8004b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6979      	ldr	r1, [r7, #20]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	613b      	str	r3, [r7, #16]
   return(result);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e6      	bne.n	8004b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b6c:	bf00      	nop
 8004b6e:	3754      	adds	r7, #84	; 0x54
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fa44 	bl	8004024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6979      	ldr	r1, [r7, #20]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e6      	bne.n	8004bac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fa10 	bl	8004010 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf0:	bf00      	nop
 8004bf2:	3720      	adds	r7, #32
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b09c      	sub	sp, #112	; 0x70
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c06:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c10:	2b22      	cmp	r3, #34	; 0x22
 8004c12:	f040 80be 	bne.w	8004d92 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004c24:	b2d9      	uxtb	r1, r3
 8004c26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	400a      	ands	r2, r1
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 80a3 	bne.w	8004da6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cb2:	647a      	str	r2, [r7, #68]	; 0x44
 8004cb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a34      	ldr	r2, [pc, #208]	; (8004db0 <UART_RxISR_8BIT+0x1b8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d01f      	beq.n	8004d24 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d018      	beq.n	8004d24 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d06:	663b      	str	r3, [r7, #96]	; 0x60
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d10:	633b      	str	r3, [r7, #48]	; 0x30
 8004d12:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e6      	bne.n	8004cf2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d12e      	bne.n	8004d8a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0310 	bic.w	r3, r3, #16
 8004d46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d103      	bne.n	8004d7a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2210      	movs	r2, #16
 8004d78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff f958 	bl	8004038 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d88:	e00d      	b.n	8004da6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fb fee2 	bl	8000b54 <HAL_UART_RxCpltCallback>
}
 8004d90:	e009      	b.n	8004da6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	8b1b      	ldrh	r3, [r3, #24]
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0208 	orr.w	r2, r2, #8
 8004da2:	b292      	uxth	r2, r2
 8004da4:	831a      	strh	r2, [r3, #24]
}
 8004da6:	bf00      	nop
 8004da8:	3770      	adds	r7, #112	; 0x70
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40008000 	.word	0x40008000

08004db4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b09c      	sub	sp, #112	; 0x70
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dc2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dcc:	2b22      	cmp	r3, #34	; 0x22
 8004dce:	f040 80be 	bne.w	8004f4e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004de2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004de6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004dea:	4013      	ands	r3, r2
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004df0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	1c9a      	adds	r2, r3, #2
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 80a3 	bne.w	8004f62 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e30:	667b      	str	r3, [r7, #100]	; 0x64
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e3c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e6      	bne.n	8004e1c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3308      	adds	r3, #8
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	663b      	str	r3, [r7, #96]	; 0x60
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e6e:	643a      	str	r2, [r7, #64]	; 0x40
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a34      	ldr	r2, [pc, #208]	; (8004f6c <UART_RxISR_16BIT+0x1b8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d01f      	beq.n	8004ee0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ece:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e6      	bne.n	8004eae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d12e      	bne.n	8004f46 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0310 	bic.w	r3, r3, #16
 8004f02:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e6      	bne.n	8004eee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d103      	bne.n	8004f36 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2210      	movs	r2, #16
 8004f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff f87a 	bl	8004038 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f44:	e00d      	b.n	8004f62 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fb fe04 	bl	8000b54 <HAL_UART_RxCpltCallback>
}
 8004f4c:	e009      	b.n	8004f62 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	8b1b      	ldrh	r3, [r3, #24]
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0208 	orr.w	r2, r2, #8
 8004f5e:	b292      	uxth	r2, r2
 8004f60:	831a      	strh	r2, [r3, #24]
}
 8004f62:	bf00      	nop
 8004f64:	3770      	adds	r7, #112	; 0x70
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40008000 	.word	0x40008000

08004f70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f103 0208 	add.w	r2, r3, #8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f103 0208 	add.w	r2, r3, #8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f103 0208 	add.w	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	601a      	str	r2, [r3, #0]
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d103      	bne.n	8005046 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e00c      	b.n	8005060 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3308      	adds	r3, #8
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e002      	b.n	8005054 <vListInsert+0x2e>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	d2f6      	bcs.n	800504e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	601a      	str	r2, [r3, #0]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6892      	ldr	r2, [r2, #8]
 80050ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6852      	ldr	r2, [r2, #4]
 80050b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d103      	bne.n	80050cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80050f6:	2301      	movs	r3, #1
 80050f8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xQueueGenericReset+0x2e>
        __asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	60fb      	str	r3, [r7, #12]
    }
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d05d      	beq.n	80051dc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005124:	2b00      	cmp	r3, #0
 8005126:	d059      	beq.n	80051dc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005130:	2100      	movs	r1, #0
 8005132:	fba3 2302 	umull	r2, r3, r3, r2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d000      	beq.n	800513c <xQueueGenericReset+0x50>
 800513a:	2101      	movs	r1, #1
 800513c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800513e:	2b00      	cmp	r3, #0
 8005140:	d14c      	bne.n	80051dc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8005142:	f003 f8ef 	bl	8008324 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	6939      	ldr	r1, [r7, #16]
 8005150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	441a      	add	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2200      	movs	r2, #0
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005172:	3b01      	subs	r3, #1
 8005174:	6939      	ldr	r1, [r7, #16]
 8005176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	441a      	add	r2, r3
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	22ff      	movs	r2, #255	; 0xff
 8005186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	22ff      	movs	r2, #255	; 0xff
 800518e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d114      	bne.n	80051c2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01a      	beq.n	80051d6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3310      	adds	r3, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 fd21 	bl	8006bec <xTaskRemoveFromEventList>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d012      	beq.n	80051d6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80051b0:	4b15      	ldr	r3, [pc, #84]	; (8005208 <xQueueGenericReset+0x11c>)
 80051b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	e009      	b.n	80051d6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	3310      	adds	r3, #16
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fedc 	bl	8004f84 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	3324      	adds	r3, #36	; 0x24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fed7 	bl	8004f84 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80051d6:	f003 f8d5 	bl	8008384 <vPortExitCritical>
 80051da:	e001      	b.n	80051e0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <xQueueGenericReset+0x110>
        __asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	60bb      	str	r3, [r7, #8]
    }
 80051f8:	bf00      	nop
 80051fa:	e7fe      	b.n	80051fa <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80051fc:	697b      	ldr	r3, [r7, #20]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800520c:	b580      	push	{r7, lr}
 800520e:	b08c      	sub	sp, #48	; 0x30
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	627b      	str	r3, [r7, #36]	; 0x24

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xQueueGenericCreateStatic+0x2e>
        __asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	623b      	str	r3, [r7, #32]
    }
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d030      	beq.n	80052a2 <xQueueGenericCreateStatic+0x96>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d02d      	beq.n	80052a2 <xQueueGenericCreateStatic+0x96>
            ( pxStaticQueue != NULL ) &&
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <xQueueGenericCreateStatic+0x46>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d027      	beq.n	80052a2 <xQueueGenericCreateStatic+0x96>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <xQueueGenericCreateStatic+0x52>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d121      	bne.n	80052a2 <xQueueGenericCreateStatic+0x96>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800525e:	2348      	movs	r3, #72	; 0x48
 8005260:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b48      	cmp	r3, #72	; 0x48
 8005266:	d00a      	beq.n	800527e <xQueueGenericCreateStatic+0x72>
        __asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61fb      	str	r3, [r7, #28]
    }
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xQueueGenericCreateStatic+0x70>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800527e:	697b      	ldr	r3, [r7, #20]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800528c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f866 	bl	800536c <prvInitialiseNewQueue>
 80052a0:	e00d      	b.n	80052be <xQueueGenericCreateStatic+0xb2>
        }
        else
        {
            configASSERT( pxNewQueue );
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xQueueGenericCreateStatic+0xb2>
        __asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	61bb      	str	r3, [r7, #24]
    }
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xQueueGenericCreateStatic+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80052c0:	4618      	mov	r0, r3
 80052c2:	3728      	adds	r7, #40	; 0x28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d032      	beq.n	8005346 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80052e0:	2100      	movs	r1, #0
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d000      	beq.n	80052f0 <xQueueGenericCreate+0x28>
 80052ee:	2101      	movs	r1, #1
 80052f0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d127      	bne.n	8005346 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80052fe:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8005302:	d820      	bhi.n	8005346 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	fb02 f303 	mul.w	r3, r2, r3
 800530c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	3348      	adds	r3, #72	; 0x48
 8005312:	4618      	mov	r0, r3
 8005314:	f003 f932 	bl	800857c <pvPortMalloc>
 8005318:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d020      	beq.n	8005362 <xQueueGenericCreate+0x9a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3348      	adds	r3, #72	; 0x48
 8005328:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005332:	79fa      	ldrb	r2, [r7, #7]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f814 	bl	800536c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005344:	e00d      	b.n	8005362 <xQueueGenericCreate+0x9a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <xQueueGenericCreate+0x9a>
        __asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	613b      	str	r3, [r7, #16]
    }
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005362:	69fb      	ldr	r3, [r7, #28]
    }
 8005364:	4618      	mov	r0, r3
 8005366:	3720      	adds	r7, #32
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d103      	bne.n	8005388 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e002      	b.n	800538e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800539a:	2101      	movs	r1, #1
 800539c:	69b8      	ldr	r0, [r7, #24]
 800539e:	f7ff fea5 	bl	80050ec <xQueueGenericReset>
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	2073      	movs	r0, #115	; 0x73
 80053aa:	f004 f92f 	bl	800960c <SEGGER_SYSVIEW_RecordU32x3>
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b090      	sub	sp, #64	; 0x40
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053c6:	2300      	movs	r3, #0
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueGenericSend+0x32>
        __asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d103      	bne.n	80053f8 <xQueueGenericSend+0x40>
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <xQueueGenericSend+0x44>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <xQueueGenericSend+0x46>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xQueueGenericSend+0x60>
        __asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d103      	bne.n	8005426 <xQueueGenericSend+0x6e>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <xQueueGenericSend+0x72>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueGenericSend+0x74>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueGenericSend+0x8e>
        __asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	623b      	str	r3, [r7, #32]
    }
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005446:	f001 fe0b 	bl	8007060 <xTaskGetSchedulerState>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <xQueueGenericSend+0x9e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <xQueueGenericSend+0xa2>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <xQueueGenericSend+0xa4>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xQueueGenericSend+0xbe>
        __asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	61fb      	str	r3, [r7, #28]
    }
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005476:	f002 ff55 	bl	8008324 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	429a      	cmp	r2, r3
 8005484:	d302      	bcc.n	800548c <xQueueGenericSend+0xd4>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d136      	bne.n	80054fa <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	4618      	mov	r0, r3
 8005490:	f004 fe96 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	460b      	mov	r3, r1
 800549e:	4601      	mov	r1, r0
 80054a0:	205a      	movs	r0, #90	; 0x5a
 80054a2:	f004 f929 	bl	80096f8 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ac:	f000 fb53 	bl	8005b56 <prvCopyDataToQueue>
 80054b0:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d010      	beq.n	80054dc <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	3324      	adds	r3, #36	; 0x24
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fb94 	bl	8006bec <xTaskRemoveFromEventList>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d013      	beq.n	80054f2 <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80054ca:	4b4d      	ldr	r3, [pc, #308]	; (8005600 <xQueueGenericSend+0x248>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	e00a      	b.n	80054f2 <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80054e2:	4b47      	ldr	r3, [pc, #284]	; (8005600 <xQueueGenericSend+0x248>)
 80054e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80054f2:	f002 ff47 	bl	8008384 <vPortExitCritical>
                return pdPASS;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e07d      	b.n	80055f6 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d110      	bne.n	8005522 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005500:	f002 ff40 	bl	8008384 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	4618      	mov	r0, r3
 8005508:	f004 fe5a 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	460b      	mov	r3, r1
 8005516:	4601      	mov	r1, r0
 8005518:	205a      	movs	r0, #90	; 0x5a
 800551a:	f004 f8ed 	bl	80096f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800551e:	2300      	movs	r3, #0
 8005520:	e069      	b.n	80055f6 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005528:	f107 0314 	add.w	r3, r7, #20
 800552c:	4618      	mov	r0, r3
 800552e:	f001 fc35 	bl	8006d9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005532:	2301      	movs	r3, #1
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005536:	f002 ff25 	bl	8008384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800553a:	f000 ff4b 	bl	80063d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800553e:	f002 fef1 	bl	8008324 <vPortEnterCritical>
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005548:	b25b      	sxtb	r3, r3
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554e:	d103      	bne.n	8005558 <xQueueGenericSend+0x1a0>
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555e:	b25b      	sxtb	r3, r3
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d103      	bne.n	800556e <xQueueGenericSend+0x1b6>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800556e:	f002 ff09 	bl	8008384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005572:	1d3a      	adds	r2, r7, #4
 8005574:	f107 0314 	add.w	r3, r7, #20
 8005578:	4611      	mov	r1, r2
 800557a:	4618      	mov	r0, r3
 800557c:	f001 fc24 	bl	8006dc8 <xTaskCheckForTimeOut>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d124      	bne.n	80055d0 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005588:	f000 fbdd 	bl	8005d46 <prvIsQueueFull>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d018      	beq.n	80055c4 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	3310      	adds	r3, #16
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f001 faba 	bl	8006b14 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80055a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055a2:	f000 fb68 	bl	8005c76 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80055a6:	f000 ff23 	bl	80063f0 <xTaskResumeAll>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f47f af62 	bne.w	8005476 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80055b2:	4b13      	ldr	r3, [pc, #76]	; (8005600 <xQueueGenericSend+0x248>)
 80055b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	e758      	b.n	8005476 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80055c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055c6:	f000 fb56 	bl	8005c76 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80055ca:	f000 ff11 	bl	80063f0 <xTaskResumeAll>
 80055ce:	e752      	b.n	8005476 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80055d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d2:	f000 fb50 	bl	8005c76 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80055d6:	f000 ff0b 	bl	80063f0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	4618      	mov	r0, r3
 80055de:	f004 fdef 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	460b      	mov	r3, r1
 80055ec:	4601      	mov	r1, r0
 80055ee:	205a      	movs	r0, #90	; 0x5a
 80055f0:	f004 f882 	bl	80096f8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80055f4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3738      	adds	r7, #56	; 0x38
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	e000ed04 	.word	0xe000ed04

08005604 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b092      	sub	sp, #72	; 0x48
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8005616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d103      	bne.n	8005640 <xQueueGenericSendFromISR+0x3c>
 8005638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <xQueueGenericSendFromISR+0x40>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <xQueueGenericSendFromISR+0x42>
 8005644:	2300      	movs	r3, #0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10a      	bne.n	8005660 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800565c:	bf00      	nop
 800565e:	e7fe      	b.n	800565e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d103      	bne.n	800566e <xQueueGenericSendFromISR+0x6a>
 8005666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <xQueueGenericSendFromISR+0x6e>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <xQueueGenericSendFromISR+0x70>
 8005672:	2300      	movs	r3, #0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800568a:	bf00      	nop
 800568c:	e7fe      	b.n	800568c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800568e:	f002 ff35 	bl	80084fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005692:	f3ef 8211 	mrs	r2, BASEPRI
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	623a      	str	r2, [r7, #32]
 80056a8:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80056aa:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d302      	bcc.n	80056c0 <xQueueGenericSendFromISR+0xbc>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d150      	bne.n	8005762 <xQueueGenericSendFromISR+0x15e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80056d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d2:	4618      	mov	r0, r3
 80056d4:	f004 fd74 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 80056d8:	4601      	mov	r1, r0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	461a      	mov	r2, r3
 80056de:	2060      	movs	r0, #96	; 0x60
 80056e0:	f003 ff3a 	bl	8009558 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80056ea:	f000 fa34 	bl	8005b56 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80056ee:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80056f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f6:	d112      	bne.n	800571e <xQueueGenericSendFromISR+0x11a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02d      	beq.n	800575c <xQueueGenericSendFromISR+0x158>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005702:	3324      	adds	r3, #36	; 0x24
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fa71 	bl	8006bec <xTaskRemoveFromEventList>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d025      	beq.n	800575c <xQueueGenericSendFromISR+0x158>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d022      	beq.n	800575c <xQueueGenericSendFromISR+0x158>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e01e      	b.n	800575c <xQueueGenericSendFromISR+0x158>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800571e:	f000 ff89 	bl	8006634 <uxTaskGetNumberOfTasks>
 8005722:	6338      	str	r0, [r7, #48]	; 0x30
 8005724:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572a:	429a      	cmp	r2, r3
 800572c:	d916      	bls.n	800575c <xQueueGenericSendFromISR+0x158>
 800572e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005732:	2b7f      	cmp	r3, #127	; 0x7f
 8005734:	d10a      	bne.n	800574c <xQueueGenericSendFromISR+0x148>
        __asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61bb      	str	r3, [r7, #24]
    }
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <xQueueGenericSendFromISR+0x146>
 800574c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005750:	3301      	adds	r3, #1
 8005752:	b2db      	uxtb	r3, r3
 8005754:	b25a      	sxtb	r2, r3
 8005756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800575c:	2301      	movs	r3, #1
 800575e:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8005760:	e00b      	b.n	800577a <xQueueGenericSendFromISR+0x176>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005764:	4618      	mov	r0, r3
 8005766:	f004 fd2b 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 800576a:	4601      	mov	r1, r0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	461a      	mov	r2, r3
 8005770:	2060      	movs	r0, #96	; 0x60
 8005772:	f003 fef1 	bl	8009558 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8005776:	2300      	movs	r3, #0
 8005778:	647b      	str	r3, [r7, #68]	; 0x44
 800577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005784:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005788:	4618      	mov	r0, r3
 800578a:	3748      	adds	r7, #72	; 0x48
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b08f      	sub	sp, #60	; 0x3c
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800579c:	2300      	movs	r3, #0
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <xQueueReceive+0x30>
        __asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	623b      	str	r3, [r7, #32]
    }
 80057bc:	bf00      	nop
 80057be:	e7fe      	b.n	80057be <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <xQueueReceive+0x3e>
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <xQueueReceive+0x42>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <xQueueReceive+0x44>
 80057d2:	2300      	movs	r3, #0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <xQueueReceive+0x5e>
        __asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	61fb      	str	r3, [r7, #28]
    }
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ee:	f001 fc37 	bl	8007060 <xTaskGetSchedulerState>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d102      	bne.n	80057fe <xQueueReceive+0x6e>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <xQueueReceive+0x72>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <xQueueReceive+0x74>
 8005802:	2300      	movs	r3, #0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <xQueueReceive+0x8e>
        __asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	61bb      	str	r3, [r7, #24]
    }
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800581e:	f002 fd81 	bl	8008324 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d02f      	beq.n	800588e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005832:	f000 f9fa 	bl	8005c2a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	4618      	mov	r0, r3
 800583a:	f004 fcc1 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 800583e:	4604      	mov	r4, r0
 8005840:	2000      	movs	r0, #0
 8005842:	f004 fcbd 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 8005846:	4602      	mov	r2, r0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2101      	movs	r1, #1
 800584c:	9100      	str	r1, [sp, #0]
 800584e:	4621      	mov	r1, r4
 8005850:	205c      	movs	r0, #92	; 0x5c
 8005852:	f003 ff51 	bl	80096f8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00f      	beq.n	8005886 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	3310      	adds	r3, #16
 800586a:	4618      	mov	r0, r3
 800586c:	f001 f9be 	bl	8006bec <xTaskRemoveFromEventList>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005876:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <xQueueReceive+0x21c>)
 8005878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005886:	f002 fd7d 	bl	8008384 <vPortExitCritical>
                return pdPASS;
 800588a:	2301      	movs	r3, #1
 800588c:	e08a      	b.n	80059a4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d113      	bne.n	80058bc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005894:	f002 fd76 	bl	8008384 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	4618      	mov	r0, r3
 800589c:	f004 fc90 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 80058a0:	4604      	mov	r4, r0
 80058a2:	2000      	movs	r0, #0
 80058a4:	f004 fc8c 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 80058a8:	4602      	mov	r2, r0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2101      	movs	r1, #1
 80058ae:	9100      	str	r1, [sp, #0]
 80058b0:	4621      	mov	r1, r4
 80058b2:	205c      	movs	r0, #92	; 0x5c
 80058b4:	f003 ff20 	bl	80096f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e073      	b.n	80059a4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80058c2:	f107 0310 	add.w	r3, r7, #16
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 fa68 	bl	8006d9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80058d0:	f002 fd58 	bl	8008384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80058d4:	f000 fd7e 	bl	80063d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80058d8:	f002 fd24 	bl	8008324 <vPortEnterCritical>
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e2:	b25b      	sxtb	r3, r3
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d103      	bne.n	80058f2 <xQueueReceive+0x162>
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f8:	b25b      	sxtb	r3, r3
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d103      	bne.n	8005908 <xQueueReceive+0x178>
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005908:	f002 fd3c 	bl	8008384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800590c:	1d3a      	adds	r2, r7, #4
 800590e:	f107 0310 	add.w	r3, r7, #16
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f001 fa57 	bl	8006dc8 <xTaskCheckForTimeOut>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d124      	bne.n	800596a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005922:	f000 f9fa 	bl	8005d1a <prvIsQueueEmpty>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d018      	beq.n	800595e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	3324      	adds	r3, #36	; 0x24
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	4611      	mov	r1, r2
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f8ed 	bl	8006b14 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800593a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800593c:	f000 f99b 	bl	8005c76 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005940:	f000 fd56 	bl	80063f0 <xTaskResumeAll>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	f47f af69 	bne.w	800581e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800594c:	4b17      	ldr	r3, [pc, #92]	; (80059ac <xQueueReceive+0x21c>)
 800594e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	e75f      	b.n	800581e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800595e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005960:	f000 f989 	bl	8005c76 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005964:	f000 fd44 	bl	80063f0 <xTaskResumeAll>
 8005968:	e759      	b.n	800581e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800596a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596c:	f000 f983 	bl	8005c76 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005970:	f000 fd3e 	bl	80063f0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005976:	f000 f9d0 	bl	8005d1a <prvIsQueueEmpty>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	f43f af4e 	beq.w	800581e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	4618      	mov	r0, r3
 8005986:	f004 fc1b 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 800598a:	4604      	mov	r4, r0
 800598c:	2000      	movs	r0, #0
 800598e:	f004 fc17 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 8005992:	4602      	mov	r2, r0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2101      	movs	r1, #1
 8005998:	9100      	str	r1, [sp, #0]
 800599a:	4621      	mov	r1, r4
 800599c:	205c      	movs	r0, #92	; 0x5c
 800599e:	f003 feab 	bl	80096f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80059a2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3734      	adds	r7, #52	; 0x34
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd90      	pop	{r4, r7, pc}
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b091      	sub	sp, #68	; 0x44
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80059d8:	bf00      	nop
 80059da:	e7fe      	b.n	80059da <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <xQueueReceiveFromISR+0x3a>
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <xQueueReceiveFromISR+0x3e>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <xQueueReceiveFromISR+0x40>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	623b      	str	r3, [r7, #32]
    }
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a0a:	f002 fd77 	bl	80084fc <vPortValidateInterruptPriority>
        __asm volatile
 8005a0e:	f3ef 8211 	mrs	r2, BASEPRI
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	61fa      	str	r2, [r7, #28]
 8005a24:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8005a26:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d055      	beq.n	8005ae2 <xQueueReceiveFromISR+0x132>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8005a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a42:	4618      	mov	r0, r3
 8005a44:	f004 fbbc 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 8005a48:	4604      	mov	r4, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f004 fbb7 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 8005a52:	4602      	mov	r2, r0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4621      	mov	r1, r4
 8005a58:	2062      	movs	r0, #98	; 0x62
 8005a5a:	f003 fdd7 	bl	800960c <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a62:	f000 f8e2 	bl	8005c2a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	1e5a      	subs	r2, r3, #1
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005a6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d112      	bne.n	8005a9e <xQueueReceiveFromISR+0xee>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d02d      	beq.n	8005adc <xQueueReceiveFromISR+0x12c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	3310      	adds	r3, #16
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f8b1 	bl	8006bec <xTaskRemoveFromEventList>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d025      	beq.n	8005adc <xQueueReceiveFromISR+0x12c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d022      	beq.n	8005adc <xQueueReceiveFromISR+0x12c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e01e      	b.n	8005adc <xQueueReceiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8005a9e:	f000 fdc9 	bl	8006634 <uxTaskGetNumberOfTasks>
 8005aa2:	62b8      	str	r0, [r7, #40]	; 0x28
 8005aa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d916      	bls.n	8005adc <xQueueReceiveFromISR+0x12c>
 8005aae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab4:	d10a      	bne.n	8005acc <xQueueReceiveFromISR+0x11c>
        __asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	617b      	str	r3, [r7, #20]
    }
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <xQueueReceiveFromISR+0x11a>
 8005acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	b25a      	sxtb	r2, r3
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005adc:	2301      	movs	r3, #1
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae0:	e010      	b.n	8005b04 <xQueueReceiveFromISR+0x154>
        }
        else
        {
            xReturn = pdFAIL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f004 fb69 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 8005aee:	4604      	mov	r4, r0
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f004 fb64 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 8005af8:	4602      	mov	r2, r0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4621      	mov	r1, r4
 8005afe:	2062      	movs	r0, #98	; 0x62
 8005b00:	f003 fd84 	bl	800960c <SEGGER_SYSVIEW_RecordU32x3>
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f383 8811 	msr	BASEPRI, r3
    }
 8005b0e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3744      	adds	r7, #68	; 0x44
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd90      	pop	{r4, r7, pc}

08005b1a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	60bb      	str	r3, [r7, #8]
    }
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005b3e:	f002 fbf1 	bl	8008324 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005b48:	f002 fc1c 	bl	8008384 <vPortExitCritical>

    return uxReturn;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10d      	bne.n	8005b90 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d14d      	bne.n	8005c18 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 fa8b 	bl	800709c <xTaskPriorityDisinherit>
 8005b86:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
 8005b8e:	e043      	b.n	8005c18 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d119      	bne.n	8005bca <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6858      	ldr	r0, [r3, #4]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	f004 fcf3 	bl	800a58c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	441a      	add	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d32b      	bcc.n	8005c18 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	605a      	str	r2, [r3, #4]
 8005bc8:	e026      	b.n	8005c18 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68d8      	ldr	r0, [r3, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	f004 fcd9 	bl	800a58c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	425b      	negs	r3, r3
 8005be4:	441a      	add	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d207      	bcs.n	8005c06 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	425b      	negs	r3, r3
 8005c00:	441a      	add	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d105      	bne.n	8005c18 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005c20:	697b      	ldr	r3, [r7, #20]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d018      	beq.n	8005c6e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	441a      	add	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d303      	bcc.n	8005c5e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68d9      	ldr	r1, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	461a      	mov	r2, r3
 8005c68:	6838      	ldr	r0, [r7, #0]
 8005c6a:	f004 fc8f 	bl	800a58c <memcpy>
    }
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005c7e:	f002 fb51 	bl	8008324 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c88:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c8a:	e011      	b.n	8005cb0 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3324      	adds	r3, #36	; 0x24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 ffa7 	bl	8006bec <xTaskRemoveFromEventList>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005ca4:	f001 f8f6 	bl	8006e94 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	dce9      	bgt.n	8005c8c <prvUnlockQueue+0x16>
 8005cb8:	e000      	b.n	8005cbc <prvUnlockQueue+0x46>
                    break;
 8005cba:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	22ff      	movs	r2, #255	; 0xff
 8005cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005cc4:	f002 fb5e 	bl	8008384 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005cc8:	f002 fb2c 	bl	8008324 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cd2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cd4:	e011      	b.n	8005cfa <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d012      	beq.n	8005d04 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3310      	adds	r3, #16
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 ff82 	bl	8006bec <xTaskRemoveFromEventList>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005cee:	f001 f8d1 	bl	8006e94 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dce9      	bgt.n	8005cd6 <prvUnlockQueue+0x60>
 8005d02:	e000      	b.n	8005d06 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005d04:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	22ff      	movs	r2, #255	; 0xff
 8005d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005d0e:	f002 fb39 	bl	8008384 <vPortExitCritical>
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005d22:	f002 faff 	bl	8008324 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e001      	b.n	8005d38 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005d38:	f002 fb24 	bl	8008384 <vPortExitCritical>

    return xReturn;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005d4e:	f002 fae9 	bl	8008324 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d102      	bne.n	8005d64 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e001      	b.n	8005d68 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005d68:	f002 fb0c 	bl	8008384 <vPortExitCritical>

    return xReturn;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005d76:	b480      	push	{r7}
 8005d78:	b087      	sub	sp, #28
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	60fb      	str	r3, [r7, #12]
    }
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d102      	bne.n	8005db0 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	e001      	b.n	8005db4 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005db4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005db6:	4618      	mov	r0, r3
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <vQueueAddToRegistry+0x2a>
        __asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	60fb      	str	r3, [r7, #12]
    }
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d024      	beq.n	8005e3e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e01e      	b.n	8005e38 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005dfa:	4a1c      	ldr	r2, [pc, #112]	; (8005e6c <vQueueAddToRegistry+0xa8>)
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	4413      	add	r3, r2
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d105      	bne.n	8005e16 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <vQueueAddToRegistry+0xa8>)
 8005e10:	4413      	add	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
                    break;
 8005e14:	e013      	b.n	8005e3e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <vQueueAddToRegistry+0x6e>
 8005e1c:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <vQueueAddToRegistry+0xa8>)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	4a0f      	ldr	r2, [pc, #60]	; (8005e6c <vQueueAddToRegistry+0xa8>)
 8005e2e:	4413      	add	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	3301      	adds	r3, #1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b07      	cmp	r3, #7
 8005e3c:	d9dd      	bls.n	8005dfa <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00f      	beq.n	8005e64 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f004 f9b4 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 8005e58:	4601      	mov	r1, r0
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2071      	movs	r0, #113	; 0x71
 8005e60:	f003 fb7a 	bl	8009558 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8005e64:	bf00      	nop
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	200005fc 	.word	0x200005fc

08005e70 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005e80:	f002 fa50 	bl	8008324 <vPortEnterCritical>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e8a:	b25b      	sxtb	r3, r3
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d103      	bne.n	8005e9a <vQueueWaitForMessageRestricted+0x2a>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea0:	b25b      	sxtb	r3, r3
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d103      	bne.n	8005eb0 <vQueueWaitForMessageRestricted+0x40>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eb0:	f002 fa68 	bl	8008384 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d106      	bne.n	8005eca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3324      	adds	r3, #36	; 0x24
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fe49 	bl	8006b5c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005eca:	6978      	ldr	r0, [r7, #20]
 8005ecc:	f7ff fed3 	bl	8005c76 <prvUnlockQueue>
    }
 8005ed0:	bf00      	nop
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08e      	sub	sp, #56	; 0x38
 8005edc:	af04      	add	r7, sp, #16
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <xTaskCreateStatic+0x2a>
        __asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	623b      	str	r3, [r7, #32]
    }
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <xTaskCreateStatic+0x46>
        __asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	61fb      	str	r3, [r7, #28]
    }
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8005f1e:	23a0      	movs	r3, #160	; 0xa0
 8005f20:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2ba0      	cmp	r3, #160	; 0xa0
 8005f26:	d00a      	beq.n	8005f3e <xTaskCreateStatic+0x66>
        __asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	61bb      	str	r3, [r7, #24]
    }
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f3e:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d023      	beq.n	8005f8e <xTaskCreateStatic+0xb6>
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d020      	beq.n	8005f8e <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005f50:	22a0      	movs	r2, #160	; 0xa0
 8005f52:	2100      	movs	r1, #0
 8005f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f56:	f004 fa95 	bl	800a484 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9303      	str	r3, [sp, #12]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	9302      	str	r3, [sp, #8]
 8005f70:	f107 0314 	add.w	r3, r7, #20
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f855 	bl	8006030 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f88:	f000 f8ee 	bl	8006168 <prvAddNewTaskToReadyList>
 8005f8c:	e001      	b.n	8005f92 <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8005f92:	697b      	ldr	r3, [r7, #20]
    }
 8005f94:	4618      	mov	r0, r3
 8005f96:	3728      	adds	r7, #40	; 0x28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08c      	sub	sp, #48	; 0x30
 8005fa0:	af04      	add	r7, sp, #16
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f002 fae3 	bl	800857c <pvPortMalloc>
 8005fb6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d013      	beq.n	8005fe6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fbe:	20a0      	movs	r0, #160	; 0xa0
 8005fc0:	f002 fadc 	bl	800857c <pvPortMalloc>
 8005fc4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005fcc:	22a0      	movs	r2, #160	; 0xa0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	69f8      	ldr	r0, [r7, #28]
 8005fd2:	f004 fa57 	bl	800a484 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
 8005fdc:	e005      	b.n	8005fea <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005fde:	6978      	ldr	r0, [r7, #20]
 8005fe0:	f002 fb86 	bl	80086f0 <vPortFree>
 8005fe4:	e001      	b.n	8005fea <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d017      	beq.n	8006020 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9303      	str	r3, [sp, #12]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	9302      	str	r3, [sp, #8]
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f80e 	bl	8006030 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006014:	69f8      	ldr	r0, [r7, #28]
 8006016:	f000 f8a7 	bl	8006168 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800601a:	2301      	movs	r3, #1
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	e002      	b.n	8006026 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006020:	f04f 33ff 	mov.w	r3, #4294967295
 8006024:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006026:	69bb      	ldr	r3, [r7, #24]
    }
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006048:	3b01      	subs	r3, #1
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f023 0307 	bic.w	r3, r3, #7
 8006056:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <prvInitialiseNewTask+0x48>
        __asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	617b      	str	r3, [r7, #20]
    }
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01e      	beq.n	80060bc <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	e012      	b.n	80060aa <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	7819      	ldrb	r1, [r3, #0]
 800608c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	3334      	adds	r3, #52	; 0x34
 8006094:	460a      	mov	r2, r1
 8006096:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d006      	beq.n	80060b2 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	3301      	adds	r3, #1
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b0f      	cmp	r3, #15
 80060ae:	d9e9      	bls.n	8006084 <prvInitialiseNewTask+0x54>
 80060b0:	e000      	b.n	80060b4 <prvInitialiseNewTask+0x84>
            {
                break;
 80060b2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	2b06      	cmp	r3, #6
 80060c0:	d90a      	bls.n	80060d8 <prvInitialiseNewTask+0xa8>
        __asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	613b      	str	r3, [r7, #16]
    }
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	2b06      	cmp	r3, #6
 80060dc:	d901      	bls.n	80060e2 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060de:	2306      	movs	r3, #6
 80060e0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	3304      	adds	r3, #4
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe ff66 	bl	8004fc4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	3318      	adds	r3, #24
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe ff61 	bl	8004fc4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006106:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	f1c3 0207 	rsb	r2, r3, #7
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006116:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	334c      	adds	r3, #76	; 0x4c
 800611c:	224c      	movs	r2, #76	; 0x4c
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f004 f9af 	bl	800a484 <memset>
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	4a0c      	ldr	r2, [pc, #48]	; (800615c <prvInitialiseNewTask+0x12c>)
 800612a:	651a      	str	r2, [r3, #80]	; 0x50
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <prvInitialiseNewTask+0x130>)
 8006130:	655a      	str	r2, [r3, #84]	; 0x54
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	4a0b      	ldr	r2, [pc, #44]	; (8006164 <prvInitialiseNewTask+0x134>)
 8006136:	659a      	str	r2, [r3, #88]	; 0x58
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	69b8      	ldr	r0, [r7, #24]
 800613e:	f001 ff43 	bl	8007fc8 <pxPortInitialiseStack>
 8006142:	4602      	mov	r2, r0
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006152:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006154:	bf00      	nop
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20004ab8 	.word	0x20004ab8
 8006160:	20004b20 	.word	0x20004b20
 8006164:	20004b88 	.word	0x20004b88

08006168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006168:	b5b0      	push	{r4, r5, r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af02      	add	r7, sp, #8
 800616e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006170:	f002 f8d8 	bl	8008324 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006174:	4b4d      	ldr	r3, [pc, #308]	; (80062ac <prvAddNewTaskToReadyList+0x144>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	4a4c      	ldr	r2, [pc, #304]	; (80062ac <prvAddNewTaskToReadyList+0x144>)
 800617c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800617e:	4b4c      	ldr	r3, [pc, #304]	; (80062b0 <prvAddNewTaskToReadyList+0x148>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006186:	4a4a      	ldr	r2, [pc, #296]	; (80062b0 <prvAddNewTaskToReadyList+0x148>)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800618c:	4b47      	ldr	r3, [pc, #284]	; (80062ac <prvAddNewTaskToReadyList+0x144>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d110      	bne.n	80061b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006194:	f000 fea2 	bl	8006edc <prvInitialiseTaskLists>
 8006198:	e00d      	b.n	80061b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800619a:	4b46      	ldr	r3, [pc, #280]	; (80062b4 <prvAddNewTaskToReadyList+0x14c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061a2:	4b43      	ldr	r3, [pc, #268]	; (80062b0 <prvAddNewTaskToReadyList+0x148>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d802      	bhi.n	80061b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80061b0:	4a3f      	ldr	r2, [pc, #252]	; (80062b0 <prvAddNewTaskToReadyList+0x148>)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80061b6:	4b40      	ldr	r3, [pc, #256]	; (80062b8 <prvAddNewTaskToReadyList+0x150>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	4a3e      	ldr	r2, [pc, #248]	; (80062b8 <prvAddNewTaskToReadyList+0x150>)
 80061be:	6013      	str	r3, [r2, #0]
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <prvAddNewTaskToReadyList+0x8c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f003 ff33 	bl	800a034 <SEGGER_SYSVIEW_OnTaskCreate>
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	461d      	mov	r5, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461c      	mov	r4, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	1ae3      	subs	r3, r4, r3
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	462b      	mov	r3, r5
 80061f0:	f002 fc40 	bl	8008a74 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f003 ffa0 	bl	800a13c <SEGGER_SYSVIEW_OnTaskStartReady>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	2201      	movs	r2, #1
 8006202:	409a      	lsls	r2, r3
 8006204:	4b2d      	ldr	r3, [pc, #180]	; (80062bc <prvAddNewTaskToReadyList+0x154>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4313      	orrs	r3, r2
 800620a:	4a2c      	ldr	r2, [pc, #176]	; (80062bc <prvAddNewTaskToReadyList+0x154>)
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006212:	492b      	ldr	r1, [pc, #172]	; (80062c0 <prvAddNewTaskToReadyList+0x158>)
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	3304      	adds	r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	609a      	str	r2, [r3, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	3204      	adds	r2, #4
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1d1a      	adds	r2, r3, #4
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <prvAddNewTaskToReadyList+0x158>)
 8006252:	441a      	add	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	615a      	str	r2, [r3, #20]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625c:	4918      	ldr	r1, [pc, #96]	; (80062c0 <prvAddNewTaskToReadyList+0x158>)
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	440b      	add	r3, r1
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	1c59      	adds	r1, r3, #1
 800626c:	4814      	ldr	r0, [pc, #80]	; (80062c0 <prvAddNewTaskToReadyList+0x158>)
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4403      	add	r3, r0
 8006278:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800627a:	f002 f883 	bl	8008384 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800627e:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <prvAddNewTaskToReadyList+0x14c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00e      	beq.n	80062a4 <prvAddNewTaskToReadyList+0x13c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006286:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <prvAddNewTaskToReadyList+0x148>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	429a      	cmp	r2, r3
 8006292:	d207      	bcs.n	80062a4 <prvAddNewTaskToReadyList+0x13c>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006294:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <prvAddNewTaskToReadyList+0x15c>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bdb0      	pop	{r4, r5, r7, pc}
 80062ac:	2000073c 	.word	0x2000073c
 80062b0:	2000063c 	.word	0x2000063c
 80062b4:	20000748 	.word	0x20000748
 80062b8:	20000758 	.word	0x20000758
 80062bc:	20000744 	.word	0x20000744
 80062c0:	20000640 	.word	0x20000640
 80062c4:	e000ed04 	.word	0xe000ed04

080062c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062d6:	463a      	mov	r2, r7
 80062d8:	1d39      	adds	r1, r7, #4
 80062da:	f107 0308 	add.w	r3, r7, #8
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fa f950 	bl	8000584 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	9202      	str	r2, [sp, #8]
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	2300      	movs	r3, #0
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	2300      	movs	r3, #0
 80062f4:	460a      	mov	r2, r1
 80062f6:	492e      	ldr	r1, [pc, #184]	; (80063b0 <vTaskStartScheduler+0xe8>)
 80062f8:	482e      	ldr	r0, [pc, #184]	; (80063b4 <vTaskStartScheduler+0xec>)
 80062fa:	f7ff fded 	bl	8005ed8 <xTaskCreateStatic>
 80062fe:	4603      	mov	r3, r0
 8006300:	4a2d      	ldr	r2, [pc, #180]	; (80063b8 <vTaskStartScheduler+0xf0>)
 8006302:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8006304:	4b2c      	ldr	r3, [pc, #176]	; (80063b8 <vTaskStartScheduler+0xf0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800630c:	2301      	movs	r3, #1
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	e001      	b.n	8006316 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d102      	bne.n	8006322 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800631c:	f001 fae8 	bl	80078f0 <xTimerCreateTimerTask>
 8006320:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d12e      	bne.n	8006386 <vTaskStartScheduler+0xbe>
        __asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	613b      	str	r3, [r7, #16]
    }
 800633a:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800633c:	4b1f      	ldr	r3, [pc, #124]	; (80063bc <vTaskStartScheduler+0xf4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	334c      	adds	r3, #76	; 0x4c
 8006342:	4a1f      	ldr	r2, [pc, #124]	; (80063c0 <vTaskStartScheduler+0xf8>)
 8006344:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006346:	4b1f      	ldr	r3, [pc, #124]	; (80063c4 <vTaskStartScheduler+0xfc>)
 8006348:	f04f 32ff 	mov.w	r2, #4294967295
 800634c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800634e:	4b1e      	ldr	r3, [pc, #120]	; (80063c8 <vTaskStartScheduler+0x100>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006354:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <vTaskStartScheduler+0x104>)
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800635a:	4b18      	ldr	r3, [pc, #96]	; (80063bc <vTaskStartScheduler+0xf4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3334      	adds	r3, #52	; 0x34
 8006360:	2205      	movs	r2, #5
 8006362:	4913      	ldr	r1, [pc, #76]	; (80063b0 <vTaskStartScheduler+0xe8>)
 8006364:	4618      	mov	r0, r3
 8006366:	f004 f87d 	bl	800a464 <memcmp>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <vTaskStartScheduler+0xb4>
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <vTaskStartScheduler+0xf4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f003 fe9f 	bl	800a0b8 <SEGGER_SYSVIEW_OnTaskStartExec>
 800637a:	e001      	b.n	8006380 <vTaskStartScheduler+0xb8>
 800637c:	f003 fe3e 	bl	8009ffc <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006380:	f001 feb0 	bl	80080e4 <xPortStartScheduler>
 8006384:	e00e      	b.n	80063a4 <vTaskStartScheduler+0xdc>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d10a      	bne.n	80063a4 <vTaskStartScheduler+0xdc>
        __asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	60fb      	str	r3, [r7, #12]
    }
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <vTaskStartScheduler+0xda>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <vTaskStartScheduler+0x108>)
 80063a6:	681b      	ldr	r3, [r3, #0]
}
 80063a8:	bf00      	nop
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	0800a7f0 	.word	0x0800a7f0
 80063b4:	08006ead 	.word	0x08006ead
 80063b8:	20000760 	.word	0x20000760
 80063bc:	2000063c 	.word	0x2000063c
 80063c0:	2000006c 	.word	0x2000006c
 80063c4:	2000075c 	.word	0x2000075c
 80063c8:	20000748 	.word	0x20000748
 80063cc:	20000740 	.word	0x20000740
 80063d0:	20000018 	.word	0x20000018

080063d4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80063d8:	4b04      	ldr	r3, [pc, #16]	; (80063ec <vTaskSuspendAll+0x18>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a03      	ldr	r2, [pc, #12]	; (80063ec <vTaskSuspendAll+0x18>)
 80063e0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20000764 	.word	0x20000764

080063f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80063fe:	4b73      	ldr	r3, [pc, #460]	; (80065cc <xTaskResumeAll+0x1dc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <xTaskResumeAll+0x2c>
        __asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	607b      	str	r3, [r7, #4]
    }
 8006418:	bf00      	nop
 800641a:	e7fe      	b.n	800641a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800641c:	f001 ff82 	bl	8008324 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006420:	4b6a      	ldr	r3, [pc, #424]	; (80065cc <xTaskResumeAll+0x1dc>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3b01      	subs	r3, #1
 8006426:	4a69      	ldr	r2, [pc, #420]	; (80065cc <xTaskResumeAll+0x1dc>)
 8006428:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800642a:	4b68      	ldr	r3, [pc, #416]	; (80065cc <xTaskResumeAll+0x1dc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 80c4 	bne.w	80065bc <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006434:	4b66      	ldr	r3, [pc, #408]	; (80065d0 <xTaskResumeAll+0x1e0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 80bf 	beq.w	80065bc <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800643e:	e08e      	b.n	800655e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006440:	4b64      	ldr	r3, [pc, #400]	; (80065d4 <xTaskResumeAll+0x1e4>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	6a12      	ldr	r2, [r2, #32]
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	69d2      	ldr	r2, [r2, #28]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	3318      	adds	r3, #24
 800646a:	429a      	cmp	r2, r3
 800646c:	d103      	bne.n	8006476 <xTaskResumeAll+0x86>
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	605a      	str	r2, [r3, #4]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	2200      	movs	r2, #0
 800647a:	629a      	str	r2, [r3, #40]	; 0x28
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	1e5a      	subs	r2, r3, #1
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	68d2      	ldr	r2, [r2, #12]
 8006494:	609a      	str	r2, [r3, #8]
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	6892      	ldr	r2, [r2, #8]
 800649e:	605a      	str	r2, [r3, #4]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	3304      	adds	r3, #4
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d103      	bne.n	80064b4 <xTaskResumeAll+0xc4>
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	605a      	str	r2, [r3, #4]
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	2200      	movs	r2, #0
 80064b8:	615a      	str	r2, [r3, #20]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	1e5a      	subs	r2, r3, #1
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f003 fe38 	bl	800a13c <SEGGER_SYSVIEW_OnTaskStartReady>
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	2201      	movs	r2, #1
 80064d2:	409a      	lsls	r2, r3
 80064d4:	4b40      	ldr	r3, [pc, #256]	; (80065d8 <xTaskResumeAll+0x1e8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4313      	orrs	r3, r2
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xTaskResumeAll+0x1e8>)
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e2:	493e      	ldr	r1, [pc, #248]	; (80065dc <xTaskResumeAll+0x1ec>)
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	3304      	adds	r3, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	609a      	str	r2, [r3, #8]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	60da      	str	r2, [r3, #12]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	3204      	adds	r2, #4
 800650a:	605a      	str	r2, [r3, #4]
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	1d1a      	adds	r2, r3, #4
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	609a      	str	r2, [r3, #8]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4a2e      	ldr	r2, [pc, #184]	; (80065dc <xTaskResumeAll+0x1ec>)
 8006522:	441a      	add	r2, r3
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	615a      	str	r2, [r3, #20]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	492b      	ldr	r1, [pc, #172]	; (80065dc <xTaskResumeAll+0x1ec>)
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	4827      	ldr	r0, [pc, #156]	; (80065dc <xTaskResumeAll+0x1ec>)
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4403      	add	r3, r0
 8006548:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <xTaskResumeAll+0x1f0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	429a      	cmp	r2, r3
 8006556:	d302      	bcc.n	800655e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8006558:	4b22      	ldr	r3, [pc, #136]	; (80065e4 <xTaskResumeAll+0x1f4>)
 800655a:	2201      	movs	r2, #1
 800655c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800655e:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <xTaskResumeAll+0x1e4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f47f af6c 	bne.w	8006440 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800656e:	f000 fd5b 	bl	8007028 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <xTaskResumeAll+0x1f8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d010      	beq.n	80065a0 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800657e:	f000 f939 	bl	80067f4 <xTaskIncrementTick>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8006588:	4b16      	ldr	r3, [pc, #88]	; (80065e4 <xTaskResumeAll+0x1f4>)
 800658a:	2201      	movs	r2, #1
 800658c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	3b01      	subs	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f1      	bne.n	800657e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800659a:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <xTaskResumeAll+0x1f8>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80065a0:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <xTaskResumeAll+0x1f4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d009      	beq.n	80065bc <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80065ac:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <xTaskResumeAll+0x1fc>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80065bc:	f001 fee2 	bl	8008384 <vPortExitCritical>

    return xAlreadyYielded;
 80065c0:	69bb      	ldr	r3, [r7, #24]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000764 	.word	0x20000764
 80065d0:	2000073c 	.word	0x2000073c
 80065d4:	200006fc 	.word	0x200006fc
 80065d8:	20000744 	.word	0x20000744
 80065dc:	20000640 	.word	0x20000640
 80065e0:	2000063c 	.word	0x2000063c
 80065e4:	20000750 	.word	0x20000750
 80065e8:	2000074c 	.word	0x2000074c
 80065ec:	e000ed04 	.word	0xe000ed04

080065f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <xTaskGetTickCount+0x1c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80065fc:	687b      	ldr	r3, [r7, #4]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000740 	.word	0x20000740

08006610 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006616:	f001 ff71 	bl	80084fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800661a:	2300      	movs	r3, #0
 800661c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <xTaskGetTickCountFromISR+0x20>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006624:	683b      	ldr	r3, [r7, #0]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000740 	.word	0x20000740

08006634 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8006638:	4b03      	ldr	r3, [pc, #12]	; (8006648 <uxTaskGetNumberOfTasks+0x14>)
 800663a:	681b      	ldr	r3, [r3, #0]
}
 800663c:	4618      	mov	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	2000073c 	.word	0x2000073c

0800664c <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 800664c:	b480      	push	{r7}
 800664e:	b08b      	sub	sp, #44	; 0x2c
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB;
        TCB_t * pxFirstTCB;
        TCB_t * pxReturn = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d05b      	beq.n	800671a <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	3308      	adds	r3, #8
 8006678:	429a      	cmp	r2, r3
 800667a:	d104      	bne.n	8006686 <prvSearchForNameWithinSingleList+0x3a>
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	605a      	str	r2, [r3, #4]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	3308      	adds	r3, #8
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d104      	bne.n	80066b2 <prvSearchForNameWithinSingleList+0x66>
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066be:	2300      	movs	r3, #0
 80066c0:	623b      	str	r3, [r7, #32]
 80066c2:	e01c      	b.n	80066fe <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	4413      	add	r3, r2
 80066ca:	3334      	adds	r3, #52	; 0x34
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	4413      	add	r3, r2
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	7afa      	ldrb	r2, [r7, #11]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d002      	beq.n	80066e4 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 80066de:	2301      	movs	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	e006      	b.n	80066f2 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 80066ee:	2301      	movs	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d106      	bne.n	8006706 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	3301      	adds	r3, #1
 80066fc:	623b      	str	r3, [r7, #32]
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	d9df      	bls.n	80066c4 <prvSearchForNameWithinSingleList+0x78>
 8006704:	e000      	b.n	8006708 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8006706:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	429a      	cmp	r2, r3
 8006714:	d1bb      	bne.n	800668e <prvSearchForNameWithinSingleList+0x42>
 8006716:	e000      	b.n	800671a <prvSearchForNameWithinSingleList+0xce>
                    break;
 8006718:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800671c:	4618      	mov	r0, r3
 800671e:	372c      	adds	r7, #44	; 0x2c
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8006730:	2307      	movs	r3, #7
 8006732:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7f9 fd9f 	bl	8000278 <strlen>
 800673a:	4603      	mov	r3, r0
 800673c:	2b0f      	cmp	r3, #15
 800673e:	d90a      	bls.n	8006756 <xTaskGetHandle+0x2e>
        __asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
    }
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8006756:	f7ff fe3d 	bl	80063d4 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	3b01      	subs	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <xTaskGetHandle+0xb8>)
 800676c:	4413      	add	r3, r2
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff ff6b 	bl	800664c <prvSearchForNameWithinSingleList>
 8006776:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ea      	bne.n	800675a <xTaskGetHandle+0x32>
 8006784:	e000      	b.n	8006788 <xTaskGetHandle+0x60>
                    break;
 8006786:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800678e:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <xTaskGetHandle+0xbc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff ff59 	bl	800664c <prvSearchForNameWithinSingleList>
 800679a:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <xTaskGetHandle+0xc0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff ff4f 	bl	800664c <prvSearchForNameWithinSingleList>
 80067ae:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <xTaskGetHandle+0x98>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	480c      	ldr	r0, [pc, #48]	; (80067ec <xTaskGetHandle+0xc4>)
 80067ba:	f7ff ff47 	bl	800664c <prvSearchForNameWithinSingleList>
 80067be:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <xTaskGetHandle+0xa8>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4809      	ldr	r0, [pc, #36]	; (80067f0 <xTaskGetHandle+0xc8>)
 80067ca:	f7ff ff3f 	bl	800664c <prvSearchForNameWithinSingleList>
 80067ce:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 80067d0:	f7ff fe0e 	bl	80063f0 <xTaskResumeAll>

        return pxTCB;
 80067d4:	693b      	ldr	r3, [r7, #16]
    }
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000640 	.word	0x20000640
 80067e4:	200006f4 	.word	0x200006f4
 80067e8:	200006f8 	.word	0x200006f8
 80067ec:	20000728 	.word	0x20000728
 80067f0:	20000710 	.word	0x20000710

080067f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fe:	4b7f      	ldr	r3, [pc, #508]	; (80069fc <xTaskIncrementTick+0x208>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 80f0 	bne.w	80069e8 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006808:	4b7d      	ldr	r3, [pc, #500]	; (8006a00 <xTaskIncrementTick+0x20c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006810:	4a7b      	ldr	r2, [pc, #492]	; (8006a00 <xTaskIncrementTick+0x20c>)
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d120      	bne.n	800685e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800681c:	4b79      	ldr	r3, [pc, #484]	; (8006a04 <xTaskIncrementTick+0x210>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <xTaskIncrementTick+0x48>
        __asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	607b      	str	r3, [r7, #4]
    }
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <xTaskIncrementTick+0x46>
 800683c:	4b71      	ldr	r3, [pc, #452]	; (8006a04 <xTaskIncrementTick+0x210>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	4b71      	ldr	r3, [pc, #452]	; (8006a08 <xTaskIncrementTick+0x214>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a6f      	ldr	r2, [pc, #444]	; (8006a04 <xTaskIncrementTick+0x210>)
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	4a6f      	ldr	r2, [pc, #444]	; (8006a08 <xTaskIncrementTick+0x214>)
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	4b6e      	ldr	r3, [pc, #440]	; (8006a0c <xTaskIncrementTick+0x218>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	4a6d      	ldr	r2, [pc, #436]	; (8006a0c <xTaskIncrementTick+0x218>)
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	f000 fbe5 	bl	8007028 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800685e:	4b6c      	ldr	r3, [pc, #432]	; (8006a10 <xTaskIncrementTick+0x21c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6a3a      	ldr	r2, [r7, #32]
 8006864:	429a      	cmp	r2, r3
 8006866:	f0c0 80aa 	bcc.w	80069be <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800686a:	4b66      	ldr	r3, [pc, #408]	; (8006a04 <xTaskIncrementTick+0x210>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d104      	bne.n	800687e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006874:	4b66      	ldr	r3, [pc, #408]	; (8006a10 <xTaskIncrementTick+0x21c>)
 8006876:	f04f 32ff 	mov.w	r2, #4294967295
 800687a:	601a      	str	r2, [r3, #0]
                    break;
 800687c:	e09f      	b.n	80069be <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800687e:	4b61      	ldr	r3, [pc, #388]	; (8006a04 <xTaskIncrementTick+0x210>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800688e:	6a3a      	ldr	r2, [r7, #32]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	429a      	cmp	r2, r3
 8006894:	d203      	bcs.n	800689e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006896:	4a5e      	ldr	r2, [pc, #376]	; (8006a10 <xTaskIncrementTick+0x21c>)
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800689c:	e08f      	b.n	80069be <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	68d2      	ldr	r2, [r2, #12]
 80068ac:	609a      	str	r2, [r3, #8]
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	6892      	ldr	r2, [r2, #8]
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	3304      	adds	r3, #4
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d103      	bne.n	80068cc <xTaskIncrementTick+0xd8>
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	605a      	str	r2, [r3, #4]
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	2200      	movs	r2, #0
 80068d0:	615a      	str	r2, [r3, #20]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	1e5a      	subs	r2, r3, #1
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01e      	beq.n	8006922 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	6a12      	ldr	r2, [r2, #32]
 80068f2:	609a      	str	r2, [r3, #8]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	69d2      	ldr	r2, [r2, #28]
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	3318      	adds	r3, #24
 8006906:	429a      	cmp	r2, r3
 8006908:	d103      	bne.n	8006912 <xTaskIncrementTick+0x11e>
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	6a1a      	ldr	r2, [r3, #32]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	605a      	str	r2, [r3, #4]
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2200      	movs	r2, #0
 8006916:	629a      	str	r2, [r3, #40]	; 0x28
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	1e5a      	subs	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	4618      	mov	r0, r3
 8006926:	f003 fc09 	bl	800a13c <SEGGER_SYSVIEW_OnTaskStartReady>
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	2201      	movs	r2, #1
 8006930:	409a      	lsls	r2, r3
 8006932:	4b38      	ldr	r3, [pc, #224]	; (8006a14 <xTaskIncrementTick+0x220>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4313      	orrs	r3, r2
 8006938:	4a36      	ldr	r2, [pc, #216]	; (8006a14 <xTaskIncrementTick+0x220>)
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006940:	4935      	ldr	r1, [pc, #212]	; (8006a18 <xTaskIncrementTick+0x224>)
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	440b      	add	r3, r1
 800694c:	3304      	adds	r3, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	609a      	str	r2, [r3, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	60da      	str	r2, [r3, #12]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	3204      	adds	r2, #4
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	1d1a      	adds	r2, r3, #4
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	609a      	str	r2, [r3, #8]
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4a26      	ldr	r2, [pc, #152]	; (8006a18 <xTaskIncrementTick+0x224>)
 8006980:	441a      	add	r2, r3
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	615a      	str	r2, [r3, #20]
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698a:	4923      	ldr	r1, [pc, #140]	; (8006a18 <xTaskIncrementTick+0x224>)
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	1c59      	adds	r1, r3, #1
 800699a:	481f      	ldr	r0, [pc, #124]	; (8006a18 <xTaskIncrementTick+0x224>)
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4403      	add	r3, r0
 80069a6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ac:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <xTaskIncrementTick+0x228>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	429a      	cmp	r2, r3
 80069b4:	f67f af59 	bls.w	800686a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80069b8:	2301      	movs	r3, #1
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069bc:	e755      	b.n	800686a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069be:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <xTaskIncrementTick+0x228>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	4914      	ldr	r1, [pc, #80]	; (8006a18 <xTaskIncrementTick+0x224>)
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d901      	bls.n	80069da <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80069d6:	2301      	movs	r3, #1
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80069da:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <xTaskIncrementTick+0x22c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d007      	beq.n	80069f2 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80069e2:	2301      	movs	r3, #1
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
 80069e6:	e004      	b.n	80069f2 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80069e8:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <xTaskIncrementTick+0x230>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	4a0d      	ldr	r2, [pc, #52]	; (8006a24 <xTaskIncrementTick+0x230>)
 80069f0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3728      	adds	r7, #40	; 0x28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000764 	.word	0x20000764
 8006a00:	20000740 	.word	0x20000740
 8006a04:	200006f4 	.word	0x200006f4
 8006a08:	200006f8 	.word	0x200006f8
 8006a0c:	20000754 	.word	0x20000754
 8006a10:	2000075c 	.word	0x2000075c
 8006a14:	20000744 	.word	0x20000744
 8006a18:	20000640 	.word	0x20000640
 8006a1c:	2000063c 	.word	0x2000063c
 8006a20:	20000750 	.word	0x20000750
 8006a24:	2000074c 	.word	0x2000074c

08006a28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a2e:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <vTaskSwitchContext+0xd0>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006a36:	4b31      	ldr	r3, [pc, #196]	; (8006afc <vTaskSwitchContext+0xd4>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006a3c:	e057      	b.n	8006aee <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <vTaskSwitchContext+0xd4>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a44:	4b2e      	ldr	r3, [pc, #184]	; (8006b00 <vTaskSwitchContext+0xd8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	fab3 f383 	clz	r3, r3
 8006a50:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006a52:	7afb      	ldrb	r3, [r7, #11]
 8006a54:	f1c3 031f 	rsb	r3, r3, #31
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	492a      	ldr	r1, [pc, #168]	; (8006b04 <vTaskSwitchContext+0xdc>)
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	607b      	str	r3, [r7, #4]
    }
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <vTaskSwitchContext+0x5a>
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <vTaskSwitchContext+0xdc>)
 8006a90:	4413      	add	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	605a      	str	r2, [r3, #4]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d104      	bne.n	8006ab4 <vTaskSwitchContext+0x8c>
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	605a      	str	r2, [r3, #4]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	4a13      	ldr	r2, [pc, #76]	; (8006b08 <vTaskSwitchContext+0xe0>)
 8006abc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <vTaskSwitchContext+0xe0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3334      	adds	r3, #52	; 0x34
 8006ac4:	2205      	movs	r2, #5
 8006ac6:	4911      	ldr	r1, [pc, #68]	; (8006b0c <vTaskSwitchContext+0xe4>)
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f003 fccb 	bl	800a464 <memcmp>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <vTaskSwitchContext+0xb8>
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <vTaskSwitchContext+0xe0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f003 faed 	bl	800a0b8 <SEGGER_SYSVIEW_OnTaskStartExec>
 8006ade:	e001      	b.n	8006ae4 <vTaskSwitchContext+0xbc>
 8006ae0:	f003 fa8c 	bl	8009ffc <SEGGER_SYSVIEW_OnIdle>
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <vTaskSwitchContext+0xe0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	334c      	adds	r3, #76	; 0x4c
 8006aea:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <vTaskSwitchContext+0xe8>)
 8006aec:	6013      	str	r3, [r2, #0]
}
 8006aee:	bf00      	nop
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000764 	.word	0x20000764
 8006afc:	20000750 	.word	0x20000750
 8006b00:	20000744 	.word	0x20000744
 8006b04:	20000640 	.word	0x20000640
 8006b08:	2000063c 	.word	0x2000063c
 8006b0c:	0800a7f0 	.word	0x0800a7f0
 8006b10:	2000006c 	.word	0x2000006c

08006b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	60fb      	str	r3, [r7, #12]
    }
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b3a:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <vTaskPlaceOnEventList+0x44>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3318      	adds	r3, #24
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fe fa6f 	bl	8005026 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b48:	2101      	movs	r1, #1
 8006b4a:	6838      	ldr	r0, [r7, #0]
 8006b4c:	f000 fe50 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	2000063c 	.word	0x2000063c

08006b5c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	613b      	str	r3, [r7, #16]
    }
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	61da      	str	r2, [r3, #28]
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	6892      	ldr	r2, [r2, #8]
 8006b9a:	621a      	str	r2, [r3, #32]
 8006b9c:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	3218      	adds	r2, #24
 8006ba6:	605a      	str	r2, [r3, #4]
 8006ba8:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f103 0218 	add.w	r2, r3, #24
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	609a      	str	r2, [r3, #8]
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006bd2:	2024      	movs	r0, #36	; 0x24
 8006bd4:	f002 fc66 	bl	80094a4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	68b8      	ldr	r0, [r7, #8]
 8006bdc:	f000 fe08 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
    }
 8006be0:	bf00      	nop
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	2000063c 	.word	0x2000063c

08006bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	60fb      	str	r3, [r7, #12]
    }
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	6a3a      	ldr	r2, [r7, #32]
 8006c24:	6a12      	ldr	r2, [r2, #32]
 8006c26:	609a      	str	r2, [r3, #8]
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	6a3a      	ldr	r2, [r7, #32]
 8006c2e:	69d2      	ldr	r2, [r2, #28]
 8006c30:	605a      	str	r2, [r3, #4]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	3318      	adds	r3, #24
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d103      	bne.n	8006c46 <xTaskRemoveFromEventList+0x5a>
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	6a1a      	ldr	r2, [r3, #32]
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	605a      	str	r2, [r3, #4]
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	1e5a      	subs	r2, r3, #1
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c56:	4b4b      	ldr	r3, [pc, #300]	; (8006d84 <xTaskRemoveFromEventList+0x198>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d162      	bne.n	8006d24 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	6a3a      	ldr	r2, [r7, #32]
 8006c6a:	68d2      	ldr	r2, [r2, #12]
 8006c6c:	609a      	str	r2, [r3, #8]
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	6892      	ldr	r2, [r2, #8]
 8006c76:	605a      	str	r2, [r3, #4]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d103      	bne.n	8006c8c <xTaskRemoveFromEventList+0xa0>
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	605a      	str	r2, [r3, #4]
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	615a      	str	r2, [r3, #20]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	1e5a      	subs	r2, r3, #1
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f003 fa4c 	bl	800a13c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	2201      	movs	r2, #1
 8006caa:	409a      	lsls	r2, r3
 8006cac:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <xTaskRemoveFromEventList+0x19c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	4a35      	ldr	r2, [pc, #212]	; (8006d88 <xTaskRemoveFromEventList+0x19c>)
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cba:	4934      	ldr	r1, [pc, #208]	; (8006d8c <xTaskRemoveFromEventList+0x1a0>)
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	609a      	str	r2, [r3, #8]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	60da      	str	r2, [r3, #12]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	6a3a      	ldr	r2, [r7, #32]
 8006ce0:	3204      	adds	r2, #4
 8006ce2:	605a      	str	r2, [r3, #4]
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	1d1a      	adds	r2, r3, #4
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	609a      	str	r2, [r3, #8]
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4a24      	ldr	r2, [pc, #144]	; (8006d8c <xTaskRemoveFromEventList+0x1a0>)
 8006cfa:	441a      	add	r2, r3
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	615a      	str	r2, [r3, #20]
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	4921      	ldr	r1, [pc, #132]	; (8006d8c <xTaskRemoveFromEventList+0x1a0>)
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	440b      	add	r3, r1
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	481d      	ldr	r0, [pc, #116]	; (8006d8c <xTaskRemoveFromEventList+0x1a0>)
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4403      	add	r3, r0
 8006d20:	6019      	str	r1, [r3, #0]
 8006d22:	e01b      	b.n	8006d5c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d24:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <xTaskRemoveFromEventList+0x1a4>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	61da      	str	r2, [r3, #28]
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	621a      	str	r2, [r3, #32]
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	3218      	adds	r2, #24
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	f103 0218 	add.w	r2, r3, #24
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	4a10      	ldr	r2, [pc, #64]	; (8006d90 <xTaskRemoveFromEventList+0x1a4>)
 8006d50:	629a      	str	r2, [r3, #40]	; 0x28
 8006d52:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <xTaskRemoveFromEventList+0x1a4>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3301      	adds	r3, #1
 8006d58:	4a0d      	ldr	r2, [pc, #52]	; (8006d90 <xTaskRemoveFromEventList+0x1a4>)
 8006d5a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d60:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <xTaskRemoveFromEventList+0x1a8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d905      	bls.n	8006d76 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006d6e:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <xTaskRemoveFromEventList+0x1ac>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e001      	b.n	8006d7a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000764 	.word	0x20000764
 8006d88:	20000744 	.word	0x20000744
 8006d8c:	20000640 	.word	0x20000640
 8006d90:	200006fc 	.word	0x200006fc
 8006d94:	2000063c 	.word	0x2000063c
 8006d98:	20000750 	.word	0x20000750

08006d9c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006da4:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <vTaskInternalSetTimeOutState+0x24>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <vTaskInternalSetTimeOutState+0x28>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	605a      	str	r2, [r3, #4]
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	20000754 	.word	0x20000754
 8006dc4:	20000740 	.word	0x20000740

08006dc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10a      	bne.n	8006dee <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	613b      	str	r3, [r7, #16]
    }
 8006dea:	bf00      	nop
 8006dec:	e7fe      	b.n	8006dec <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	60fb      	str	r3, [r7, #12]
    }
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006e0a:	f001 fa8b 	bl	8008324 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006e0e:	4b1f      	ldr	r3, [pc, #124]	; (8006e8c <xTaskCheckForTimeOut+0xc4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d102      	bne.n	8006e2e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	e026      	b.n	8006e7c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4b17      	ldr	r3, [pc, #92]	; (8006e90 <xTaskCheckForTimeOut+0xc8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d00a      	beq.n	8006e50 <xTaskCheckForTimeOut+0x88>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d305      	bcc.n	8006e50 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e015      	b.n	8006e7c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d20b      	bcs.n	8006e72 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	1ad2      	subs	r2, r2, r3
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff ff98 	bl	8006d9c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	e004      	b.n	8006e7c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006e7c:	f001 fa82 	bl	8008384 <vPortExitCritical>

    return xReturn;
 8006e80:	69fb      	ldr	r3, [r7, #28]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000740 	.word	0x20000740
 8006e90:	20000754 	.word	0x20000754

08006e94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006e98:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <vTaskMissedYield+0x14>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]
}
 8006e9e:	bf00      	nop
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20000750 	.word	0x20000750

08006eac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006eb4:	f000 f852 	bl	8006f5c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <prvIdleTask+0x28>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d9f9      	bls.n	8006eb4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <prvIdleTask+0x2c>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006ed0:	e7f0      	b.n	8006eb4 <prvIdleTask+0x8>
 8006ed2:	bf00      	nop
 8006ed4:	20000640 	.word	0x20000640
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	e00c      	b.n	8006f02 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4a12      	ldr	r2, [pc, #72]	; (8006f3c <prvInitialiseTaskLists+0x60>)
 8006ef4:	4413      	add	r3, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe f844 	bl	8004f84 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3301      	adds	r3, #1
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b06      	cmp	r3, #6
 8006f06:	d9ef      	bls.n	8006ee8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006f08:	480d      	ldr	r0, [pc, #52]	; (8006f40 <prvInitialiseTaskLists+0x64>)
 8006f0a:	f7fe f83b 	bl	8004f84 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006f0e:	480d      	ldr	r0, [pc, #52]	; (8006f44 <prvInitialiseTaskLists+0x68>)
 8006f10:	f7fe f838 	bl	8004f84 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006f14:	480c      	ldr	r0, [pc, #48]	; (8006f48 <prvInitialiseTaskLists+0x6c>)
 8006f16:	f7fe f835 	bl	8004f84 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006f1a:	480c      	ldr	r0, [pc, #48]	; (8006f4c <prvInitialiseTaskLists+0x70>)
 8006f1c:	f7fe f832 	bl	8004f84 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006f20:	480b      	ldr	r0, [pc, #44]	; (8006f50 <prvInitialiseTaskLists+0x74>)
 8006f22:	f7fe f82f 	bl	8004f84 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <prvInitialiseTaskLists+0x78>)
 8006f28:	4a05      	ldr	r2, [pc, #20]	; (8006f40 <prvInitialiseTaskLists+0x64>)
 8006f2a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <prvInitialiseTaskLists+0x7c>)
 8006f2e:	4a05      	ldr	r2, [pc, #20]	; (8006f44 <prvInitialiseTaskLists+0x68>)
 8006f30:	601a      	str	r2, [r3, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000640 	.word	0x20000640
 8006f40:	200006cc 	.word	0x200006cc
 8006f44:	200006e0 	.word	0x200006e0
 8006f48:	200006fc 	.word	0x200006fc
 8006f4c:	20000710 	.word	0x20000710
 8006f50:	20000728 	.word	0x20000728
 8006f54:	200006f4 	.word	0x200006f4
 8006f58:	200006f8 	.word	0x200006f8

08006f5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f62:	e019      	b.n	8006f98 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8006f64:	f001 f9de 	bl	8008324 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f68:	4b10      	ldr	r3, [pc, #64]	; (8006fac <prvCheckTasksWaitingTermination+0x50>)
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe f88f 	bl	8005098 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <prvCheckTasksWaitingTermination+0x54>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <prvCheckTasksWaitingTermination+0x54>)
 8006f82:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8006f84:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <prvCheckTasksWaitingTermination+0x58>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <prvCheckTasksWaitingTermination+0x58>)
 8006f8c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8006f8e:	f001 f9f9 	bl	8008384 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f810 	bl	8006fb8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <prvCheckTasksWaitingTermination+0x58>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e1      	bne.n	8006f64 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000710 	.word	0x20000710
 8006fb0:	2000073c 	.word	0x2000073c
 8006fb4:	20000724 	.word	0x20000724

08006fb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8006fc0:	4b18      	ldr	r3, [pc, #96]	; (8007024 <prvDeleteTCB+0x6c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	334c      	adds	r3, #76	; 0x4c
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f003 fa64 	bl	800a494 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d108      	bne.n	8006fe8 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 fb88 	bl	80086f0 <vPortFree>
                vPortFree( pxTCB );
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 fb85 	bl	80086f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006fe6:	e018      	b.n	800701a <prvDeleteTCB+0x62>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d103      	bne.n	8006ffa <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 fb7c 	bl	80086f0 <vPortFree>
    }
 8006ff8:	e00f      	b.n	800701a <prvDeleteTCB+0x62>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007000:	2b02      	cmp	r3, #2
 8007002:	d00a      	beq.n	800701a <prvDeleteTCB+0x62>
        __asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	60fb      	str	r3, [r7, #12]
    }
 8007016:	bf00      	nop
 8007018:	e7fe      	b.n	8007018 <prvDeleteTCB+0x60>
    }
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	2000063c 	.word	0x2000063c

08007028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <prvResetNextTaskUnblockTime+0x30>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <prvResetNextTaskUnblockTime+0x34>)
 8007038:	f04f 32ff 	mov.w	r2, #4294967295
 800703c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800703e:	e005      	b.n	800704c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <prvResetNextTaskUnblockTime+0x30>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a04      	ldr	r2, [pc, #16]	; (800705c <prvResetNextTaskUnblockTime+0x34>)
 800704a:	6013      	str	r3, [r2, #0]
}
 800704c:	bf00      	nop
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	200006f4 	.word	0x200006f4
 800705c:	2000075c 	.word	0x2000075c

08007060 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <xTaskGetSchedulerState+0x34>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800706e:	2301      	movs	r3, #1
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	e008      	b.n	8007086 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007074:	4b08      	ldr	r3, [pc, #32]	; (8007098 <xTaskGetSchedulerState+0x38>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800707c:	2302      	movs	r3, #2
 800707e:	607b      	str	r3, [r7, #4]
 8007080:	e001      	b.n	8007086 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007082:	2300      	movs	r3, #0
 8007084:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007086:	687b      	ldr	r3, [r7, #4]
    }
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	20000748 	.word	0x20000748
 8007098:	20000764 	.word	0x20000764

0800709c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d068      	beq.n	8007184 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80070b2:	4b37      	ldr	r3, [pc, #220]	; (8007190 <xTaskPriorityDisinherit+0xf4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d00a      	beq.n	80070d2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	60fb      	str	r3, [r7, #12]
    }
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10a      	bne.n	80070f0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	60bb      	str	r3, [r7, #8]
    }
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f4:	1e5a      	subs	r2, r3, #1
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	429a      	cmp	r2, r3
 8007104:	d03e      	beq.n	8007184 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710a:	2b00      	cmp	r3, #0
 800710c:	d13a      	bne.n	8007184 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7fd ffc0 	bl	8005098 <uxListRemove>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	2201      	movs	r2, #1
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	43da      	mvns	r2, r3
 800712a:	4b1a      	ldr	r3, [pc, #104]	; (8007194 <xTaskPriorityDisinherit+0xf8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4013      	ands	r3, r2
 8007130:	4a18      	ldr	r2, [pc, #96]	; (8007194 <xTaskPriorityDisinherit+0xf8>)
 8007132:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4619      	mov	r1, r3
 8007138:	204a      	movs	r0, #74	; 0x4a
 800713a:	f002 f9d1 	bl	80094e0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	f1c3 0207 	rsb	r2, r3, #7
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	2201      	movs	r2, #1
 8007158:	409a      	lsls	r2, r3
 800715a:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <xTaskPriorityDisinherit+0xf8>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4313      	orrs	r3, r2
 8007160:	4a0c      	ldr	r2, [pc, #48]	; (8007194 <xTaskPriorityDisinherit+0xf8>)
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4a09      	ldr	r2, [pc, #36]	; (8007198 <xTaskPriorityDisinherit+0xfc>)
 8007172:	441a      	add	r2, r3
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	3304      	adds	r3, #4
 8007178:	4619      	mov	r1, r3
 800717a:	4610      	mov	r0, r2
 800717c:	f7fd ff2f 	bl	8004fde <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007180:	2301      	movs	r3, #1
 8007182:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007184:	697b      	ldr	r3, [r7, #20]
    }
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	2000063c 	.word	0x2000063c
 8007194:	20000744 	.word	0x20000744
 8007198:	20000640 	.word	0x20000640

0800719c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	613b      	str	r3, [r7, #16]
    }
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80071c6:	f001 f8ad 	bl	8008324 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80071ca:	4b36      	ldr	r3, [pc, #216]	; (80072a4 <xTaskGenericNotifyWait+0x108>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	339c      	adds	r3, #156	; 0x9c
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d022      	beq.n	8007222 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80071dc:	4b31      	ldr	r3, [pc, #196]	; (80072a4 <xTaskGenericNotifyWait+0x108>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	3226      	adds	r2, #38	; 0x26
 80071e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	43d2      	mvns	r2, r2
 80071ec:	4011      	ands	r1, r2
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	3226      	adds	r2, #38	; 0x26
 80071f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80071f6:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <xTaskGenericNotifyWait+0x108>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	339c      	adds	r3, #156	; 0x9c
 8007200:	2201      	movs	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800720a:	2101      	movs	r1, #1
 800720c:	6a38      	ldr	r0, [r7, #32]
 800720e:	f000 faef 	bl	80077f0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8007212:	4b25      	ldr	r3, [pc, #148]	; (80072a8 <xTaskGenericNotifyWait+0x10c>)
 8007214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007222:	f001 f8af 	bl	8008384 <vPortExitCritical>

        taskENTER_CRITICAL();
 8007226:	f001 f87d 	bl	8008324 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	4613      	mov	r3, r2
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	2040      	movs	r0, #64	; 0x40
 8007238:	f002 fa5e 	bl	80096f8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d007      	beq.n	8007252 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8007242:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <xTaskGenericNotifyWait+0x108>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	3226      	adds	r2, #38	; 0x26
 800724a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007252:	4b14      	ldr	r3, [pc, #80]	; (80072a4 <xTaskGenericNotifyWait+0x108>)
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	339c      	adds	r3, #156	; 0x9c
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d002      	beq.n	800726a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e00e      	b.n	8007288 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800726a:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <xTaskGenericNotifyWait+0x108>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	3226      	adds	r2, #38	; 0x26
 8007272:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	43d2      	mvns	r2, r2
 800727a:	4011      	ands	r1, r2
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	3226      	adds	r2, #38	; 0x26
 8007280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8007284:	2301      	movs	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <xTaskGenericNotifyWait+0x108>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	339c      	adds	r3, #156	; 0x9c
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8007296:	f001 f875 	bl	8008384 <vPortExitCritical>

        return xReturn;
 800729a:	697b      	ldr	r3, [r7, #20]
    }
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	2000063c 	.word	0x2000063c
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b090      	sub	sp, #64	; 0x40
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80072ba:	2301      	movs	r3, #1
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <xTaskGenericNotify+0x2e>
        __asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	623b      	str	r3, [r7, #32]
    }
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <xTaskGenericNotify+0x4a>
        __asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	61fb      	str	r3, [r7, #28]
    }
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80072fa:	f001 f813 	bl	8008324 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80072fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	3226      	adds	r2, #38	; 0x26
 800730a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800730e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007310:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4413      	add	r3, r2
 8007318:	339c      	adds	r3, #156	; 0x9c
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4413      	add	r3, r2
 8007326:	339c      	adds	r3, #156	; 0x9c
 8007328:	2202      	movs	r2, #2
 800732a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	2b04      	cmp	r3, #4
 8007330:	d83b      	bhi.n	80073aa <xTaskGenericNotify+0xfe>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <xTaskGenericNotify+0x8c>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	080073c9 	.word	0x080073c9
 800733c:	0800734d 	.word	0x0800734d
 8007340:	08007369 	.word	0x08007369
 8007344:	08007381 	.word	0x08007381
 8007348:	0800738f 	.word	0x0800738f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	3226      	adds	r2, #38	; 0x26
 8007352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	ea42 0103 	orr.w	r1, r2, r3
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	3226      	adds	r2, #38	; 0x26
 8007362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007366:	e032      	b.n	80073ce <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	3226      	adds	r2, #38	; 0x26
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	1c59      	adds	r1, r3, #1
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	3226      	adds	r2, #38	; 0x26
 800737a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800737e:	e026      	b.n	80073ce <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	3226      	adds	r2, #38	; 0x26
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800738c:	e01f      	b.n	80073ce <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800738e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007392:	2b02      	cmp	r3, #2
 8007394:	d006      	beq.n	80073a4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	3226      	adds	r2, #38	; 0x26
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80073a2:	e014      	b.n	80073ce <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80073a8:	e011      	b.n	80073ce <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80073aa:	4b55      	ldr	r3, [pc, #340]	; (8007500 <xTaskGenericNotify+0x254>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00c      	beq.n	80073cc <xTaskGenericNotify+0x120>
        __asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	61bb      	str	r3, [r7, #24]
    }
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <xTaskGenericNotify+0x11a>
                    break;
 80073c8:	bf00      	nop
 80073ca:	e000      	b.n	80073ce <xTaskGenericNotify+0x122>

                    break;
 80073cc:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	4618      	mov	r0, r3
 80073d2:	f002 fef5 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 80073d6:	4601      	mov	r1, r0
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4613      	mov	r3, r2
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	203e      	movs	r0, #62	; 0x3e
 80073e4:	f002 f988 	bl	80096f8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80073e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d17f      	bne.n	80074f0 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fc:	68d2      	ldr	r2, [r2, #12]
 80073fe:	609a      	str	r2, [r3, #8]
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007406:	6892      	ldr	r2, [r2, #8]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	3304      	adds	r3, #4
 8007412:	429a      	cmp	r2, r3
 8007414:	d103      	bne.n	800741e <xTaskGenericNotify+0x172>
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	605a      	str	r2, [r3, #4]
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	2200      	movs	r2, #0
 8007422:	615a      	str	r2, [r3, #20]
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	1e5a      	subs	r2, r3, #1
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	4618      	mov	r0, r3
 8007432:	f002 fe83 	bl	800a13c <SEGGER_SYSVIEW_OnTaskStartReady>
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	2201      	movs	r2, #1
 800743c:	409a      	lsls	r2, r3
 800743e:	4b31      	ldr	r3, [pc, #196]	; (8007504 <xTaskGenericNotify+0x258>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4313      	orrs	r3, r2
 8007444:	4a2f      	ldr	r2, [pc, #188]	; (8007504 <xTaskGenericNotify+0x258>)
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744c:	492e      	ldr	r1, [pc, #184]	; (8007508 <xTaskGenericNotify+0x25c>)
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	440b      	add	r3, r1
 8007458:	3304      	adds	r3, #4
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007462:	609a      	str	r2, [r3, #8]
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	60da      	str	r2, [r3, #12]
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007472:	3204      	adds	r2, #4
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	1d1a      	adds	r2, r3, #4
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	609a      	str	r2, [r3, #8]
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <xTaskGenericNotify+0x25c>)
 800748c:	441a      	add	r2, r3
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	615a      	str	r2, [r3, #20]
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007496:	491c      	ldr	r1, [pc, #112]	; (8007508 <xTaskGenericNotify+0x25c>)
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	1c59      	adds	r1, r3, #1
 80074a6:	4818      	ldr	r0, [pc, #96]	; (8007508 <xTaskGenericNotify+0x25c>)
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4403      	add	r3, r0
 80074b2:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <xTaskGenericNotify+0x226>
        __asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	617b      	str	r3, [r7, #20]
    }
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <xTaskGenericNotify+0x260>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	429a      	cmp	r2, r3
 80074de:	d907      	bls.n	80074f0 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <xTaskGenericNotify+0x264>)
 80074e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80074f0:	f000 ff48 	bl	8008384 <vPortExitCritical>

        return xReturn;
 80074f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80074f6:	4618      	mov	r0, r3
 80074f8:	3738      	adds	r7, #56	; 0x38
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000740 	.word	0x20000740
 8007504:	20000744 	.word	0x20000744
 8007508:	20000640 	.word	0x20000640
 800750c:	2000063c 	.word	0x2000063c
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8007514:	b580      	push	{r7, lr}
 8007516:	b094      	sub	sp, #80	; 0x50
 8007518:	af02      	add	r7, sp, #8
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8007522:	2301      	movs	r3, #1
 8007524:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800755e:	f000 ffcd 	bl	80084fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8007566:	f3ef 8211 	mrs	r2, BASEPRI
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	623a      	str	r2, [r7, #32]
 800757c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800757e:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8007582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007584:	2b00      	cmp	r3, #0
 8007586:	d006      	beq.n	8007596 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	3226      	adds	r2, #38	; 0x26
 800758e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007594:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4413      	add	r3, r2
 800759c:	339c      	adds	r3, #156	; 0x9c
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80075a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4413      	add	r3, r2
 80075aa:	339c      	adds	r3, #156	; 0x9c
 80075ac:	2202      	movs	r2, #2
 80075ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d83b      	bhi.n	800762e <xTaskGenericNotifyFromISR+0x11a>
 80075b6:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <xTaskGenericNotifyFromISR+0xa8>)
 80075b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075bc:	0800764d 	.word	0x0800764d
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	080075ed 	.word	0x080075ed
 80075c8:	08007605 	.word	0x08007605
 80075cc:	08007613 	.word	0x08007613
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80075d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	3226      	adds	r2, #38	; 0x26
 80075d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	ea42 0103 	orr.w	r1, r2, r3
 80075e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	3226      	adds	r2, #38	; 0x26
 80075e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80075ea:	e032      	b.n	8007652 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80075ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	3226      	adds	r2, #38	; 0x26
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	1c59      	adds	r1, r3, #1
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	3226      	adds	r2, #38	; 0x26
 80075fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007602:	e026      	b.n	8007652 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	3226      	adds	r2, #38	; 0x26
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007610:	e01f      	b.n	8007652 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007612:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007616:	2b02      	cmp	r3, #2
 8007618:	d006      	beq.n	8007628 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800761a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	3226      	adds	r2, #38	; 0x26
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007626:	e014      	b.n	8007652 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8007628:	2300      	movs	r3, #0
 800762a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800762c:	e011      	b.n	8007652 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800762e:	4b69      	ldr	r3, [pc, #420]	; (80077d4 <xTaskGenericNotifyFromISR+0x2c0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00c      	beq.n	8007650 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	61bb      	str	r3, [r7, #24]
    }
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800764c:	bf00      	nop
 800764e:	e000      	b.n	8007652 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8007650:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8007652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007654:	4618      	mov	r0, r3
 8007656:	f002 fdb3 	bl	800a1c0 <SEGGER_SYSVIEW_ShrinkId>
 800765a:	78f9      	ldrb	r1, [r7, #3]
 800765c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007660:	9201      	str	r2, [sp, #4]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	460b      	mov	r3, r1
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	4601      	mov	r1, r0
 800766a:	203f      	movs	r0, #63	; 0x3f
 800766c:	f002 f8d6 	bl	800981c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007670:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007674:	2b01      	cmp	r3, #1
 8007676:	f040 80a2 	bne.w	80077be <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800767a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	617b      	str	r3, [r7, #20]
    }
 8007694:	bf00      	nop
 8007696:	e7fe      	b.n	8007696 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007698:	4b4f      	ldr	r3, [pc, #316]	; (80077d8 <xTaskGenericNotifyFromISR+0x2c4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d162      	bne.n	8007766 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80076a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	633b      	str	r3, [r7, #48]	; 0x30
 80076a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076ac:	68d2      	ldr	r2, [r2, #12]
 80076ae:	609a      	str	r2, [r3, #8]
 80076b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076b6:	6892      	ldr	r2, [r2, #8]
 80076b8:	605a      	str	r2, [r3, #4]
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c0:	3304      	adds	r3, #4
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d103      	bne.n	80076ce <xTaskGenericNotifyFromISR+0x1ba>
 80076c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d0:	2200      	movs	r2, #0
 80076d2:	615a      	str	r2, [r3, #20]
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	1e5a      	subs	r2, r3, #1
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80076de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e0:	4618      	mov	r0, r3
 80076e2:	f002 fd2b 	bl	800a13c <SEGGER_SYSVIEW_OnTaskStartReady>
 80076e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	2201      	movs	r2, #1
 80076ec:	409a      	lsls	r2, r3
 80076ee:	4b3b      	ldr	r3, [pc, #236]	; (80077dc <xTaskGenericNotifyFromISR+0x2c8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	4a39      	ldr	r2, [pc, #228]	; (80077dc <xTaskGenericNotifyFromISR+0x2c8>)
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fc:	4938      	ldr	r1, [pc, #224]	; (80077e0 <xTaskGenericNotifyFromISR+0x2cc>)
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	440b      	add	r3, r1
 8007708:	3304      	adds	r3, #4
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800770e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800771a:	60da      	str	r2, [r3, #12]
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007722:	3204      	adds	r2, #4
 8007724:	605a      	str	r2, [r3, #4]
 8007726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007728:	1d1a      	adds	r2, r3, #4
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	609a      	str	r2, [r3, #8]
 800772e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4a29      	ldr	r2, [pc, #164]	; (80077e0 <xTaskGenericNotifyFromISR+0x2cc>)
 800773c:	441a      	add	r2, r3
 800773e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007740:	615a      	str	r2, [r3, #20]
 8007742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007746:	4926      	ldr	r1, [pc, #152]	; (80077e0 <xTaskGenericNotifyFromISR+0x2cc>)
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	1c59      	adds	r1, r3, #1
 8007756:	4822      	ldr	r0, [pc, #136]	; (80077e0 <xTaskGenericNotifyFromISR+0x2cc>)
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4403      	add	r3, r0
 8007762:	6019      	str	r1, [r3, #0]
 8007764:	e01b      	b.n	800779e <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007766:	4b1f      	ldr	r3, [pc, #124]	; (80077e4 <xTaskGenericNotifyFromISR+0x2d0>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
 800776c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007770:	61da      	str	r2, [r3, #28]
 8007772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007778:	621a      	str	r2, [r3, #32]
 800777a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007780:	3218      	adds	r2, #24
 8007782:	605a      	str	r2, [r3, #4]
 8007784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007786:	f103 0218 	add.w	r2, r3, #24
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	609a      	str	r2, [r3, #8]
 800778e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007790:	4a14      	ldr	r2, [pc, #80]	; (80077e4 <xTaskGenericNotifyFromISR+0x2d0>)
 8007792:	629a      	str	r2, [r3, #40]	; 0x28
 8007794:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <xTaskGenericNotifyFromISR+0x2d0>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3301      	adds	r3, #1
 800779a:	4a12      	ldr	r2, [pc, #72]	; (80077e4 <xTaskGenericNotifyFromISR+0x2d0>)
 800779c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800779e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a2:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <xTaskGenericNotifyFromISR+0x2d4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d908      	bls.n	80077be <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80077ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80077b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077b4:	2201      	movs	r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80077b8:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <xTaskGenericNotifyFromISR+0x2d8>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c0:	613b      	str	r3, [r7, #16]
        __asm volatile
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f383 8811 	msr	BASEPRI, r3
    }
 80077c8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80077ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80077cc:	4618      	mov	r0, r3
 80077ce:	3748      	adds	r7, #72	; 0x48
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000740 	.word	0x20000740
 80077d8:	20000764 	.word	0x20000764
 80077dc:	20000744 	.word	0x20000744
 80077e0:	20000640 	.word	0x20000640
 80077e4:	200006fc 	.word	0x200006fc
 80077e8:	2000063c 	.word	0x2000063c
 80077ec:	20000750 	.word	0x20000750

080077f0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80077fa:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007800:	4b35      	ldr	r3, [pc, #212]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3304      	adds	r3, #4
 8007806:	4618      	mov	r0, r3
 8007808:	f7fd fc46 	bl	8005098 <uxListRemove>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10b      	bne.n	800782a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007812:	4b31      	ldr	r3, [pc, #196]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	2201      	movs	r2, #1
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	43da      	mvns	r2, r3
 8007820:	4b2e      	ldr	r3, [pc, #184]	; (80078dc <prvAddCurrentTaskToDelayedList+0xec>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4013      	ands	r3, r2
 8007826:	4a2d      	ldr	r2, [pc, #180]	; (80078dc <prvAddCurrentTaskToDelayedList+0xec>)
 8007828:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d124      	bne.n	800787c <prvAddCurrentTaskToDelayedList+0x8c>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d021      	beq.n	800787c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007838:	4b29      	ldr	r3, [pc, #164]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	613b      	str	r3, [r7, #16]
 800783e:	4b26      	ldr	r3, [pc, #152]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	609a      	str	r2, [r3, #8]
 8007846:	4b24      	ldr	r3, [pc, #144]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	6892      	ldr	r2, [r2, #8]
 800784e:	60da      	str	r2, [r3, #12]
 8007850:	4b21      	ldr	r3, [pc, #132]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	3204      	adds	r2, #4
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	4b1e      	ldr	r3, [pc, #120]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	1d1a      	adds	r2, r3, #4
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	609a      	str	r2, [r3, #8]
 8007866:	4b1c      	ldr	r3, [pc, #112]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a1d      	ldr	r2, [pc, #116]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800786c:	615a      	str	r2, [r3, #20]
 800786e:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3301      	adds	r3, #1
 8007874:	4a1a      	ldr	r2, [pc, #104]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800787a:	e026      	b.n	80078ca <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4413      	add	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007884:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	429a      	cmp	r2, r3
 8007892:	d209      	bcs.n	80078a8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007894:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fd fbc0 	bl	8005026 <vListInsert>
}
 80078a6:	e010      	b.n	80078ca <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a8:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <prvAddCurrentTaskToDelayedList+0xf8>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4619      	mov	r1, r3
 80078b4:	4610      	mov	r0, r2
 80078b6:	f7fd fbb6 	bl	8005026 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80078ba:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <prvAddCurrentTaskToDelayedList+0xfc>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d202      	bcs.n	80078ca <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80078c4:	4a09      	ldr	r2, [pc, #36]	; (80078ec <prvAddCurrentTaskToDelayedList+0xfc>)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6013      	str	r3, [r2, #0]
}
 80078ca:	bf00      	nop
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20000740 	.word	0x20000740
 80078d8:	2000063c 	.word	0x2000063c
 80078dc:	20000744 	.word	0x20000744
 80078e0:	20000728 	.word	0x20000728
 80078e4:	200006f8 	.word	0x200006f8
 80078e8:	200006f4 	.word	0x200006f4
 80078ec:	2000075c 	.word	0x2000075c

080078f0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	; 0x28
 80078f4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80078fa:	f000 fb05 	bl	8007f08 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80078fe:	4b1c      	ldr	r3, [pc, #112]	; (8007970 <xTimerCreateTimerTask+0x80>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d021      	beq.n	800794a <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	60bb      	str	r3, [r7, #8]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800790e:	1d3a      	adds	r2, r7, #4
 8007910:	f107 0108 	add.w	r1, r7, #8
 8007914:	f107 030c 	add.w	r3, r7, #12
 8007918:	4618      	mov	r0, r3
 800791a:	f7f9 f9cb 	bl	8000cb4 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	9202      	str	r2, [sp, #8]
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	2302      	movs	r3, #2
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	2300      	movs	r3, #0
 800792e:	460a      	mov	r2, r1
 8007930:	4910      	ldr	r1, [pc, #64]	; (8007974 <xTimerCreateTimerTask+0x84>)
 8007932:	4811      	ldr	r0, [pc, #68]	; (8007978 <xTimerCreateTimerTask+0x88>)
 8007934:	f7fe fad0 	bl	8005ed8 <xTaskCreateStatic>
 8007938:	4603      	mov	r3, r0
 800793a:	4a10      	ldr	r2, [pc, #64]	; (800797c <xTimerCreateTimerTask+0x8c>)
 800793c:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <xTimerCreateTimerTask+0x8c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <xTimerCreateTimerTask+0x5a>
                {
                    xReturn = pdPASS;
 8007946:	2301      	movs	r3, #1
 8007948:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10a      	bne.n	8007966 <xTimerCreateTimerTask+0x76>
        __asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
    }
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xTimerCreateTimerTask+0x74>
        return xReturn;
 8007966:	697b      	ldr	r3, [r7, #20]
    }
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000798 	.word	0x20000798
 8007974:	0800a7f8 	.word	0x0800a7f8
 8007978:	08007b75 	.word	0x08007b75
 800797c:	2000079c 	.word	0x2000079c

08007980 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af02      	add	r7, sp, #8
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800798e:	2028      	movs	r0, #40	; 0x28
 8007990:	f000 fdf4 	bl	800857c <pvPortMalloc>
 8007994:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00d      	beq.n	80079b8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f805 	bl	80079c2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80079b8:	697b      	ldr	r3, [r7, #20]
        }
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b086      	sub	sp, #24
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	607a      	str	r2, [r7, #4]
 80079ce:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	617b      	str	r3, [r7, #20]
    }
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80079ec:	f000 fa8c 	bl	8007f08 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	6a3a      	ldr	r2, [r7, #32]
 8007a06:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fd fad9 	bl	8004fc4 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a1e:	f043 0304 	orr.w	r3, r3, #4
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8007a2a:	bf00      	nop
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <xTimerGenericCommand+0x2e>
        __asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	623b      	str	r3, [r7, #32]
    }
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007a62:	4b1a      	ldr	r3, [pc, #104]	; (8007acc <xTimerGenericCommand+0x98>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d02a      	beq.n	8007ac0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b05      	cmp	r3, #5
 8007a7a:	dc18      	bgt.n	8007aae <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a7c:	f7ff faf0 	bl	8007060 <xTaskGetSchedulerState>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d109      	bne.n	8007a9a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a86:	4b11      	ldr	r3, [pc, #68]	; (8007acc <xTimerGenericCommand+0x98>)
 8007a88:	6818      	ldr	r0, [r3, #0]
 8007a8a:	f107 0114 	add.w	r1, r7, #20
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a92:	f7fd fc91 	bl	80053b8 <xQueueGenericSend>
 8007a96:	6278      	str	r0, [r7, #36]	; 0x24
 8007a98:	e012      	b.n	8007ac0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <xTimerGenericCommand+0x98>)
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	f107 0114 	add.w	r1, r7, #20
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f7fd fc87 	bl	80053b8 <xQueueGenericSend>
 8007aaa:	6278      	str	r0, [r7, #36]	; 0x24
 8007aac:	e008      	b.n	8007ac0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007aae:	4b07      	ldr	r3, [pc, #28]	; (8007acc <xTimerGenericCommand+0x98>)
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	f107 0114 	add.w	r1, r7, #20
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	f7fd fda3 	bl	8005604 <xQueueGenericSendFromISR>
 8007abe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3728      	adds	r7, #40	; 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000798 	.word	0x20000798

08007ad0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007adc:	e008      	b.n	8007af0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	699a      	ldr	r2, [r3, #24]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	18d1      	adds	r1, r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f8dd 	bl	8007cbc <prvInsertTimerInActiveList>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1ea      	bne.n	8007ade <prvReloadTimer+0xe>
        }
    }
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1e:	4b14      	ldr	r3, [pc, #80]	; (8007b70 <prvProcessExpiredTimer+0x5c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fd fab3 	bl	8005098 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d005      	beq.n	8007b4c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f7ff ffc3 	bl	8007ad0 <prvReloadTimer>
 8007b4a:	e008      	b.n	8007b5e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b52:	f023 0301 	bic.w	r3, r3, #1
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	4798      	blx	r3
    }
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000790 	.word	0x20000790

08007b74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b7c:	f107 0308 	add.w	r3, r7, #8
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 f857 	bl	8007c34 <prvGetNextExpireTime>
 8007b86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 f803 	bl	8007b98 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007b92:	f000 f8d5 	bl	8007d40 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b96:	e7f1      	b.n	8007b7c <prvTimerTask+0x8>

08007b98 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007ba2:	f7fe fc17 	bl	80063d4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ba6:	f107 0308 	add.w	r3, r7, #8
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 f866 	bl	8007c7c <prvSampleTimeNow>
 8007bb0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d130      	bne.n	8007c1a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10a      	bne.n	8007bd4 <prvProcessTimerOrBlockTask+0x3c>
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d806      	bhi.n	8007bd4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007bc6:	f7fe fc13 	bl	80063f0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bca:	68f9      	ldr	r1, [r7, #12]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff ffa1 	bl	8007b14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007bd2:	e024      	b.n	8007c1e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007bda:	4b13      	ldr	r3, [pc, #76]	; (8007c28 <prvProcessTimerOrBlockTask+0x90>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <prvProcessTimerOrBlockTask+0x50>
 8007be4:	2301      	movs	r3, #1
 8007be6:	e000      	b.n	8007bea <prvProcessTimerOrBlockTask+0x52>
 8007be8:	2300      	movs	r3, #0
 8007bea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bec:	4b0f      	ldr	r3, [pc, #60]	; (8007c2c <prvProcessTimerOrBlockTask+0x94>)
 8007bee:	6818      	ldr	r0, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	f7fe f939 	bl	8005e70 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007bfe:	f7fe fbf7 	bl	80063f0 <xTaskResumeAll>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007c08:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <prvProcessTimerOrBlockTask+0x98>)
 8007c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	f3bf 8f6f 	isb	sy
    }
 8007c18:	e001      	b.n	8007c1e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007c1a:	f7fe fbe9 	bl	80063f0 <xTaskResumeAll>
    }
 8007c1e:	bf00      	nop
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20000794 	.word	0x20000794
 8007c2c:	20000798 	.word	0x20000798
 8007c30:	e000ed04 	.word	0xe000ed04

08007c34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c3c:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <prvGetNextExpireTime+0x44>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <prvGetNextExpireTime+0x16>
 8007c46:	2201      	movs	r2, #1
 8007c48:	e000      	b.n	8007c4c <prvGetNextExpireTime+0x18>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d105      	bne.n	8007c64 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c58:	4b07      	ldr	r3, [pc, #28]	; (8007c78 <prvGetNextExpireTime+0x44>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	e001      	b.n	8007c68 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007c68:	68fb      	ldr	r3, [r7, #12]
    }
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20000790 	.word	0x20000790

08007c7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007c84:	f7fe fcb4 	bl	80065f0 <xTaskGetTickCount>
 8007c88:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007c8a:	4b0b      	ldr	r3, [pc, #44]	; (8007cb8 <prvSampleTimeNow+0x3c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d205      	bcs.n	8007ca0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007c94:	f000 f912 	bl	8007ebc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e002      	b.n	8007ca6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007ca6:	4a04      	ldr	r2, [pc, #16]	; (8007cb8 <prvSampleTimeNow+0x3c>)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007cac:	68fb      	ldr	r3, [r7, #12]
    }
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200007a0 	.word	0x200007a0

08007cbc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d812      	bhi.n	8007d08 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	1ad2      	subs	r2, r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d302      	bcc.n	8007cf6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	e01b      	b.n	8007d2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007cf6:	4b10      	ldr	r3, [pc, #64]	; (8007d38 <prvInsertTimerInActiveList+0x7c>)
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4610      	mov	r0, r2
 8007d02:	f7fd f990 	bl	8005026 <vListInsert>
 8007d06:	e012      	b.n	8007d2e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d206      	bcs.n	8007d1e <prvInsertTimerInActiveList+0x62>
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d302      	bcc.n	8007d1e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	e007      	b.n	8007d2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d1e:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <prvInsertTimerInActiveList+0x80>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f7fd f97c 	bl	8005026 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007d2e:	697b      	ldr	r3, [r7, #20]
    }
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	20000794 	.word	0x20000794
 8007d3c:	20000790 	.word	0x20000790

08007d40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d46:	e0a6      	b.n	8007e96 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f2c0 80a3 	blt.w	8007e96 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d004      	beq.n	8007d66 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fd f999 	bl	8005098 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d66:	1d3b      	adds	r3, r7, #4
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff ff87 	bl	8007c7c <prvSampleTimeNow>
 8007d6e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	f200 808d 	bhi.w	8007e94 <prvProcessReceivedCommands+0x154>
 8007d7a:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <prvProcessReceivedCommands+0x40>)
 8007d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007da5 	.word	0x08007da5
 8007d88:	08007e0d 	.word	0x08007e0d
 8007d8c:	08007e21 	.word	0x08007e21
 8007d90:	08007e6b 	.word	0x08007e6b
 8007d94:	08007da5 	.word	0x08007da5
 8007d98:	08007da5 	.word	0x08007da5
 8007d9c:	08007e0d 	.word	0x08007e0d
 8007da0:	08007e21 	.word	0x08007e21
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007daa:	f043 0301 	orr.w	r3, r3, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	18d1      	adds	r1, r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	69f8      	ldr	r0, [r7, #28]
 8007dc4:	f7ff ff7a 	bl	8007cbc <prvInsertTimerInActiveList>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d063      	beq.n	8007e96 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d009      	beq.n	8007df0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	4413      	add	r3, r2
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	4619      	mov	r1, r3
 8007de8:	69f8      	ldr	r0, [r7, #28]
 8007dea:	f7ff fe71 	bl	8007ad0 <prvReloadTimer>
 8007dee:	e008      	b.n	8007e02 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	69f8      	ldr	r0, [r7, #28]
 8007e08:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007e0a:	e044      	b.n	8007e96 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e12:	f023 0301 	bic.w	r3, r3, #1
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8007e1e:	e03a      	b.n	8007e96 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e26:	f043 0301 	orr.w	r3, r3, #1
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	617b      	str	r3, [r7, #20]
    }
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	18d1      	adds	r1, r2, r3
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	69f8      	ldr	r0, [r7, #28]
 8007e64:	f7ff ff2a 	bl	8007cbc <prvInsertTimerInActiveList>
                        break;
 8007e68:	e015      	b.n	8007e96 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d103      	bne.n	8007e80 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007e78:	69f8      	ldr	r0, [r7, #28]
 8007e7a:	f000 fc39 	bl	80086f0 <vPortFree>
 8007e7e:	e00a      	b.n	8007e96 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007e92:	e000      	b.n	8007e96 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007e94:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e96:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <prvProcessReceivedCommands+0x178>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f107 0108 	add.w	r1, r7, #8
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fd fc75 	bl	8005790 <xQueueReceive>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f47f af4d 	bne.w	8007d48 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	3720      	adds	r7, #32
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000798 	.word	0x20000798

08007ebc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ec2:	e009      	b.n	8007ed8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ec4:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <prvSwitchTimerLists+0x44>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007ece:	f04f 31ff 	mov.w	r1, #4294967295
 8007ed2:	6838      	ldr	r0, [r7, #0]
 8007ed4:	f7ff fe1e 	bl	8007b14 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ed8:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <prvSwitchTimerLists+0x44>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f0      	bne.n	8007ec4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007ee2:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <prvSwitchTimerLists+0x44>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007ee8:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <prvSwitchTimerLists+0x48>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a04      	ldr	r2, [pc, #16]	; (8007f00 <prvSwitchTimerLists+0x44>)
 8007eee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007ef0:	4a04      	ldr	r2, [pc, #16]	; (8007f04 <prvSwitchTimerLists+0x48>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6013      	str	r3, [r2, #0]
    }
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000790 	.word	0x20000790
 8007f04:	20000794 	.word	0x20000794

08007f08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007f0e:	f000 fa09 	bl	8008324 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <prvCheckForValidListAndQueue+0x60>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d120      	bne.n	8007f5c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8007f1a:	4814      	ldr	r0, [pc, #80]	; (8007f6c <prvCheckForValidListAndQueue+0x64>)
 8007f1c:	f7fd f832 	bl	8004f84 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007f20:	4813      	ldr	r0, [pc, #76]	; (8007f70 <prvCheckForValidListAndQueue+0x68>)
 8007f22:	f7fd f82f 	bl	8004f84 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007f26:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <prvCheckForValidListAndQueue+0x6c>)
 8007f28:	4a10      	ldr	r2, [pc, #64]	; (8007f6c <prvCheckForValidListAndQueue+0x64>)
 8007f2a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007f2c:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <prvCheckForValidListAndQueue+0x70>)
 8007f2e:	4a10      	ldr	r2, [pc, #64]	; (8007f70 <prvCheckForValidListAndQueue+0x68>)
 8007f30:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f32:	2300      	movs	r3, #0
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <prvCheckForValidListAndQueue+0x74>)
 8007f38:	4a11      	ldr	r2, [pc, #68]	; (8007f80 <prvCheckForValidListAndQueue+0x78>)
 8007f3a:	210c      	movs	r1, #12
 8007f3c:	2004      	movs	r0, #4
 8007f3e:	f7fd f965 	bl	800520c <xQueueGenericCreateStatic>
 8007f42:	4603      	mov	r3, r0
 8007f44:	4a08      	ldr	r2, [pc, #32]	; (8007f68 <prvCheckForValidListAndQueue+0x60>)
 8007f46:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007f48:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <prvCheckForValidListAndQueue+0x60>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <prvCheckForValidListAndQueue+0x60>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	490b      	ldr	r1, [pc, #44]	; (8007f84 <prvCheckForValidListAndQueue+0x7c>)
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fd ff34 	bl	8005dc4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007f5c:	f000 fa12 	bl	8008384 <vPortExitCritical>
    }
 8007f60:	bf00      	nop
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000798 	.word	0x20000798
 8007f6c:	20000768 	.word	0x20000768
 8007f70:	2000077c 	.word	0x2000077c
 8007f74:	20000790 	.word	0x20000790
 8007f78:	20000794 	.word	0x20000794
 8007f7c:	200007d4 	.word	0x200007d4
 8007f80:	200007a4 	.word	0x200007a4
 8007f84:	0800a800 	.word	0x0800a800

08007f88 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <pvTimerGetTimerID+0x28>
        __asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	60fb      	str	r3, [r7, #12]
    }
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007fb0:	f000 f9b8 	bl	8008324 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007fba:	f000 f9e3 	bl	8008384 <vPortExitCritical>

        return pvReturn;
 8007fbe:	693b      	ldr	r3, [r7, #16]
    }
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3b04      	subs	r3, #4
 8007fd8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fe0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3b04      	subs	r3, #4
 8007fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f023 0201 	bic.w	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3b04      	subs	r3, #4
 8007ff6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007ff8:	4a0c      	ldr	r2, [pc, #48]	; (800802c <pxPortInitialiseStack+0x64>)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3b14      	subs	r3, #20
 8008002:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b04      	subs	r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f06f 0202 	mvn.w	r2, #2
 8008016:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3b20      	subs	r3, #32
 800801c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800801e:	68fb      	ldr	r3, [r7, #12]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	08008031 	.word	0x08008031

08008030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <prvTaskExitError+0x54>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008042:	d00a      	beq.n	800805a <prvTaskExitError+0x2a>
        __asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	60fb      	str	r3, [r7, #12]
    }
 8008056:	bf00      	nop
 8008058:	e7fe      	b.n	8008058 <prvTaskExitError+0x28>
        __asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	60bb      	str	r3, [r7, #8]
    }
 800806c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800806e:	bf00      	nop
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0fc      	beq.n	8008070 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	2000001c 	.word	0x2000001c
	...

08008090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <pxCurrentTCBConst2>)
 8008092:	6819      	ldr	r1, [r3, #0]
 8008094:	6808      	ldr	r0, [r1, #0]
 8008096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	f380 8809 	msr	PSP, r0
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8811 	msr	BASEPRI, r0
 80080aa:	4770      	bx	lr
 80080ac:	f3af 8000 	nop.w

080080b0 <pxCurrentTCBConst2>:
 80080b0:	2000063c 	.word	0x2000063c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop

080080b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80080b8:	4808      	ldr	r0, [pc, #32]	; (80080dc <prvPortStartFirstTask+0x24>)
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	6800      	ldr	r0, [r0, #0]
 80080be:	f380 8808 	msr	MSP, r0
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8814 	msr	CONTROL, r0
 80080ca:	b662      	cpsie	i
 80080cc:	b661      	cpsie	f
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	df00      	svc	0
 80080d8:	bf00      	nop
 80080da:	0000      	.short	0x0000
 80080dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop

080080e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080ea:	4b46      	ldr	r3, [pc, #280]	; (8008204 <xPortStartScheduler+0x120>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a46      	ldr	r2, [pc, #280]	; (8008208 <xPortStartScheduler+0x124>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d10a      	bne.n	800810a <xPortStartScheduler+0x26>
        __asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	613b      	str	r3, [r7, #16]
    }
 8008106:	bf00      	nop
 8008108:	e7fe      	b.n	8008108 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800810a:	4b3e      	ldr	r3, [pc, #248]	; (8008204 <xPortStartScheduler+0x120>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a3f      	ldr	r2, [pc, #252]	; (800820c <xPortStartScheduler+0x128>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d10a      	bne.n	800812a <xPortStartScheduler+0x46>
        __asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
    }
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800812a:	4b39      	ldr	r3, [pc, #228]	; (8008210 <xPortStartScheduler+0x12c>)
 800812c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	22ff      	movs	r2, #255	; 0xff
 800813a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008144:	78fb      	ldrb	r3, [r7, #3]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800814c:	b2da      	uxtb	r2, r3
 800814e:	4b31      	ldr	r3, [pc, #196]	; (8008214 <xPortStartScheduler+0x130>)
 8008150:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008152:	4b31      	ldr	r3, [pc, #196]	; (8008218 <xPortStartScheduler+0x134>)
 8008154:	2207      	movs	r2, #7
 8008156:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008158:	e009      	b.n	800816e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800815a:	4b2f      	ldr	r3, [pc, #188]	; (8008218 <xPortStartScheduler+0x134>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3b01      	subs	r3, #1
 8008160:	4a2d      	ldr	r2, [pc, #180]	; (8008218 <xPortStartScheduler+0x134>)
 8008162:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	b2db      	uxtb	r3, r3
 800816c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800816e:	78fb      	ldrb	r3, [r7, #3]
 8008170:	b2db      	uxtb	r3, r3
 8008172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008176:	2b80      	cmp	r3, #128	; 0x80
 8008178:	d0ef      	beq.n	800815a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800817a:	4b27      	ldr	r3, [pc, #156]	; (8008218 <xPortStartScheduler+0x134>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1c3 0307 	rsb	r3, r3, #7
 8008182:	2b04      	cmp	r3, #4
 8008184:	d00a      	beq.n	800819c <xPortStartScheduler+0xb8>
        __asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	60bb      	str	r3, [r7, #8]
    }
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800819c:	4b1e      	ldr	r3, [pc, #120]	; (8008218 <xPortStartScheduler+0x134>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	4a1d      	ldr	r2, [pc, #116]	; (8008218 <xPortStartScheduler+0x134>)
 80081a4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081a6:	4b1c      	ldr	r3, [pc, #112]	; (8008218 <xPortStartScheduler+0x134>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081ae:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <xPortStartScheduler+0x134>)
 80081b0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80081ba:	4b18      	ldr	r3, [pc, #96]	; (800821c <xPortStartScheduler+0x138>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a17      	ldr	r2, [pc, #92]	; (800821c <xPortStartScheduler+0x138>)
 80081c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80081c6:	4b15      	ldr	r3, [pc, #84]	; (800821c <xPortStartScheduler+0x138>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a14      	ldr	r2, [pc, #80]	; (800821c <xPortStartScheduler+0x138>)
 80081cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80081d2:	f000 f963 	bl	800849c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80081d6:	4b12      	ldr	r3, [pc, #72]	; (8008220 <xPortStartScheduler+0x13c>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80081dc:	f000 f982 	bl	80084e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081e0:	4b10      	ldr	r3, [pc, #64]	; (8008224 <xPortStartScheduler+0x140>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a0f      	ldr	r2, [pc, #60]	; (8008224 <xPortStartScheduler+0x140>)
 80081e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80081ec:	f7ff ff64 	bl	80080b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80081f0:	f7fe fc1a 	bl	8006a28 <vTaskSwitchContext>
    prvTaskExitError();
 80081f4:	f7ff ff1c 	bl	8008030 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	e000ed00 	.word	0xe000ed00
 8008208:	410fc271 	.word	0x410fc271
 800820c:	410fc270 	.word	0x410fc270
 8008210:	e000e400 	.word	0xe000e400
 8008214:	2000081c 	.word	0x2000081c
 8008218:	20000820 	.word	0x20000820
 800821c:	e000ed20 	.word	0xe000ed20
 8008220:	2000001c 	.word	0x2000001c
 8008224:	e000ef34 	.word	0xe000ef34

08008228 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800822e:	4b37      	ldr	r3, [pc, #220]	; (800830c <vInitPrioGroupValue+0xe4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a37      	ldr	r2, [pc, #220]	; (8008310 <vInitPrioGroupValue+0xe8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d10a      	bne.n	800824e <vInitPrioGroupValue+0x26>
        __asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	613b      	str	r3, [r7, #16]
    }
 800824a:	bf00      	nop
 800824c:	e7fe      	b.n	800824c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800824e:	4b2f      	ldr	r3, [pc, #188]	; (800830c <vInitPrioGroupValue+0xe4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a30      	ldr	r2, [pc, #192]	; (8008314 <vInitPrioGroupValue+0xec>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d10a      	bne.n	800826e <vInitPrioGroupValue+0x46>
        __asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	60fb      	str	r3, [r7, #12]
    }
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800826e:	4b2a      	ldr	r3, [pc, #168]	; (8008318 <vInitPrioGroupValue+0xf0>)
 8008270:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	b2db      	uxtb	r3, r3
 8008278:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	22ff      	movs	r2, #255	; 0xff
 800827e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008290:	b2da      	uxtb	r2, r3
 8008292:	4b22      	ldr	r3, [pc, #136]	; (800831c <vInitPrioGroupValue+0xf4>)
 8008294:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008296:	4b22      	ldr	r3, [pc, #136]	; (8008320 <vInitPrioGroupValue+0xf8>)
 8008298:	2207      	movs	r2, #7
 800829a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800829c:	e009      	b.n	80082b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800829e:	4b20      	ldr	r3, [pc, #128]	; (8008320 <vInitPrioGroupValue+0xf8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <vInitPrioGroupValue+0xf8>)
 80082a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082b2:	78fb      	ldrb	r3, [r7, #3]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ba:	2b80      	cmp	r3, #128	; 0x80
 80082bc:	d0ef      	beq.n	800829e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082be:	4b18      	ldr	r3, [pc, #96]	; (8008320 <vInitPrioGroupValue+0xf8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1c3 0307 	rsb	r3, r3, #7
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d00a      	beq.n	80082e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	60bb      	str	r3, [r7, #8]
    }
 80082dc:	bf00      	nop
 80082de:	e7fe      	b.n	80082de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082e0:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <vInitPrioGroupValue+0xf8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	4a0e      	ldr	r2, [pc, #56]	; (8008320 <vInitPrioGroupValue+0xf8>)
 80082e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082ea:	4b0d      	ldr	r3, [pc, #52]	; (8008320 <vInitPrioGroupValue+0xf8>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082f2:	4a0b      	ldr	r2, [pc, #44]	; (8008320 <vInitPrioGroupValue+0xf8>)
 80082f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80082fe:	bf00      	nop
 8008300:	371c      	adds	r7, #28
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	e000ed00 	.word	0xe000ed00
 8008310:	410fc271 	.word	0x410fc271
 8008314:	410fc270 	.word	0x410fc270
 8008318:	e000e400 	.word	0xe000e400
 800831c:	2000081c 	.word	0x2000081c
 8008320:	20000820 	.word	0x20000820

08008324 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
        __asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	607b      	str	r3, [r7, #4]
    }
 800833c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800833e:	4b0f      	ldr	r3, [pc, #60]	; (800837c <vPortEnterCritical+0x58>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3301      	adds	r3, #1
 8008344:	4a0d      	ldr	r2, [pc, #52]	; (800837c <vPortEnterCritical+0x58>)
 8008346:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008348:	4b0c      	ldr	r3, [pc, #48]	; (800837c <vPortEnterCritical+0x58>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d10f      	bne.n	8008370 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008350:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <vPortEnterCritical+0x5c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <vPortEnterCritical+0x4c>
        __asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	603b      	str	r3, [r7, #0]
    }
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <vPortEnterCritical+0x4a>
    }
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	2000001c 	.word	0x2000001c
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <vPortExitCritical+0x50>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <vPortExitCritical+0x24>
        __asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	607b      	str	r3, [r7, #4]
    }
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80083a8:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <vPortExitCritical+0x50>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <vPortExitCritical+0x50>)
 80083b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80083b2:	4b08      	ldr	r3, [pc, #32]	; (80083d4 <vPortExitCritical+0x50>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <vPortExitCritical+0x42>
 80083ba:	2300      	movs	r3, #0
 80083bc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	f383 8811 	msr	BASEPRI, r3
    }
 80083c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	2000001c 	.word	0x2000001c
	...

080083e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80083e0:	f3ef 8009 	mrs	r0, PSP
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <pxCurrentTCBConst>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f01e 0f10 	tst.w	lr, #16
 80083f0:	bf08      	it	eq
 80083f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	6010      	str	r0, [r2, #0]
 80083fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008404:	f380 8811 	msr	BASEPRI, r0
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f7fe fb0a 	bl	8006a28 <vTaskSwitchContext>
 8008414:	f04f 0000 	mov.w	r0, #0
 8008418:	f380 8811 	msr	BASEPRI, r0
 800841c:	bc09      	pop	{r0, r3}
 800841e:	6819      	ldr	r1, [r3, #0]
 8008420:	6808      	ldr	r0, [r1, #0]
 8008422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008426:	f01e 0f10 	tst.w	lr, #16
 800842a:	bf08      	it	eq
 800842c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008430:	f380 8809 	msr	PSP, r0
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	f3af 8000 	nop.w

08008440 <pxCurrentTCBConst>:
 8008440:	2000063c 	.word	0x2000063c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
        __asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
    }
 8008460:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8008462:	f001 fd51 	bl	8009f08 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008466:	f7fe f9c5 	bl	80067f4 <xTaskIncrementTick>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d006      	beq.n	800847e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8008470:	f001 fda8 	bl	8009fc4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008474:	4b08      	ldr	r3, [pc, #32]	; (8008498 <SysTick_Handler+0x50>)
 8008476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	e001      	b.n	8008482 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800847e:	f001 fd85 	bl	8009f8c <SEGGER_SYSVIEW_RecordExitISR>
 8008482:	2300      	movs	r3, #0
 8008484:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	f383 8811 	msr	BASEPRI, r3
    }
 800848c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	e000ed04 	.word	0xe000ed04

0800849c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084a0:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <vPortSetupTimerInterrupt+0x34>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084a6:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <vPortSetupTimerInterrupt+0x38>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <vPortSetupTimerInterrupt+0x3c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a0a      	ldr	r2, [pc, #40]	; (80084dc <vPortSetupTimerInterrupt+0x40>)
 80084b2:	fba2 2303 	umull	r2, r3, r2, r3
 80084b6:	099b      	lsrs	r3, r3, #6
 80084b8:	4a09      	ldr	r2, [pc, #36]	; (80084e0 <vPortSetupTimerInterrupt+0x44>)
 80084ba:	3b01      	subs	r3, #1
 80084bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084be:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <vPortSetupTimerInterrupt+0x34>)
 80084c0:	2207      	movs	r2, #7
 80084c2:	601a      	str	r2, [r3, #0]
}
 80084c4:	bf00      	nop
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	e000e010 	.word	0xe000e010
 80084d4:	e000e018 	.word	0xe000e018
 80084d8:	20000004 	.word	0x20000004
 80084dc:	10624dd3 	.word	0x10624dd3
 80084e0:	e000e014 	.word	0xe000e014

080084e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80084e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084f4 <vPortEnableVFP+0x10>
 80084e8:	6801      	ldr	r1, [r0, #0]
 80084ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084ee:	6001      	str	r1, [r0, #0]
 80084f0:	4770      	bx	lr
 80084f2:	0000      	.short	0x0000
 80084f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop

080084fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008502:	f3ef 8305 	mrs	r3, IPSR
 8008506:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b0f      	cmp	r3, #15
 800850c:	d914      	bls.n	8008538 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800850e:	4a17      	ldr	r2, [pc, #92]	; (800856c <vPortValidateInterruptPriority+0x70>)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008518:	4b15      	ldr	r3, [pc, #84]	; (8008570 <vPortValidateInterruptPriority+0x74>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	7afa      	ldrb	r2, [r7, #11]
 800851e:	429a      	cmp	r2, r3
 8008520:	d20a      	bcs.n	8008538 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	607b      	str	r3, [r7, #4]
    }
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008538:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <vPortValidateInterruptPriority+0x78>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008540:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <vPortValidateInterruptPriority+0x7c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d90a      	bls.n	800855e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	603b      	str	r3, [r7, #0]
    }
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <vPortValidateInterruptPriority+0x60>
    }
 800855e:	bf00      	nop
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	e000e3f0 	.word	0xe000e3f0
 8008570:	2000081c 	.word	0x2000081c
 8008574:	e000ed0c 	.word	0xe000ed0c
 8008578:	20000820 	.word	0x20000820

0800857c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	; 0x28
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008584:	2300      	movs	r3, #0
 8008586:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008588:	f7fd ff24 	bl	80063d4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800858c:	4b53      	ldr	r3, [pc, #332]	; (80086dc <pvPortMalloc+0x160>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008594:	f000 f908 	bl	80087a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d012      	beq.n	80085c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800859e:	2208      	movs	r2, #8
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	3308      	adds	r3, #8
 80085aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	43db      	mvns	r3, r3
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d804      	bhi.n	80085c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	4413      	add	r3, r2
 80085bc:	607b      	str	r3, [r7, #4]
 80085be:	e001      	b.n	80085c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	db70      	blt.n	80086ac <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d06d      	beq.n	80086ac <pvPortMalloc+0x130>
 80085d0:	4b43      	ldr	r3, [pc, #268]	; (80086e0 <pvPortMalloc+0x164>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d868      	bhi.n	80086ac <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80085da:	4b42      	ldr	r3, [pc, #264]	; (80086e4 <pvPortMalloc+0x168>)
 80085dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80085de:	4b41      	ldr	r3, [pc, #260]	; (80086e4 <pvPortMalloc+0x168>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085e4:	e004      	b.n	80085f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d903      	bls.n	8008602 <pvPortMalloc+0x86>
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1f1      	bne.n	80085e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008602:	4b36      	ldr	r3, [pc, #216]	; (80086dc <pvPortMalloc+0x160>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008608:	429a      	cmp	r2, r3
 800860a:	d04f      	beq.n	80086ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2208      	movs	r2, #8
 8008612:	4413      	add	r3, r2
 8008614:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	1ad2      	subs	r2, r2, r3
 8008626:	2308      	movs	r3, #8
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	429a      	cmp	r2, r3
 800862c:	d91f      	bls.n	800866e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800862e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4413      	add	r3, r2
 8008634:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f003 0307 	and.w	r3, r3, #7
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <pvPortMalloc+0xda>
        __asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	613b      	str	r3, [r7, #16]
    }
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008668:	6978      	ldr	r0, [r7, #20]
 800866a:	f000 f8f9 	bl	8008860 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800866e:	4b1c      	ldr	r3, [pc, #112]	; (80086e0 <pvPortMalloc+0x164>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	4a19      	ldr	r2, [pc, #100]	; (80086e0 <pvPortMalloc+0x164>)
 800867a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800867c:	4b18      	ldr	r3, [pc, #96]	; (80086e0 <pvPortMalloc+0x164>)
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	4b19      	ldr	r3, [pc, #100]	; (80086e8 <pvPortMalloc+0x16c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	429a      	cmp	r2, r3
 8008686:	d203      	bcs.n	8008690 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008688:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <pvPortMalloc+0x164>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a16      	ldr	r2, [pc, #88]	; (80086e8 <pvPortMalloc+0x16c>)
 800868e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <pvPortMalloc+0x170>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3301      	adds	r3, #1
 80086a8:	4a10      	ldr	r2, [pc, #64]	; (80086ec <pvPortMalloc+0x170>)
 80086aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80086ac:	f7fd fea0 	bl	80063f0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <pvPortMalloc+0x154>
        __asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	60fb      	str	r3, [r7, #12]
    }
 80086cc:	bf00      	nop
 80086ce:	e7fe      	b.n	80086ce <pvPortMalloc+0x152>
    return pvReturn;
 80086d0:	69fb      	ldr	r3, [r7, #28]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3728      	adds	r7, #40	; 0x28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	2000302c 	.word	0x2000302c
 80086e0:	20003030 	.word	0x20003030
 80086e4:	20003024 	.word	0x20003024
 80086e8:	20003034 	.word	0x20003034
 80086ec:	20003038 	.word	0x20003038

080086f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d049      	beq.n	8008796 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008702:	2308      	movs	r3, #8
 8008704:	425b      	negs	r3, r3
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4413      	add	r3, r2
 800870a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	db0a      	blt.n	800872e <vPortFree+0x3e>
        __asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	60fb      	str	r3, [r7, #12]
    }
 800872a:	bf00      	nop
 800872c:	e7fe      	b.n	800872c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <vPortFree+0x5c>
        __asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60bb      	str	r3, [r7, #8]
    }
 8008748:	bf00      	nop
 800874a:	e7fe      	b.n	800874a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	0fdb      	lsrs	r3, r3, #31
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01c      	beq.n	8008796 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d118      	bne.n	8008796 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8008770:	f7fd fe30 	bl	80063d4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <vPortFree+0xb0>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4413      	add	r3, r2
 800877e:	4a08      	ldr	r2, [pc, #32]	; (80087a0 <vPortFree+0xb0>)
 8008780:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008782:	6938      	ldr	r0, [r7, #16]
 8008784:	f000 f86c 	bl	8008860 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <vPortFree+0xb4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3301      	adds	r3, #1
 800878e:	4a05      	ldr	r2, [pc, #20]	; (80087a4 <vPortFree+0xb4>)
 8008790:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008792:	f7fd fe2d 	bl	80063f0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008796:	bf00      	nop
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20003030 	.word	0x20003030
 80087a4:	2000303c 	.word	0x2000303c

080087a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80087b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80087b4:	4b25      	ldr	r3, [pc, #148]	; (800884c <prvHeapInit+0xa4>)
 80087b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00c      	beq.n	80087dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3307      	adds	r3, #7
 80087c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0307 	bic.w	r3, r3, #7
 80087ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	4a1d      	ldr	r2, [pc, #116]	; (800884c <prvHeapInit+0xa4>)
 80087d8:	4413      	add	r3, r2
 80087da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087e0:	4a1b      	ldr	r2, [pc, #108]	; (8008850 <prvHeapInit+0xa8>)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80087e6:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <prvHeapInit+0xa8>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4413      	add	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80087f4:	2208      	movs	r2, #8
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1a9b      	subs	r3, r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0307 	bic.w	r3, r3, #7
 8008802:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4a13      	ldr	r2, [pc, #76]	; (8008854 <prvHeapInit+0xac>)
 8008808:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800880a:	4b12      	ldr	r3, [pc, #72]	; (8008854 <prvHeapInit+0xac>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2200      	movs	r2, #0
 8008810:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008812:	4b10      	ldr	r3, [pc, #64]	; (8008854 <prvHeapInit+0xac>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2200      	movs	r2, #0
 8008818:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	1ad2      	subs	r2, r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008828:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <prvHeapInit+0xac>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	4a08      	ldr	r2, [pc, #32]	; (8008858 <prvHeapInit+0xb0>)
 8008836:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	4a07      	ldr	r2, [pc, #28]	; (800885c <prvHeapInit+0xb4>)
 800883e:	6013      	str	r3, [r2, #0]
}
 8008840:	bf00      	nop
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	20000824 	.word	0x20000824
 8008850:	20003024 	.word	0x20003024
 8008854:	2000302c 	.word	0x2000302c
 8008858:	20003034 	.word	0x20003034
 800885c:	20003030 	.word	0x20003030

08008860 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008868:	4b28      	ldr	r3, [pc, #160]	; (800890c <prvInsertBlockIntoFreeList+0xac>)
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	e002      	b.n	8008874 <prvInsertBlockIntoFreeList+0x14>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	429a      	cmp	r2, r3
 800887c:	d8f7      	bhi.n	800886e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	4413      	add	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	429a      	cmp	r2, r3
 800888e:	d108      	bne.n	80088a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	441a      	add	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	441a      	add	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d118      	bne.n	80088e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	4b15      	ldr	r3, [pc, #84]	; (8008910 <prvInsertBlockIntoFreeList+0xb0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d00d      	beq.n	80088de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	441a      	add	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e008      	b.n	80088f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <prvInsertBlockIntoFreeList+0xb0>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	e003      	b.n	80088f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d002      	beq.n	80088fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80088fe:	bf00      	nop
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	20003024 	.word	0x20003024
 8008910:	2000302c 	.word	0x2000302c

08008914 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008918:	4803      	ldr	r0, [pc, #12]	; (8008928 <_cbSendSystemDesc+0x14>)
 800891a:	f001 fa9f 	bl	8009e5c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800891e:	4803      	ldr	r0, [pc, #12]	; (800892c <_cbSendSystemDesc+0x18>)
 8008920:	f001 fa9c 	bl	8009e5c <SEGGER_SYSVIEW_SendSysDesc>
}
 8008924:	bf00      	nop
 8008926:	bd80      	pop	{r7, pc}
 8008928:	0800a808 	.word	0x0800a808
 800892c:	0800a844 	.word	0x0800a844

08008930 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008934:	4b06      	ldr	r3, [pc, #24]	; (8008950 <SEGGER_SYSVIEW_Conf+0x20>)
 8008936:	6818      	ldr	r0, [r3, #0]
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <SEGGER_SYSVIEW_Conf+0x20>)
 800893a:	6819      	ldr	r1, [r3, #0]
 800893c:	4b05      	ldr	r3, [pc, #20]	; (8008954 <SEGGER_SYSVIEW_Conf+0x24>)
 800893e:	4a06      	ldr	r2, [pc, #24]	; (8008958 <SEGGER_SYSVIEW_Conf+0x28>)
 8008940:	f000 fd5c 	bl	80093fc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008944:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008948:	f000 fd9c 	bl	8009484 <SEGGER_SYSVIEW_SetRAMBase>
}
 800894c:	bf00      	nop
 800894e:	bd80      	pop	{r7, pc}
 8008950:	20000004 	.word	0x20000004
 8008954:	08008915 	.word	0x08008915
 8008958:	0800a910 	.word	0x0800a910

0800895c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800895c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800895e:	b085      	sub	sp, #20
 8008960:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008962:	2300      	movs	r3, #0
 8008964:	607b      	str	r3, [r7, #4]
 8008966:	e033      	b.n	80089d0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008968:	491e      	ldr	r1, [pc, #120]	; (80089e4 <_cbSendTaskList+0x88>)
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	6818      	ldr	r0, [r3, #0]
 8008978:	491a      	ldr	r1, [pc, #104]	; (80089e4 <_cbSendTaskList+0x88>)
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	440b      	add	r3, r1
 8008986:	3304      	adds	r3, #4
 8008988:	6819      	ldr	r1, [r3, #0]
 800898a:	4c16      	ldr	r4, [pc, #88]	; (80089e4 <_cbSendTaskList+0x88>)
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4423      	add	r3, r4
 8008998:	3308      	adds	r3, #8
 800899a:	681c      	ldr	r4, [r3, #0]
 800899c:	4d11      	ldr	r5, [pc, #68]	; (80089e4 <_cbSendTaskList+0x88>)
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	442b      	add	r3, r5
 80089aa:	330c      	adds	r3, #12
 80089ac:	681d      	ldr	r5, [r3, #0]
 80089ae:	4e0d      	ldr	r6, [pc, #52]	; (80089e4 <_cbSendTaskList+0x88>)
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4433      	add	r3, r6
 80089bc:	3310      	adds	r3, #16
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	462b      	mov	r3, r5
 80089c4:	4622      	mov	r2, r4
 80089c6:	f000 f8bd 	bl	8008b44 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3301      	adds	r3, #1
 80089ce:	607b      	str	r3, [r7, #4]
 80089d0:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <_cbSendTaskList+0x8c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d3c6      	bcc.n	8008968 <_cbSendTaskList+0xc>
  }
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e4:	20003040 	.word	0x20003040
 80089e8:	200030e0 	.word	0x200030e0

080089ec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80089ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80089f4:	f7fd fe0c 	bl	8006610 <xTaskGetTickCountFromISR>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2200      	movs	r2, #0
 80089fc:	469a      	mov	sl, r3
 80089fe:	4693      	mov	fp, r2
 8008a00:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	f04f 0a00 	mov.w	sl, #0
 8008a10:	f04f 0b00 	mov.w	fp, #0
 8008a14:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008a18:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008a1c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008a20:	4652      	mov	r2, sl
 8008a22:	465b      	mov	r3, fp
 8008a24:	1a14      	subs	r4, r2, r0
 8008a26:	eb63 0501 	sbc.w	r5, r3, r1
 8008a2a:	f04f 0200 	mov.w	r2, #0
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	00ab      	lsls	r3, r5, #2
 8008a34:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008a38:	00a2      	lsls	r2, r4, #2
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	461d      	mov	r5, r3
 8008a3e:	eb14 0800 	adds.w	r8, r4, r0
 8008a42:	eb45 0901 	adc.w	r9, r5, r1
 8008a46:	f04f 0200 	mov.w	r2, #0
 8008a4a:	f04f 0300 	mov.w	r3, #0
 8008a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a5a:	4690      	mov	r8, r2
 8008a5c:	4699      	mov	r9, r3
 8008a5e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008a62:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008a66:	4610      	mov	r0, r2
 8008a68:	4619      	mov	r1, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008a74 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008a82:	2205      	movs	r2, #5
 8008a84:	492b      	ldr	r1, [pc, #172]	; (8008b34 <SYSVIEW_AddTask+0xc0>)
 8008a86:	68b8      	ldr	r0, [r7, #8]
 8008a88:	f001 fcec 	bl	800a464 <memcmp>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d04b      	beq.n	8008b2a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008a92:	4b29      	ldr	r3, [pc, #164]	; (8008b38 <SYSVIEW_AddTask+0xc4>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b07      	cmp	r3, #7
 8008a98:	d903      	bls.n	8008aa2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008a9a:	4828      	ldr	r0, [pc, #160]	; (8008b3c <SYSVIEW_AddTask+0xc8>)
 8008a9c:	f001 fc86 	bl	800a3ac <SEGGER_SYSVIEW_Warn>
    return;
 8008aa0:	e044      	b.n	8008b2c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008aa2:	4b25      	ldr	r3, [pc, #148]	; (8008b38 <SYSVIEW_AddTask+0xc4>)
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	4926      	ldr	r1, [pc, #152]	; (8008b40 <SYSVIEW_AddTask+0xcc>)
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008ab6:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <SYSVIEW_AddTask+0xc4>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	4921      	ldr	r1, [pc, #132]	; (8008b40 <SYSVIEW_AddTask+0xcc>)
 8008abc:	4613      	mov	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	440b      	add	r3, r1
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008acc:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <SYSVIEW_AddTask+0xc4>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	491b      	ldr	r1, [pc, #108]	; (8008b40 <SYSVIEW_AddTask+0xcc>)
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	440b      	add	r3, r1
 8008adc:	3308      	adds	r3, #8
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008ae2:	4b15      	ldr	r3, [pc, #84]	; (8008b38 <SYSVIEW_AddTask+0xc4>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4916      	ldr	r1, [pc, #88]	; (8008b40 <SYSVIEW_AddTask+0xcc>)
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	330c      	adds	r3, #12
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <SYSVIEW_AddTask+0xc4>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	4910      	ldr	r1, [pc, #64]	; (8008b40 <SYSVIEW_AddTask+0xcc>)
 8008afe:	4613      	mov	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	440b      	add	r3, r1
 8008b08:	3310      	adds	r3, #16
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <SYSVIEW_AddTask+0xc4>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	4a08      	ldr	r2, [pc, #32]	; (8008b38 <SYSVIEW_AddTask+0xc4>)
 8008b16:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	68b9      	ldr	r1, [r7, #8]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f80e 	bl	8008b44 <SYSVIEW_SendTaskInfo>
 8008b28:	e000      	b.n	8008b2c <SYSVIEW_AddTask+0xb8>
    return;
 8008b2a:	bf00      	nop

}
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	0800a854 	.word	0x0800a854
 8008b38:	200030e0 	.word	0x200030e0
 8008b3c:	0800a85c 	.word	0x0800a85c
 8008b40:	20003040 	.word	0x20003040

08008b44 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08a      	sub	sp, #40	; 0x28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
 8008b50:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008b52:	f107 0314 	add.w	r3, r7, #20
 8008b56:	2214      	movs	r2, #20
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f001 fc92 	bl	800a484 <memset>
  TaskInfo.TaskID     = TaskID;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008b74:	f107 0314 	add.w	r3, r7, #20
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 f877 	bl	8009c6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008b7e:	bf00      	nop
 8008b80:	3728      	adds	r7, #40	; 0x28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008b8e:	4b26      	ldr	r3, [pc, #152]	; (8008c28 <_DoInit+0xa0>)
 8008b90:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8008b92:	22a8      	movs	r2, #168	; 0xa8
 8008b94:	2100      	movs	r1, #0
 8008b96:	6838      	ldr	r0, [r7, #0]
 8008b98:	f001 fc74 	bl	800a484 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2203      	movs	r2, #3
 8008ba0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2203      	movs	r2, #3
 8008ba6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	4a20      	ldr	r2, [pc, #128]	; (8008c2c <_DoInit+0xa4>)
 8008bac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	4a1f      	ldr	r2, [pc, #124]	; (8008c30 <_DoInit+0xa8>)
 8008bb2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	4a16      	ldr	r2, [pc, #88]	; (8008c2c <_DoInit+0xa4>)
 8008bd2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <_DoInit+0xac>)
 8008bd8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2210      	movs	r2, #16
 8008bde:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2200      	movs	r2, #0
 8008bea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008bf2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	607b      	str	r3, [r7, #4]
 8008bfa:	e00c      	b.n	8008c16 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f1c3 030f 	rsb	r3, r3, #15
 8008c02:	4a0d      	ldr	r2, [pc, #52]	; (8008c38 <_DoInit+0xb0>)
 8008c04:	5cd1      	ldrb	r1, [r2, r3]
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	460a      	mov	r2, r1
 8008c0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3301      	adds	r3, #1
 8008c14:	607b      	str	r3, [r7, #4]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b0f      	cmp	r3, #15
 8008c1a:	d9ef      	bls.n	8008bfc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008c1c:	f3bf 8f5f 	dmb	sy
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	200030e4 	.word	0x200030e4
 8008c2c:	0800a8ac 	.word	0x0800a8ac
 8008c30:	2000318c 	.word	0x2000318c
 8008c34:	2000358c 	.word	0x2000358c
 8008c38:	0800a918 	.word	0x0800a918

08008c3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08c      	sub	sp, #48	; 0x30
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008c48:	4b3e      	ldr	r3, [pc, #248]	; (8008d44 <SEGGER_RTT_ReadNoLock+0x108>)
 8008c4a:	623b      	str	r3, [r7, #32]
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b53      	cmp	r3, #83	; 0x53
 8008c54:	d001      	beq.n	8008c5a <SEGGER_RTT_ReadNoLock+0x1e>
 8008c56:	f7ff ff97 	bl	8008b88 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	4413      	add	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	3360      	adds	r3, #96	; 0x60
 8008c66:	4a37      	ldr	r2, [pc, #220]	; (8008d44 <SEGGER_RTT_ReadNoLock+0x108>)
 8008c68:	4413      	add	r3, r2
 8008c6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d92b      	bls.n	8008ce0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4293      	cmp	r3, r2
 8008c98:	bf28      	it	cs
 8008c9a:	4613      	movcs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	4413      	add	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	6939      	ldr	r1, [r7, #16]
 8008cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cae:	f001 fc6d 	bl	800a58c <memcpy>
    NumBytesRead += NumBytesRem;
 8008cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	4413      	add	r3, r2
 8008cd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d101      	bne.n	8008ce0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4293      	cmp	r3, r2
 8008cee:	bf28      	it	cs
 8008cf0:	4613      	movcs	r3, r2
 8008cf2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d019      	beq.n	8008d2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d00:	4413      	add	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	6939      	ldr	r1, [r7, #16]
 8008d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d0a:	f001 fc3f 	bl	800a58c <memcpy>
    NumBytesRead += NumBytesRem;
 8008d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	4413      	add	r3, r2
 8008d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3730      	adds	r7, #48	; 0x30
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	200030e4 	.word	0x200030e4

08008d48 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008d56:	4b3d      	ldr	r3, [pc, #244]	; (8008e4c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008d58:	61bb      	str	r3, [r7, #24]
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b53      	cmp	r3, #83	; 0x53
 8008d62:	d001      	beq.n	8008d68 <SEGGER_RTT_AllocUpBuffer+0x20>
 8008d64:	f7ff ff10 	bl	8008b88 <_DoInit>
  SEGGER_RTT_LOCK();
 8008d68:	f3ef 8311 	mrs	r3, BASEPRI
 8008d6c:	f04f 0120 	mov.w	r1, #32
 8008d70:	f381 8811 	msr	BASEPRI, r1
 8008d74:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008d76:	4b35      	ldr	r3, [pc, #212]	; (8008e4c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008d78:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008d7e:	6939      	ldr	r1, [r7, #16]
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	4613      	mov	r3, r2
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	4413      	add	r3, r2
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	440b      	add	r3, r1
 8008d8e:	3304      	adds	r3, #4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d008      	beq.n	8008da8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	dbeb      	blt.n	8008d7e <SEGGER_RTT_AllocUpBuffer+0x36>
 8008da6:	e000      	b.n	8008daa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008da8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	da3f      	bge.n	8008e34 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008db4:	6939      	ldr	r1, [r7, #16]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	4613      	mov	r3, r2
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	4413      	add	r3, r2
 8008dc0:	00db      	lsls	r3, r3, #3
 8008dc2:	440b      	add	r3, r1
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8008dc8:	6939      	ldr	r1, [r7, #16]
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	4613      	mov	r3, r2
 8008dd0:	005b      	lsls	r3, r3, #1
 8008dd2:	4413      	add	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3304      	adds	r3, #4
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8008dde:	6939      	ldr	r1, [r7, #16]
 8008de0:	69fa      	ldr	r2, [r7, #28]
 8008de2:	4613      	mov	r3, r2
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	4413      	add	r3, r2
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	440b      	add	r3, r1
 8008dec:	3320      	adds	r3, #32
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8008df2:	6939      	ldr	r1, [r7, #16]
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	4613      	mov	r3, r2
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	4413      	add	r3, r2
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	440b      	add	r3, r1
 8008e00:	3328      	adds	r3, #40	; 0x28
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8008e06:	6939      	ldr	r1, [r7, #16]
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	4413      	add	r3, r2
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	440b      	add	r3, r1
 8008e14:	3324      	adds	r3, #36	; 0x24
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8008e1a:	6939      	ldr	r1, [r7, #16]
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	4413      	add	r3, r2
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	440b      	add	r3, r1
 8008e28:	332c      	adds	r3, #44	; 0x2c
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008e2e:	f3bf 8f5f 	dmb	sy
 8008e32:	e002      	b.n	8008e3a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008e34:	f04f 33ff 	mov.w	r3, #4294967295
 8008e38:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008e40:	69fb      	ldr	r3, [r7, #28]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	200030e4 	.word	0x200030e4

08008e50 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	; 0x28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8008e5e:	4b21      	ldr	r3, [pc, #132]	; (8008ee4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008e60:	623b      	str	r3, [r7, #32]
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b53      	cmp	r3, #83	; 0x53
 8008e6a:	d001      	beq.n	8008e70 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008e6c:	f7ff fe8c 	bl	8008b88 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008e70:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008e72:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d82c      	bhi.n	8008ed4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8008e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e7e:	f04f 0120 	mov.w	r1, #32
 8008e82:	f381 8811 	msr	BASEPRI, r1
 8008e86:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	4413      	add	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	3360      	adds	r3, #96	; 0x60
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	4413      	add	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00e      	beq.n	8008ebe <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008ec4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed2:	e002      	b.n	8008eda <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8008ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3728      	adds	r7, #40	; 0x28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	200030e4 	.word	0x200030e4

08008ee8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	60fa      	str	r2, [r7, #12]
 8008efe:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b80      	cmp	r3, #128	; 0x80
 8008f04:	d90a      	bls.n	8008f1c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8008f06:	2380      	movs	r3, #128	; 0x80
 8008f08:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8008f0a:	e007      	b.n	8008f1c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	1c53      	adds	r3, r2, #1
 8008f10:	60bb      	str	r3, [r7, #8]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1c59      	adds	r1, r3, #1
 8008f16:	60f9      	str	r1, [r7, #12]
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	1e5a      	subs	r2, r3, #1
 8008f20:	607a      	str	r2, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <_EncodeStr+0x46>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1ee      	bne.n	8008f0c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3307      	adds	r3, #7
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008f66:	4b34      	ldr	r3, [pc, #208]	; (8009038 <_HandleIncomingPacket+0xd8>)
 8008f68:	7e1b      	ldrb	r3, [r3, #24]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	1cfb      	adds	r3, r7, #3
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7ff fe63 	bl	8008c3c <SEGGER_RTT_ReadNoLock>
 8008f76:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d057      	beq.n	800902e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8008f7e:	78fb      	ldrb	r3, [r7, #3]
 8008f80:	2b80      	cmp	r3, #128	; 0x80
 8008f82:	d031      	beq.n	8008fe8 <_HandleIncomingPacket+0x88>
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	dc40      	bgt.n	800900a <_HandleIncomingPacket+0xaa>
 8008f88:	2b07      	cmp	r3, #7
 8008f8a:	dc15      	bgt.n	8008fb8 <_HandleIncomingPacket+0x58>
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	dd3c      	ble.n	800900a <_HandleIncomingPacket+0xaa>
 8008f90:	3b01      	subs	r3, #1
 8008f92:	2b06      	cmp	r3, #6
 8008f94:	d839      	bhi.n	800900a <_HandleIncomingPacket+0xaa>
 8008f96:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <_HandleIncomingPacket+0x3c>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fbf 	.word	0x08008fbf
 8008fa0:	08008fc5 	.word	0x08008fc5
 8008fa4:	08008fcb 	.word	0x08008fcb
 8008fa8:	08008fd1 	.word	0x08008fd1
 8008fac:	08008fd7 	.word	0x08008fd7
 8008fb0:	08008fdd 	.word	0x08008fdd
 8008fb4:	08008fe3 	.word	0x08008fe3
 8008fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8008fba:	d033      	beq.n	8009024 <_HandleIncomingPacket+0xc4>
 8008fbc:	e025      	b.n	800900a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008fbe:	f000 fcdb 	bl	8009978 <SEGGER_SYSVIEW_Start>
      break;
 8008fc2:	e034      	b.n	800902e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008fc4:	f000 fd92 	bl	8009aec <SEGGER_SYSVIEW_Stop>
      break;
 8008fc8:	e031      	b.n	800902e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008fca:	f000 ff6b 	bl	8009ea4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008fce:	e02e      	b.n	800902e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008fd0:	f000 ff30 	bl	8009e34 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008fd4:	e02b      	b.n	800902e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008fd6:	f000 fdaf 	bl	8009b38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008fda:	e028      	b.n	800902e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008fdc:	f001 f9a8 	bl	800a330 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008fe0:	e025      	b.n	800902e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008fe2:	f001 f987 	bl	800a2f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008fe6:	e022      	b.n	800902e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008fe8:	4b13      	ldr	r3, [pc, #76]	; (8009038 <_HandleIncomingPacket+0xd8>)
 8008fea:	7e1b      	ldrb	r3, [r3, #24]
 8008fec:	4618      	mov	r0, r3
 8008fee:	1cfb      	adds	r3, r7, #3
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	f7ff fe22 	bl	8008c3c <SEGGER_RTT_ReadNoLock>
 8008ff8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d013      	beq.n	8009028 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	4618      	mov	r0, r3
 8009004:	f001 f8ec 	bl	800a1e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009008:	e00e      	b.n	8009028 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	b25b      	sxtb	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	da0c      	bge.n	800902c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <_HandleIncomingPacket+0xd8>)
 8009014:	7e1b      	ldrb	r3, [r3, #24]
 8009016:	4618      	mov	r0, r3
 8009018:	1cfb      	adds	r3, r7, #3
 800901a:	2201      	movs	r2, #1
 800901c:	4619      	mov	r1, r3
 800901e:	f7ff fe0d 	bl	8008c3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8009022:	e003      	b.n	800902c <_HandleIncomingPacket+0xcc>
      break;
 8009024:	bf00      	nop
 8009026:	e002      	b.n	800902e <_HandleIncomingPacket+0xce>
      break;
 8009028:	bf00      	nop
 800902a:	e000      	b.n	800902e <_HandleIncomingPacket+0xce>
      break;
 800902c:	bf00      	nop
    }
  }
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	200049a4 	.word	0x200049a4

0800903c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800903c:	b580      	push	{r7, lr}
 800903e:	b08c      	sub	sp, #48	; 0x30
 8009040:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8009042:	2301      	movs	r3, #1
 8009044:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8009046:	1d3b      	adds	r3, r7, #4
 8009048:	3301      	adds	r3, #1
 800904a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009050:	4b31      	ldr	r3, [pc, #196]	; (8009118 <_TrySendOverflowPacket+0xdc>)
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	62bb      	str	r3, [r7, #40]	; 0x28
 8009056:	e00b      	b.n	8009070 <_TrySendOverflowPacket+0x34>
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	1c59      	adds	r1, r3, #1
 8009060:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	09db      	lsrs	r3, r3, #7
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	2b7f      	cmp	r3, #127	; 0x7f
 8009074:	d8f0      	bhi.n	8009058 <_TrySendOverflowPacket+0x1c>
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800907c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009086:	4b25      	ldr	r3, [pc, #148]	; (800911c <_TrySendOverflowPacket+0xe0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800908c:	4b22      	ldr	r3, [pc, #136]	; (8009118 <_TrySendOverflowPacket+0xdc>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	623b      	str	r3, [r7, #32]
 800909e:	e00b      	b.n	80090b8 <_TrySendOverflowPacket+0x7c>
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	1c59      	adds	r1, r3, #1
 80090a8:	6279      	str	r1, [r7, #36]	; 0x24
 80090aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090ae:	b2d2      	uxtb	r2, r2
 80090b0:	701a      	strb	r2, [r3, #0]
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	09db      	lsrs	r3, r3, #7
 80090b6:	623b      	str	r3, [r7, #32]
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	2b7f      	cmp	r3, #127	; 0x7f
 80090bc:	d8f0      	bhi.n	80090a0 <_TrySendOverflowPacket+0x64>
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	627a      	str	r2, [r7, #36]	; 0x24
 80090c4:	6a3a      	ldr	r2, [r7, #32]
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	701a      	strb	r2, [r3, #0]
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <_TrySendOverflowPacket+0xdc>)
 80090d0:	785b      	ldrb	r3, [r3, #1]
 80090d2:	4618      	mov	r0, r3
 80090d4:	1d3b      	adds	r3, r7, #4
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	461a      	mov	r2, r3
 80090dc:	1d3b      	adds	r3, r7, #4
 80090de:	4619      	mov	r1, r3
 80090e0:	f7f7 f876 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80090e4:	4603      	mov	r3, r0
 80090e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d009      	beq.n	8009102 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80090ee:	4a0a      	ldr	r2, [pc, #40]	; (8009118 <_TrySendOverflowPacket+0xdc>)
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80090f4:	4b08      	ldr	r3, [pc, #32]	; (8009118 <_TrySendOverflowPacket+0xdc>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	4b06      	ldr	r3, [pc, #24]	; (8009118 <_TrySendOverflowPacket+0xdc>)
 80090fe:	701a      	strb	r2, [r3, #0]
 8009100:	e004      	b.n	800910c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <_TrySendOverflowPacket+0xdc>)
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	3301      	adds	r3, #1
 8009108:	4a03      	ldr	r2, [pc, #12]	; (8009118 <_TrySendOverflowPacket+0xdc>)
 800910a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800910c:	693b      	ldr	r3, [r7, #16]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3730      	adds	r7, #48	; 0x30
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	200049a4 	.word	0x200049a4
 800911c:	e0001004 	.word	0xe0001004

08009120 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8009120:	b580      	push	{r7, lr}
 8009122:	b08a      	sub	sp, #40	; 0x28
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800912c:	4b98      	ldr	r3, [pc, #608]	; (8009390 <_SendPacket+0x270>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d010      	beq.n	8009156 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8009134:	4b96      	ldr	r3, [pc, #600]	; (8009390 <_SendPacket+0x270>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 812d 	beq.w	8009398 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800913e:	4b94      	ldr	r3, [pc, #592]	; (8009390 <_SendPacket+0x270>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d109      	bne.n	800915a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8009146:	f7ff ff79 	bl	800903c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800914a:	4b91      	ldr	r3, [pc, #580]	; (8009390 <_SendPacket+0x270>)
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	2b01      	cmp	r3, #1
 8009150:	f040 8124 	bne.w	800939c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8009154:	e001      	b.n	800915a <_SendPacket+0x3a>
    goto Send;
 8009156:	bf00      	nop
 8009158:	e000      	b.n	800915c <_SendPacket+0x3c>
Send:
 800915a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b1f      	cmp	r3, #31
 8009160:	d809      	bhi.n	8009176 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8009162:	4b8b      	ldr	r3, [pc, #556]	; (8009390 <_SendPacket+0x270>)
 8009164:	69da      	ldr	r2, [r3, #28]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	fa22 f303 	lsr.w	r3, r2, r3
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	f040 8115 	bne.w	80093a0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b17      	cmp	r3, #23
 800917a:	d807      	bhi.n	800918c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3b01      	subs	r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	b2da      	uxtb	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	701a      	strb	r2, [r3, #0]
 800918a:	e0c4      	b.n	8009316 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	2b7f      	cmp	r3, #127	; 0x7f
 8009198:	d912      	bls.n	80091c0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	09da      	lsrs	r2, r3, #7
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	3a01      	subs	r2, #1
 80091b2:	60fa      	str	r2, [r7, #12]
 80091b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	e006      	b.n	80091ce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b7e      	cmp	r3, #126	; 0x7e
 80091d2:	d807      	bhi.n	80091e4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	e098      	b.n	8009316 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091ea:	d212      	bcs.n	8009212 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	09da      	lsrs	r2, r3, #7
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	3a01      	subs	r2, #1
 8009204:	60fa      	str	r2, [r7, #12]
 8009206:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800920a:	b2da      	uxtb	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	e081      	b.n	8009316 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009218:	d21d      	bcs.n	8009256 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	0b9a      	lsrs	r2, r3, #14
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3b01      	subs	r3, #1
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	b2d2      	uxtb	r2, r2
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	09db      	lsrs	r3, r3, #7
 800922e:	b2db      	uxtb	r3, r3
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	3a01      	subs	r2, #1
 8009234:	60fa      	str	r2, [r7, #12]
 8009236:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800923a:	b2da      	uxtb	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	3a01      	subs	r2, #1
 8009248:	60fa      	str	r2, [r7, #12]
 800924a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800924e:	b2da      	uxtb	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	701a      	strb	r2, [r3, #0]
 8009254:	e05f      	b.n	8009316 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800925c:	d228      	bcs.n	80092b0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	0d5a      	lsrs	r2, r3, #21
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3b01      	subs	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	b2d2      	uxtb	r2, r2
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	0b9b      	lsrs	r3, r3, #14
 8009272:	b2db      	uxtb	r3, r3
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	3a01      	subs	r2, #1
 8009278:	60fa      	str	r2, [r7, #12]
 800927a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800927e:	b2da      	uxtb	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	09db      	lsrs	r3, r3, #7
 8009288:	b2db      	uxtb	r3, r3
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	3a01      	subs	r2, #1
 800928e:	60fa      	str	r2, [r7, #12]
 8009290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009294:	b2da      	uxtb	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	3a01      	subs	r2, #1
 80092a2:	60fa      	str	r2, [r7, #12]
 80092a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	e032      	b.n	8009316 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	0f1a      	lsrs	r2, r3, #28
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	60fb      	str	r3, [r7, #12]
 80092ba:	b2d2      	uxtb	r2, r2
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	0d5b      	lsrs	r3, r3, #21
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	3a01      	subs	r2, #1
 80092ca:	60fa      	str	r2, [r7, #12]
 80092cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	0b9b      	lsrs	r3, r3, #14
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	3a01      	subs	r2, #1
 80092e0:	60fa      	str	r2, [r7, #12]
 80092e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	09db      	lsrs	r3, r3, #7
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	3a01      	subs	r2, #1
 80092f6:	60fa      	str	r2, [r7, #12]
 80092f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	3a01      	subs	r2, #1
 800930a:	60fa      	str	r2, [r7, #12]
 800930c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009310:	b2da      	uxtb	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <_SendPacket+0x274>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800931c:	4b1c      	ldr	r3, [pc, #112]	; (8009390 <_SendPacket+0x270>)
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	627b      	str	r3, [r7, #36]	; 0x24
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	623b      	str	r3, [r7, #32]
 800932e:	e00b      	b.n	8009348 <_SendPacket+0x228>
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	b2da      	uxtb	r2, r3
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	1c59      	adds	r1, r3, #1
 8009338:	6279      	str	r1, [r7, #36]	; 0x24
 800933a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800933e:	b2d2      	uxtb	r2, r2
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	09db      	lsrs	r3, r3, #7
 8009346:	623b      	str	r3, [r7, #32]
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	2b7f      	cmp	r3, #127	; 0x7f
 800934c:	d8f0      	bhi.n	8009330 <_SendPacket+0x210>
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	627a      	str	r2, [r7, #36]	; 0x24
 8009354:	6a3a      	ldr	r2, [r7, #32]
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800935e:	4b0c      	ldr	r3, [pc, #48]	; (8009390 <_SendPacket+0x270>)
 8009360:	785b      	ldrb	r3, [r3, #1]
 8009362:	4618      	mov	r0, r3
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	461a      	mov	r2, r3
 800936c:	68f9      	ldr	r1, [r7, #12]
 800936e:	f7f6 ff2f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009372:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800937a:	4a05      	ldr	r2, [pc, #20]	; (8009390 <_SendPacket+0x270>)
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	60d3      	str	r3, [r2, #12]
 8009380:	e00f      	b.n	80093a2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009382:	4b03      	ldr	r3, [pc, #12]	; (8009390 <_SendPacket+0x270>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	3301      	adds	r3, #1
 8009388:	b2da      	uxtb	r2, r3
 800938a:	4b01      	ldr	r3, [pc, #4]	; (8009390 <_SendPacket+0x270>)
 800938c:	701a      	strb	r2, [r3, #0]
 800938e:	e008      	b.n	80093a2 <_SendPacket+0x282>
 8009390:	200049a4 	.word	0x200049a4
 8009394:	e0001004 	.word	0xe0001004
    goto SendDone;
 8009398:	bf00      	nop
 800939a:	e002      	b.n	80093a2 <_SendPacket+0x282>
      goto SendDone;
 800939c:	bf00      	nop
 800939e:	e000      	b.n	80093a2 <_SendPacket+0x282>
      goto SendDone;
 80093a0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80093a2:	4b14      	ldr	r3, [pc, #80]	; (80093f4 <_SendPacket+0x2d4>)
 80093a4:	7e1b      	ldrb	r3, [r3, #24]
 80093a6:	4619      	mov	r1, r3
 80093a8:	4a13      	ldr	r2, [pc, #76]	; (80093f8 <_SendPacket+0x2d8>)
 80093aa:	460b      	mov	r3, r1
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	440b      	add	r3, r1
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	4413      	add	r3, r2
 80093b4:	336c      	adds	r3, #108	; 0x6c
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	4b0e      	ldr	r3, [pc, #56]	; (80093f4 <_SendPacket+0x2d4>)
 80093ba:	7e1b      	ldrb	r3, [r3, #24]
 80093bc:	4618      	mov	r0, r3
 80093be:	490e      	ldr	r1, [pc, #56]	; (80093f8 <_SendPacket+0x2d8>)
 80093c0:	4603      	mov	r3, r0
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	4403      	add	r3, r0
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	440b      	add	r3, r1
 80093ca:	3370      	adds	r3, #112	; 0x70
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d00b      	beq.n	80093ea <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80093d2:	4b08      	ldr	r3, [pc, #32]	; (80093f4 <_SendPacket+0x2d4>)
 80093d4:	789b      	ldrb	r3, [r3, #2]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d107      	bne.n	80093ea <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80093da:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <_SendPacket+0x2d4>)
 80093dc:	2201      	movs	r2, #1
 80093de:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80093e0:	f7ff fdbe 	bl	8008f60 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80093e4:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <_SendPacket+0x2d4>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80093ea:	bf00      	nop
 80093ec:	3728      	adds	r7, #40	; 0x28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	200049a4 	.word	0x200049a4
 80093f8:	200030e4 	.word	0x200030e4

080093fc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800940a:	2300      	movs	r3, #0
 800940c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009410:	4917      	ldr	r1, [pc, #92]	; (8009470 <SEGGER_SYSVIEW_Init+0x74>)
 8009412:	4818      	ldr	r0, [pc, #96]	; (8009474 <SEGGER_SYSVIEW_Init+0x78>)
 8009414:	f7ff fc98 	bl	8008d48 <SEGGER_RTT_AllocUpBuffer>
 8009418:	4603      	mov	r3, r0
 800941a:	b2da      	uxtb	r2, r3
 800941c:	4b16      	ldr	r3, [pc, #88]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 800941e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009420:	4b15      	ldr	r3, [pc, #84]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 8009422:	785a      	ldrb	r2, [r3, #1]
 8009424:	4b14      	ldr	r3, [pc, #80]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 8009426:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009428:	4b13      	ldr	r3, [pc, #76]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 800942a:	7e1b      	ldrb	r3, [r3, #24]
 800942c:	4618      	mov	r0, r3
 800942e:	2300      	movs	r3, #0
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	2308      	movs	r3, #8
 8009434:	4a11      	ldr	r2, [pc, #68]	; (800947c <SEGGER_SYSVIEW_Init+0x80>)
 8009436:	490f      	ldr	r1, [pc, #60]	; (8009474 <SEGGER_SYSVIEW_Init+0x78>)
 8009438:	f7ff fd0a 	bl	8008e50 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800943c:	4b0e      	ldr	r3, [pc, #56]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 800943e:	2200      	movs	r2, #0
 8009440:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009442:	4b0f      	ldr	r3, [pc, #60]	; (8009480 <SEGGER_SYSVIEW_Init+0x84>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a0c      	ldr	r2, [pc, #48]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 8009448:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800944a:	4a0b      	ldr	r2, [pc, #44]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8009450:	4a09      	ldr	r2, [pc, #36]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009456:	4a08      	ldr	r2, [pc, #32]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800945c:	4a06      	ldr	r2, [pc, #24]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8009462:	4b05      	ldr	r3, [pc, #20]	; (8009478 <SEGGER_SYSVIEW_Init+0x7c>)
 8009464:	2200      	movs	r2, #0
 8009466:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009468:	bf00      	nop
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	2000359c 	.word	0x2000359c
 8009474:	0800a8c0 	.word	0x0800a8c0
 8009478:	200049a4 	.word	0x200049a4
 800947c:	2000499c 	.word	0x2000499c
 8009480:	e0001004 	.word	0xe0001004

08009484 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800948c:	4a04      	ldr	r2, [pc, #16]	; (80094a0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6113      	str	r3, [r2, #16]
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	200049a4 	.word	0x200049a4

080094a4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80094ac:	f3ef 8311 	mrs	r3, BASEPRI
 80094b0:	f04f 0120 	mov.w	r1, #32
 80094b4:	f381 8811 	msr	BASEPRI, r1
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	4808      	ldr	r0, [pc, #32]	; (80094dc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80094bc:	f7ff fd44 	bl	8008f48 <_PreparePacket>
 80094c0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	68b8      	ldr	r0, [r7, #8]
 80094c8:	f7ff fe2a 	bl	8009120 <_SendPacket>
  RECORD_END();
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f383 8811 	msr	BASEPRI, r3
}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	200049d4 	.word	0x200049d4

080094e0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80094ea:	f3ef 8311 	mrs	r3, BASEPRI
 80094ee:	f04f 0120 	mov.w	r1, #32
 80094f2:	f381 8811 	msr	BASEPRI, r1
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	4816      	ldr	r0, [pc, #88]	; (8009554 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80094fa:	f7ff fd25 	bl	8008f48 <_PreparePacket>
 80094fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	61fb      	str	r3, [r7, #28]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	61bb      	str	r3, [r7, #24]
 800950c:	e00b      	b.n	8009526 <SEGGER_SYSVIEW_RecordU32+0x46>
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	b2da      	uxtb	r2, r3
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	1c59      	adds	r1, r3, #1
 8009516:	61f9      	str	r1, [r7, #28]
 8009518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800951c:	b2d2      	uxtb	r2, r2
 800951e:	701a      	strb	r2, [r3, #0]
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	09db      	lsrs	r3, r3, #7
 8009524:	61bb      	str	r3, [r7, #24]
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b7f      	cmp	r3, #127	; 0x7f
 800952a:	d8f0      	bhi.n	800950e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	61fa      	str	r2, [r7, #28]
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	b2d2      	uxtb	r2, r2
 8009536:	701a      	strb	r2, [r3, #0]
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	68f9      	ldr	r1, [r7, #12]
 8009540:	6938      	ldr	r0, [r7, #16]
 8009542:	f7ff fded 	bl	8009120 <_SendPacket>
  RECORD_END();
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f383 8811 	msr	BASEPRI, r3
}
 800954c:	bf00      	nop
 800954e:	3720      	adds	r7, #32
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	200049d4 	.word	0x200049d4

08009558 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b08c      	sub	sp, #48	; 0x30
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009564:	f3ef 8311 	mrs	r3, BASEPRI
 8009568:	f04f 0120 	mov.w	r1, #32
 800956c:	f381 8811 	msr	BASEPRI, r1
 8009570:	61fb      	str	r3, [r7, #28]
 8009572:	4825      	ldr	r0, [pc, #148]	; (8009608 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009574:	f7ff fce8 	bl	8008f48 <_PreparePacket>
 8009578:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	62bb      	str	r3, [r7, #40]	; 0x28
 8009586:	e00b      	b.n	80095a0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	b2da      	uxtb	r2, r3
 800958c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958e:	1c59      	adds	r1, r3, #1
 8009590:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009596:	b2d2      	uxtb	r2, r2
 8009598:	701a      	strb	r2, [r3, #0]
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	09db      	lsrs	r3, r3, #7
 800959e:	62bb      	str	r3, [r7, #40]	; 0x28
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	2b7f      	cmp	r3, #127	; 0x7f
 80095a4:	d8f0      	bhi.n	8009588 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	623b      	str	r3, [r7, #32]
 80095be:	e00b      	b.n	80095d8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	1c59      	adds	r1, r3, #1
 80095c8:	6279      	str	r1, [r7, #36]	; 0x24
 80095ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	09db      	lsrs	r3, r3, #7
 80095d6:	623b      	str	r3, [r7, #32]
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	2b7f      	cmp	r3, #127	; 0x7f
 80095dc:	d8f0      	bhi.n	80095c0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	627a      	str	r2, [r7, #36]	; 0x24
 80095e4:	6a3a      	ldr	r2, [r7, #32]
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	6979      	ldr	r1, [r7, #20]
 80095f2:	69b8      	ldr	r0, [r7, #24]
 80095f4:	f7ff fd94 	bl	8009120 <_SendPacket>
  RECORD_END();
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	f383 8811 	msr	BASEPRI, r3
}
 80095fe:	bf00      	nop
 8009600:	3730      	adds	r7, #48	; 0x30
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	200049d4 	.word	0x200049d4

0800960c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800960c:	b580      	push	{r7, lr}
 800960e:	b08e      	sub	sp, #56	; 0x38
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800961a:	f3ef 8311 	mrs	r3, BASEPRI
 800961e:	f04f 0120 	mov.w	r1, #32
 8009622:	f381 8811 	msr	BASEPRI, r1
 8009626:	61fb      	str	r3, [r7, #28]
 8009628:	4832      	ldr	r0, [pc, #200]	; (80096f4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800962a:	f7ff fc8d 	bl	8008f48 <_PreparePacket>
 800962e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	637b      	str	r3, [r7, #52]	; 0x34
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	633b      	str	r3, [r7, #48]	; 0x30
 800963c:	e00b      	b.n	8009656 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	b2da      	uxtb	r2, r3
 8009642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009644:	1c59      	adds	r1, r3, #1
 8009646:	6379      	str	r1, [r7, #52]	; 0x34
 8009648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800964c:	b2d2      	uxtb	r2, r2
 800964e:	701a      	strb	r2, [r3, #0]
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	09db      	lsrs	r3, r3, #7
 8009654:	633b      	str	r3, [r7, #48]	; 0x30
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	2b7f      	cmp	r3, #127	; 0x7f
 800965a:	d8f0      	bhi.n	800963e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800965c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	637a      	str	r2, [r7, #52]	; 0x34
 8009662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009664:	b2d2      	uxtb	r2, r2
 8009666:	701a      	strb	r2, [r3, #0]
 8009668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	62bb      	str	r3, [r7, #40]	; 0x28
 8009674:	e00b      	b.n	800968e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	b2da      	uxtb	r2, r3
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	1c59      	adds	r1, r3, #1
 800967e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	09db      	lsrs	r3, r3, #7
 800968c:	62bb      	str	r3, [r7, #40]	; 0x28
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	2b7f      	cmp	r3, #127	; 0x7f
 8009692:	d8f0      	bhi.n	8009676 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800969a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800969c:	b2d2      	uxtb	r2, r2
 800969e:	701a      	strb	r2, [r3, #0]
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	623b      	str	r3, [r7, #32]
 80096ac:	e00b      	b.n	80096c6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b4:	1c59      	adds	r1, r3, #1
 80096b6:	6279      	str	r1, [r7, #36]	; 0x24
 80096b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096bc:	b2d2      	uxtb	r2, r2
 80096be:	701a      	strb	r2, [r3, #0]
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	09db      	lsrs	r3, r3, #7
 80096c4:	623b      	str	r3, [r7, #32]
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	2b7f      	cmp	r3, #127	; 0x7f
 80096ca:	d8f0      	bhi.n	80096ae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	627a      	str	r2, [r7, #36]	; 0x24
 80096d2:	6a3a      	ldr	r2, [r7, #32]
 80096d4:	b2d2      	uxtb	r2, r2
 80096d6:	701a      	strb	r2, [r3, #0]
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	6979      	ldr	r1, [r7, #20]
 80096e0:	69b8      	ldr	r0, [r7, #24]
 80096e2:	f7ff fd1d 	bl	8009120 <_SendPacket>
  RECORD_END();
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f383 8811 	msr	BASEPRI, r3
}
 80096ec:	bf00      	nop
 80096ee:	3738      	adds	r7, #56	; 0x38
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	200049d4 	.word	0x200049d4

080096f8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b090      	sub	sp, #64	; 0x40
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
 8009704:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009706:	f3ef 8311 	mrs	r3, BASEPRI
 800970a:	f04f 0120 	mov.w	r1, #32
 800970e:	f381 8811 	msr	BASEPRI, r1
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	4840      	ldr	r0, [pc, #256]	; (8009818 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009716:	f7ff fc17 	bl	8008f48 <_PreparePacket>
 800971a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	63bb      	str	r3, [r7, #56]	; 0x38
 8009728:	e00b      	b.n	8009742 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	b2da      	uxtb	r2, r3
 800972e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009730:	1c59      	adds	r1, r3, #1
 8009732:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009738:	b2d2      	uxtb	r2, r2
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	09db      	lsrs	r3, r3, #7
 8009740:	63bb      	str	r3, [r7, #56]	; 0x38
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	2b7f      	cmp	r3, #127	; 0x7f
 8009746:	d8f0      	bhi.n	800972a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800974e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009750:	b2d2      	uxtb	r2, r2
 8009752:	701a      	strb	r2, [r3, #0]
 8009754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009756:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	637b      	str	r3, [r7, #52]	; 0x34
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	633b      	str	r3, [r7, #48]	; 0x30
 8009760:	e00b      	b.n	800977a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	b2da      	uxtb	r2, r3
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009768:	1c59      	adds	r1, r3, #1
 800976a:	6379      	str	r1, [r7, #52]	; 0x34
 800976c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009770:	b2d2      	uxtb	r2, r2
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	09db      	lsrs	r3, r3, #7
 8009778:	633b      	str	r3, [r7, #48]	; 0x30
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	2b7f      	cmp	r3, #127	; 0x7f
 800977e:	d8f0      	bhi.n	8009762 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009782:	1c5a      	adds	r2, r3, #1
 8009784:	637a      	str	r2, [r7, #52]	; 0x34
 8009786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009788:	b2d2      	uxtb	r2, r2
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
 8009798:	e00b      	b.n	80097b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	b2da      	uxtb	r2, r3
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	1c59      	adds	r1, r3, #1
 80097a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80097a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097a8:	b2d2      	uxtb	r2, r2
 80097aa:	701a      	strb	r2, [r3, #0]
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	09db      	lsrs	r3, r3, #7
 80097b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	2b7f      	cmp	r3, #127	; 0x7f
 80097b6:	d8f0      	bhi.n	800979a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097c0:	b2d2      	uxtb	r2, r2
 80097c2:	701a      	strb	r2, [r3, #0]
 80097c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
 80097cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097ce:	623b      	str	r3, [r7, #32]
 80097d0:	e00b      	b.n	80097ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	1c59      	adds	r1, r3, #1
 80097da:	6279      	str	r1, [r7, #36]	; 0x24
 80097dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097e0:	b2d2      	uxtb	r2, r2
 80097e2:	701a      	strb	r2, [r3, #0]
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	09db      	lsrs	r3, r3, #7
 80097e8:	623b      	str	r3, [r7, #32]
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	2b7f      	cmp	r3, #127	; 0x7f
 80097ee:	d8f0      	bhi.n	80097d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	627a      	str	r2, [r7, #36]	; 0x24
 80097f6:	6a3a      	ldr	r2, [r7, #32]
 80097f8:	b2d2      	uxtb	r2, r2
 80097fa:	701a      	strb	r2, [r3, #0]
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	6979      	ldr	r1, [r7, #20]
 8009804:	69b8      	ldr	r0, [r7, #24]
 8009806:	f7ff fc8b 	bl	8009120 <_SendPacket>
  RECORD_END();
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	f383 8811 	msr	BASEPRI, r3
}
 8009810:	bf00      	nop
 8009812:	3740      	adds	r7, #64	; 0x40
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	200049d4 	.word	0x200049d4

0800981c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b092      	sub	sp, #72	; 0x48
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800982a:	f3ef 8311 	mrs	r3, BASEPRI
 800982e:	f04f 0120 	mov.w	r1, #32
 8009832:	f381 8811 	msr	BASEPRI, r1
 8009836:	61fb      	str	r3, [r7, #28]
 8009838:	484e      	ldr	r0, [pc, #312]	; (8009974 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800983a:	f7ff fb85 	bl	8008f48 <_PreparePacket>
 800983e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	647b      	str	r3, [r7, #68]	; 0x44
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	643b      	str	r3, [r7, #64]	; 0x40
 800984c:	e00b      	b.n	8009866 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800984e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009850:	b2da      	uxtb	r2, r3
 8009852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009854:	1c59      	adds	r1, r3, #1
 8009856:	6479      	str	r1, [r7, #68]	; 0x44
 8009858:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	701a      	strb	r2, [r3, #0]
 8009860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009862:	09db      	lsrs	r3, r3, #7
 8009864:	643b      	str	r3, [r7, #64]	; 0x40
 8009866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009868:	2b7f      	cmp	r3, #127	; 0x7f
 800986a:	d8f0      	bhi.n	800984e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800986c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	647a      	str	r2, [r7, #68]	; 0x44
 8009872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	701a      	strb	r2, [r3, #0]
 8009878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	63bb      	str	r3, [r7, #56]	; 0x38
 8009884:	e00b      	b.n	800989e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	b2da      	uxtb	r2, r3
 800988a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988c:	1c59      	adds	r1, r3, #1
 800988e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009894:	b2d2      	uxtb	r2, r2
 8009896:	701a      	strb	r2, [r3, #0]
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	09db      	lsrs	r3, r3, #7
 800989c:	63bb      	str	r3, [r7, #56]	; 0x38
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	2b7f      	cmp	r3, #127	; 0x7f
 80098a2:	d8f0      	bhi.n	8009886 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80098a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80098aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098ac:	b2d2      	uxtb	r2, r2
 80098ae:	701a      	strb	r2, [r3, #0]
 80098b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	637b      	str	r3, [r7, #52]	; 0x34
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	633b      	str	r3, [r7, #48]	; 0x30
 80098bc:	e00b      	b.n	80098d6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c4:	1c59      	adds	r1, r3, #1
 80098c6:	6379      	str	r1, [r7, #52]	; 0x34
 80098c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
 80098d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d2:	09db      	lsrs	r3, r3, #7
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	2b7f      	cmp	r3, #127	; 0x7f
 80098da:	d8f0      	bhi.n	80098be <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80098dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	637a      	str	r2, [r7, #52]	; 0x34
 80098e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e4:	b2d2      	uxtb	r2, r2
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80098f4:	e00b      	b.n	800990e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80098f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	1c59      	adds	r1, r3, #1
 80098fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009904:	b2d2      	uxtb	r2, r2
 8009906:	701a      	strb	r2, [r3, #0]
 8009908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990a:	09db      	lsrs	r3, r3, #7
 800990c:	62bb      	str	r3, [r7, #40]	; 0x28
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	2b7f      	cmp	r3, #127	; 0x7f
 8009912:	d8f0      	bhi.n	80098f6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800991a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800991c:	b2d2      	uxtb	r2, r2
 800991e:	701a      	strb	r2, [r3, #0]
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
 8009928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992a:	623b      	str	r3, [r7, #32]
 800992c:	e00b      	b.n	8009946 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	b2da      	uxtb	r2, r3
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	1c59      	adds	r1, r3, #1
 8009936:	6279      	str	r1, [r7, #36]	; 0x24
 8009938:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800993c:	b2d2      	uxtb	r2, r2
 800993e:	701a      	strb	r2, [r3, #0]
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	09db      	lsrs	r3, r3, #7
 8009944:	623b      	str	r3, [r7, #32]
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	2b7f      	cmp	r3, #127	; 0x7f
 800994a:	d8f0      	bhi.n	800992e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	627a      	str	r2, [r7, #36]	; 0x24
 8009952:	6a3a      	ldr	r2, [r7, #32]
 8009954:	b2d2      	uxtb	r2, r2
 8009956:	701a      	strb	r2, [r3, #0]
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	6979      	ldr	r1, [r7, #20]
 8009960:	69b8      	ldr	r0, [r7, #24]
 8009962:	f7ff fbdd 	bl	8009120 <_SendPacket>
  RECORD_END();
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	f383 8811 	msr	BASEPRI, r3
}
 800996c:	bf00      	nop
 800996e:	3748      	adds	r7, #72	; 0x48
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	200049d4 	.word	0x200049d4

08009978 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009978:	b580      	push	{r7, lr}
 800997a:	b08c      	sub	sp, #48	; 0x30
 800997c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800997e:	4b58      	ldr	r3, [pc, #352]	; (8009ae0 <SEGGER_SYSVIEW_Start+0x168>)
 8009980:	2201      	movs	r2, #1
 8009982:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009984:	f3ef 8311 	mrs	r3, BASEPRI
 8009988:	f04f 0120 	mov.w	r1, #32
 800998c:	f381 8811 	msr	BASEPRI, r1
 8009990:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009992:	4b53      	ldr	r3, [pc, #332]	; (8009ae0 <SEGGER_SYSVIEW_Start+0x168>)
 8009994:	785b      	ldrb	r3, [r3, #1]
 8009996:	220a      	movs	r2, #10
 8009998:	4952      	ldr	r1, [pc, #328]	; (8009ae4 <SEGGER_SYSVIEW_Start+0x16c>)
 800999a:	4618      	mov	r0, r3
 800999c:	f7f6 fc18 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80099a6:	200a      	movs	r0, #10
 80099a8:	f7ff fd7c 	bl	80094a4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80099ac:	f3ef 8311 	mrs	r3, BASEPRI
 80099b0:	f04f 0120 	mov.w	r1, #32
 80099b4:	f381 8811 	msr	BASEPRI, r1
 80099b8:	60bb      	str	r3, [r7, #8]
 80099ba:	484b      	ldr	r0, [pc, #300]	; (8009ae8 <SEGGER_SYSVIEW_Start+0x170>)
 80099bc:	f7ff fac4 	bl	8008f48 <_PreparePacket>
 80099c0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ca:	4b45      	ldr	r3, [pc, #276]	; (8009ae0 <SEGGER_SYSVIEW_Start+0x168>)
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80099d0:	e00b      	b.n	80099ea <SEGGER_SYSVIEW_Start+0x72>
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	1c59      	adds	r1, r3, #1
 80099da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80099dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099e0:	b2d2      	uxtb	r2, r2
 80099e2:	701a      	strb	r2, [r3, #0]
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	09db      	lsrs	r3, r3, #7
 80099e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	2b7f      	cmp	r3, #127	; 0x7f
 80099ee:	d8f0      	bhi.n	80099d2 <SEGGER_SYSVIEW_Start+0x5a>
 80099f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099f8:	b2d2      	uxtb	r2, r2
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	627b      	str	r3, [r7, #36]	; 0x24
 8009a04:	4b36      	ldr	r3, [pc, #216]	; (8009ae0 <SEGGER_SYSVIEW_Start+0x168>)
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	623b      	str	r3, [r7, #32]
 8009a0a:	e00b      	b.n	8009a24 <SEGGER_SYSVIEW_Start+0xac>
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	1c59      	adds	r1, r3, #1
 8009a14:	6279      	str	r1, [r7, #36]	; 0x24
 8009a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a1a:	b2d2      	uxtb	r2, r2
 8009a1c:	701a      	strb	r2, [r3, #0]
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	09db      	lsrs	r3, r3, #7
 8009a22:	623b      	str	r3, [r7, #32]
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	2b7f      	cmp	r3, #127	; 0x7f
 8009a28:	d8f0      	bhi.n	8009a0c <SEGGER_SYSVIEW_Start+0x94>
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	627a      	str	r2, [r7, #36]	; 0x24
 8009a30:	6a3a      	ldr	r2, [r7, #32]
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	61fb      	str	r3, [r7, #28]
 8009a3e:	4b28      	ldr	r3, [pc, #160]	; (8009ae0 <SEGGER_SYSVIEW_Start+0x168>)
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	61bb      	str	r3, [r7, #24]
 8009a44:	e00b      	b.n	8009a5e <SEGGER_SYSVIEW_Start+0xe6>
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	1c59      	adds	r1, r3, #1
 8009a4e:	61f9      	str	r1, [r7, #28]
 8009a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a54:	b2d2      	uxtb	r2, r2
 8009a56:	701a      	strb	r2, [r3, #0]
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	09db      	lsrs	r3, r3, #7
 8009a5c:	61bb      	str	r3, [r7, #24]
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	2b7f      	cmp	r3, #127	; 0x7f
 8009a62:	d8f0      	bhi.n	8009a46 <SEGGER_SYSVIEW_Start+0xce>
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	61fa      	str	r2, [r7, #28]
 8009a6a:	69ba      	ldr	r2, [r7, #24]
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	701a      	strb	r2, [r3, #0]
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	2300      	movs	r3, #0
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	e00b      	b.n	8009a96 <SEGGER_SYSVIEW_Start+0x11e>
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	1c59      	adds	r1, r3, #1
 8009a86:	6179      	str	r1, [r7, #20]
 8009a88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a8c:	b2d2      	uxtb	r2, r2
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	09db      	lsrs	r3, r3, #7
 8009a94:	613b      	str	r3, [r7, #16]
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b7f      	cmp	r3, #127	; 0x7f
 8009a9a:	d8f0      	bhi.n	8009a7e <SEGGER_SYSVIEW_Start+0x106>
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	617a      	str	r2, [r7, #20]
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	b2d2      	uxtb	r2, r2
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009aac:	2218      	movs	r2, #24
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff fb35 	bl	8009120 <_SendPacket>
      RECORD_END();
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009abc:	4b08      	ldr	r3, [pc, #32]	; (8009ae0 <SEGGER_SYSVIEW_Start+0x168>)
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009ac4:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <SEGGER_SYSVIEW_Start+0x168>)
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009aca:	f000 f9eb 	bl	8009ea4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009ace:	f000 f9b1 	bl	8009e34 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009ad2:	f000 fc2d 	bl	800a330 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009ad6:	bf00      	nop
 8009ad8:	3730      	adds	r7, #48	; 0x30
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	200049a4 	.word	0x200049a4
 8009ae4:	0800a92c 	.word	0x0800a92c
 8009ae8:	200049d4 	.word	0x200049d4

08009aec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009af2:	f3ef 8311 	mrs	r3, BASEPRI
 8009af6:	f04f 0120 	mov.w	r1, #32
 8009afa:	f381 8811 	msr	BASEPRI, r1
 8009afe:	607b      	str	r3, [r7, #4]
 8009b00:	480b      	ldr	r0, [pc, #44]	; (8009b30 <SEGGER_SYSVIEW_Stop+0x44>)
 8009b02:	f7ff fa21 	bl	8008f48 <_PreparePacket>
 8009b06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <SEGGER_SYSVIEW_Stop+0x48>)
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d007      	beq.n	8009b20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009b10:	220b      	movs	r2, #11
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6838      	ldr	r0, [r7, #0]
 8009b16:	f7ff fb03 	bl	8009120 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009b1a:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <SEGGER_SYSVIEW_Stop+0x48>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f383 8811 	msr	BASEPRI, r3
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	200049d4 	.word	0x200049d4
 8009b34:	200049a4 	.word	0x200049a4

08009b38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08c      	sub	sp, #48	; 0x30
 8009b3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8009b42:	f04f 0120 	mov.w	r1, #32
 8009b46:	f381 8811 	msr	BASEPRI, r1
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	4845      	ldr	r0, [pc, #276]	; (8009c64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009b4e:	f7ff f9fb 	bl	8008f48 <_PreparePacket>
 8009b52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b5c:	4b42      	ldr	r3, [pc, #264]	; (8009c68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b62:	e00b      	b.n	8009b7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6a:	1c59      	adds	r1, r3, #1
 8009b6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b72:	b2d2      	uxtb	r2, r2
 8009b74:	701a      	strb	r2, [r3, #0]
 8009b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b78:	09db      	lsrs	r3, r3, #7
 8009b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8009b80:	d8f0      	bhi.n	8009b64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b8a:	b2d2      	uxtb	r2, r2
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24
 8009b96:	4b34      	ldr	r3, [pc, #208]	; (8009c68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	623b      	str	r3, [r7, #32]
 8009b9c:	e00b      	b.n	8009bb6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	1c59      	adds	r1, r3, #1
 8009ba6:	6279      	str	r1, [r7, #36]	; 0x24
 8009ba8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bac:	b2d2      	uxtb	r2, r2
 8009bae:	701a      	strb	r2, [r3, #0]
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	09db      	lsrs	r3, r3, #7
 8009bb4:	623b      	str	r3, [r7, #32]
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8009bba:	d8f0      	bhi.n	8009b9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8009bc2:	6a3a      	ldr	r2, [r7, #32]
 8009bc4:	b2d2      	uxtb	r2, r2
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	61fb      	str	r3, [r7, #28]
 8009bd0:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	61bb      	str	r3, [r7, #24]
 8009bd6:	e00b      	b.n	8009bf0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	1c59      	adds	r1, r3, #1
 8009be0:	61f9      	str	r1, [r7, #28]
 8009be2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009be6:	b2d2      	uxtb	r2, r2
 8009be8:	701a      	strb	r2, [r3, #0]
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	09db      	lsrs	r3, r3, #7
 8009bee:	61bb      	str	r3, [r7, #24]
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8009bf4:	d8f0      	bhi.n	8009bd8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	61fa      	str	r2, [r7, #28]
 8009bfc:	69ba      	ldr	r2, [r7, #24]
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	617b      	str	r3, [r7, #20]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	613b      	str	r3, [r7, #16]
 8009c0e:	e00b      	b.n	8009c28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	1c59      	adds	r1, r3, #1
 8009c18:	6179      	str	r1, [r7, #20]
 8009c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c1e:	b2d2      	uxtb	r2, r2
 8009c20:	701a      	strb	r2, [r3, #0]
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	09db      	lsrs	r3, r3, #7
 8009c26:	613b      	str	r3, [r7, #16]
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c2c:	d8f0      	bhi.n	8009c10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	617a      	str	r2, [r7, #20]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	b2d2      	uxtb	r2, r2
 8009c38:	701a      	strb	r2, [r3, #0]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009c3e:	2218      	movs	r2, #24
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	68b8      	ldr	r0, [r7, #8]
 8009c44:	f7ff fa6c 	bl	8009120 <_SendPacket>
  RECORD_END();
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009c4e:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009c56:	4b04      	ldr	r3, [pc, #16]	; (8009c68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	4798      	blx	r3
  }
}
 8009c5c:	bf00      	nop
 8009c5e:	3730      	adds	r7, #48	; 0x30
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	200049d4 	.word	0x200049d4
 8009c68:	200049a4 	.word	0x200049a4

08009c6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b092      	sub	sp, #72	; 0x48
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009c74:	f3ef 8311 	mrs	r3, BASEPRI
 8009c78:	f04f 0120 	mov.w	r1, #32
 8009c7c:	f381 8811 	msr	BASEPRI, r1
 8009c80:	617b      	str	r3, [r7, #20]
 8009c82:	486a      	ldr	r0, [pc, #424]	; (8009e2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009c84:	f7ff f960 	bl	8008f48 <_PreparePacket>
 8009c88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	647b      	str	r3, [r7, #68]	; 0x44
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	4b66      	ldr	r3, [pc, #408]	; (8009e30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8009c9e:	e00b      	b.n	8009cb8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca6:	1c59      	adds	r1, r3, #1
 8009ca8:	6479      	str	r1, [r7, #68]	; 0x44
 8009caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cb4:	09db      	lsrs	r3, r3, #7
 8009cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8009cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cba:	2b7f      	cmp	r3, #127	; 0x7f
 8009cbc:	d8f0      	bhi.n	8009ca0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8009cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	647a      	str	r2, [r7, #68]	; 0x44
 8009cc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cc6:	b2d2      	uxtb	r2, r2
 8009cc8:	701a      	strb	r2, [r3, #0]
 8009cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ccc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cd8:	e00b      	b.n	8009cf2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8009cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce0:	1c59      	adds	r1, r3, #1
 8009ce2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ce8:	b2d2      	uxtb	r2, r2
 8009cea:	701a      	strb	r2, [r3, #0]
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	09db      	lsrs	r3, r3, #7
 8009cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8009cf6:	d8f0      	bhi.n	8009cda <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8009cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d00:	b2d2      	uxtb	r2, r2
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d06:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7ff f8e9 	bl	8008ee8 <_EncodeStr>
 8009d16:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009d18:	2209      	movs	r2, #9
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	6938      	ldr	r0, [r7, #16]
 8009d1e:	f7ff f9ff 	bl	8009120 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	637b      	str	r3, [r7, #52]	; 0x34
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4b40      	ldr	r3, [pc, #256]	; (8009e30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	633b      	str	r3, [r7, #48]	; 0x30
 8009d36:	e00b      	b.n	8009d50 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3e:	1c59      	adds	r1, r3, #1
 8009d40:	6379      	str	r1, [r7, #52]	; 0x34
 8009d42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	09db      	lsrs	r3, r3, #7
 8009d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	2b7f      	cmp	r3, #127	; 0x7f
 8009d54:	d8f0      	bhi.n	8009d38 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8009d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d58:	1c5a      	adds	r2, r3, #1
 8009d5a:	637a      	str	r2, [r7, #52]	; 0x34
 8009d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d5e:	b2d2      	uxtb	r2, r2
 8009d60:	701a      	strb	r2, [r3, #0]
 8009d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d70:	e00b      	b.n	8009d8a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d78:	1c59      	adds	r1, r3, #1
 8009d7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d80:	b2d2      	uxtb	r2, r2
 8009d82:	701a      	strb	r2, [r3, #0]
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	09db      	lsrs	r3, r3, #7
 8009d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8009d8e:	d8f0      	bhi.n	8009d72 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d98:	b2d2      	uxtb	r2, r2
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	627b      	str	r3, [r7, #36]	; 0x24
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	623b      	str	r3, [r7, #32]
 8009daa:	e00b      	b.n	8009dc4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	1c59      	adds	r1, r3, #1
 8009db4:	6279      	str	r1, [r7, #36]	; 0x24
 8009db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009dba:	b2d2      	uxtb	r2, r2
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	09db      	lsrs	r3, r3, #7
 8009dc2:	623b      	str	r3, [r7, #32]
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8009dc8:	d8f0      	bhi.n	8009dac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	627a      	str	r2, [r7, #36]	; 0x24
 8009dd0:	6a3a      	ldr	r2, [r7, #32]
 8009dd2:	b2d2      	uxtb	r2, r2
 8009dd4:	701a      	strb	r2, [r3, #0]
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	61fb      	str	r3, [r7, #28]
 8009dde:	2300      	movs	r3, #0
 8009de0:	61bb      	str	r3, [r7, #24]
 8009de2:	e00b      	b.n	8009dfc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	1c59      	adds	r1, r3, #1
 8009dec:	61f9      	str	r1, [r7, #28]
 8009dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	701a      	strb	r2, [r3, #0]
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	09db      	lsrs	r3, r3, #7
 8009dfa:	61bb      	str	r3, [r7, #24]
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8009e00:	d8f0      	bhi.n	8009de4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	61fa      	str	r2, [r7, #28]
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	701a      	strb	r2, [r3, #0]
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8009e12:	2215      	movs	r2, #21
 8009e14:	68f9      	ldr	r1, [r7, #12]
 8009e16:	6938      	ldr	r0, [r7, #16]
 8009e18:	f7ff f982 	bl	8009120 <_SendPacket>
  RECORD_END();
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f383 8811 	msr	BASEPRI, r3
}
 8009e22:	bf00      	nop
 8009e24:	3748      	adds	r7, #72	; 0x48
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	200049d4 	.word	0x200049d4
 8009e30:	200049a4 	.word	0x200049a4

08009e34 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009e38:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009e3a:	6a1b      	ldr	r3, [r3, #32]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d008      	beq.n	8009e52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009e40:	4b05      	ldr	r3, [pc, #20]	; (8009e58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8009e4a:	4b03      	ldr	r3, [pc, #12]	; (8009e58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	4798      	blx	r3
  }
}
 8009e52:	bf00      	nop
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	200049a4 	.word	0x200049a4

08009e5c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009e64:	f3ef 8311 	mrs	r3, BASEPRI
 8009e68:	f04f 0120 	mov.w	r1, #32
 8009e6c:	f381 8811 	msr	BASEPRI, r1
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	480b      	ldr	r0, [pc, #44]	; (8009ea0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009e74:	f7ff f868 	bl	8008f48 <_PreparePacket>
 8009e78:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009e7a:	2280      	movs	r2, #128	; 0x80
 8009e7c:	6879      	ldr	r1, [r7, #4]
 8009e7e:	6938      	ldr	r0, [r7, #16]
 8009e80:	f7ff f832 	bl	8008ee8 <_EncodeStr>
 8009e84:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009e86:	220e      	movs	r2, #14
 8009e88:	68f9      	ldr	r1, [r7, #12]
 8009e8a:	6938      	ldr	r0, [r7, #16]
 8009e8c:	f7ff f948 	bl	8009120 <_SendPacket>
  RECORD_END();
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f383 8811 	msr	BASEPRI, r3
}
 8009e96:	bf00      	nop
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	200049d4 	.word	0x200049d4

08009ea4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8009ea4:	b590      	push	{r4, r7, lr}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8009eaa:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01a      	beq.n	8009ee8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8009eb2:	4b13      	ldr	r3, [pc, #76]	; (8009f00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d015      	beq.n	8009ee8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8009ebc:	4b10      	ldr	r3, [pc, #64]	; (8009f00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4798      	blx	r3
 8009ec4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009ec8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8009eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ece:	f04f 0200 	mov.w	r2, #0
 8009ed2:	f04f 0300 	mov.w	r3, #0
 8009ed6:	000a      	movs	r2, r1
 8009ed8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009eda:	4613      	mov	r3, r2
 8009edc:	461a      	mov	r2, r3
 8009ede:	4621      	mov	r1, r4
 8009ee0:	200d      	movs	r0, #13
 8009ee2:	f7ff fb39 	bl	8009558 <SEGGER_SYSVIEW_RecordU32x2>
 8009ee6:	e006      	b.n	8009ef6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009ee8:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4619      	mov	r1, r3
 8009eee:	200c      	movs	r0, #12
 8009ef0:	f7ff faf6 	bl	80094e0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd90      	pop	{r4, r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200049a4 	.word	0x200049a4
 8009f04:	e0001004 	.word	0xe0001004

08009f08 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8009f12:	f04f 0120 	mov.w	r1, #32
 8009f16:	f381 8811 	msr	BASEPRI, r1
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	4819      	ldr	r0, [pc, #100]	; (8009f84 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8009f1e:	f7ff f813 	bl	8008f48 <_PreparePacket>
 8009f22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009f28:	4b17      	ldr	r3, [pc, #92]	; (8009f88 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f30:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	613b      	str	r3, [r7, #16]
 8009f3a:	e00b      	b.n	8009f54 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	1c59      	adds	r1, r3, #1
 8009f44:	6179      	str	r1, [r7, #20]
 8009f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	09db      	lsrs	r3, r3, #7
 8009f52:	613b      	str	r3, [r7, #16]
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	2b7f      	cmp	r3, #127	; 0x7f
 8009f58:	d8f0      	bhi.n	8009f3c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	617a      	str	r2, [r7, #20]
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	b2d2      	uxtb	r2, r2
 8009f64:	701a      	strb	r2, [r3, #0]
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	68b8      	ldr	r0, [r7, #8]
 8009f70:	f7ff f8d6 	bl	8009120 <_SendPacket>
  RECORD_END();
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f383 8811 	msr	BASEPRI, r3
}
 8009f7a:	bf00      	nop
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	200049d4 	.word	0x200049d4
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009f92:	f3ef 8311 	mrs	r3, BASEPRI
 8009f96:	f04f 0120 	mov.w	r1, #32
 8009f9a:	f381 8811 	msr	BASEPRI, r1
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	4807      	ldr	r0, [pc, #28]	; (8009fc0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8009fa2:	f7fe ffd1 	bl	8008f48 <_PreparePacket>
 8009fa6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8009fa8:	2203      	movs	r2, #3
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6838      	ldr	r0, [r7, #0]
 8009fae:	f7ff f8b7 	bl	8009120 <_SendPacket>
  RECORD_END();
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f383 8811 	msr	BASEPRI, r3
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200049d4 	.word	0x200049d4

08009fc4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009fca:	f3ef 8311 	mrs	r3, BASEPRI
 8009fce:	f04f 0120 	mov.w	r1, #32
 8009fd2:	f381 8811 	msr	BASEPRI, r1
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	4807      	ldr	r0, [pc, #28]	; (8009ff8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8009fda:	f7fe ffb5 	bl	8008f48 <_PreparePacket>
 8009fde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009fe0:	2212      	movs	r2, #18
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6838      	ldr	r0, [r7, #0]
 8009fe6:	f7ff f89b 	bl	8009120 <_SendPacket>
  RECORD_END();
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f383 8811 	msr	BASEPRI, r3
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	200049d4 	.word	0x200049d4

08009ffc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a002:	f3ef 8311 	mrs	r3, BASEPRI
 800a006:	f04f 0120 	mov.w	r1, #32
 800a00a:	f381 8811 	msr	BASEPRI, r1
 800a00e:	607b      	str	r3, [r7, #4]
 800a010:	4807      	ldr	r0, [pc, #28]	; (800a030 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a012:	f7fe ff99 	bl	8008f48 <_PreparePacket>
 800a016:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a018:	2211      	movs	r2, #17
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6838      	ldr	r0, [r7, #0]
 800a01e:	f7ff f87f 	bl	8009120 <_SendPacket>
  RECORD_END();
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f383 8811 	msr	BASEPRI, r3
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	200049d4 	.word	0x200049d4

0800a034 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a034:	b580      	push	{r7, lr}
 800a036:	b088      	sub	sp, #32
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a03c:	f3ef 8311 	mrs	r3, BASEPRI
 800a040:	f04f 0120 	mov.w	r1, #32
 800a044:	f381 8811 	msr	BASEPRI, r1
 800a048:	617b      	str	r3, [r7, #20]
 800a04a:	4819      	ldr	r0, [pc, #100]	; (800a0b0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a04c:	f7fe ff7c 	bl	8008f48 <_PreparePacket>
 800a050:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a056:	4b17      	ldr	r3, [pc, #92]	; (800a0b4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	61bb      	str	r3, [r7, #24]
 800a068:	e00b      	b.n	800a082 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	1c59      	adds	r1, r3, #1
 800a072:	61f9      	str	r1, [r7, #28]
 800a074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a078:	b2d2      	uxtb	r2, r2
 800a07a:	701a      	strb	r2, [r3, #0]
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	09db      	lsrs	r3, r3, #7
 800a080:	61bb      	str	r3, [r7, #24]
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	2b7f      	cmp	r3, #127	; 0x7f
 800a086:	d8f0      	bhi.n	800a06a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	61fa      	str	r2, [r7, #28]
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	b2d2      	uxtb	r2, r2
 800a092:	701a      	strb	r2, [r3, #0]
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a098:	2208      	movs	r2, #8
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	6938      	ldr	r0, [r7, #16]
 800a09e:	f7ff f83f 	bl	8009120 <_SendPacket>
  RECORD_END();
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f383 8811 	msr	BASEPRI, r3
}
 800a0a8:	bf00      	nop
 800a0aa:	3720      	adds	r7, #32
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	200049d4 	.word	0x200049d4
 800a0b4:	200049a4 	.word	0x200049a4

0800a0b8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a0c0:	f3ef 8311 	mrs	r3, BASEPRI
 800a0c4:	f04f 0120 	mov.w	r1, #32
 800a0c8:	f381 8811 	msr	BASEPRI, r1
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	4819      	ldr	r0, [pc, #100]	; (800a134 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a0d0:	f7fe ff3a 	bl	8008f48 <_PreparePacket>
 800a0d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a0da:	4b17      	ldr	r3, [pc, #92]	; (800a138 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	61fb      	str	r3, [r7, #28]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	61bb      	str	r3, [r7, #24]
 800a0ec:	e00b      	b.n	800a106 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	1c59      	adds	r1, r3, #1
 800a0f6:	61f9      	str	r1, [r7, #28]
 800a0f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a0fc:	b2d2      	uxtb	r2, r2
 800a0fe:	701a      	strb	r2, [r3, #0]
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	09db      	lsrs	r3, r3, #7
 800a104:	61bb      	str	r3, [r7, #24]
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	2b7f      	cmp	r3, #127	; 0x7f
 800a10a:	d8f0      	bhi.n	800a0ee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	61fa      	str	r2, [r7, #28]
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	b2d2      	uxtb	r2, r2
 800a116:	701a      	strb	r2, [r3, #0]
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a11c:	2204      	movs	r2, #4
 800a11e:	68f9      	ldr	r1, [r7, #12]
 800a120:	6938      	ldr	r0, [r7, #16]
 800a122:	f7fe fffd 	bl	8009120 <_SendPacket>
  RECORD_END();
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f383 8811 	msr	BASEPRI, r3
}
 800a12c:	bf00      	nop
 800a12e:	3720      	adds	r7, #32
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	200049d4 	.word	0x200049d4
 800a138:	200049a4 	.word	0x200049a4

0800a13c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a144:	f3ef 8311 	mrs	r3, BASEPRI
 800a148:	f04f 0120 	mov.w	r1, #32
 800a14c:	f381 8811 	msr	BASEPRI, r1
 800a150:	617b      	str	r3, [r7, #20]
 800a152:	4819      	ldr	r0, [pc, #100]	; (800a1b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a154:	f7fe fef8 	bl	8008f48 <_PreparePacket>
 800a158:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a15e:	4b17      	ldr	r3, [pc, #92]	; (800a1bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	61fb      	str	r3, [r7, #28]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	61bb      	str	r3, [r7, #24]
 800a170:	e00b      	b.n	800a18a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	b2da      	uxtb	r2, r3
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	1c59      	adds	r1, r3, #1
 800a17a:	61f9      	str	r1, [r7, #28]
 800a17c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a180:	b2d2      	uxtb	r2, r2
 800a182:	701a      	strb	r2, [r3, #0]
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	09db      	lsrs	r3, r3, #7
 800a188:	61bb      	str	r3, [r7, #24]
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	2b7f      	cmp	r3, #127	; 0x7f
 800a18e:	d8f0      	bhi.n	800a172 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	61fa      	str	r2, [r7, #28]
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	b2d2      	uxtb	r2, r2
 800a19a:	701a      	strb	r2, [r3, #0]
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a1a0:	2206      	movs	r2, #6
 800a1a2:	68f9      	ldr	r1, [r7, #12]
 800a1a4:	6938      	ldr	r0, [r7, #16]
 800a1a6:	f7fe ffbb 	bl	8009120 <_SendPacket>
  RECORD_END();
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f383 8811 	msr	BASEPRI, r3
}
 800a1b0:	bf00      	nop
 800a1b2:	3720      	adds	r7, #32
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	200049d4 	.word	0x200049d4
 800a1bc:	200049a4 	.word	0x200049a4

0800a1c0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800a1c8:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	1ad3      	subs	r3, r2, r3
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	200049a4 	.word	0x200049a4

0800a1e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08c      	sub	sp, #48	; 0x30
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a1ea:	4b40      	ldr	r3, [pc, #256]	; (800a2ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d077      	beq.n	800a2e2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800a1f2:	4b3e      	ldr	r3, [pc, #248]	; (800a2ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1fc:	e008      	b.n	800a210 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	2b00      	cmp	r3, #0
 800a208:	d007      	beq.n	800a21a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	3301      	adds	r3, #1
 800a20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a214:	429a      	cmp	r2, r3
 800a216:	d3f2      	bcc.n	800a1fe <SEGGER_SYSVIEW_SendModule+0x1e>
 800a218:	e000      	b.n	800a21c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a21a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d055      	beq.n	800a2ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a222:	f3ef 8311 	mrs	r3, BASEPRI
 800a226:	f04f 0120 	mov.w	r1, #32
 800a22a:	f381 8811 	msr	BASEPRI, r1
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	482f      	ldr	r0, [pc, #188]	; (800a2f0 <SEGGER_SYSVIEW_SendModule+0x110>)
 800a232:	f7fe fe89 	bl	8008f48 <_PreparePacket>
 800a236:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	623b      	str	r3, [r7, #32]
 800a244:	e00b      	b.n	800a25e <SEGGER_SYSVIEW_SendModule+0x7e>
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	1c59      	adds	r1, r3, #1
 800a24e:	6279      	str	r1, [r7, #36]	; 0x24
 800a250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a254:	b2d2      	uxtb	r2, r2
 800a256:	701a      	strb	r2, [r3, #0]
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	09db      	lsrs	r3, r3, #7
 800a25c:	623b      	str	r3, [r7, #32]
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	2b7f      	cmp	r3, #127	; 0x7f
 800a262:	d8f0      	bhi.n	800a246 <SEGGER_SYSVIEW_SendModule+0x66>
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	627a      	str	r2, [r7, #36]	; 0x24
 800a26a:	6a3a      	ldr	r2, [r7, #32]
 800a26c:	b2d2      	uxtb	r2, r2
 800a26e:	701a      	strb	r2, [r3, #0]
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	61fb      	str	r3, [r7, #28]
 800a278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	61bb      	str	r3, [r7, #24]
 800a27e:	e00b      	b.n	800a298 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	b2da      	uxtb	r2, r3
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	1c59      	adds	r1, r3, #1
 800a288:	61f9      	str	r1, [r7, #28]
 800a28a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	701a      	strb	r2, [r3, #0]
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	09db      	lsrs	r3, r3, #7
 800a296:	61bb      	str	r3, [r7, #24]
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	2b7f      	cmp	r3, #127	; 0x7f
 800a29c:	d8f0      	bhi.n	800a280 <SEGGER_SYSVIEW_SendModule+0xa0>
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	61fa      	str	r2, [r7, #28]
 800a2a4:	69ba      	ldr	r2, [r7, #24]
 800a2a6:	b2d2      	uxtb	r2, r2
 800a2a8:	701a      	strb	r2, [r3, #0]
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2280      	movs	r2, #128	; 0x80
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7fe fe16 	bl	8008ee8 <_EncodeStr>
 800a2bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a2be:	2216      	movs	r2, #22
 800a2c0:	68f9      	ldr	r1, [r7, #12]
 800a2c2:	6938      	ldr	r0, [r7, #16]
 800a2c4:	f7fe ff2c 	bl	8009120 <_SendPacket>
      RECORD_END();
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d006      	beq.n	800a2e2 <SEGGER_SYSVIEW_SendModule+0x102>
 800a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800a2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	4798      	blx	r3
    }
  }
}
 800a2e2:	bf00      	nop
 800a2e4:	3730      	adds	r7, #48	; 0x30
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	200049cc 	.word	0x200049cc
 800a2f0:	200049d4 	.word	0x200049d4

0800a2f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a2fa:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00f      	beq.n	800a322 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a302:	4b0a      	ldr	r3, [pc, #40]	; (800a32c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1f2      	bne.n	800a308 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	200049cc 	.word	0x200049cc

0800a330 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a336:	f3ef 8311 	mrs	r3, BASEPRI
 800a33a:	f04f 0120 	mov.w	r1, #32
 800a33e:	f381 8811 	msr	BASEPRI, r1
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	4817      	ldr	r0, [pc, #92]	; (800a3a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a346:	f7fe fdff 	bl	8008f48 <_PreparePacket>
 800a34a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	617b      	str	r3, [r7, #20]
 800a354:	4b14      	ldr	r3, [pc, #80]	; (800a3a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	613b      	str	r3, [r7, #16]
 800a35a:	e00b      	b.n	800a374 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	1c59      	adds	r1, r3, #1
 800a364:	6179      	str	r1, [r7, #20]
 800a366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a36a:	b2d2      	uxtb	r2, r2
 800a36c:	701a      	strb	r2, [r3, #0]
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	09db      	lsrs	r3, r3, #7
 800a372:	613b      	str	r3, [r7, #16]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2b7f      	cmp	r3, #127	; 0x7f
 800a378:	d8f0      	bhi.n	800a35c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	617a      	str	r2, [r7, #20]
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	b2d2      	uxtb	r2, r2
 800a384:	701a      	strb	r2, [r3, #0]
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a38a:	221b      	movs	r2, #27
 800a38c:	6879      	ldr	r1, [r7, #4]
 800a38e:	68b8      	ldr	r0, [r7, #8]
 800a390:	f7fe fec6 	bl	8009120 <_SendPacket>
  RECORD_END();
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f383 8811 	msr	BASEPRI, r3
}
 800a39a:	bf00      	nop
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	200049d4 	.word	0x200049d4
 800a3a8:	200049d0 	.word	0x200049d0

0800a3ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08a      	sub	sp, #40	; 0x28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a3b4:	f3ef 8311 	mrs	r3, BASEPRI
 800a3b8:	f04f 0120 	mov.w	r1, #32
 800a3bc:	f381 8811 	msr	BASEPRI, r1
 800a3c0:	617b      	str	r3, [r7, #20]
 800a3c2:	4827      	ldr	r0, [pc, #156]	; (800a460 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a3c4:	f7fe fdc0 	bl	8008f48 <_PreparePacket>
 800a3c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a3ca:	2280      	movs	r2, #128	; 0x80
 800a3cc:	6879      	ldr	r1, [r7, #4]
 800a3ce:	6938      	ldr	r0, [r7, #16]
 800a3d0:	f7fe fd8a 	bl	8008ee8 <_EncodeStr>
 800a3d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3da:	2301      	movs	r3, #1
 800a3dc:	623b      	str	r3, [r7, #32]
 800a3de:	e00b      	b.n	800a3f8 <SEGGER_SYSVIEW_Warn+0x4c>
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	1c59      	adds	r1, r3, #1
 800a3e8:	6279      	str	r1, [r7, #36]	; 0x24
 800a3ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	701a      	strb	r2, [r3, #0]
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	09db      	lsrs	r3, r3, #7
 800a3f6:	623b      	str	r3, [r7, #32]
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a3fc:	d8f0      	bhi.n	800a3e0 <SEGGER_SYSVIEW_Warn+0x34>
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	627a      	str	r2, [r7, #36]	; 0x24
 800a404:	6a3a      	ldr	r2, [r7, #32]
 800a406:	b2d2      	uxtb	r2, r2
 800a408:	701a      	strb	r2, [r3, #0]
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	61fb      	str	r3, [r7, #28]
 800a412:	2300      	movs	r3, #0
 800a414:	61bb      	str	r3, [r7, #24]
 800a416:	e00b      	b.n	800a430 <SEGGER_SYSVIEW_Warn+0x84>
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	1c59      	adds	r1, r3, #1
 800a420:	61f9      	str	r1, [r7, #28]
 800a422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	701a      	strb	r2, [r3, #0]
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	09db      	lsrs	r3, r3, #7
 800a42e:	61bb      	str	r3, [r7, #24]
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	2b7f      	cmp	r3, #127	; 0x7f
 800a434:	d8f0      	bhi.n	800a418 <SEGGER_SYSVIEW_Warn+0x6c>
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	61fa      	str	r2, [r7, #28]
 800a43c:	69ba      	ldr	r2, [r7, #24]
 800a43e:	b2d2      	uxtb	r2, r2
 800a440:	701a      	strb	r2, [r3, #0]
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a446:	221a      	movs	r2, #26
 800a448:	68f9      	ldr	r1, [r7, #12]
 800a44a:	6938      	ldr	r0, [r7, #16]
 800a44c:	f7fe fe68 	bl	8009120 <_SendPacket>
  RECORD_END();
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f383 8811 	msr	BASEPRI, r3
}
 800a456:	bf00      	nop
 800a458:	3728      	adds	r7, #40	; 0x28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	200049d4 	.word	0x200049d4

0800a464 <memcmp>:
 800a464:	b510      	push	{r4, lr}
 800a466:	3901      	subs	r1, #1
 800a468:	4402      	add	r2, r0
 800a46a:	4290      	cmp	r0, r2
 800a46c:	d101      	bne.n	800a472 <memcmp+0xe>
 800a46e:	2000      	movs	r0, #0
 800a470:	e005      	b.n	800a47e <memcmp+0x1a>
 800a472:	7803      	ldrb	r3, [r0, #0]
 800a474:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a478:	42a3      	cmp	r3, r4
 800a47a:	d001      	beq.n	800a480 <memcmp+0x1c>
 800a47c:	1b18      	subs	r0, r3, r4
 800a47e:	bd10      	pop	{r4, pc}
 800a480:	3001      	adds	r0, #1
 800a482:	e7f2      	b.n	800a46a <memcmp+0x6>

0800a484 <memset>:
 800a484:	4402      	add	r2, r0
 800a486:	4603      	mov	r3, r0
 800a488:	4293      	cmp	r3, r2
 800a48a:	d100      	bne.n	800a48e <memset+0xa>
 800a48c:	4770      	bx	lr
 800a48e:	f803 1b01 	strb.w	r1, [r3], #1
 800a492:	e7f9      	b.n	800a488 <memset+0x4>

0800a494 <_reclaim_reent>:
 800a494:	4b29      	ldr	r3, [pc, #164]	; (800a53c <_reclaim_reent+0xa8>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4283      	cmp	r3, r0
 800a49a:	b570      	push	{r4, r5, r6, lr}
 800a49c:	4604      	mov	r4, r0
 800a49e:	d04b      	beq.n	800a538 <_reclaim_reent+0xa4>
 800a4a0:	69c3      	ldr	r3, [r0, #28]
 800a4a2:	b143      	cbz	r3, 800a4b6 <_reclaim_reent+0x22>
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d144      	bne.n	800a534 <_reclaim_reent+0xa0>
 800a4aa:	69e3      	ldr	r3, [r4, #28]
 800a4ac:	6819      	ldr	r1, [r3, #0]
 800a4ae:	b111      	cbz	r1, 800a4b6 <_reclaim_reent+0x22>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 f879 	bl	800a5a8 <_free_r>
 800a4b6:	6961      	ldr	r1, [r4, #20]
 800a4b8:	b111      	cbz	r1, 800a4c0 <_reclaim_reent+0x2c>
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 f874 	bl	800a5a8 <_free_r>
 800a4c0:	69e1      	ldr	r1, [r4, #28]
 800a4c2:	b111      	cbz	r1, 800a4ca <_reclaim_reent+0x36>
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f000 f86f 	bl	800a5a8 <_free_r>
 800a4ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a4cc:	b111      	cbz	r1, 800a4d4 <_reclaim_reent+0x40>
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f000 f86a 	bl	800a5a8 <_free_r>
 800a4d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4d6:	b111      	cbz	r1, 800a4de <_reclaim_reent+0x4a>
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f000 f865 	bl	800a5a8 <_free_r>
 800a4de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4e0:	b111      	cbz	r1, 800a4e8 <_reclaim_reent+0x54>
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 f860 	bl	800a5a8 <_free_r>
 800a4e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4ea:	b111      	cbz	r1, 800a4f2 <_reclaim_reent+0x5e>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 f85b 	bl	800a5a8 <_free_r>
 800a4f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a4f4:	b111      	cbz	r1, 800a4fc <_reclaim_reent+0x68>
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 f856 	bl	800a5a8 <_free_r>
 800a4fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a4fe:	b111      	cbz	r1, 800a506 <_reclaim_reent+0x72>
 800a500:	4620      	mov	r0, r4
 800a502:	f000 f851 	bl	800a5a8 <_free_r>
 800a506:	6a23      	ldr	r3, [r4, #32]
 800a508:	b1b3      	cbz	r3, 800a538 <_reclaim_reent+0xa4>
 800a50a:	4620      	mov	r0, r4
 800a50c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a510:	4718      	bx	r3
 800a512:	5949      	ldr	r1, [r1, r5]
 800a514:	b941      	cbnz	r1, 800a528 <_reclaim_reent+0x94>
 800a516:	3504      	adds	r5, #4
 800a518:	69e3      	ldr	r3, [r4, #28]
 800a51a:	2d80      	cmp	r5, #128	; 0x80
 800a51c:	68d9      	ldr	r1, [r3, #12]
 800a51e:	d1f8      	bne.n	800a512 <_reclaim_reent+0x7e>
 800a520:	4620      	mov	r0, r4
 800a522:	f000 f841 	bl	800a5a8 <_free_r>
 800a526:	e7c0      	b.n	800a4aa <_reclaim_reent+0x16>
 800a528:	680e      	ldr	r6, [r1, #0]
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 f83c 	bl	800a5a8 <_free_r>
 800a530:	4631      	mov	r1, r6
 800a532:	e7ef      	b.n	800a514 <_reclaim_reent+0x80>
 800a534:	2500      	movs	r5, #0
 800a536:	e7ef      	b.n	800a518 <_reclaim_reent+0x84>
 800a538:	bd70      	pop	{r4, r5, r6, pc}
 800a53a:	bf00      	nop
 800a53c:	2000006c 	.word	0x2000006c

0800a540 <__libc_init_array>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	4d0d      	ldr	r5, [pc, #52]	; (800a578 <__libc_init_array+0x38>)
 800a544:	4c0d      	ldr	r4, [pc, #52]	; (800a57c <__libc_init_array+0x3c>)
 800a546:	1b64      	subs	r4, r4, r5
 800a548:	10a4      	asrs	r4, r4, #2
 800a54a:	2600      	movs	r6, #0
 800a54c:	42a6      	cmp	r6, r4
 800a54e:	d109      	bne.n	800a564 <__libc_init_array+0x24>
 800a550:	4d0b      	ldr	r5, [pc, #44]	; (800a580 <__libc_init_array+0x40>)
 800a552:	4c0c      	ldr	r4, [pc, #48]	; (800a584 <__libc_init_array+0x44>)
 800a554:	f000 f880 	bl	800a658 <_init>
 800a558:	1b64      	subs	r4, r4, r5
 800a55a:	10a4      	asrs	r4, r4, #2
 800a55c:	2600      	movs	r6, #0
 800a55e:	42a6      	cmp	r6, r4
 800a560:	d105      	bne.n	800a56e <__libc_init_array+0x2e>
 800a562:	bd70      	pop	{r4, r5, r6, pc}
 800a564:	f855 3b04 	ldr.w	r3, [r5], #4
 800a568:	4798      	blx	r3
 800a56a:	3601      	adds	r6, #1
 800a56c:	e7ee      	b.n	800a54c <__libc_init_array+0xc>
 800a56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a572:	4798      	blx	r3
 800a574:	3601      	adds	r6, #1
 800a576:	e7f2      	b.n	800a55e <__libc_init_array+0x1e>
 800a578:	0800a940 	.word	0x0800a940
 800a57c:	0800a940 	.word	0x0800a940
 800a580:	0800a940 	.word	0x0800a940
 800a584:	0800a944 	.word	0x0800a944

0800a588 <__retarget_lock_acquire_recursive>:
 800a588:	4770      	bx	lr

0800a58a <__retarget_lock_release_recursive>:
 800a58a:	4770      	bx	lr

0800a58c <memcpy>:
 800a58c:	440a      	add	r2, r1
 800a58e:	4291      	cmp	r1, r2
 800a590:	f100 33ff 	add.w	r3, r0, #4294967295
 800a594:	d100      	bne.n	800a598 <memcpy+0xc>
 800a596:	4770      	bx	lr
 800a598:	b510      	push	{r4, lr}
 800a59a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5a2:	4291      	cmp	r1, r2
 800a5a4:	d1f9      	bne.n	800a59a <memcpy+0xe>
 800a5a6:	bd10      	pop	{r4, pc}

0800a5a8 <_free_r>:
 800a5a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5aa:	2900      	cmp	r1, #0
 800a5ac:	d044      	beq.n	800a638 <_free_r+0x90>
 800a5ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b2:	9001      	str	r0, [sp, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f1a1 0404 	sub.w	r4, r1, #4
 800a5ba:	bfb8      	it	lt
 800a5bc:	18e4      	addlt	r4, r4, r3
 800a5be:	f000 f83f 	bl	800a640 <__malloc_lock>
 800a5c2:	4a1e      	ldr	r2, [pc, #120]	; (800a63c <_free_r+0x94>)
 800a5c4:	9801      	ldr	r0, [sp, #4]
 800a5c6:	6813      	ldr	r3, [r2, #0]
 800a5c8:	b933      	cbnz	r3, 800a5d8 <_free_r+0x30>
 800a5ca:	6063      	str	r3, [r4, #4]
 800a5cc:	6014      	str	r4, [r2, #0]
 800a5ce:	b003      	add	sp, #12
 800a5d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5d4:	f000 b83a 	b.w	800a64c <__malloc_unlock>
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	d908      	bls.n	800a5ee <_free_r+0x46>
 800a5dc:	6825      	ldr	r5, [r4, #0]
 800a5de:	1961      	adds	r1, r4, r5
 800a5e0:	428b      	cmp	r3, r1
 800a5e2:	bf01      	itttt	eq
 800a5e4:	6819      	ldreq	r1, [r3, #0]
 800a5e6:	685b      	ldreq	r3, [r3, #4]
 800a5e8:	1949      	addeq	r1, r1, r5
 800a5ea:	6021      	streq	r1, [r4, #0]
 800a5ec:	e7ed      	b.n	800a5ca <_free_r+0x22>
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	b10b      	cbz	r3, 800a5f8 <_free_r+0x50>
 800a5f4:	42a3      	cmp	r3, r4
 800a5f6:	d9fa      	bls.n	800a5ee <_free_r+0x46>
 800a5f8:	6811      	ldr	r1, [r2, #0]
 800a5fa:	1855      	adds	r5, r2, r1
 800a5fc:	42a5      	cmp	r5, r4
 800a5fe:	d10b      	bne.n	800a618 <_free_r+0x70>
 800a600:	6824      	ldr	r4, [r4, #0]
 800a602:	4421      	add	r1, r4
 800a604:	1854      	adds	r4, r2, r1
 800a606:	42a3      	cmp	r3, r4
 800a608:	6011      	str	r1, [r2, #0]
 800a60a:	d1e0      	bne.n	800a5ce <_free_r+0x26>
 800a60c:	681c      	ldr	r4, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	6053      	str	r3, [r2, #4]
 800a612:	440c      	add	r4, r1
 800a614:	6014      	str	r4, [r2, #0]
 800a616:	e7da      	b.n	800a5ce <_free_r+0x26>
 800a618:	d902      	bls.n	800a620 <_free_r+0x78>
 800a61a:	230c      	movs	r3, #12
 800a61c:	6003      	str	r3, [r0, #0]
 800a61e:	e7d6      	b.n	800a5ce <_free_r+0x26>
 800a620:	6825      	ldr	r5, [r4, #0]
 800a622:	1961      	adds	r1, r4, r5
 800a624:	428b      	cmp	r3, r1
 800a626:	bf04      	itt	eq
 800a628:	6819      	ldreq	r1, [r3, #0]
 800a62a:	685b      	ldreq	r3, [r3, #4]
 800a62c:	6063      	str	r3, [r4, #4]
 800a62e:	bf04      	itt	eq
 800a630:	1949      	addeq	r1, r1, r5
 800a632:	6021      	streq	r1, [r4, #0]
 800a634:	6054      	str	r4, [r2, #4]
 800a636:	e7ca      	b.n	800a5ce <_free_r+0x26>
 800a638:	b003      	add	sp, #12
 800a63a:	bd30      	pop	{r4, r5, pc}
 800a63c:	20004bf4 	.word	0x20004bf4

0800a640 <__malloc_lock>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__malloc_lock+0x8>)
 800a642:	f7ff bfa1 	b.w	800a588 <__retarget_lock_acquire_recursive>
 800a646:	bf00      	nop
 800a648:	20004bf0 	.word	0x20004bf0

0800a64c <__malloc_unlock>:
 800a64c:	4801      	ldr	r0, [pc, #4]	; (800a654 <__malloc_unlock+0x8>)
 800a64e:	f7ff bf9c 	b.w	800a58a <__retarget_lock_release_recursive>
 800a652:	bf00      	nop
 800a654:	20004bf0 	.word	0x20004bf0

0800a658 <_init>:
 800a658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65a:	bf00      	nop
 800a65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a65e:	bc08      	pop	{r3}
 800a660:	469e      	mov	lr, r3
 800a662:	4770      	bx	lr

0800a664 <_fini>:
 800a664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a666:	bf00      	nop
 800a668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a66a:	bc08      	pop	{r3}
 800a66c:	469e      	mov	lr, r3
 800a66e:	4770      	bx	lr
