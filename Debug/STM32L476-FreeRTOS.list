
STM32L476-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08008ec4  08008ec4  00018ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009068  08009068  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08009068  08009068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009070  08009070  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009070  08009070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009074  08009074  00019074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08009078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b4  20000064  080090dc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  080090dc  00024a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ccd6  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b61  00000000  00000000  0003cdad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00040910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ca  00000000  00000000  00042140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a220  00000000  00000000  0004340a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d1a9  00000000  00000000  0006d62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010241c  00000000  00000000  0008a7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a98  00000000  00000000  0018cbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00193688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008eac 	.word	0x08008eac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08008eac 	.word	0x08008eac

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20002ef8 	.word	0x20002ef8

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b970 	b.w	8000618 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	460d      	mov	r5, r1
 8000358:	4604      	mov	r4, r0
 800035a:	460f      	mov	r7, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4694      	mov	ip, r2
 8000364:	d965      	bls.n	8000432 <__udivmoddi4+0xe2>
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	b143      	cbz	r3, 800037e <__udivmoddi4+0x2e>
 800036c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000370:	f1c3 0220 	rsb	r2, r3, #32
 8000374:	409f      	lsls	r7, r3
 8000376:	fa20 f202 	lsr.w	r2, r0, r2
 800037a:	4317      	orrs	r7, r2
 800037c:	409c      	lsls	r4, r3
 800037e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000382:	fa1f f58c 	uxth.w	r5, ip
 8000386:	fbb7 f1fe 	udiv	r1, r7, lr
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000390:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000394:	fb01 f005 	mul.w	r0, r1, r5
 8000398:	4290      	cmp	r0, r2
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x62>
 800039c:	eb1c 0202 	adds.w	r2, ip, r2
 80003a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a4:	f080 811c 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f240 8119 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003ae:	3902      	subs	r1, #2
 80003b0:	4462      	add	r2, ip
 80003b2:	1a12      	subs	r2, r2, r0
 80003b4:	b2a4      	uxth	r4, r4
 80003b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80003be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c2:	fb00 f505 	mul.w	r5, r0, r5
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x90>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d2:	f080 8107 	bcs.w	80005e4 <__udivmoddi4+0x294>
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	f240 8104 	bls.w	80005e4 <__udivmoddi4+0x294>
 80003dc:	4464      	add	r4, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11e      	cbz	r6, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40dc      	lsrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c6 4300 	strd	r4, r3, [r6]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0xbc>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80ed 	beq.w	80005da <__udivmoddi4+0x28a>
 8000400:	2100      	movs	r1, #0
 8000402:	e9c6 0500 	strd	r0, r5, [r6]
 8000406:	4608      	mov	r0, r1
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	fab3 f183 	clz	r1, r3
 8000410:	2900      	cmp	r1, #0
 8000412:	d149      	bne.n	80004a8 <__udivmoddi4+0x158>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d302      	bcc.n	800041e <__udivmoddi4+0xce>
 8000418:	4282      	cmp	r2, r0
 800041a:	f200 80f8 	bhi.w	800060e <__udivmoddi4+0x2be>
 800041e:	1a84      	subs	r4, r0, r2
 8000420:	eb65 0203 	sbc.w	r2, r5, r3
 8000424:	2001      	movs	r0, #1
 8000426:	4617      	mov	r7, r2
 8000428:	2e00      	cmp	r6, #0
 800042a:	d0e2      	beq.n	80003f2 <__udivmoddi4+0xa2>
 800042c:	e9c6 4700 	strd	r4, r7, [r6]
 8000430:	e7df      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000432:	b902      	cbnz	r2, 8000436 <__udivmoddi4+0xe6>
 8000434:	deff      	udf	#255	; 0xff
 8000436:	fab2 f382 	clz	r3, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	f040 8090 	bne.w	8000560 <__udivmoddi4+0x210>
 8000440:	1a8a      	subs	r2, r1, r2
 8000442:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	2101      	movs	r1, #1
 800044c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000450:	fb07 2015 	mls	r0, r7, r5, r2
 8000454:	0c22      	lsrs	r2, r4, #16
 8000456:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800045a:	fb0e f005 	mul.w	r0, lr, r5
 800045e:	4290      	cmp	r0, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x124>
 8000462:	eb1c 0202 	adds.w	r2, ip, r2
 8000466:	f105 38ff 	add.w	r8, r5, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4290      	cmp	r0, r2
 800046e:	f200 80cb 	bhi.w	8000608 <__udivmoddi4+0x2b8>
 8000472:	4645      	mov	r5, r8
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb2 f0f7 	udiv	r0, r2, r7
 800047c:	fb07 2210 	mls	r2, r7, r0, r2
 8000480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000484:	fb0e fe00 	mul.w	lr, lr, r0
 8000488:	45a6      	cmp	lr, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x14e>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 32ff 	add.w	r2, r0, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x14c>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f200 80bb 	bhi.w	8000612 <__udivmoddi4+0x2c2>
 800049c:	4610      	mov	r0, r2
 800049e:	eba4 040e 	sub.w	r4, r4, lr
 80004a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a6:	e79f      	b.n	80003e8 <__udivmoddi4+0x98>
 80004a8:	f1c1 0720 	rsb	r7, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ba:	fa20 f307 	lsr.w	r3, r0, r7
 80004be:	40fd      	lsrs	r5, r7
 80004c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c4:	4323      	orrs	r3, r4
 80004c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ca:	fa1f fe8c 	uxth.w	lr, ip
 80004ce:	fb09 5518 	mls	r5, r9, r8, r5
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d8:	fb08 f50e 	mul.w	r5, r8, lr
 80004dc:	42a5      	cmp	r5, r4
 80004de:	fa02 f201 	lsl.w	r2, r2, r1
 80004e2:	fa00 f001 	lsl.w	r0, r0, r1
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f0:	f080 8088 	bcs.w	8000604 <__udivmoddi4+0x2b4>
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	f240 8085 	bls.w	8000604 <__udivmoddi4+0x2b4>
 80004fa:	f1a8 0802 	sub.w	r8, r8, #2
 80004fe:	4464      	add	r4, ip
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	b29d      	uxth	r5, r3
 8000504:	fbb4 f3f9 	udiv	r3, r4, r9
 8000508:	fb09 4413 	mls	r4, r9, r3, r4
 800050c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000510:	fb03 fe0e 	mul.w	lr, r3, lr
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000520:	d26c      	bcs.n	80005fc <__udivmoddi4+0x2ac>
 8000522:	45a6      	cmp	lr, r4
 8000524:	d96a      	bls.n	80005fc <__udivmoddi4+0x2ac>
 8000526:	3b02      	subs	r3, #2
 8000528:	4464      	add	r4, ip
 800052a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052e:	fba3 9502 	umull	r9, r5, r3, r2
 8000532:	eba4 040e 	sub.w	r4, r4, lr
 8000536:	42ac      	cmp	r4, r5
 8000538:	46c8      	mov	r8, r9
 800053a:	46ae      	mov	lr, r5
 800053c:	d356      	bcc.n	80005ec <__udivmoddi4+0x29c>
 800053e:	d053      	beq.n	80005e8 <__udivmoddi4+0x298>
 8000540:	b156      	cbz	r6, 8000558 <__udivmoddi4+0x208>
 8000542:	ebb0 0208 	subs.w	r2, r0, r8
 8000546:	eb64 040e 	sbc.w	r4, r4, lr
 800054a:	fa04 f707 	lsl.w	r7, r4, r7
 800054e:	40ca      	lsrs	r2, r1
 8000550:	40cc      	lsrs	r4, r1
 8000552:	4317      	orrs	r7, r2
 8000554:	e9c6 7400 	strd	r7, r4, [r6]
 8000558:	4618      	mov	r0, r3
 800055a:	2100      	movs	r1, #0
 800055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000560:	f1c3 0120 	rsb	r1, r3, #32
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	fa20 f201 	lsr.w	r2, r0, r1
 800056c:	fa25 f101 	lsr.w	r1, r5, r1
 8000570:	409d      	lsls	r5, r3
 8000572:	432a      	orrs	r2, r5
 8000574:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000580:	fb07 1510 	mls	r5, r7, r0, r1
 8000584:	0c11      	lsrs	r1, r2, #16
 8000586:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800058a:	fb00 f50e 	mul.w	r5, r0, lr
 800058e:	428d      	cmp	r5, r1
 8000590:	fa04 f403 	lsl.w	r4, r4, r3
 8000594:	d908      	bls.n	80005a8 <__udivmoddi4+0x258>
 8000596:	eb1c 0101 	adds.w	r1, ip, r1
 800059a:	f100 38ff 	add.w	r8, r0, #4294967295
 800059e:	d22f      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005a0:	428d      	cmp	r5, r1
 80005a2:	d92d      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1b49      	subs	r1, r1, r5
 80005aa:	b292      	uxth	r2, r2
 80005ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80005b0:	fb07 1115 	mls	r1, r7, r5, r1
 80005b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b8:	fb05 f10e 	mul.w	r1, r5, lr
 80005bc:	4291      	cmp	r1, r2
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x282>
 80005c0:	eb1c 0202 	adds.w	r2, ip, r2
 80005c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c8:	d216      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d914      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 80005ce:	3d02      	subs	r5, #2
 80005d0:	4462      	add	r2, ip
 80005d2:	1a52      	subs	r2, r2, r1
 80005d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d8:	e738      	b.n	800044c <__udivmoddi4+0xfc>
 80005da:	4631      	mov	r1, r6
 80005dc:	4630      	mov	r0, r6
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xa2>
 80005e0:	4639      	mov	r1, r7
 80005e2:	e6e6      	b.n	80003b2 <__udivmoddi4+0x62>
 80005e4:	4610      	mov	r0, r2
 80005e6:	e6fb      	b.n	80003e0 <__udivmoddi4+0x90>
 80005e8:	4548      	cmp	r0, r9
 80005ea:	d2a9      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005ec:	ebb9 0802 	subs.w	r8, r9, r2
 80005f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f4:	3b01      	subs	r3, #1
 80005f6:	e7a3      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f8:	4645      	mov	r5, r8
 80005fa:	e7ea      	b.n	80005d2 <__udivmoddi4+0x282>
 80005fc:	462b      	mov	r3, r5
 80005fe:	e794      	b.n	800052a <__udivmoddi4+0x1da>
 8000600:	4640      	mov	r0, r8
 8000602:	e7d1      	b.n	80005a8 <__udivmoddi4+0x258>
 8000604:	46d0      	mov	r8, sl
 8000606:	e77b      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000608:	3d02      	subs	r5, #2
 800060a:	4462      	add	r2, ip
 800060c:	e732      	b.n	8000474 <__udivmoddi4+0x124>
 800060e:	4608      	mov	r0, r1
 8000610:	e70a      	b.n	8000428 <__udivmoddi4+0xd8>
 8000612:	4464      	add	r4, ip
 8000614:	3802      	subs	r0, #2
 8000616:	e742      	b.n	800049e <__udivmoddi4+0x14e>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <vApplicationGetIdleTaskMemory+0x2c>)
 800062c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <vApplicationGetIdleTaskMemory+0x30>)
 8000632:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000080 	.word	0x20000080
 800064c:	20000120 	.word	0x20000120

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fb7d 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f869 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f8e9 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000662:	f000 f8b7 	bl	80007d4 <MX_USART2_UART_Init>
  /* Enable the Cortex-M4 CYCCNT counter register.
   * Address: 0xE0001000
   * Access: Read/Write
   * Reset State: 0x40000000
  */
  DWT_CTRL |= (1 << 0);
 8000666:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <main+0xc0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a29      	ldr	r2, [pc, #164]	; (8000710 <main+0xc0>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000672:	f006 fa1d 	bl	8006ab0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000676:	f007 f991 	bl	800799c <SEGGER_SYSVIEW_Start>


  /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
  /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */

  uint32_t stackSize = (1024 * 1);
 800067a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067e:	617b      	str	r3, [r7, #20]
  uint32_t stack = stackSize / sizeof(StackType_t);
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	613b      	str	r3, [r7, #16]


  xStatus = xTaskCreate(vTask1, "Task1", (uint16_t)stack, NULL, 2, &xTask1);
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <main+0xc4>)
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2302      	movs	r3, #2
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	4920      	ldr	r1, [pc, #128]	; (8000718 <main+0xc8>)
 8000696:	4821      	ldr	r0, [pc, #132]	; (800071c <main+0xcc>)
 8000698:	f004 fb8a 	bl	8004db0 <xTaskCreate>
 800069c:	60f8      	str	r0, [r7, #12]
  configASSERT(xStatus == pdPASS);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d00a      	beq.n	80006ba <main+0x6a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a8:	f383 8811 	msr	BASEPRI, r3
 80006ac:	f3bf 8f6f 	isb	sy
 80006b0:	f3bf 8f4f 	dsb	sy
 80006b4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006b6:	bf00      	nop
 80006b8:	e7fe      	b.n	80006b8 <main+0x68>

  xStatus = xTaskCreate(vTask2, "Task2", (uint16_t)stack, NULL, 2, &xTask2);
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <main+0xd0>)
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	2302      	movs	r3, #2
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2300      	movs	r3, #0
 80006c8:	4916      	ldr	r1, [pc, #88]	; (8000724 <main+0xd4>)
 80006ca:	4817      	ldr	r0, [pc, #92]	; (8000728 <main+0xd8>)
 80006cc:	f004 fb70 	bl	8004db0 <xTaskCreate>
 80006d0:	60f8      	str	r0, [r7, #12]
  configASSERT(xStatus == pdPASS);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d00a      	beq.n	80006ee <main+0x9e>
        __asm volatile
 80006d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006dc:	f383 8811 	msr	BASEPRI, r3
 80006e0:	f3bf 8f6f 	isb	sy
 80006e4:	f3bf 8f4f 	dsb	sy
 80006e8:	607b      	str	r3, [r7, #4]
    }
 80006ea:	bf00      	nop
 80006ec:	e7fe      	b.n	80006ec <main+0x9c>

  /* Attempt to create a semaphore. */
  xMutexSemaphore = xSemaphoreCreateMutex();
 80006ee:	2001      	movs	r0, #1
 80006f0:	f003 ff8d 	bl	800460e <xQueueCreateMutex>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <main+0xdc>)
 80006f8:	6013      	str	r3, [r2, #0]

  /* The semaphore is created in the 'empty' state, meaning the semaphore
  	 * must first be given using the xSemaphoreGive() API function before it
  	 * can subsequently be taken (obtained) using the xSemaphoreTake() function.
  	 * */
  	xSemaphoreGive( xMutexSemaphore );
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <main+0xdc>)
 80006fc:	6818      	ldr	r0, [r3, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	f003 ff9c 	bl	8004640 <xQueueGenericSend>

  // start the freeRTOS scheduler
   vTaskStartScheduler();
 8000708:	f004 fd20 	bl	800514c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0xbc>
 800070e:	bf00      	nop
 8000710:	e0001000 	.word	0xe0001000
 8000714:	200004a8 	.word	0x200004a8
 8000718:	08008ec4 	.word	0x08008ec4
 800071c:	08000981 	.word	0x08000981
 8000720:	200004ac 	.word	0x200004ac
 8000724:	08008ecc 	.word	0x08008ecc
 8000728:	080009c9 	.word	0x080009c9
 800072c:	200004b0 	.word	0x200004b0

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b096      	sub	sp, #88	; 0x58
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2244      	movs	r2, #68	; 0x44
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f007 fed2 	bl	80084e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000752:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000756:	f000 fe93 	bl	8001480 <HAL_PWREx_ControlVoltageScaling>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000760:	f000 f97e 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	2310      	movs	r3, #16
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800077e:	230a      	movs	r3, #10
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000782:	2307      	movs	r3, #7
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4618      	mov	r0, r3
 8000794:	f000 feca 	bl	800152c <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800079e:	f000 f95f 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2303      	movs	r3, #3
 80007a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	2104      	movs	r1, #4
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fa92 	bl	8001ce4 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007c6:	f000 f94b 	bl	8000a60 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3758      	adds	r7, #88	; 0x58
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_USART2_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000818:	f002 fc2a 	bl	8003070 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f91d 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000320 	.word	0x20000320
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b4a      	ldr	r3, [pc, #296]	; (8000974 <MX_GPIO_Init+0x140>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a49      	ldr	r2, [pc, #292]	; (8000974 <MX_GPIO_Init+0x140>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b47      	ldr	r3, [pc, #284]	; (8000974 <MX_GPIO_Init+0x140>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b44      	ldr	r3, [pc, #272]	; (8000974 <MX_GPIO_Init+0x140>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a43      	ldr	r2, [pc, #268]	; (8000974 <MX_GPIO_Init+0x140>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_GPIO_Init+0x140>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <MX_GPIO_Init+0x140>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a3d      	ldr	r2, [pc, #244]	; (8000974 <MX_GPIO_Init+0x140>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <MX_GPIO_Init+0x140>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b38      	ldr	r3, [pc, #224]	; (8000974 <MX_GPIO_Init+0x140>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a37      	ldr	r2, [pc, #220]	; (8000974 <MX_GPIO_Init+0x140>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b35      	ldr	r3, [pc, #212]	; (8000974 <MX_GPIO_Init+0x140>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2103      	movs	r1, #3
 80008ae:	4832      	ldr	r0, [pc, #200]	; (8000978 <MX_GPIO_Init+0x144>)
 80008b0:	f000 fd9c 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 fd96 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2101      	movs	r1, #1
 80008c4:	482d      	ldr	r0, [pc, #180]	; (800097c <MX_GPIO_Init+0x148>)
 80008c6:	f000 fd91 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4825      	ldr	r0, [pc, #148]	; (8000978 <MX_GPIO_Init+0x144>)
 80008e2:	f000 fbd9 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e6:	2303      	movs	r3, #3
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	481e      	ldr	r0, [pc, #120]	; (8000978 <MX_GPIO_Init+0x144>)
 80008fe:	f000 fbcb 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000902:	2320      	movs	r3, #32
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fbbc 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000920:	2301      	movs	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_GPIO_Init+0x148>)
 8000938:	f000 fbae 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800093c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000942:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f000 fb9f 	bl	8001098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2106      	movs	r1, #6
 800095e:	2028      	movs	r0, #40	; 0x28
 8000960:	f000 faf0 	bl	8000f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f000 fb09 	bl	8000f7c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	48000800 	.word	0x48000800
 800097c:	48000400 	.word	0x48000400

08000980 <vTask1>:

/* USER CODE BEGIN 4 */

static void vTask1( void* pvParameters )
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

	while(1)
	{
		// before printing, take the semaphore
		xSemaphoreTake( xMutexSemaphore, portMAX_DELAY );
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <vTask1+0x3c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	4618      	mov	r0, r3
 8000992:	f003 ff7b 	bl	800488c <xQueueSemaphoreTake>

		sprintf(userMsg, "Task 1 is running\r\n");
 8000996:	490a      	ldr	r1, [pc, #40]	; (80009c0 <vTask1+0x40>)
 8000998:	480a      	ldr	r0, [pc, #40]	; (80009c4 <vTask1+0x44>)
 800099a:	f007 fd75 	bl	8008488 <siprintf>
		printMsg(userMsg);
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <vTask1+0x44>)
 80009a0:	f000 f836 	bl	8000a10 <printMsg>

		xSemaphoreGive( xMutexSemaphore );
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <vTask1+0x3c>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	2300      	movs	r3, #0
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	f003 fe47 	bl	8004640 <xQueueGenericSend>
		vTaskDelay( pdMS_TO_TICKS(500) );
 80009b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b6:	f004 fb91 	bl	80050dc <vTaskDelay>
		xSemaphoreTake( xMutexSemaphore, portMAX_DELAY );
 80009ba:	e7e5      	b.n	8000988 <vTask1+0x8>
 80009bc:	200004b0 	.word	0x200004b0
 80009c0:	08008ed4 	.word	0x08008ed4
 80009c4:	200003a8 	.word	0x200003a8

080009c8 <vTask2>:
	}
}

static void vTask2( void* pvParameters )
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

	while(1)
	{
		// before printing, take the semaphore
		xSemaphoreTake( xMutexSemaphore, portMAX_DELAY );
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <vTask2+0x3c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 ff57 	bl	800488c <xQueueSemaphoreTake>

		sprintf(userMsg, "Task 2 is running\r\n");
 80009de:	490a      	ldr	r1, [pc, #40]	; (8000a08 <vTask2+0x40>)
 80009e0:	480a      	ldr	r0, [pc, #40]	; (8000a0c <vTask2+0x44>)
 80009e2:	f007 fd51 	bl	8008488 <siprintf>
		printMsg(userMsg);
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <vTask2+0x44>)
 80009e8:	f000 f812 	bl	8000a10 <printMsg>

		xSemaphoreGive( xMutexSemaphore );
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <vTask2+0x3c>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	2300      	movs	r3, #0
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	f003 fe23 	bl	8004640 <xQueueGenericSend>
		vTaskDelay( pdMS_TO_TICKS(500) );
 80009fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009fe:	f004 fb6d 	bl	80050dc <vTaskDelay>
		xSemaphoreTake( xMutexSemaphore, portMAX_DELAY );
 8000a02:	e7e5      	b.n	80009d0 <vTask2+0x8>
 8000a04:	200004b0 	.word	0x200004b0
 8000a08:	08008ee8 	.word	0x08008ee8
 8000a0c:	200003a8 	.word	0x200003a8

08000a10 <printMsg>:
	}
}

void printMsg(char* msg)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fc23 	bl	8000264 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <printMsg+0x28>)
 8000a2a:	f002 fb6f 	bl	800310c <HAL_UART_Transmit>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000320 	.word	0x20000320

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 f9a1 	bl	8000d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40001000 	.word	0x40001000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6593      	str	r3, [r2, #88]	; 0x58
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  // This initializes a variable which is related to priority grouping
  // This initialization is actually done by the scheduler, but the problem
  // is that the priority grouping initialization is required for the SEGGER
  // start function.
  vInitPrioGroupValue();
 8000aa2:	f005 fc81 	bl	80063a8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0ac      	sub	sp, #176	; 0xb0
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2288      	movs	r2, #136	; 0x88
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f007 fd07 	bl	80084e8 <memset>
  if(huart->Instance==USART2)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a25      	ldr	r2, [pc, #148]	; (8000b74 <HAL_UART_MspInit+0xc0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d143      	bne.n	8000b6c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fb4d 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000afc:	f7ff ffb0 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_UART_MspInit+0xc4>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <HAL_UART_MspInit+0xc4>)
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_UART_MspInit+0xc4>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0xc4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <HAL_UART_MspInit+0xc4>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_UART_MspInit+0xc4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b30:	230c      	movs	r3, #12
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f000 fa9e 	bl	8001098 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2106      	movs	r1, #6
 8000b60:	2026      	movs	r0, #38	; 0x26
 8000b62:	f000 f9ef 	bl	8000f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b66:	2026      	movs	r0, #38	; 0x26
 8000b68:	f000 fa08 	bl	8000f7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	37b0      	adds	r7, #176	; 0xb0
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <HAL_InitTick+0xe0>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a33      	ldr	r2, [pc, #204]	; (8000c5c <HAL_InitTick+0xe0>)
 8000b90:	f043 0310 	orr.w	r3, r3, #16
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <HAL_InitTick+0xe0>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba2:	f107 0210 	add.w	r2, r7, #16
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fa5d 	bl	800206c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d103      	bne.n	8000bc4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bbc:	f001 fa2a 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8000bc0:	6378      	str	r0, [r7, #52]	; 0x34
 8000bc2:	e004      	b.n	8000bce <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bc4:	f001 fa26 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd0:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_InitTick+0xe4>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9b      	lsrs	r3, r3, #18
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bde:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_InitTick+0xec>)
 8000be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_InitTick+0xe8>)
 8000be4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <HAL_InitTick+0xe8>)
 8000c04:	f001 ff80 	bl	8002b08 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11b      	bne.n	8000c4e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <HAL_InitTick+0xe8>)
 8000c18:	f001 ffd8 	bl	8002bcc <HAL_TIM_Base_Start_IT>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d111      	bne.n	8000c4e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c2a:	2036      	movs	r0, #54	; 0x36
 8000c2c:	f000 f9a6 	bl	8000f7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	d808      	bhi.n	8000c48 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c36:	2200      	movs	r2, #0
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2036      	movs	r0, #54	; 0x36
 8000c3c:	f000 f982 	bl	8000f44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_InitTick+0xf0>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e002      	b.n	8000c4e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	200004b4 	.word	0x200004b4
 8000c68:	40001000 	.word	0x40001000
 8000c6c:	20000004 	.word	0x20000004

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <USART2_IRQHandler+0x10>)
 8000ca2:	f002 fabd 	bl	8003220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000320 	.word	0x20000320

08000cb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000cb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cb8:	f000 fbb0 	bl	800141c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cc0:	f000 fbac 	bl	800141c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM6_DAC_IRQHandler+0x10>)
 8000cce:	f001 ffed 	bl	8002cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200004b4 	.word	0x200004b4

08000cdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff ffea 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	; (8000d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	; (8000d4c <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f007 fc39 	bl	80085a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d32:	f7ff fc8d 	bl	8000650 <main>

08000d36 <LoopForever>:

LoopForever:
    b LoopForever
 8000d36:	e7fe      	b.n	8000d36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d44:	08009078 	.word	0x08009078
  ldr r2, =_sbss
 8000d48:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d4c:	20004a18 	.word	0x20004a18

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_Init+0x3c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_Init+0x3c>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f8df 	bl	8000f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d70:	200f      	movs	r0, #15
 8000d72:	f7ff ff03 	bl	8000b7c <HAL_InitTick>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	e001      	b.n	8000d86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d82:	f7ff fe73 	bl	8000a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000500 	.word	0x20000500

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000500 	.word	0x20000500

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff4c 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f56:	f7ff ff61 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	6978      	ldr	r0, [r7, #20]
 8000f62:	f7ff ffb1 	bl	8000ec8 <NVIC_EncodePriority>
 8000f66:	4602      	mov	r2, r0
 8000f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff80 	bl	8000e74 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff54 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d008      	beq.n	8000fc2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e022      	b.n	8001008 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 020e 	bic.w	r2, r2, #14
 8000fd0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0201 	bic.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f003 021c 	and.w	r2, r3, #28
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	2101      	movs	r1, #1
 8000ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d005      	beq.n	8001038 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2204      	movs	r2, #4
 8001030:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e029      	b.n	800108c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020e 	bic.w	r2, r2, #14
 8001046:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	f003 021c 	and.w	r2, r3, #28
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	4798      	blx	r3
    }
  }
  return status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e17f      	b.n	80013a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8171 	beq.w	80013a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d005      	beq.n	80010d8 <HAL_GPIO_Init+0x40>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d130      	bne.n	800113a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110e:	2201      	movs	r2, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	f003 0201 	and.w	r2, r3, #1
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b03      	cmp	r3, #3
 8001144:	d118      	bne.n	8001178 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800114c:	2201      	movs	r2, #1
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	f003 0201 	and.w	r2, r3, #1
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b03      	cmp	r3, #3
 8001182:	d017      	beq.n	80011b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d123      	bne.n	8001208 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	6939      	ldr	r1, [r7, #16]
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0203 	and.w	r2, r3, #3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80ac 	beq.w	80013a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	4a5e      	ldr	r2, [pc, #376]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6613      	str	r3, [r2, #96]	; 0x60
 8001256:	4b5c      	ldr	r3, [pc, #368]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001262:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x242>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <HAL_GPIO_Init+0x338>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x23e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4e      	ldr	r2, [pc, #312]	; (80013d4 <HAL_GPIO_Init+0x33c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x23a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4d      	ldr	r2, [pc, #308]	; (80013d8 <HAL_GPIO_Init+0x340>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x236>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4c      	ldr	r2, [pc, #304]	; (80013dc <HAL_GPIO_Init+0x344>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x232>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4b      	ldr	r2, [pc, #300]	; (80013e0 <HAL_GPIO_Init+0x348>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x22e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4a      	ldr	r2, [pc, #296]	; (80013e4 <HAL_GPIO_Init+0x34c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x22a>
 80012be:	2306      	movs	r3, #6
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012c2:	2307      	movs	r3, #7
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x244>
 80012da:	2300      	movs	r3, #0
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ec:	4937      	ldr	r1, [pc, #220]	; (80013cc <HAL_GPIO_Init+0x334>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_GPIO_Init+0x350>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <HAL_GPIO_Init+0x350>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_GPIO_Init+0x350>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <HAL_GPIO_Init+0x350>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_GPIO_Init+0x350>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_GPIO_Init+0x350>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_GPIO_Init+0x350>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_GPIO_Init+0x350>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f47f ae78 	bne.w	80010a8 <HAL_GPIO_Init+0x10>
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000
 80013d0:	48000400 	.word	0x48000400
 80013d4:	48000800 	.word	0x48000800
 80013d8:	48000c00 	.word	0x48000c00
 80013dc:	48001000 	.word	0x48001000
 80013e0:	48001400 	.word	0x48001400
 80013e4:	48001800 	.word	0x48001800
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e002      	b.n	8001410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f806 	bl	800144c <HAL_GPIO_EXTI_Callback>
  }
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <HAL_PWREx_GetVoltageRange+0x18>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40007000 	.word	0x40007000

08001480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148e:	d130      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149c:	d038      	beq.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2232      	movs	r2, #50	; 0x32
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0c9b      	lsrs	r3, r3, #18
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c4:	e002      	b.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d8:	d102      	bne.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f2      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ec:	d110      	bne.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e00f      	b.n	8001512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fe:	d007      	beq.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40007000 	.word	0x40007000
 8001524:	20000000 	.word	0x20000000
 8001528:	431bde83 	.word	0x431bde83

0800152c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e3ca      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153e:	4b97      	ldr	r3, [pc, #604]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001548:	4b94      	ldr	r3, [pc, #592]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80e4 	beq.w	8001728 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_RCC_OscConfig+0x4a>
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b0c      	cmp	r3, #12
 800156a:	f040 808b 	bne.w	8001684 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2b01      	cmp	r3, #1
 8001572:	f040 8087 	bne.w	8001684 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001576:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x62>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e3a2      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1a      	ldr	r2, [r3, #32]
 8001592:	4b82      	ldr	r3, [pc, #520]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <HAL_RCC_OscConfig+0x7c>
 800159e:	4b7f      	ldr	r3, [pc, #508]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a6:	e005      	b.n	80015b4 <HAL_RCC_OscConfig+0x88>
 80015a8:	4b7c      	ldr	r3, [pc, #496]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d223      	bcs.n	8001600 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fd87 	bl	80020d0 <RCC_SetFlashLatencyFromMSIRange>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e383      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015cc:	4b73      	ldr	r3, [pc, #460]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a72      	ldr	r2, [pc, #456]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b70      	ldr	r3, [pc, #448]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	496d      	ldr	r1, [pc, #436]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ea:	4b6c      	ldr	r3, [pc, #432]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	4968      	ldr	r1, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
 80015fe:	e025      	b.n	800164c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001600:	4b66      	ldr	r3, [pc, #408]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a65      	ldr	r2, [pc, #404]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b63      	ldr	r3, [pc, #396]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4960      	ldr	r1, [pc, #384]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161e:	4b5f      	ldr	r3, [pc, #380]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	495b      	ldr	r1, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d109      	bne.n	800164c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fd47 	bl	80020d0 <RCC_SetFlashLatencyFromMSIRange>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e343      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800164c:	f000 fc4a 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b52      	ldr	r3, [pc, #328]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	4950      	ldr	r1, [pc, #320]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	4a4e      	ldr	r2, [pc, #312]	; (80017a4 <HAL_RCC_OscConfig+0x278>)
 800166a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800166c:	4b4e      	ldr	r3, [pc, #312]	; (80017a8 <HAL_RCC_OscConfig+0x27c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fa83 	bl	8000b7c <HAL_InitTick>
 8001676:	4603      	mov	r3, r0
 8001678:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d052      	beq.n	8001726 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	e327      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d032      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800168c:	4b43      	ldr	r3, [pc, #268]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a42      	ldr	r2, [pc, #264]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001698:	f7ff fb90 	bl	8000dbc <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a0:	f7ff fb8c 	bl	8000dbc <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e310      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a36      	ldr	r2, [pc, #216]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4931      	ldr	r1, [pc, #196]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016dc:	4b2f      	ldr	r3, [pc, #188]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	492c      	ldr	r1, [pc, #176]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e01a      	b.n	8001728 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a29      	ldr	r2, [pc, #164]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fb5d 	bl	8000dbc <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001706:	f7ff fb59 	bl	8000dbc <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e2dd      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x1da>
 8001724:	e000      	b.n	8001728 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001726:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d074      	beq.n	800181e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b08      	cmp	r3, #8
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x21a>
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b0c      	cmp	r3, #12
 800173e:	d10e      	bne.n	800175e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d10b      	bne.n	800175e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d064      	beq.n	800181c <HAL_RCC_OscConfig+0x2f0>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d160      	bne.n	800181c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e2ba      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x24a>
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e026      	b.n	80017c4 <HAL_RCC_OscConfig+0x298>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177e:	d115      	bne.n	80017ac <HAL_RCC_OscConfig+0x280>
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a02      	ldr	r2, [pc, #8]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e014      	b.n	80017c4 <HAL_RCC_OscConfig+0x298>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	08008fc4 	.word	0x08008fc4
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004
 80017ac:	4ba0      	ldr	r3, [pc, #640]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a9f      	ldr	r2, [pc, #636]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b9d      	ldr	r3, [pc, #628]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a9c      	ldr	r2, [pc, #624]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff faf6 	bl	8000dbc <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff faf2 	bl	8000dbc <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e276      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2a8>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fae2 	bl	8000dbc <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fade 	bl	8000dbc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e262      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	4b88      	ldr	r3, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x2d0>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d060      	beq.n	80018ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d005      	beq.n	800183c <HAL_RCC_OscConfig+0x310>
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d119      	bne.n	800186a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d116      	bne.n	800186a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800183c:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_OscConfig+0x328>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e23f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	061b      	lsls	r3, r3, #24
 8001862:	4973      	ldr	r1, [pc, #460]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001868:	e040      	b.n	80018ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d023      	beq.n	80018ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001872:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fa9d 	bl	8000dbc <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff fa99 	bl	8000dbc <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e21d      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001898:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b62      	ldr	r3, [pc, #392]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	495f      	ldr	r1, [pc, #380]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e018      	b.n	80018ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff fa79 	bl	8000dbc <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff fa75 	bl	8000dbc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1f9      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e0:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03c      	beq.n	8001972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01c      	beq.n	800193a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001900:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	4a4a      	ldr	r2, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fa54 	bl	8000dbc <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fa50 	bl	8000dbc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1d4      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800192c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ef      	beq.n	8001918 <HAL_RCC_OscConfig+0x3ec>
 8001938:	e01b      	b.n	8001972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800193c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001940:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194a:	f7ff fa37 	bl	8000dbc <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff fa33 	bl	8000dbc <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1b7      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ef      	bne.n	8001952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80a6 	beq.w	8001acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10d      	bne.n	80019ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6593      	str	r3, [r2, #88]	; 0x58
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a8:	2301      	movs	r3, #1
 80019aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_RCC_OscConfig+0x508>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d118      	bne.n	80019ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_RCC_OscConfig+0x508>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_RCC_OscConfig+0x508>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c4:	f7ff f9fa 	bl	8000dbc <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019cc:	f7ff f9f6 	bl	8000dbc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e17a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_RCC_OscConfig+0x508>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4d8>
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a02:	e029      	b.n	8001a58 <HAL_RCC_OscConfig+0x52c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d115      	bne.n	8001a38 <HAL_RCC_OscConfig+0x50c>
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_RCC_OscConfig+0x504>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2c:	e014      	b.n	8001a58 <HAL_RCC_OscConfig+0x52c>
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40007000 	.word	0x40007000
 8001a38:	4b9c      	ldr	r3, [pc, #624]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	4a9b      	ldr	r2, [pc, #620]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a48:	4b98      	ldr	r3, [pc, #608]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	4a97      	ldr	r2, [pc, #604]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d016      	beq.n	8001a8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff f9ac 	bl	8000dbc <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7ff f9a8 	bl	8000dbc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e12a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7e:	4b8b      	ldr	r3, [pc, #556]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ed      	beq.n	8001a68 <HAL_RCC_OscConfig+0x53c>
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f995 	bl	8000dbc <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff f991 	bl	8000dbc <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e113      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aac:	4b7f      	ldr	r3, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1ed      	bne.n	8001a96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aba:	7ffb      	ldrb	r3, [r7, #31]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b7a      	ldr	r3, [pc, #488]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a79      	ldr	r2, [pc, #484]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80fe 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	f040 80d0 	bne.w	8001c80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ae0:	4b72      	ldr	r3, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d130      	bne.n	8001b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	3b01      	subs	r3, #1
 8001b00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d127      	bne.n	8001b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d11f      	bne.n	8001b56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b20:	2a07      	cmp	r2, #7
 8001b22:	bf14      	ite	ne
 8001b24:	2201      	movne	r2, #1
 8001b26:	2200      	moveq	r2, #0
 8001b28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d113      	bne.n	8001b56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	085b      	lsrs	r3, r3, #1
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d06e      	beq.n	8001c34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b0c      	cmp	r3, #12
 8001b5a:	d069      	beq.n	8001c30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0ad      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b78:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b84:	f7ff f91a 	bl	8000dbc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff f916 	bl	8000dbc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e09a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9e:	4b43      	ldr	r3, [pc, #268]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001baa:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <HAL_RCC_OscConfig+0x784>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bc4:	0212      	lsls	r2, r2, #8
 8001bc6:	4311      	orrs	r1, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bcc:	0852      	lsrs	r2, r2, #1
 8001bce:	3a01      	subs	r2, #1
 8001bd0:	0552      	lsls	r2, r2, #21
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bd8:	0852      	lsrs	r2, r2, #1
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	0652      	lsls	r2, r2, #25
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001be4:	0912      	lsrs	r2, r2, #4
 8001be6:	0452      	lsls	r2, r2, #17
 8001be8:	430a      	orrs	r2, r1
 8001bea:	4930      	ldr	r1, [pc, #192]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4a2a      	ldr	r2, [pc, #168]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c08:	f7ff f8d8 	bl	8000dbc <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff f8d4 	bl	8000dbc <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e058      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2e:	e050      	b.n	8001cd2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e04f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d148      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c58:	f7ff f8b0 	bl	8000dbc <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff f8ac 	bl	8000dbc <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e030      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x734>
 8001c7e:	e028      	b.n	8001cd2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d023      	beq.n	8001cce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <HAL_RCC_OscConfig+0x780>)
 8001c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff f893 	bl	8000dbc <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c98:	e00c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff f88f 	bl	8000dbc <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d905      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e013      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_OscConfig+0x7b0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ec      	bne.n	8001c9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x7b0>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4905      	ldr	r1, [pc, #20]	; (8001cdc <HAL_RCC_OscConfig+0x7b0>)
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_RCC_OscConfig+0x7b4>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
 8001ccc:	e001      	b.n	8001cd2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	feeefffc 	.word	0xfeeefffc

08001ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0e7      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d910      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b72      	ldr	r3, [pc, #456]	; (8001ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 0207 	bic.w	r2, r3, #7
 8001d0e:	4970      	ldr	r1, [pc, #448]	; (8001ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b6e      	ldr	r3, [pc, #440]	; (8001ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0cf      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d010      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d908      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4960      	ldr	r1, [pc, #384]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d04c      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6a:	4b5a      	ldr	r3, [pc, #360]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d121      	bne.n	8001dba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0a6      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d82:	4b54      	ldr	r3, [pc, #336]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d115      	bne.n	8001dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e09a      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d9a:	4b4e      	ldr	r3, [pc, #312]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e08e      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001daa:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e086      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dba:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4943      	ldr	r1, [pc, #268]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dcc:	f7fe fff6 	bl	8000dbc <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7fe fff2 	bl	8000dbc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e06e      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 020c 	and.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1eb      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d010      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d208      	bcs.n	8001e2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	492b      	ldr	r1, [pc, #172]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d210      	bcs.n	8001e5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 0207 	bic.w	r2, r3, #7
 8001e40:	4923      	ldr	r1, [pc, #140]	; (8001ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e036      	b.n	8001ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	4918      	ldr	r1, [pc, #96]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d009      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4910      	ldr	r1, [pc, #64]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e98:	f000 f824 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	490b      	ldr	r1, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x1f4>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb4:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1f8>)
 8001eb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1fc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fe5d 	bl	8000b7c <HAL_InitTick>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08008fc4 	.word	0x08008fc4
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efc:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x34>
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d121      	bne.n	8001f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d11e      	bne.n	8001f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f18:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e005      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f40:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10d      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d102      	bne.n	8001f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	e004      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f68:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d134      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d003      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0xac>
 8001f88:	e005      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f8c:	617b      	str	r3, [r7, #20]
      break;
 8001f8e:	e005      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f92:	617b      	str	r3, [r7, #20]
      break;
 8001f94:	e002      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	617b      	str	r3, [r7, #20]
      break;
 8001f9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	fb03 f202 	mul.w	r2, r3, r2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	0e5b      	lsrs	r3, r3, #25
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08008fdc 	.word	0x08008fdc
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	007a1200 	.word	0x007a1200

08001ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCC_GetHCLKFreq+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002018:	f7ff fff0 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4904      	ldr	r1, [pc, #16]	; (800203c <HAL_RCC_GetPCLK1Freq+0x28>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08008fd4 	.word	0x08008fd4

08002040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002044:	f7ff ffda 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0adb      	lsrs	r3, r3, #11
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4904      	ldr	r1, [pc, #16]	; (8002068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	08008fd4 	.word	0x08008fd4

0800206c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	220f      	movs	r2, #15
 800207a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_RCC_GetClockConfig+0x5c>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0203 	and.w	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_RCC_GetClockConfig+0x5c>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_GetClockConfig+0x5c>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <HAL_RCC_GetClockConfig+0x60>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0207 	and.w	r2, r3, #7
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	601a      	str	r2, [r3, #0]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40022000 	.word	0x40022000

080020d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020e8:	f7ff f9bc 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 80020ec:	6178      	str	r0, [r7, #20]
 80020ee:	e014      	b.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	4a24      	ldr	r2, [pc, #144]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6593      	str	r3, [r2, #88]	; 0x58
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002108:	f7ff f9ac 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 800210c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002120:	d10b      	bne.n	800213a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d919      	bls.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2ba0      	cmp	r3, #160	; 0xa0
 800212c:	d902      	bls.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800212e:	2302      	movs	r3, #2
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	e013      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002134:	2301      	movs	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	e010      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d902      	bls.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002140:	2303      	movs	r3, #3
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	e00a      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b80      	cmp	r3, #128	; 0x80
 800214a:	d102      	bne.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800214c:	2302      	movs	r3, #2
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	e004      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b70      	cmp	r3, #112	; 0x70
 8002156:	d101      	bne.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002158:	2301      	movs	r3, #1
 800215a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 0207 	bic.w	r2, r3, #7
 8002164:	4909      	ldr	r1, [pc, #36]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	40022000 	.word	0x40022000

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002198:	2300      	movs	r3, #0
 800219a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800219c:	2300      	movs	r3, #0
 800219e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d041      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b4:	d02a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ba:	d824      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c0:	d008      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c6:	d81e      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d0:	d010      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021d2:	e018      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021d4:	4b86      	ldr	r3, [pc, #536]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a85      	ldr	r2, [pc, #532]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e0:	e015      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fabb 	bl	8002764 <RCCEx_PLLSAI1_Config>
 80021ee:	4603      	mov	r3, r0
 80021f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f2:	e00c      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3320      	adds	r3, #32
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fba6 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002204:	e003      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	74fb      	strb	r3, [r7, #19]
      break;
 800220a:	e000      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800220c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002222:	4973      	ldr	r1, [pc, #460]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800222a:	e001      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d041      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002240:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002244:	d02a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002246:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800224a:	d824      	bhi.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800224c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002250:	d008      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002256:	d81e      	bhi.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002260:	d010      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002262:	e018      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002264:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a61      	ldr	r2, [pc, #388]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002270:	e015      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fa73 	bl	8002764 <RCCEx_PLLSAI1_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002282:	e00c      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3320      	adds	r3, #32
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fb5e 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002294:	e003      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	74fb      	strb	r3, [r7, #19]
      break;
 800229a:	e000      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800229c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10b      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022a4:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b2:	494f      	ldr	r1, [pc, #316]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ba:	e001      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a0 	beq.w	800240e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
 80022f4:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002310:	f7fe fd54 	bl	8000dbc <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002316:	e009      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002318:	f7fe fd50 	bl	8000dbc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d902      	bls.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	74fb      	strb	r3, [r7, #19]
        break;
 800232a:	e005      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ef      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d15c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800233e:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002348:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01f      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	d019      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fd0f 	bl	8000dbc <HAL_GetTick>
 800239e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a0:	e00b      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe fd0b 	bl	8000dbc <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d902      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	74fb      	strb	r3, [r7, #19]
            break;
 80023b8:	e006      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ec      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023de:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023e6:	e009      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
 80023ec:	e006      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fc:	7c7b      	ldrb	r3, [r7, #17]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4b9e      	ldr	r3, [pc, #632]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	4a9d      	ldr	r2, [pc, #628]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800241a:	4b98      	ldr	r3, [pc, #608]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	f023 0203 	bic.w	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	4994      	ldr	r1, [pc, #592]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f023 020c 	bic.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	498c      	ldr	r1, [pc, #560]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800245e:	4b87      	ldr	r3, [pc, #540]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4983      	ldr	r1, [pc, #524]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002480:	4b7e      	ldr	r3, [pc, #504]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	497b      	ldr	r1, [pc, #492]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b0:	4972      	ldr	r1, [pc, #456]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024c4:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	496a      	ldr	r1, [pc, #424]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	4961      	ldr	r1, [pc, #388]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002508:	4b5c      	ldr	r3, [pc, #368]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	4959      	ldr	r1, [pc, #356]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800252a:	4b54      	ldr	r3, [pc, #336]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	4950      	ldr	r1, [pc, #320]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	4948      	ldr	r1, [pc, #288]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	493f      	ldr	r1, [pc, #252]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d028      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259e:	4937      	ldr	r1, [pc, #220]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ae:	d106      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a31      	ldr	r2, [pc, #196]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ba:	60d3      	str	r3, [r2, #12]
 80025bc:	e011      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	2101      	movs	r1, #1
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f8c8 	bl	8002764 <RCCEx_PLLSAI1_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d028      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	491f      	ldr	r1, [pc, #124]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260c:	d106      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4a1a      	ldr	r2, [pc, #104]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002618:	60d3      	str	r3, [r2, #12]
 800261a:	e011      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002624:	d10c      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f899 	bl	8002764 <RCCEx_PLLSAI1_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d02b      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266a:	d109      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a02      	ldr	r2, [pc, #8]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002676:	60d3      	str	r3, [r2, #12]
 8002678:	e014      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	2101      	movs	r1, #1
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f867 	bl	8002764 <RCCEx_PLLSAI1_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d02f      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026be:	4928      	ldr	r1, [pc, #160]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ce:	d10d      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	2102      	movs	r1, #2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f844 	bl	8002764 <RCCEx_PLLSAI1_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d014      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	74bb      	strb	r3, [r7, #18]
 80026ea:	e011      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3320      	adds	r3, #32
 80026fa:	2102      	movs	r1, #2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f925 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800272a:	490d      	ldr	r1, [pc, #52]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274e:	4904      	ldr	r1, [pc, #16]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002756:	7cbb      	ldrb	r3, [r7, #18]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000

08002764 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002772:	4b75      	ldr	r3, [pc, #468]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d018      	beq.n	80027b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0203 	and.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d10d      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
       ||
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002796:	4b6c      	ldr	r3, [pc, #432]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
       ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d047      	beq.n	800283a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	e044      	b.n	800283a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d018      	beq.n	80027ea <RCCEx_PLLSAI1_Config+0x86>
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d825      	bhi.n	8002808 <RCCEx_PLLSAI1_Config+0xa4>
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d002      	beq.n	80027c6 <RCCEx_PLLSAI1_Config+0x62>
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d009      	beq.n	80027d8 <RCCEx_PLLSAI1_Config+0x74>
 80027c4:	e020      	b.n	8002808 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027c6:	4b60      	ldr	r3, [pc, #384]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11d      	bne.n	800280e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d6:	e01a      	b.n	800280e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d8:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e8:	e013      	b.n	8002812 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ea:	4b57      	ldr	r3, [pc, #348]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027f6:	4b54      	ldr	r3, [pc, #336]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002806:	e006      	b.n	8002816 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e004      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800280e:	bf00      	nop
 8002810:	e002      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002816:	bf00      	nop
    }

    if(status == HAL_OK)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10d      	bne.n	800283a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800281e:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	430b      	orrs	r3, r1
 8002834:	4944      	ldr	r1, [pc, #272]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d17d      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a40      	ldr	r2, [pc, #256]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800284a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284c:	f7fe fab6 	bl	8000dbc <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002852:	e009      	b.n	8002868 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002854:	f7fe fab2 	bl	8000dbc <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	73fb      	strb	r3, [r7, #15]
        break;
 8002866:	e005      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002868:	4b37      	ldr	r3, [pc, #220]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ef      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d160      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6892      	ldr	r2, [r2, #8]
 8002890:	0211      	lsls	r1, r2, #8
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68d2      	ldr	r2, [r2, #12]
 8002896:	0912      	lsrs	r2, r2, #4
 8002898:	0452      	lsls	r2, r2, #17
 800289a:	430a      	orrs	r2, r1
 800289c:	492a      	ldr	r1, [pc, #168]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	610b      	str	r3, [r1, #16]
 80028a2:	e027      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d112      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	0211      	lsls	r1, r2, #8
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6912      	ldr	r2, [r2, #16]
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0552      	lsls	r2, r2, #21
 80028c6:	430a      	orrs	r2, r1
 80028c8:	491f      	ldr	r1, [pc, #124]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	610b      	str	r3, [r1, #16]
 80028ce:	e011      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	0211      	lsls	r1, r2, #8
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6952      	ldr	r2, [r2, #20]
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
 80028ea:	0652      	lsls	r2, r2, #25
 80028ec:	430a      	orrs	r2, r1
 80028ee:	4916      	ldr	r1, [pc, #88]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe fa5c 	bl	8000dbc <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002906:	e009      	b.n	800291c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002908:	f7fe fa58 	bl	8000dbc <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d902      	bls.n	800291c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	73fb      	strb	r3, [r7, #15]
          break;
 800291a:	e005      	b.n	8002928 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ef      	beq.n	8002908 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	4904      	ldr	r1, [pc, #16]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800295a:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d018      	beq.n	8002998 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002966:	4b67      	ldr	r3, [pc, #412]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0203 	and.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d10d      	bne.n	8002992 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
       ||
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
       ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d047      	beq.n	8002a22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e044      	b.n	8002a22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d018      	beq.n	80029d2 <RCCEx_PLLSAI2_Config+0x86>
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d825      	bhi.n	80029f0 <RCCEx_PLLSAI2_Config+0xa4>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d002      	beq.n	80029ae <RCCEx_PLLSAI2_Config+0x62>
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d009      	beq.n	80029c0 <RCCEx_PLLSAI2_Config+0x74>
 80029ac:	e020      	b.n	80029f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ae:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11d      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029be:	e01a      	b.n	80029f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d116      	bne.n	80029fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e013      	b.n	80029fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029de:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ee:	e006      	b.n	80029fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      break;
 80029f4:	e004      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029f6:	bf00      	nop
 80029f8:	e002      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029fa:	bf00      	nop
 80029fc:	e000      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a06:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	4939      	ldr	r1, [pc, #228]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d167      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a35      	ldr	r2, [pc, #212]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a34:	f7fe f9c2 	bl	8000dbc <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a3a:	e009      	b.n	8002a50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a3c:	f7fe f9be 	bl	8000dbc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d902      	bls.n	8002a50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a4e:	e005      	b.n	8002a5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ef      	bne.n	8002a3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d14a      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6892      	ldr	r2, [r2, #8]
 8002a78:	0211      	lsls	r1, r2, #8
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	0912      	lsrs	r2, r2, #4
 8002a80:	0452      	lsls	r2, r2, #17
 8002a82:	430a      	orrs	r2, r1
 8002a84:	491f      	ldr	r1, [pc, #124]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	614b      	str	r3, [r1, #20]
 8002a8a:	e011      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6892      	ldr	r2, [r2, #8]
 8002a9c:	0211      	lsls	r1, r2, #8
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6912      	ldr	r2, [r2, #16]
 8002aa2:	0852      	lsrs	r2, r2, #1
 8002aa4:	3a01      	subs	r2, #1
 8002aa6:	0652      	lsls	r2, r2, #25
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	4916      	ldr	r1, [pc, #88]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe f97e 	bl	8000dbc <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ac2:	e009      	b.n	8002ad8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ac4:	f7fe f97a 	bl	8000dbc <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ad6:	e005      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	4904      	ldr	r1, [pc, #16]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e049      	b.n	8002bae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f841 	bl	8002bb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 f9da 	bl	8002f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e04f      	b.n	8002c84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01d      	beq.n	8002c42 <HAL_TIM_Base_Start_IT+0x76>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d018      	beq.n	8002c42 <HAL_TIM_Base_Start_IT+0x76>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_TIM_Base_Start_IT+0x76>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00e      	beq.n	8002c42 <HAL_TIM_Base_Start_IT+0x76>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_TIM_Base_Start_IT+0x76>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_TIM_Base_Start_IT+0x76>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d115      	bne.n	8002c6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d015      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0xb4>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5a:	d011      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	e008      	b.n	8002c80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e000      	b.n	8002c82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40013400 	.word	0x40013400
 8002ca4:	40014000 	.word	0x40014000
 8002ca8:	00010007 	.word	0x00010007

08002cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d020      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01b      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0202 	mvn.w	r2, #2
 8002ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f8e4 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8d6 	bl	8002eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f8e7 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d020      	beq.n	8002d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01b      	beq.n	8002d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0204 	mvn.w	r2, #4
 8002d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8be 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8b0 	bl	8002eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f8c1 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d020      	beq.n	8002da8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01b      	beq.n	8002da8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0208 	mvn.w	r2, #8
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f898 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f88a 	bl	8002eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f89b 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d020      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0210 	mvn.w	r2, #16
 8002dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f872 	bl	8002ec4 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f864 	bl	8002eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f875 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0201 	mvn.w	r2, #1
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fe12 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00c      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f906 	bl	8003048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f8fe 	bl	800305c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f834 	bl	8002eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0220 	mvn.w	r2, #32
 8002ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8c6 	bl	8003034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a40      	ldr	r2, [pc, #256]	; (8003014 <TIM_Base_SetConfig+0x114>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d013      	beq.n	8002f40 <TIM_Base_SetConfig+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1e:	d00f      	beq.n	8002f40 <TIM_Base_SetConfig+0x40>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3d      	ldr	r2, [pc, #244]	; (8003018 <TIM_Base_SetConfig+0x118>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00b      	beq.n	8002f40 <TIM_Base_SetConfig+0x40>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3c      	ldr	r2, [pc, #240]	; (800301c <TIM_Base_SetConfig+0x11c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d007      	beq.n	8002f40 <TIM_Base_SetConfig+0x40>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a3b      	ldr	r2, [pc, #236]	; (8003020 <TIM_Base_SetConfig+0x120>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d003      	beq.n	8002f40 <TIM_Base_SetConfig+0x40>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a3a      	ldr	r2, [pc, #232]	; (8003024 <TIM_Base_SetConfig+0x124>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d108      	bne.n	8002f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a2f      	ldr	r2, [pc, #188]	; (8003014 <TIM_Base_SetConfig+0x114>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01f      	beq.n	8002f9a <TIM_Base_SetConfig+0x9a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f60:	d01b      	beq.n	8002f9a <TIM_Base_SetConfig+0x9a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2c      	ldr	r2, [pc, #176]	; (8003018 <TIM_Base_SetConfig+0x118>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d017      	beq.n	8002f9a <TIM_Base_SetConfig+0x9a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	; (800301c <TIM_Base_SetConfig+0x11c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <TIM_Base_SetConfig+0x9a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <TIM_Base_SetConfig+0x120>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00f      	beq.n	8002f9a <TIM_Base_SetConfig+0x9a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a29      	ldr	r2, [pc, #164]	; (8003024 <TIM_Base_SetConfig+0x124>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00b      	beq.n	8002f9a <TIM_Base_SetConfig+0x9a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a28      	ldr	r2, [pc, #160]	; (8003028 <TIM_Base_SetConfig+0x128>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <TIM_Base_SetConfig+0x9a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a27      	ldr	r2, [pc, #156]	; (800302c <TIM_Base_SetConfig+0x12c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d003      	beq.n	8002f9a <TIM_Base_SetConfig+0x9a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a26      	ldr	r2, [pc, #152]	; (8003030 <TIM_Base_SetConfig+0x130>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d108      	bne.n	8002fac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <TIM_Base_SetConfig+0x114>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00f      	beq.n	8002ff8 <TIM_Base_SetConfig+0xf8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a12      	ldr	r2, [pc, #72]	; (8003024 <TIM_Base_SetConfig+0x124>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00b      	beq.n	8002ff8 <TIM_Base_SetConfig+0xf8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a11      	ldr	r2, [pc, #68]	; (8003028 <TIM_Base_SetConfig+0x128>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d007      	beq.n	8002ff8 <TIM_Base_SetConfig+0xf8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a10      	ldr	r2, [pc, #64]	; (800302c <TIM_Base_SetConfig+0x12c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <TIM_Base_SetConfig+0xf8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <TIM_Base_SetConfig+0x130>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d103      	bne.n	8003000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	615a      	str	r2, [r3, #20]
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800
 8003020:	40000c00 	.word	0x40000c00
 8003024:	40013400 	.word	0x40013400
 8003028:	40014000 	.word	0x40014000
 800302c:	40014400 	.word	0x40014400
 8003030:	40014800 	.word	0x40014800

08003034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e040      	b.n	8003104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fd0e 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	; 0x24
 800309c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fe74 	bl	8003da4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fbb9 	bl	8003834 <UART_SetConfig>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e01b      	b.n	8003104 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fef3 	bl	8003ee8 <UART_CheckIdleState>
 8003102:	4603      	mov	r3, r0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003120:	2b20      	cmp	r3, #32
 8003122:	d178      	bne.n	8003216 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_UART_Transmit+0x24>
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e071      	b.n	8003218 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2221      	movs	r2, #33	; 0x21
 8003140:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003142:	f7fd fe3b 	bl	8000dbc <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003160:	d108      	bne.n	8003174 <HAL_UART_Transmit+0x68>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	e003      	b.n	800317c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800317c:	e030      	b.n	80031e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 ff55 	bl	8004038 <UART_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e03c      	b.n	8003218 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	881a      	ldrh	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b0:	b292      	uxth	r2, r2
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	3302      	adds	r3, #2
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e008      	b.n	80031ce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b292      	uxth	r2, r2
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	3301      	adds	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1c8      	bne.n	800317e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 ff1e 	bl	8004038 <UART_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d004      	beq.n	800320c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e005      	b.n	8003218 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b0ba      	sub	sp, #232	; 0xe8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800324a:	f640 030f 	movw	r3, #2063	; 0x80f
 800324e:	4013      	ands	r3, r2
 8003250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d115      	bne.n	8003288 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800325c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00f      	beq.n	8003288 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 82ae 	beq.w	80037da <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
      }
      return;
 8003286:	e2a8      	b.n	80037da <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8117 	beq.w	80034c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800329e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032a2:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <HAL_UART_IRQHandler+0x298>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 810a 	beq.w	80034c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d011      	beq.n	80032dc <HAL_UART_IRQHandler+0xbc>
 80032b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2201      	movs	r2, #1
 80032ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d011      	beq.n	800330c <HAL_UART_IRQHandler+0xec>
 80032e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2202      	movs	r2, #2
 80032fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800330c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d011      	beq.n	800333c <HAL_UART_IRQHandler+0x11c>
 8003318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2204      	movs	r2, #4
 800332a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003332:	f043 0202 	orr.w	r2, r3, #2
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800333c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d017      	beq.n	8003378 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003358:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00b      	beq.n	8003378 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2208      	movs	r2, #8
 8003366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336e:	f043 0208 	orr.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003380:	2b00      	cmp	r3, #0
 8003382:	d012      	beq.n	80033aa <HAL_UART_IRQHandler+0x18a>
 8003384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00c      	beq.n	80033aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8214 	beq.w	80037de <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d005      	beq.n	8003402 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d04f      	beq.n	80034a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fe7f 	bl	8004106 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d141      	bne.n	800349a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3308      	adds	r3, #8
 800341c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800342c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3308      	adds	r3, #8
 800343e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003442:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800344e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800345a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1d9      	bne.n	8003416 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003466:	2b00      	cmp	r3, #0
 8003468:	d013      	beq.n	8003492 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	4a13      	ldr	r2, [pc, #76]	; (80034bc <HAL_UART_IRQHandler+0x29c>)
 8003470:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fdcc 	bl	8001014 <HAL_DMA_Abort_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d017      	beq.n	80034b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800348c:	4610      	mov	r0, r2
 800348e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003490:	e00f      	b.n	80034b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9b8 	bl	8003808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	e00b      	b.n	80034b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f9b4 	bl	8003808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a0:	e007      	b.n	80034b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9b0 	bl	8003808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80034b0:	e195      	b.n	80037de <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b2:	bf00      	nop
    return;
 80034b4:	e193      	b.n	80037de <HAL_UART_IRQHandler+0x5be>
 80034b6:	bf00      	nop
 80034b8:	04000120 	.word	0x04000120
 80034bc:	080041cf 	.word	0x080041cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	f040 814e 	bne.w	8003766 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8147 	beq.w	8003766 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8140 	beq.w	8003766 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2210      	movs	r2, #16
 80034ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	f040 80b8 	bne.w	800366e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800350a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8167 	beq.w	80037e2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800351a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800351e:	429a      	cmp	r2, r3
 8003520:	f080 815f 	bcs.w	80037e2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800352a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 8086 	bne.w	800364c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800355c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800356a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800356e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1da      	bne.n	8003540 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3308      	adds	r3, #8
 8003590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800359a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3308      	adds	r3, #8
 80035aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e1      	bne.n	800358a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3308      	adds	r3, #8
 80035cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e3      	bne.n	80035c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361c:	f023 0310 	bic.w	r3, r3, #16
 8003620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800362e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003630:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800363c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e4      	bne.n	800360c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd fca6 	bl	8000f98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800365e:	b29b      	uxth	r3, r3
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	b29b      	uxth	r3, r3
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8d8 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800366c:	e0b9      	b.n	80037e2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800367a:	b29b      	uxth	r3, r3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80ab 	beq.w	80037e6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a6 	beq.w	80037e6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036bc:	647b      	str	r3, [r7, #68]	; 0x44
 80036be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e4      	bne.n	800369a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3308      	adds	r3, #8
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	623b      	str	r3, [r7, #32]
   return(result);
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3308      	adds	r3, #8
 80036f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036f4:	633a      	str	r2, [r7, #48]	; 0x30
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e3      	bne.n	80036d0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	60fb      	str	r3, [r7, #12]
   return(result);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f023 0310 	bic.w	r3, r3, #16
 8003730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	69b9      	ldr	r1, [r7, #24]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	617b      	str	r3, [r7, #20]
   return(result);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e4      	bne.n	800371c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f85c 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003764:	e03f      	b.n	80037e6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00e      	beq.n	8003790 <HAL_UART_IRQHandler+0x570>
 8003772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fd60 	bl	800424e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800378e:	e02d      	b.n	80037ec <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800379c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01c      	beq.n	80037ea <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
    }
    return;
 80037b8:	e017      	b.n	80037ea <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d012      	beq.n	80037ec <HAL_UART_IRQHandler+0x5cc>
 80037c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fd11 	bl	80041fa <UART_EndTransmit_IT>
    return;
 80037d8:	e008      	b.n	80037ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80037da:	bf00      	nop
 80037dc:	e006      	b.n	80037ec <HAL_UART_IRQHandler+0x5cc>
    return;
 80037de:	bf00      	nop
 80037e0:	e004      	b.n	80037ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80037e2:	bf00      	nop
 80037e4:	e002      	b.n	80037ec <HAL_UART_IRQHandler+0x5cc>
      return;
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <HAL_UART_IRQHandler+0x5cc>
    return;
 80037ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80037ec:	37e8      	adds	r7, #232	; 0xe8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop

080037f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003838:	b08a      	sub	sp, #40	; 0x28
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	431a      	orrs	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	4313      	orrs	r3, r2
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4ba4      	ldr	r3, [pc, #656]	; (8003af4 <UART_SetConfig+0x2c0>)
 8003864:	4013      	ands	r3, r2
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800386c:	430b      	orrs	r3, r1
 800386e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a99      	ldr	r2, [pc, #612]	; (8003af8 <UART_SetConfig+0x2c4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	4313      	orrs	r3, r2
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	430a      	orrs	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a90      	ldr	r2, [pc, #576]	; (8003afc <UART_SetConfig+0x2c8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d126      	bne.n	800390c <UART_SetConfig+0xd8>
 80038be:	4b90      	ldr	r3, [pc, #576]	; (8003b00 <UART_SetConfig+0x2cc>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d81b      	bhi.n	8003904 <UART_SetConfig+0xd0>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <UART_SetConfig+0xa0>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038f5 	.word	0x080038f5
 80038dc:	080038ed 	.word	0x080038ed
 80038e0:	080038fd 	.word	0x080038fd
 80038e4:	2301      	movs	r3, #1
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ea:	e116      	b.n	8003b1a <UART_SetConfig+0x2e6>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e112      	b.n	8003b1a <UART_SetConfig+0x2e6>
 80038f4:	2304      	movs	r3, #4
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e10e      	b.n	8003b1a <UART_SetConfig+0x2e6>
 80038fc:	2308      	movs	r3, #8
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e10a      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e106      	b.n	8003b1a <UART_SetConfig+0x2e6>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a7c      	ldr	r2, [pc, #496]	; (8003b04 <UART_SetConfig+0x2d0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d138      	bne.n	8003988 <UART_SetConfig+0x154>
 8003916:	4b7a      	ldr	r3, [pc, #488]	; (8003b00 <UART_SetConfig+0x2cc>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d82d      	bhi.n	8003980 <UART_SetConfig+0x14c>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <UART_SetConfig+0xf8>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003961 	.word	0x08003961
 8003930:	08003981 	.word	0x08003981
 8003934:	08003981 	.word	0x08003981
 8003938:	08003981 	.word	0x08003981
 800393c:	08003971 	.word	0x08003971
 8003940:	08003981 	.word	0x08003981
 8003944:	08003981 	.word	0x08003981
 8003948:	08003981 	.word	0x08003981
 800394c:	08003969 	.word	0x08003969
 8003950:	08003981 	.word	0x08003981
 8003954:	08003981 	.word	0x08003981
 8003958:	08003981 	.word	0x08003981
 800395c:	08003979 	.word	0x08003979
 8003960:	2300      	movs	r3, #0
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003966:	e0d8      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003968:	2302      	movs	r3, #2
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396e:	e0d4      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003970:	2304      	movs	r3, #4
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003976:	e0d0      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003978:	2308      	movs	r3, #8
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397e:	e0cc      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003980:	2310      	movs	r3, #16
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e0c8      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5e      	ldr	r2, [pc, #376]	; (8003b08 <UART_SetConfig+0x2d4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d125      	bne.n	80039de <UART_SetConfig+0x1aa>
 8003992:	4b5b      	ldr	r3, [pc, #364]	; (8003b00 <UART_SetConfig+0x2cc>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800399c:	2b30      	cmp	r3, #48	; 0x30
 800399e:	d016      	beq.n	80039ce <UART_SetConfig+0x19a>
 80039a0:	2b30      	cmp	r3, #48	; 0x30
 80039a2:	d818      	bhi.n	80039d6 <UART_SetConfig+0x1a2>
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d00a      	beq.n	80039be <UART_SetConfig+0x18a>
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d814      	bhi.n	80039d6 <UART_SetConfig+0x1a2>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <UART_SetConfig+0x182>
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d008      	beq.n	80039c6 <UART_SetConfig+0x192>
 80039b4:	e00f      	b.n	80039d6 <UART_SetConfig+0x1a2>
 80039b6:	2300      	movs	r3, #0
 80039b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039bc:	e0ad      	b.n	8003b1a <UART_SetConfig+0x2e6>
 80039be:	2302      	movs	r3, #2
 80039c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c4:	e0a9      	b.n	8003b1a <UART_SetConfig+0x2e6>
 80039c6:	2304      	movs	r3, #4
 80039c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039cc:	e0a5      	b.n	8003b1a <UART_SetConfig+0x2e6>
 80039ce:	2308      	movs	r3, #8
 80039d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d4:	e0a1      	b.n	8003b1a <UART_SetConfig+0x2e6>
 80039d6:	2310      	movs	r3, #16
 80039d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039dc:	e09d      	b.n	8003b1a <UART_SetConfig+0x2e6>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <UART_SetConfig+0x2d8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d125      	bne.n	8003a34 <UART_SetConfig+0x200>
 80039e8:	4b45      	ldr	r3, [pc, #276]	; (8003b00 <UART_SetConfig+0x2cc>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039f2:	2bc0      	cmp	r3, #192	; 0xc0
 80039f4:	d016      	beq.n	8003a24 <UART_SetConfig+0x1f0>
 80039f6:	2bc0      	cmp	r3, #192	; 0xc0
 80039f8:	d818      	bhi.n	8003a2c <UART_SetConfig+0x1f8>
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d00a      	beq.n	8003a14 <UART_SetConfig+0x1e0>
 80039fe:	2b80      	cmp	r3, #128	; 0x80
 8003a00:	d814      	bhi.n	8003a2c <UART_SetConfig+0x1f8>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <UART_SetConfig+0x1d8>
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d008      	beq.n	8003a1c <UART_SetConfig+0x1e8>
 8003a0a:	e00f      	b.n	8003a2c <UART_SetConfig+0x1f8>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e082      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a14:	2302      	movs	r3, #2
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e07e      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e07a      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a24:	2308      	movs	r3, #8
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e076      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e072      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a35      	ldr	r2, [pc, #212]	; (8003b10 <UART_SetConfig+0x2dc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d12a      	bne.n	8003a94 <UART_SetConfig+0x260>
 8003a3e:	4b30      	ldr	r3, [pc, #192]	; (8003b00 <UART_SetConfig+0x2cc>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a4c:	d01a      	beq.n	8003a84 <UART_SetConfig+0x250>
 8003a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a52:	d81b      	bhi.n	8003a8c <UART_SetConfig+0x258>
 8003a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a58:	d00c      	beq.n	8003a74 <UART_SetConfig+0x240>
 8003a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5e:	d815      	bhi.n	8003a8c <UART_SetConfig+0x258>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <UART_SetConfig+0x238>
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a68:	d008      	beq.n	8003a7c <UART_SetConfig+0x248>
 8003a6a:	e00f      	b.n	8003a8c <UART_SetConfig+0x258>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e052      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7a:	e04e      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a82:	e04a      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a84:	2308      	movs	r3, #8
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8a:	e046      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e042      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <UART_SetConfig+0x2c4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d13a      	bne.n	8003b14 <UART_SetConfig+0x2e0>
 8003a9e:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <UART_SetConfig+0x2cc>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aac:	d01a      	beq.n	8003ae4 <UART_SetConfig+0x2b0>
 8003aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ab2:	d81b      	bhi.n	8003aec <UART_SetConfig+0x2b8>
 8003ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab8:	d00c      	beq.n	8003ad4 <UART_SetConfig+0x2a0>
 8003aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003abe:	d815      	bhi.n	8003aec <UART_SetConfig+0x2b8>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <UART_SetConfig+0x298>
 8003ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac8:	d008      	beq.n	8003adc <UART_SetConfig+0x2a8>
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x2b8>
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad2:	e022      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ada:	e01e      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003adc:	2304      	movs	r3, #4
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae2:	e01a      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	e016      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003aec:	2310      	movs	r3, #16
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e012      	b.n	8003b1a <UART_SetConfig+0x2e6>
 8003af4:	efff69f3 	.word	0xefff69f3
 8003af8:	40008000 	.word	0x40008000
 8003afc:	40013800 	.word	0x40013800
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40004400 	.word	0x40004400
 8003b08:	40004800 	.word	0x40004800
 8003b0c:	40004c00 	.word	0x40004c00
 8003b10:	40005000 	.word	0x40005000
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a9f      	ldr	r2, [pc, #636]	; (8003d9c <UART_SetConfig+0x568>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d17a      	bne.n	8003c1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d824      	bhi.n	8003b76 <UART_SetConfig+0x342>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <UART_SetConfig+0x300>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b77 	.word	0x08003b77
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003b77 	.word	0x08003b77
 8003b44:	08003b67 	.word	0x08003b67
 8003b48:	08003b77 	.word	0x08003b77
 8003b4c:	08003b77 	.word	0x08003b77
 8003b50:	08003b77 	.word	0x08003b77
 8003b54:	08003b6f 	.word	0x08003b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7fe fa5c 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	61f8      	str	r0, [r7, #28]
        break;
 8003b5e:	e010      	b.n	8003b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b60:	4b8f      	ldr	r3, [pc, #572]	; (8003da0 <UART_SetConfig+0x56c>)
 8003b62:	61fb      	str	r3, [r7, #28]
        break;
 8003b64:	e00d      	b.n	8003b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b66:	f7fe f9bd 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8003b6a:	61f8      	str	r0, [r7, #28]
        break;
 8003b6c:	e009      	b.n	8003b82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b72:	61fb      	str	r3, [r7, #28]
        break;
 8003b74:	e005      	b.n	8003b82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80fb 	beq.w	8003d80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d305      	bcc.n	8003ba6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d903      	bls.n	8003bae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bac:	e0e8      	b.n	8003d80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	461c      	mov	r4, r3
 8003bb4:	4615      	mov	r5, r2
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	022b      	lsls	r3, r5, #8
 8003bc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bc4:	0222      	lsls	r2, r4, #8
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	6849      	ldr	r1, [r1, #4]
 8003bca:	0849      	lsrs	r1, r1, #1
 8003bcc:	2000      	movs	r0, #0
 8003bce:	4688      	mov	r8, r1
 8003bd0:	4681      	mov	r9, r0
 8003bd2:	eb12 0a08 	adds.w	sl, r2, r8
 8003bd6:	eb43 0b09 	adc.w	fp, r3, r9
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003be8:	4650      	mov	r0, sl
 8003bea:	4659      	mov	r1, fp
 8003bec:	f7fc fb98 	bl	8000320 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bfe:	d308      	bcc.n	8003c12 <UART_SetConfig+0x3de>
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c06:	d204      	bcs.n	8003c12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	60da      	str	r2, [r3, #12]
 8003c10:	e0b6      	b.n	8003d80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c18:	e0b2      	b.n	8003d80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c22:	d15e      	bne.n	8003ce2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d828      	bhi.n	8003c7e <UART_SetConfig+0x44a>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0x400>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c69 	.word	0x08003c69
 8003c40:	08003c7f 	.word	0x08003c7f
 8003c44:	08003c6f 	.word	0x08003c6f
 8003c48:	08003c7f 	.word	0x08003c7f
 8003c4c:	08003c7f 	.word	0x08003c7f
 8003c50:	08003c7f 	.word	0x08003c7f
 8003c54:	08003c77 	.word	0x08003c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7fe f9dc 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	61f8      	str	r0, [r7, #28]
        break;
 8003c5e:	e014      	b.n	8003c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c60:	f7fe f9ee 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 8003c64:	61f8      	str	r0, [r7, #28]
        break;
 8003c66:	e010      	b.n	8003c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c68:	4b4d      	ldr	r3, [pc, #308]	; (8003da0 <UART_SetConfig+0x56c>)
 8003c6a:	61fb      	str	r3, [r7, #28]
        break;
 8003c6c:	e00d      	b.n	8003c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c6e:	f7fe f939 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8003c72:	61f8      	str	r0, [r7, #28]
        break;
 8003c74:	e009      	b.n	8003c8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7a:	61fb      	str	r3, [r7, #28]
        break;
 8003c7c:	e005      	b.n	8003c8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d077      	beq.n	8003d80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005a      	lsls	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	441a      	add	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b0f      	cmp	r3, #15
 8003caa:	d916      	bls.n	8003cda <UART_SetConfig+0x4a6>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb2:	d212      	bcs.n	8003cda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f023 030f 	bic.w	r3, r3, #15
 8003cbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	8afb      	ldrh	r3, [r7, #22]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	8afa      	ldrh	r2, [r7, #22]
 8003cd6:	60da      	str	r2, [r3, #12]
 8003cd8:	e052      	b.n	8003d80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ce0:	e04e      	b.n	8003d80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d827      	bhi.n	8003d3a <UART_SetConfig+0x506>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <UART_SetConfig+0x4bc>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d3b 	.word	0x08003d3b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d3b 	.word	0x08003d3b
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d3b 	.word	0x08003d3b
 8003d10:	08003d33 	.word	0x08003d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7fe f97e 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8003d18:	61f8      	str	r0, [r7, #28]
        break;
 8003d1a:	e014      	b.n	8003d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7fe f990 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 8003d20:	61f8      	str	r0, [r7, #28]
        break;
 8003d22:	e010      	b.n	8003d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d24:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <UART_SetConfig+0x56c>)
 8003d26:	61fb      	str	r3, [r7, #28]
        break;
 8003d28:	e00d      	b.n	8003d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2a:	f7fe f8db 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8003d2e:	61f8      	str	r0, [r7, #28]
        break;
 8003d30:	e009      	b.n	8003d46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d36:	61fb      	str	r3, [r7, #28]
        break;
 8003d38:	e005      	b.n	8003d46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d44:	bf00      	nop
    }

    if (pclk != 0U)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d019      	beq.n	8003d80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	085a      	lsrs	r2, r3, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	441a      	add	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	d909      	bls.n	8003d7a <UART_SetConfig+0x546>
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d205      	bcs.n	8003d7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	e002      	b.n	8003d80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3728      	adds	r7, #40	; 0x28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40008000 	.word	0x40008000
 8003da0:	00f42400 	.word	0x00f42400

08003da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01a      	beq.n	8003eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea2:	d10a      	bne.n	8003eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b098      	sub	sp, #96	; 0x60
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ef8:	f7fc ff60 	bl	8000dbc <HAL_GetTick>
 8003efc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d12e      	bne.n	8003f6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f14:	2200      	movs	r2, #0
 8003f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f88c 	bl	8004038 <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d021      	beq.n	8003f6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
 8003f46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e6      	bne.n	8003f26 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e062      	b.n	8004030 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d149      	bne.n	800400c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f80:	2200      	movs	r2, #0
 8003f82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f856 	bl	8004038 <UART_WaitOnFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d03c      	beq.n	800400c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e6      	bne.n	8003f92 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe4:	61fa      	str	r2, [r7, #28]
 8003fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	69b9      	ldr	r1, [r7, #24]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e5      	bne.n	8003fc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e011      	b.n	8004030 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3758      	adds	r7, #88	; 0x58
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004048:	e049      	b.n	80040de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d045      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7fc feb3 	bl	8000dbc <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <UART_WaitOnFlagUntilTimeout+0x30>
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e048      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d031      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d110      	bne.n	80040aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2208      	movs	r2, #8
 800408e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f838 	bl	8004106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2208      	movs	r2, #8
 800409a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e029      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b8:	d111      	bne.n	80040de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f81e 	bl	8004106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e00f      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d0a6      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004106:	b480      	push	{r7}
 8004108:	b095      	sub	sp, #84	; 0x54
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412c:	643b      	str	r3, [r7, #64]	; 0x40
 800412e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e6      	bne.n	800410e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3308      	adds	r3, #8
 8004146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	64bb      	str	r3, [r7, #72]	; 0x48
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3308      	adds	r3, #8
 800415e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e5      	bne.n	8004140 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004178:	2b01      	cmp	r3, #1
 800417a:	d118      	bne.n	80041ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	60bb      	str	r3, [r7, #8]
   return(result);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f023 0310 	bic.w	r3, r3, #16
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	6979      	ldr	r1, [r7, #20]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	613b      	str	r3, [r7, #16]
   return(result);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e6      	bne.n	800417c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80041c2:	bf00      	nop
 80041c4:	3754      	adds	r7, #84	; 0x54
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff fb0b 	bl	8003808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b088      	sub	sp, #32
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	613b      	str	r3, [r7, #16]
   return(result);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff fad7 	bl	80037f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004246:	bf00      	nop
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f103 0208 	add.w	r2, r3, #8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f103 0208 	add.w	r2, r3, #8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f103 0208 	add.w	r2, r3, #8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d103      	bne.n	8004324 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e00c      	b.n	800433e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3308      	adds	r3, #8
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e002      	b.n	8004332 <vListInsert+0x2e>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	d2f6      	bcs.n	800432c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	601a      	str	r2, [r3, #0]
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6892      	ldr	r2, [r2, #8]
 800438c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6852      	ldr	r2, [r2, #4]
 8004396:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d103      	bne.n	80043aa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	1e5a      	subs	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80043d6:	2301      	movs	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <xQueueGenericReset+0x2e>
        __asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	60fb      	str	r3, [r7, #12]
    }
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d05d      	beq.n	80044bc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004404:	2b00      	cmp	r3, #0
 8004406:	d059      	beq.n	80044bc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	2100      	movs	r1, #0
 8004412:	fba3 2302 	umull	r2, r3, r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d000      	beq.n	800441c <xQueueGenericReset+0x50>
 800441a:	2101      	movs	r1, #1
 800441c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800441e:	2b00      	cmp	r3, #0
 8004420:	d14c      	bne.n	80044bc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004422:	f002 f83f 	bl	80064a4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	6939      	ldr	r1, [r7, #16]
 8004430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004432:	fb01 f303 	mul.w	r3, r1, r3
 8004436:	441a      	add	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2200      	movs	r2, #0
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	3b01      	subs	r3, #1
 8004454:	6939      	ldr	r1, [r7, #16]
 8004456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	441a      	add	r2, r3
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	22ff      	movs	r2, #255	; 0xff
 8004466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d114      	bne.n	80044a2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01a      	beq.n	80044b6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	3310      	adds	r3, #16
 8004484:	4618      	mov	r0, r3
 8004486:	f001 f9b5 	bl	80057f4 <xTaskRemoveFromEventList>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d012      	beq.n	80044b6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004490:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <xQueueGenericReset+0x11c>)
 8004492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	e009      	b.n	80044b6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3310      	adds	r3, #16
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fedb 	bl	8004262 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	3324      	adds	r3, #36	; 0x24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fed6 	bl	8004262 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80044b6:	f002 f825 	bl	8006504 <vPortExitCritical>
 80044ba:	e001      	b.n	80044c0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <xQueueGenericReset+0x110>
        __asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60bb      	str	r3, [r7, #8]
    }
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80044dc:	697b      	ldr	r3, [r7, #20]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d032      	beq.n	800456a <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004504:	2100      	movs	r1, #0
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	fba3 2302 	umull	r2, r3, r3, r2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d000      	beq.n	8004514 <xQueueGenericCreate+0x28>
 8004512:	2101      	movs	r1, #1
 8004514:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004516:	2b00      	cmp	r3, #0
 8004518:	d127      	bne.n	800456a <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004522:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8004526:	d820      	bhi.n	800456a <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	3348      	adds	r3, #72	; 0x48
 8004536:	4618      	mov	r0, r3
 8004538:	f002 f8e0 	bl	80066fc <pvPortMalloc>
 800453c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d020      	beq.n	8004586 <xQueueGenericCreate+0x9a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3348      	adds	r3, #72	; 0x48
 800454c:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004556:	79fa      	ldrb	r2, [r7, #7]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f814 	bl	8004590 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004568:	e00d      	b.n	8004586 <xQueueGenericCreate+0x9a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <xQueueGenericCreate+0x9a>
        __asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	613b      	str	r3, [r7, #16]
    }
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004586:	69fb      	ldr	r3, [r7, #28]
    }
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e002      	b.n	80045b2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045be:	2101      	movs	r1, #1
 80045c0:	69b8      	ldr	r0, [r7, #24]
 80045c2:	f7ff ff03 	bl	80043cc <xQueueGenericReset>
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	2073      	movs	r0, #115	; 0x73
 80045ce:	f003 f8dd 	bl	800778c <SEGGER_SYSVIEW_RecordU32x3>
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045fa:	2300      	movs	r3, #0
 80045fc:	2200      	movs	r2, #0
 80045fe:	2100      	movs	r1, #0
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f81d 	bl	8004640 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	4603      	mov	r3, r0
 8004616:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	461a      	mov	r2, r3
 8004624:	6939      	ldr	r1, [r7, #16]
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f7ff ff60 	bl	80044ec <xQueueGenericCreate>
 800462c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff ffd3 	bl	80045da <prvInitialiseMutex>

        return xNewQueue;
 8004634:	68fb      	ldr	r3, [r7, #12]
    }
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b090      	sub	sp, #64	; 0x40
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800464e:	2300      	movs	r3, #0
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xQueueGenericSend+0x32>
        __asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <xQueueGenericSend+0x40>
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <xQueueGenericSend+0x44>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <xQueueGenericSend+0x46>
 8004684:	2300      	movs	r3, #0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <xQueueGenericSend+0x60>
        __asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d103      	bne.n	80046ae <xQueueGenericSend+0x6e>
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <xQueueGenericSend+0x72>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <xQueueGenericSend+0x74>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <xQueueGenericSend+0x8e>
        __asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	623b      	str	r3, [r7, #32]
    }
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046ce:	f001 facb 	bl	8005c68 <xTaskGetSchedulerState>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <xQueueGenericSend+0x9e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <xQueueGenericSend+0xa2>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <xQueueGenericSend+0xa4>
 80046e2:	2300      	movs	r3, #0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <xQueueGenericSend+0xbe>
        __asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	61fb      	str	r3, [r7, #28]
    }
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80046fe:	f001 fed1 	bl	80064a4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <xQueueGenericSend+0xd4>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d136      	bne.n	8004782 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	4618      	mov	r0, r3
 8004718:	f003 fd64 	bl	80081e4 <SEGGER_SYSVIEW_ShrinkId>
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	460b      	mov	r3, r1
 8004726:	4601      	mov	r1, r0
 8004728:	205a      	movs	r0, #90	; 0x5a
 800472a:	f003 f8a5 	bl	8007878 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004734:	f000 f9f0 	bl	8004b18 <prvCopyDataToQueue>
 8004738:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	3324      	adds	r3, #36	; 0x24
 8004746:	4618      	mov	r0, r3
 8004748:	f001 f854 	bl	80057f4 <xTaskRemoveFromEventList>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d013      	beq.n	800477a <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004752:	4b4d      	ldr	r3, [pc, #308]	; (8004888 <xQueueGenericSend+0x248>)
 8004754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	e00a      	b.n	800477a <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800476a:	4b47      	ldr	r3, [pc, #284]	; (8004888 <xQueueGenericSend+0x248>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800477a:	f001 fec3 	bl	8006504 <vPortExitCritical>
                return pdPASS;
 800477e:	2301      	movs	r3, #1
 8004780:	e07d      	b.n	800487e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d110      	bne.n	80047aa <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004788:	f001 febc 	bl	8006504 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	4618      	mov	r0, r3
 8004790:	f003 fd28 	bl	80081e4 <SEGGER_SYSVIEW_ShrinkId>
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	460b      	mov	r3, r1
 800479e:	4601      	mov	r1, r0
 80047a0:	205a      	movs	r0, #90	; 0x5a
 80047a2:	f003 f869 	bl	8007878 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e069      	b.n	800487e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80047aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 f8f5 	bl	80059a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80047be:	f001 fea1 	bl	8006504 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80047c2:	f000 fd43 	bl	800524c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80047c6:	f001 fe6d 	bl	80064a4 <vPortEnterCritical>
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047d0:	b25b      	sxtb	r3, r3
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d103      	bne.n	80047e0 <xQueueGenericSend+0x1a0>
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e6:	b25b      	sxtb	r3, r3
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d103      	bne.n	80047f6 <xQueueGenericSend+0x1b6>
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f6:	f001 fe85 	bl	8006504 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047fa:	1d3a      	adds	r2, r7, #4
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f001 f8e4 	bl	80059d0 <xTaskCheckForTimeOut>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d124      	bne.n	8004858 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800480e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004810:	f000 fa54 	bl	8004cbc <prvIsQueueFull>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d018      	beq.n	800484c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	3310      	adds	r3, #16
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f000 ffc2 	bl	80057ac <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800482a:	f000 f9df 	bl	8004bec <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800482e:	f000 fd1b 	bl	8005268 <xTaskResumeAll>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f47f af62 	bne.w	80046fe <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <xQueueGenericSend+0x248>)
 800483c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	e758      	b.n	80046fe <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800484c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800484e:	f000 f9cd 	bl	8004bec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004852:	f000 fd09 	bl	8005268 <xTaskResumeAll>
 8004856:	e752      	b.n	80046fe <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800485a:	f000 f9c7 	bl	8004bec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800485e:	f000 fd03 	bl	8005268 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	4618      	mov	r0, r3
 8004866:	f003 fcbd 	bl	80081e4 <SEGGER_SYSVIEW_ShrinkId>
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	460b      	mov	r3, r1
 8004874:	4601      	mov	r1, r0
 8004876:	205a      	movs	r0, #90	; 0x5a
 8004878:	f002 fffe 	bl	8007878 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800487c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800487e:	4618      	mov	r0, r3
 8004880:	3738      	adds	r7, #56	; 0x38
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b08f      	sub	sp, #60	; 0x3c
 8004890:	af02      	add	r7, sp, #8
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004896:	2300      	movs	r3, #0
 8004898:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800489e:	2300      	movs	r3, #0
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xQueueSemaphoreTake+0x32>
        __asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	61bb      	str	r3, [r7, #24]
    }
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <xQueueSemaphoreTake+0x50>
        __asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	617b      	str	r3, [r7, #20]
    }
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048dc:	f001 f9c4 	bl	8005c68 <xTaskGetSchedulerState>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <xQueueSemaphoreTake+0x60>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <xQueueSemaphoreTake+0x64>
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <xQueueSemaphoreTake+0x66>
 80048f0:	2300      	movs	r3, #0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <xQueueSemaphoreTake+0x80>
        __asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	613b      	str	r3, [r7, #16]
    }
 8004908:	bf00      	nop
 800490a:	e7fe      	b.n	800490a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800490c:	f001 fdca 	bl	80064a4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d034      	beq.n	8004986 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	4618      	mov	r0, r3
 8004920:	f003 fc60 	bl	80081e4 <SEGGER_SYSVIEW_ShrinkId>
 8004924:	4604      	mov	r4, r0
 8004926:	2000      	movs	r0, #0
 8004928:	f003 fc5c 	bl	80081e4 <SEGGER_SYSVIEW_ShrinkId>
 800492c:	4602      	mov	r2, r0
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2101      	movs	r1, #1
 8004932:	9100      	str	r1, [sp, #0]
 8004934:	4621      	mov	r1, r4
 8004936:	205c      	movs	r0, #92	; 0x5c
 8004938:	f002 ff9e 	bl	8007878 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	1e5a      	subs	r2, r3, #1
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <xQueueSemaphoreTake+0xca>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800494c:	f001 fb66 	bl	800601c <pvTaskIncrementMutexHeldCount>
 8004950:	4602      	mov	r2, r0
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00f      	beq.n	800497e <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	3310      	adds	r3, #16
 8004962:	4618      	mov	r0, r3
 8004964:	f000 ff46 	bl	80057f4 <xTaskRemoveFromEventList>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800496e:	4b5d      	ldr	r3, [pc, #372]	; (8004ae4 <xQueueSemaphoreTake+0x258>)
 8004970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800497e:	f001 fdc1 	bl	8006504 <vPortExitCritical>
                return pdPASS;
 8004982:	2301      	movs	r3, #1
 8004984:	e0a9      	b.n	8004ada <xQueueSemaphoreTake+0x24e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d113      	bne.n	80049b4 <xQueueSemaphoreTake+0x128>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800498c:	f001 fdba 	bl	8006504 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	4618      	mov	r0, r3
 8004994:	f003 fc26 	bl	80081e4 <SEGGER_SYSVIEW_ShrinkId>
 8004998:	4604      	mov	r4, r0
 800499a:	2000      	movs	r0, #0
 800499c:	f003 fc22 	bl	80081e4 <SEGGER_SYSVIEW_ShrinkId>
 80049a0:	4602      	mov	r2, r0
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2101      	movs	r1, #1
 80049a6:	9100      	str	r1, [sp, #0]
 80049a8:	4621      	mov	r1, r4
 80049aa:	205c      	movs	r0, #92	; 0x5c
 80049ac:	f002 ff64 	bl	8007878 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e092      	b.n	8004ada <xQueueSemaphoreTake+0x24e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <xQueueSemaphoreTake+0x13c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80049ba:	f107 0308 	add.w	r3, r7, #8
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fff0 	bl	80059a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80049c4:	2301      	movs	r3, #1
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80049c8:	f001 fd9c 	bl	8006504 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80049cc:	f000 fc3e 	bl	800524c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80049d0:	f001 fd68 	bl	80064a4 <vPortEnterCritical>
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049da:	b25b      	sxtb	r3, r3
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d103      	bne.n	80049ea <xQueueSemaphoreTake+0x15e>
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f0:	b25b      	sxtb	r3, r3
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d103      	bne.n	8004a00 <xQueueSemaphoreTake+0x174>
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a00:	f001 fd80 	bl	8006504 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a04:	463a      	mov	r2, r7
 8004a06:	f107 0308 	add.w	r3, r7, #8
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 ffdf 	bl	80059d0 <xTaskCheckForTimeOut>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d132      	bne.n	8004a7e <xQueueSemaphoreTake+0x1f2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a1a:	f000 f939 	bl	8004c90 <prvIsQueueEmpty>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d026      	beq.n	8004a72 <xQueueSemaphoreTake+0x1e6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <xQueueSemaphoreTake+0x1b4>
                    {
                        taskENTER_CRITICAL();
 8004a2c:	f001 fd3a 	bl	80064a4 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 f935 	bl	8005ca4 <xTaskPriorityInherit>
 8004a3a:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8004a3c:	f001 fd62 	bl	8006504 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	3324      	adds	r3, #36	; 0x24
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 feaf 	bl	80057ac <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004a4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a50:	f000 f8cc 	bl	8004bec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004a54:	f000 fc08 	bl	8005268 <xTaskResumeAll>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f47f af56 	bne.w	800490c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8004a60:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <xQueueSemaphoreTake+0x258>)
 8004a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	e74c      	b.n	800490c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004a72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a74:	f000 f8ba 	bl	8004bec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004a78:	f000 fbf6 	bl	8005268 <xTaskResumeAll>
 8004a7c:	e746      	b.n	800490c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a80:	f000 f8b4 	bl	8004bec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004a84:	f000 fbf0 	bl	8005268 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a8a:	f000 f901 	bl	8004c90 <prvIsQueueEmpty>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f43f af3b 	beq.w	800490c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <xQueueSemaphoreTake+0x22c>
                    {
                        taskENTER_CRITICAL();
 8004a9c:	f001 fd02 	bl	80064a4 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aa2:	f000 f821 	bl	8004ae8 <prvGetDisinheritPriorityAfterTimeout>
 8004aa6:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	69f9      	ldr	r1, [r7, #28]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 f9f2 	bl	8005e98 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004ab4:	f001 fd26 	bl	8006504 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f003 fb92 	bl	80081e4 <SEGGER_SYSVIEW_ShrinkId>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f003 fb8e 	bl	80081e4 <SEGGER_SYSVIEW_ShrinkId>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2101      	movs	r1, #1
 8004ace:	9100      	str	r1, [sp, #0]
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	205c      	movs	r0, #92	; 0x5c
 8004ad4:	f002 fed0 	bl	8007878 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8004ad8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3734      	adds	r7, #52	; 0x34
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1c3 0307 	rsb	r3, r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e001      	b.n	8004b0a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
    }
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d14d      	bne.n	8004bda <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f928 	bl	8005d98 <xTaskPriorityDisinherit>
 8004b48:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	e043      	b.n	8004bda <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d119      	bne.n	8004b8c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6858      	ldr	r0, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	461a      	mov	r2, r3
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	f003 fd44 	bl	80085f0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d32b      	bcc.n	8004bda <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	e026      	b.n	8004bda <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68d8      	ldr	r0, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	461a      	mov	r2, r3
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	f003 fd2a 	bl	80085f0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	441a      	add	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d207      	bcs.n	8004bc8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	425b      	negs	r3, r3
 8004bc2:	441a      	add	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d105      	bne.n	8004bda <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004be2:	697b      	ldr	r3, [r7, #20]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004bf4:	f001 fc56 	bl	80064a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bfe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c00:	e011      	b.n	8004c26 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d012      	beq.n	8004c30 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fdf0 	bl	80057f4 <xTaskRemoveFromEventList>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004c1a:	f000 ff3f 	bl	8005a9c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	dce9      	bgt.n	8004c02 <prvUnlockQueue+0x16>
 8004c2e:	e000      	b.n	8004c32 <prvUnlockQueue+0x46>
                    break;
 8004c30:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	22ff      	movs	r2, #255	; 0xff
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004c3a:	f001 fc63 	bl	8006504 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004c3e:	f001 fc31 	bl	80064a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c48:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c4a:	e011      	b.n	8004c70 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d012      	beq.n	8004c7a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3310      	adds	r3, #16
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fdcb 	bl	80057f4 <xTaskRemoveFromEventList>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004c64:	f000 ff1a 	bl	8005a9c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004c68:	7bbb      	ldrb	r3, [r7, #14]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dce9      	bgt.n	8004c4c <prvUnlockQueue+0x60>
 8004c78:	e000      	b.n	8004c7c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004c7a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	22ff      	movs	r2, #255	; 0xff
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004c84:	f001 fc3e 	bl	8006504 <vPortExitCritical>
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004c98:	f001 fc04 	bl	80064a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	e001      	b.n	8004cae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004cae:	f001 fc29 	bl	8006504 <vPortExitCritical>

    return xReturn;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004cc4:	f001 fbee 	bl	80064a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d102      	bne.n	8004cda <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e001      	b.n	8004cde <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004cde:	f001 fc11 	bl	8006504 <vPortExitCritical>

    return xReturn;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08e      	sub	sp, #56	; 0x38
 8004cf0:	af04      	add	r7, sp, #16
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xTaskCreateStatic+0x2a>
        __asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	623b      	str	r3, [r7, #32]
    }
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <xTaskCreateStatic+0x46>
        __asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	61fb      	str	r3, [r7, #28]
    }
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8004d32:	23a0      	movs	r3, #160	; 0xa0
 8004d34:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2ba0      	cmp	r3, #160	; 0xa0
 8004d3a:	d00a      	beq.n	8004d52 <xTaskCreateStatic+0x66>
        __asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	61bb      	str	r3, [r7, #24]
    }
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d52:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d023      	beq.n	8004da2 <xTaskCreateStatic+0xb6>
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d020      	beq.n	8004da2 <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004d64:	22a0      	movs	r2, #160	; 0xa0
 8004d66:	2100      	movs	r1, #0
 8004d68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d6a:	f003 fbbd 	bl	80084e8 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9303      	str	r3, [sp, #12]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	9302      	str	r3, [sp, #8]
 8004d84:	f107 0314 	add.w	r3, r7, #20
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f855 	bl	8004e44 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004d9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d9c:	f000 f8ee 	bl	8004f7c <prvAddNewTaskToReadyList>
 8004da0:	e001      	b.n	8004da6 <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8004da6:	697b      	ldr	r3, [r7, #20]
    }
 8004da8:	4618      	mov	r0, r3
 8004daa:	3728      	adds	r7, #40	; 0x28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08c      	sub	sp, #48	; 0x30
 8004db4:	af04      	add	r7, sp, #16
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dc0:	88fb      	ldrh	r3, [r7, #6]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fc99 	bl	80066fc <pvPortMalloc>
 8004dca:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d013      	beq.n	8004dfa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dd2:	20a0      	movs	r0, #160	; 0xa0
 8004dd4:	f001 fc92 	bl	80066fc <pvPortMalloc>
 8004dd8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004de0:	22a0      	movs	r2, #160	; 0xa0
 8004de2:	2100      	movs	r1, #0
 8004de4:	69f8      	ldr	r0, [r7, #28]
 8004de6:	f003 fb7f 	bl	80084e8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
 8004df0:	e005      	b.n	8004dfe <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f001 fd3c 	bl	8006870 <vPortFree>
 8004df8:	e001      	b.n	8004dfe <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9303      	str	r3, [sp, #12]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	9302      	str	r3, [sp, #8]
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f80e 	bl	8004e44 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004e28:	69f8      	ldr	r0, [r7, #28]
 8004e2a:	f000 f8a7 	bl	8004f7c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e002      	b.n	8004e3a <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295
 8004e38:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
    }
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f023 0307 	bic.w	r3, r3, #7
 8004e6a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <prvInitialiseNewTask+0x48>
        __asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	617b      	str	r3, [r7, #20]
    }
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01e      	beq.n	8004ed0 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e012      	b.n	8004ebe <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3334      	adds	r3, #52	; 0x34
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d006      	beq.n	8004ec6 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	2b0f      	cmp	r3, #15
 8004ec2:	d9e9      	bls.n	8004e98 <prvInitialiseNewTask+0x54>
 8004ec4:	e000      	b.n	8004ec8 <prvInitialiseNewTask+0x84>
            {
                break;
 8004ec6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	2b06      	cmp	r3, #6
 8004ed4:	d90a      	bls.n	8004eec <prvInitialiseNewTask+0xa8>
        __asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	613b      	str	r3, [r7, #16]
    }
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d901      	bls.n	8004ef6 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f00:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	3304      	adds	r3, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff f9cb 	bl	80042a2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	3318      	adds	r3, #24
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff f9c6 	bl	80042a2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	f1c3 0207 	rsb	r2, r3, #7
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	334c      	adds	r3, #76	; 0x4c
 8004f30:	224c      	movs	r2, #76	; 0x4c
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f003 fad7 	bl	80084e8 <memset>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	4a0c      	ldr	r2, [pc, #48]	; (8004f70 <prvInitialiseNewTask+0x12c>)
 8004f3e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <prvInitialiseNewTask+0x130>)
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	4a0b      	ldr	r2, [pc, #44]	; (8004f78 <prvInitialiseNewTask+0x134>)
 8004f4a:	659a      	str	r2, [r3, #88]	; 0x58
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	69b8      	ldr	r0, [r7, #24]
 8004f52:	f001 f8f7 	bl	8006144 <pxPortInitialiseStack>
 8004f56:	4602      	mov	r2, r0
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f66:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004f68:	bf00      	nop
 8004f6a:	3720      	adds	r7, #32
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	200048cc 	.word	0x200048cc
 8004f74:	20004934 	.word	0x20004934
 8004f78:	2000499c 	.word	0x2000499c

08004f7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004f7c:	b5b0      	push	{r4, r5, r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004f84:	f001 fa8e 	bl	80064a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004f88:	4b4d      	ldr	r3, [pc, #308]	; (80050c0 <prvAddNewTaskToReadyList+0x144>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	4a4c      	ldr	r2, [pc, #304]	; (80050c0 <prvAddNewTaskToReadyList+0x144>)
 8004f90:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004f92:	4b4c      	ldr	r3, [pc, #304]	; (80050c4 <prvAddNewTaskToReadyList+0x148>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004f9a:	4a4a      	ldr	r2, [pc, #296]	; (80050c4 <prvAddNewTaskToReadyList+0x148>)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fa0:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <prvAddNewTaskToReadyList+0x144>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d110      	bne.n	8004fca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004fa8:	f000 fd9c 	bl	8005ae4 <prvInitialiseTaskLists>
 8004fac:	e00d      	b.n	8004fca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004fae:	4b46      	ldr	r3, [pc, #280]	; (80050c8 <prvAddNewTaskToReadyList+0x14c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fb6:	4b43      	ldr	r3, [pc, #268]	; (80050c4 <prvAddNewTaskToReadyList+0x148>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d802      	bhi.n	8004fca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004fc4:	4a3f      	ldr	r2, [pc, #252]	; (80050c4 <prvAddNewTaskToReadyList+0x148>)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004fca:	4b40      	ldr	r3, [pc, #256]	; (80050cc <prvAddNewTaskToReadyList+0x150>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	4a3e      	ldr	r2, [pc, #248]	; (80050cc <prvAddNewTaskToReadyList+0x150>)
 8004fd2:	6013      	str	r3, [r2, #0]
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <prvAddNewTaskToReadyList+0x8c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f003 f83b 	bl	8008058 <SEGGER_SYSVIEW_OnTaskCreate>
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	461d      	mov	r5, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461c      	mov	r4, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	1ae3      	subs	r3, r4, r3
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	462b      	mov	r3, r5
 8005004:	f001 fdf6 	bl	8006bf4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4618      	mov	r0, r3
 800500c:	f003 f8a8 	bl	8008160 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	2201      	movs	r2, #1
 8005016:	409a      	lsls	r2, r3
 8005018:	4b2d      	ldr	r3, [pc, #180]	; (80050d0 <prvAddNewTaskToReadyList+0x154>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4313      	orrs	r3, r2
 800501e:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <prvAddNewTaskToReadyList+0x154>)
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005026:	492b      	ldr	r1, [pc, #172]	; (80050d4 <prvAddNewTaskToReadyList+0x158>)
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	3304      	adds	r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	609a      	str	r2, [r3, #8]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	3204      	adds	r2, #4
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	1d1a      	adds	r2, r3, #4
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <prvAddNewTaskToReadyList+0x158>)
 8005066:	441a      	add	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	615a      	str	r2, [r3, #20]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005070:	4918      	ldr	r1, [pc, #96]	; (80050d4 <prvAddNewTaskToReadyList+0x158>)
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1c59      	adds	r1, r3, #1
 8005080:	4814      	ldr	r0, [pc, #80]	; (80050d4 <prvAddNewTaskToReadyList+0x158>)
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4403      	add	r3, r0
 800508c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800508e:	f001 fa39 	bl	8006504 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <prvAddNewTaskToReadyList+0x14c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00e      	beq.n	80050b8 <prvAddNewTaskToReadyList+0x13c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <prvAddNewTaskToReadyList+0x148>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d207      	bcs.n	80050b8 <prvAddNewTaskToReadyList+0x13c>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <prvAddNewTaskToReadyList+0x15c>)
 80050aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bdb0      	pop	{r4, r5, r7, pc}
 80050c0:	20000604 	.word	0x20000604
 80050c4:	20000504 	.word	0x20000504
 80050c8:	20000610 	.word	0x20000610
 80050cc:	20000620 	.word	0x20000620
 80050d0:	2000060c 	.word	0x2000060c
 80050d4:	20000508 	.word	0x20000508
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01b      	beq.n	8005126 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <vTaskDelay+0x68>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <vTaskDelay+0x30>
        __asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60bb      	str	r3, [r7, #8]
    }
 8005108:	bf00      	nop
 800510a:	e7fe      	b.n	800510a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800510c:	f000 f89e 	bl	800524c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	2023      	movs	r0, #35	; 0x23
 8005114:	f002 faa4 	bl	8007660 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005118:	2100      	movs	r1, #0
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 ff92 	bl	8006044 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005120:	f000 f8a2 	bl	8005268 <xTaskResumeAll>
 8005124:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d107      	bne.n	800513c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <vTaskDelay+0x6c>)
 800512e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	2000062c 	.word	0x2000062c
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	; 0x28
 8005150:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800515a:	463a      	mov	r2, r7
 800515c:	1d39      	adds	r1, r7, #4
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb fa5a 	bl	800061c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	9202      	str	r2, [sp, #8]
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	2300      	movs	r3, #0
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2300      	movs	r3, #0
 8005178:	460a      	mov	r2, r1
 800517a:	492b      	ldr	r1, [pc, #172]	; (8005228 <vTaskStartScheduler+0xdc>)
 800517c:	482b      	ldr	r0, [pc, #172]	; (800522c <vTaskStartScheduler+0xe0>)
 800517e:	f7ff fdb5 	bl	8004cec <xTaskCreateStatic>
 8005182:	4603      	mov	r3, r0
 8005184:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <vTaskStartScheduler+0xe4>)
 8005186:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8005188:	4b29      	ldr	r3, [pc, #164]	; (8005230 <vTaskStartScheduler+0xe4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8005190:	2301      	movs	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	e001      	b.n	800519a <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d12e      	bne.n	80051fe <vTaskStartScheduler+0xb2>
        __asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	613b      	str	r3, [r7, #16]
    }
 80051b2:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80051b4:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <vTaskStartScheduler+0xe8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	334c      	adds	r3, #76	; 0x4c
 80051ba:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <vTaskStartScheduler+0xec>)
 80051bc:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80051be:	4b1f      	ldr	r3, [pc, #124]	; (800523c <vTaskStartScheduler+0xf0>)
 80051c0:	f04f 32ff 	mov.w	r2, #4294967295
 80051c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80051c6:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <vTaskStartScheduler+0xf4>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051cc:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <vTaskStartScheduler+0xf8>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <vTaskStartScheduler+0xe8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3334      	adds	r3, #52	; 0x34
 80051d8:	2205      	movs	r2, #5
 80051da:	4913      	ldr	r1, [pc, #76]	; (8005228 <vTaskStartScheduler+0xdc>)
 80051dc:	4618      	mov	r0, r3
 80051de:	f003 f973 	bl	80084c8 <memcmp>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <vTaskStartScheduler+0xa8>
 80051e8:	4b12      	ldr	r3, [pc, #72]	; (8005234 <vTaskStartScheduler+0xe8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f002 ff75 	bl	80080dc <SEGGER_SYSVIEW_OnTaskStartExec>
 80051f2:	e001      	b.n	80051f8 <vTaskStartScheduler+0xac>
 80051f4:	f002 ff14 	bl	8008020 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80051f8:	f001 f834 	bl	8006264 <xPortStartScheduler>
 80051fc:	e00e      	b.n	800521c <vTaskStartScheduler+0xd0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d10a      	bne.n	800521c <vTaskStartScheduler+0xd0>
        __asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60fb      	str	r3, [r7, #12]
    }
 8005218:	bf00      	nop
 800521a:	e7fe      	b.n	800521a <vTaskStartScheduler+0xce>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <vTaskStartScheduler+0xfc>)
 800521e:	681b      	ldr	r3, [r3, #0]
}
 8005220:	bf00      	nop
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	08008efc 	.word	0x08008efc
 800522c:	08005ab5 	.word	0x08005ab5
 8005230:	20000628 	.word	0x20000628
 8005234:	20000504 	.word	0x20000504
 8005238:	20000060 	.word	0x20000060
 800523c:	20000624 	.word	0x20000624
 8005240:	20000610 	.word	0x20000610
 8005244:	20000608 	.word	0x20000608
 8005248:	2000000c 	.word	0x2000000c

0800524c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <vTaskSuspendAll+0x18>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3301      	adds	r3, #1
 8005256:	4a03      	ldr	r2, [pc, #12]	; (8005264 <vTaskSuspendAll+0x18>)
 8005258:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800525a:	bf00      	nop
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	2000062c 	.word	0x2000062c

08005268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005276:	4b73      	ldr	r3, [pc, #460]	; (8005444 <xTaskResumeAll+0x1dc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <xTaskResumeAll+0x2c>
        __asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
    }
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005294:	f001 f906 	bl	80064a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005298:	4b6a      	ldr	r3, [pc, #424]	; (8005444 <xTaskResumeAll+0x1dc>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	4a69      	ldr	r2, [pc, #420]	; (8005444 <xTaskResumeAll+0x1dc>)
 80052a0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a2:	4b68      	ldr	r3, [pc, #416]	; (8005444 <xTaskResumeAll+0x1dc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 80c4 	bne.w	8005434 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052ac:	4b66      	ldr	r3, [pc, #408]	; (8005448 <xTaskResumeAll+0x1e0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80bf 	beq.w	8005434 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052b6:	e08e      	b.n	80053d6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b8:	4b64      	ldr	r3, [pc, #400]	; (800544c <xTaskResumeAll+0x1e4>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	6a12      	ldr	r2, [r2, #32]
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	69d2      	ldr	r2, [r2, #28]
 80052d8:	605a      	str	r2, [r3, #4]
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	3318      	adds	r3, #24
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d103      	bne.n	80052ee <xTaskResumeAll+0x86>
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	6a1a      	ldr	r2, [r3, #32]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2200      	movs	r2, #0
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	1e5a      	subs	r2, r3, #1
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	68d2      	ldr	r2, [r2, #12]
 800530c:	609a      	str	r2, [r3, #8]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	6892      	ldr	r2, [r2, #8]
 8005316:	605a      	str	r2, [r3, #4]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	3304      	adds	r3, #4
 8005320:	429a      	cmp	r2, r3
 8005322:	d103      	bne.n	800532c <xTaskResumeAll+0xc4>
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	605a      	str	r2, [r3, #4]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2200      	movs	r2, #0
 8005330:	615a      	str	r2, [r3, #20]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4618      	mov	r0, r3
 8005340:	f002 ff0e 	bl	8008160 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	2201      	movs	r2, #1
 800534a:	409a      	lsls	r2, r3
 800534c:	4b40      	ldr	r3, [pc, #256]	; (8005450 <xTaskResumeAll+0x1e8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4313      	orrs	r3, r2
 8005352:	4a3f      	ldr	r2, [pc, #252]	; (8005450 <xTaskResumeAll+0x1e8>)
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535a:	493e      	ldr	r1, [pc, #248]	; (8005454 <xTaskResumeAll+0x1ec>)
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	3304      	adds	r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	609a      	str	r2, [r3, #8]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	3204      	adds	r2, #4
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4a2e      	ldr	r2, [pc, #184]	; (8005454 <xTaskResumeAll+0x1ec>)
 800539a:	441a      	add	r2, r3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	615a      	str	r2, [r3, #20]
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a4:	492b      	ldr	r1, [pc, #172]	; (8005454 <xTaskResumeAll+0x1ec>)
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	4827      	ldr	r0, [pc, #156]	; (8005454 <xTaskResumeAll+0x1ec>)
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4403      	add	r3, r0
 80053c0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <xTaskResumeAll+0x1f0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d302      	bcc.n	80053d6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80053d0:	4b22      	ldr	r3, [pc, #136]	; (800545c <xTaskResumeAll+0x1f4>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053d6:	4b1d      	ldr	r3, [pc, #116]	; (800544c <xTaskResumeAll+0x1e4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f47f af6c 	bne.w	80052b8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80053e6:	f000 fc23 	bl	8005c30 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053ea:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <xTaskResumeAll+0x1f8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d010      	beq.n	8005418 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80053f6:	f000 f849 	bl	800548c <xTaskIncrementTick>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8005400:	4b16      	ldr	r3, [pc, #88]	; (800545c <xTaskResumeAll+0x1f4>)
 8005402:	2201      	movs	r2, #1
 8005404:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3b01      	subs	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f1      	bne.n	80053f6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8005412:	4b13      	ldr	r3, [pc, #76]	; (8005460 <xTaskResumeAll+0x1f8>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005418:	4b10      	ldr	r3, [pc, #64]	; (800545c <xTaskResumeAll+0x1f4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005420:	2301      	movs	r3, #1
 8005422:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005424:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <xTaskResumeAll+0x1fc>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005434:	f001 f866 	bl	8006504 <vPortExitCritical>

    return xAlreadyYielded;
 8005438:	69bb      	ldr	r3, [r7, #24]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	2000062c 	.word	0x2000062c
 8005448:	20000604 	.word	0x20000604
 800544c:	200005c4 	.word	0x200005c4
 8005450:	2000060c 	.word	0x2000060c
 8005454:	20000508 	.word	0x20000508
 8005458:	20000504 	.word	0x20000504
 800545c:	20000618 	.word	0x20000618
 8005460:	20000614 	.word	0x20000614
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800546e:	f001 f905 	bl	800667c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005476:	4b04      	ldr	r3, [pc, #16]	; (8005488 <xTaskGetTickCountFromISR+0x20>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800547c:	683b      	ldr	r3, [r7, #0]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000608 	.word	0x20000608

0800548c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005492:	2300      	movs	r3, #0
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005496:	4b7f      	ldr	r3, [pc, #508]	; (8005694 <xTaskIncrementTick+0x208>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f040 80f0 	bne.w	8005680 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054a0:	4b7d      	ldr	r3, [pc, #500]	; (8005698 <xTaskIncrementTick+0x20c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80054a8:	4a7b      	ldr	r2, [pc, #492]	; (8005698 <xTaskIncrementTick+0x20c>)
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d120      	bne.n	80054f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80054b4:	4b79      	ldr	r3, [pc, #484]	; (800569c <xTaskIncrementTick+0x210>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	607b      	str	r3, [r7, #4]
    }
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <xTaskIncrementTick+0x46>
 80054d4:	4b71      	ldr	r3, [pc, #452]	; (800569c <xTaskIncrementTick+0x210>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	4b71      	ldr	r3, [pc, #452]	; (80056a0 <xTaskIncrementTick+0x214>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6f      	ldr	r2, [pc, #444]	; (800569c <xTaskIncrementTick+0x210>)
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	4a6f      	ldr	r2, [pc, #444]	; (80056a0 <xTaskIncrementTick+0x214>)
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	4b6e      	ldr	r3, [pc, #440]	; (80056a4 <xTaskIncrementTick+0x218>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	4a6d      	ldr	r2, [pc, #436]	; (80056a4 <xTaskIncrementTick+0x218>)
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	f000 fb9d 	bl	8005c30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80054f6:	4b6c      	ldr	r3, [pc, #432]	; (80056a8 <xTaskIncrementTick+0x21c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	f0c0 80aa 	bcc.w	8005656 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005502:	4b66      	ldr	r3, [pc, #408]	; (800569c <xTaskIncrementTick+0x210>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d104      	bne.n	8005516 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800550c:	4b66      	ldr	r3, [pc, #408]	; (80056a8 <xTaskIncrementTick+0x21c>)
 800550e:	f04f 32ff 	mov.w	r2, #4294967295
 8005512:	601a      	str	r2, [r3, #0]
                    break;
 8005514:	e09f      	b.n	8005656 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005516:	4b61      	ldr	r3, [pc, #388]	; (800569c <xTaskIncrementTick+0x210>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005526:	6a3a      	ldr	r2, [r7, #32]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	429a      	cmp	r2, r3
 800552c:	d203      	bcs.n	8005536 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800552e:	4a5e      	ldr	r2, [pc, #376]	; (80056a8 <xTaskIncrementTick+0x21c>)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005534:	e08f      	b.n	8005656 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	68d2      	ldr	r2, [r2, #12]
 8005544:	609a      	str	r2, [r3, #8]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	6892      	ldr	r2, [r2, #8]
 800554e:	605a      	str	r2, [r3, #4]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	3304      	adds	r3, #4
 8005558:	429a      	cmp	r2, r3
 800555a:	d103      	bne.n	8005564 <xTaskIncrementTick+0xd8>
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	605a      	str	r2, [r3, #4]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2200      	movs	r2, #0
 8005568:	615a      	str	r2, [r3, #20]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	1e5a      	subs	r2, r3, #1
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	6a12      	ldr	r2, [r2, #32]
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	69d2      	ldr	r2, [r2, #28]
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	3318      	adds	r3, #24
 800559e:	429a      	cmp	r2, r3
 80055a0:	d103      	bne.n	80055aa <xTaskIncrementTick+0x11e>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	6a1a      	ldr	r2, [r3, #32]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2200      	movs	r2, #0
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	4618      	mov	r0, r3
 80055be:	f002 fdcf 	bl	8008160 <SEGGER_SYSVIEW_OnTaskStartReady>
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	2201      	movs	r2, #1
 80055c8:	409a      	lsls	r2, r3
 80055ca:	4b38      	ldr	r3, [pc, #224]	; (80056ac <xTaskIncrementTick+0x220>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	4a36      	ldr	r2, [pc, #216]	; (80056ac <xTaskIncrementTick+0x220>)
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d8:	4935      	ldr	r1, [pc, #212]	; (80056b0 <xTaskIncrementTick+0x224>)
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	3304      	adds	r3, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	60da      	str	r2, [r3, #12]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	3204      	adds	r2, #4
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	1d1a      	adds	r2, r3, #4
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	609a      	str	r2, [r3, #8]
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <xTaskIncrementTick+0x224>)
 8005618:	441a      	add	r2, r3
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	615a      	str	r2, [r3, #20]
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005622:	4923      	ldr	r1, [pc, #140]	; (80056b0 <xTaskIncrementTick+0x224>)
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	1c59      	adds	r1, r3, #1
 8005632:	481f      	ldr	r0, [pc, #124]	; (80056b0 <xTaskIncrementTick+0x224>)
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4403      	add	r3, r0
 800563e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <xTaskIncrementTick+0x228>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	429a      	cmp	r2, r3
 800564c:	f67f af59 	bls.w	8005502 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005654:	e755      	b.n	8005502 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005656:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <xTaskIncrementTick+0x228>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4914      	ldr	r1, [pc, #80]	; (80056b0 <xTaskIncrementTick+0x224>)
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d901      	bls.n	8005672 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800566e:	2301      	movs	r3, #1
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005672:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <xTaskIncrementTick+0x22c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800567a:	2301      	movs	r3, #1
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
 800567e:	e004      	b.n	800568a <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <xTaskIncrementTick+0x230>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	4a0d      	ldr	r2, [pc, #52]	; (80056bc <xTaskIncrementTick+0x230>)
 8005688:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800568c:	4618      	mov	r0, r3
 800568e:	3728      	adds	r7, #40	; 0x28
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	2000062c 	.word	0x2000062c
 8005698:	20000608 	.word	0x20000608
 800569c:	200005bc 	.word	0x200005bc
 80056a0:	200005c0 	.word	0x200005c0
 80056a4:	2000061c 	.word	0x2000061c
 80056a8:	20000624 	.word	0x20000624
 80056ac:	2000060c 	.word	0x2000060c
 80056b0:	20000508 	.word	0x20000508
 80056b4:	20000504 	.word	0x20000504
 80056b8:	20000618 	.word	0x20000618
 80056bc:	20000614 	.word	0x20000614

080056c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056c6:	4b32      	ldr	r3, [pc, #200]	; (8005790 <vTaskSwitchContext+0xd0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <vTaskSwitchContext+0xd4>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80056d4:	e057      	b.n	8005786 <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <vTaskSwitchContext+0xd4>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056dc:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <vTaskSwitchContext+0xd8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	fab3 f383 	clz	r3, r3
 80056e8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80056ea:	7afb      	ldrb	r3, [r7, #11]
 80056ec:	f1c3 031f 	rsb	r3, r3, #31
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	492a      	ldr	r1, [pc, #168]	; (800579c <vTaskSwitchContext+0xdc>)
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	607b      	str	r3, [r7, #4]
    }
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <vTaskSwitchContext+0x5a>
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4a1d      	ldr	r2, [pc, #116]	; (800579c <vTaskSwitchContext+0xdc>)
 8005728:	4413      	add	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	605a      	str	r2, [r3, #4]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	3308      	adds	r3, #8
 800573e:	429a      	cmp	r2, r3
 8005740:	d104      	bne.n	800574c <vTaskSwitchContext+0x8c>
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	605a      	str	r2, [r3, #4]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <vTaskSwitchContext+0xe0>)
 8005754:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <vTaskSwitchContext+0xe0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3334      	adds	r3, #52	; 0x34
 800575c:	2205      	movs	r2, #5
 800575e:	4911      	ldr	r1, [pc, #68]	; (80057a4 <vTaskSwitchContext+0xe4>)
 8005760:	4618      	mov	r0, r3
 8005762:	f002 feb1 	bl	80084c8 <memcmp>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <vTaskSwitchContext+0xb8>
 800576c:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <vTaskSwitchContext+0xe0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4618      	mov	r0, r3
 8005772:	f002 fcb3 	bl	80080dc <SEGGER_SYSVIEW_OnTaskStartExec>
 8005776:	e001      	b.n	800577c <vTaskSwitchContext+0xbc>
 8005778:	f002 fc52 	bl	8008020 <SEGGER_SYSVIEW_OnIdle>
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800577c:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <vTaskSwitchContext+0xe0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	334c      	adds	r3, #76	; 0x4c
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <vTaskSwitchContext+0xe8>)
 8005784:	6013      	str	r3, [r2, #0]
}
 8005786:	bf00      	nop
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	2000062c 	.word	0x2000062c
 8005794:	20000618 	.word	0x20000618
 8005798:	2000060c 	.word	0x2000060c
 800579c:	20000508 	.word	0x20000508
 80057a0:	20000504 	.word	0x20000504
 80057a4:	08008efc 	.word	0x08008efc
 80057a8:	20000060 	.word	0x20000060

080057ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	60fb      	str	r3, [r7, #12]
    }
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057d2:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <vTaskPlaceOnEventList+0x44>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3318      	adds	r3, #24
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fe fd92 	bl	8004304 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057e0:	2101      	movs	r1, #1
 80057e2:	6838      	ldr	r0, [r7, #0]
 80057e4:	f000 fc2e 	bl	8006044 <prvAddCurrentTaskToDelayedList>
}
 80057e8:	bf00      	nop
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000504 	.word	0x20000504

080057f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	; 0x28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60fb      	str	r3, [r7, #12]
    }
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	6a3a      	ldr	r2, [r7, #32]
 800582c:	6a12      	ldr	r2, [r2, #32]
 800582e:	609a      	str	r2, [r3, #8]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	69d2      	ldr	r2, [r2, #28]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	3318      	adds	r3, #24
 8005842:	429a      	cmp	r2, r3
 8005844:	d103      	bne.n	800584e <xTaskRemoveFromEventList+0x5a>
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	2200      	movs	r2, #0
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585e:	4b4b      	ldr	r3, [pc, #300]	; (800598c <xTaskRemoveFromEventList+0x198>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d162      	bne.n	800592c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	6a3a      	ldr	r2, [r7, #32]
 8005872:	68d2      	ldr	r2, [r2, #12]
 8005874:	609a      	str	r2, [r3, #8]
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	6a3a      	ldr	r2, [r7, #32]
 800587c:	6892      	ldr	r2, [r2, #8]
 800587e:	605a      	str	r2, [r3, #4]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	3304      	adds	r3, #4
 8005888:	429a      	cmp	r2, r3
 800588a:	d103      	bne.n	8005894 <xTaskRemoveFromEventList+0xa0>
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	2200      	movs	r2, #0
 8005898:	615a      	str	r2, [r3, #20]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f002 fc5a 	bl	8008160 <SEGGER_SYSVIEW_OnTaskStartReady>
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	2201      	movs	r2, #1
 80058b2:	409a      	lsls	r2, r3
 80058b4:	4b36      	ldr	r3, [pc, #216]	; (8005990 <xTaskRemoveFromEventList+0x19c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	4a35      	ldr	r2, [pc, #212]	; (8005990 <xTaskRemoveFromEventList+0x19c>)
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c2:	4934      	ldr	r1, [pc, #208]	; (8005994 <xTaskRemoveFromEventList+0x1a0>)
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	3304      	adds	r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	609a      	str	r2, [r3, #8]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	6a3a      	ldr	r2, [r7, #32]
 80058e8:	3204      	adds	r2, #4
 80058ea:	605a      	str	r2, [r3, #4]
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	1d1a      	adds	r2, r3, #4
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4a24      	ldr	r2, [pc, #144]	; (8005994 <xTaskRemoveFromEventList+0x1a0>)
 8005902:	441a      	add	r2, r3
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	615a      	str	r2, [r3, #20]
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4921      	ldr	r1, [pc, #132]	; (8005994 <xTaskRemoveFromEventList+0x1a0>)
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	1c59      	adds	r1, r3, #1
 800591c:	481d      	ldr	r0, [pc, #116]	; (8005994 <xTaskRemoveFromEventList+0x1a0>)
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4403      	add	r3, r0
 8005928:	6019      	str	r1, [r3, #0]
 800592a:	e01b      	b.n	8005964 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <xTaskRemoveFromEventList+0x1a4>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	61da      	str	r2, [r3, #28]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	621a      	str	r2, [r3, #32]
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	6a3a      	ldr	r2, [r7, #32]
 8005946:	3218      	adds	r2, #24
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	f103 0218 	add.w	r2, r3, #24
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	4a10      	ldr	r2, [pc, #64]	; (8005998 <xTaskRemoveFromEventList+0x1a4>)
 8005958:	629a      	str	r2, [r3, #40]	; 0x28
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <xTaskRemoveFromEventList+0x1a4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3301      	adds	r3, #1
 8005960:	4a0d      	ldr	r2, [pc, #52]	; (8005998 <xTaskRemoveFromEventList+0x1a4>)
 8005962:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <xTaskRemoveFromEventList+0x1a8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	429a      	cmp	r2, r3
 8005970:	d905      	bls.n	800597e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005972:	2301      	movs	r3, #1
 8005974:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005976:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <xTaskRemoveFromEventList+0x1ac>)
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e001      	b.n	8005982 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005984:	4618      	mov	r0, r3
 8005986:	3728      	adds	r7, #40	; 0x28
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	2000062c 	.word	0x2000062c
 8005990:	2000060c 	.word	0x2000060c
 8005994:	20000508 	.word	0x20000508
 8005998:	200005c4 	.word	0x200005c4
 800599c:	20000504 	.word	0x20000504
 80059a0:	20000618 	.word	0x20000618

080059a4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <vTaskInternalSetTimeOutState+0x24>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <vTaskInternalSetTimeOutState+0x28>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	605a      	str	r2, [r3, #4]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	2000061c 	.word	0x2000061c
 80059cc:	20000608 	.word	0x20000608

080059d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	613b      	str	r3, [r7, #16]
    }
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	60fb      	str	r3, [r7, #12]
    }
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005a12:	f000 fd47 	bl	80064a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005a16:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <xTaskCheckForTimeOut+0xc4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d102      	bne.n	8005a36 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e026      	b.n	8005a84 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <xTaskCheckForTimeOut+0xc8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d00a      	beq.n	8005a58 <xTaskCheckForTimeOut+0x88>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d305      	bcc.n	8005a58 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	e015      	b.n	8005a84 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d20b      	bcs.n	8005a7a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	1ad2      	subs	r2, r2, r3
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff ff98 	bl	80059a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	e004      	b.n	8005a84 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005a84:	f000 fd3e 	bl	8006504 <vPortExitCritical>

    return xReturn;
 8005a88:	69fb      	ldr	r3, [r7, #28]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000608 	.word	0x20000608
 8005a98:	2000061c 	.word	0x2000061c

08005a9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005aa0:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <vTaskMissedYield+0x14>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000618 	.word	0x20000618

08005ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005abc:	f000 f852 	bl	8005b64 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <prvIdleTask+0x28>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d9f9      	bls.n	8005abc <prvIdleTask+0x8>
            {
                taskYIELD();
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <prvIdleTask+0x2c>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005ad8:	e7f0      	b.n	8005abc <prvIdleTask+0x8>
 8005ada:	bf00      	nop
 8005adc:	20000508 	.word	0x20000508
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aea:	2300      	movs	r3, #0
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	e00c      	b.n	8005b0a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <prvInitialiseTaskLists+0x60>)
 8005afc:	4413      	add	r3, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fbaf 	bl	8004262 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3301      	adds	r3, #1
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b06      	cmp	r3, #6
 8005b0e:	d9ef      	bls.n	8005af0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005b10:	480d      	ldr	r0, [pc, #52]	; (8005b48 <prvInitialiseTaskLists+0x64>)
 8005b12:	f7fe fba6 	bl	8004262 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005b16:	480d      	ldr	r0, [pc, #52]	; (8005b4c <prvInitialiseTaskLists+0x68>)
 8005b18:	f7fe fba3 	bl	8004262 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005b1c:	480c      	ldr	r0, [pc, #48]	; (8005b50 <prvInitialiseTaskLists+0x6c>)
 8005b1e:	f7fe fba0 	bl	8004262 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005b22:	480c      	ldr	r0, [pc, #48]	; (8005b54 <prvInitialiseTaskLists+0x70>)
 8005b24:	f7fe fb9d 	bl	8004262 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005b28:	480b      	ldr	r0, [pc, #44]	; (8005b58 <prvInitialiseTaskLists+0x74>)
 8005b2a:	f7fe fb9a 	bl	8004262 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <prvInitialiseTaskLists+0x78>)
 8005b30:	4a05      	ldr	r2, [pc, #20]	; (8005b48 <prvInitialiseTaskLists+0x64>)
 8005b32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <prvInitialiseTaskLists+0x7c>)
 8005b36:	4a05      	ldr	r2, [pc, #20]	; (8005b4c <prvInitialiseTaskLists+0x68>)
 8005b38:	601a      	str	r2, [r3, #0]
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000508 	.word	0x20000508
 8005b48:	20000594 	.word	0x20000594
 8005b4c:	200005a8 	.word	0x200005a8
 8005b50:	200005c4 	.word	0x200005c4
 8005b54:	200005d8 	.word	0x200005d8
 8005b58:	200005f0 	.word	0x200005f0
 8005b5c:	200005bc 	.word	0x200005bc
 8005b60:	200005c0 	.word	0x200005c0

08005b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b6a:	e019      	b.n	8005ba0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005b6c:	f000 fc9a 	bl	80064a4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b70:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <prvCheckTasksWaitingTermination+0x50>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fbfa 	bl	8004376 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <prvCheckTasksWaitingTermination+0x54>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <prvCheckTasksWaitingTermination+0x54>)
 8005b8a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <prvCheckTasksWaitingTermination+0x58>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <prvCheckTasksWaitingTermination+0x58>)
 8005b94:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005b96:	f000 fcb5 	bl	8006504 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f810 	bl	8005bc0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba0:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <prvCheckTasksWaitingTermination+0x58>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e1      	bne.n	8005b6c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200005d8 	.word	0x200005d8
 8005bb8:	20000604 	.word	0x20000604
 8005bbc:	200005ec 	.word	0x200005ec

08005bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8005bc8:	4b18      	ldr	r3, [pc, #96]	; (8005c2c <prvDeleteTCB+0x6c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	334c      	adds	r3, #76	; 0x4c
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f002 fc92 	bl	80084f8 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d108      	bne.n	8005bf0 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fe44 	bl	8006870 <vPortFree>
                vPortFree( pxTCB );
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fe41 	bl	8006870 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005bee:	e018      	b.n	8005c22 <prvDeleteTCB+0x62>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d103      	bne.n	8005c02 <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fe38 	bl	8006870 <vPortFree>
    }
 8005c00:	e00f      	b.n	8005c22 <prvDeleteTCB+0x62>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d00a      	beq.n	8005c22 <prvDeleteTCB+0x62>
        __asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60fb      	str	r3, [r7, #12]
    }
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <prvDeleteTCB+0x60>
    }
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000504 	.word	0x20000504

08005c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <prvResetNextTaskUnblockTime+0x30>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <prvResetNextTaskUnblockTime+0x34>)
 8005c40:	f04f 32ff 	mov.w	r2, #4294967295
 8005c44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005c46:	e005      	b.n	8005c54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <prvResetNextTaskUnblockTime+0x30>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <prvResetNextTaskUnblockTime+0x34>)
 8005c52:	6013      	str	r3, [r2, #0]
}
 8005c54:	bf00      	nop
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	200005bc 	.word	0x200005bc
 8005c64:	20000624 	.word	0x20000624

08005c68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <xTaskGetSchedulerState+0x34>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005c76:	2301      	movs	r3, #1
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	e008      	b.n	8005c8e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <xTaskGetSchedulerState+0x38>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005c84:	2302      	movs	r3, #2
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	e001      	b.n	8005c8e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005c8e:	687b      	ldr	r3, [r7, #4]
    }
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	20000610 	.word	0x20000610
 8005ca0:	2000062c 	.word	0x2000062c

08005ca4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d063      	beq.n	8005d82 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	4b33      	ldr	r3, [pc, #204]	; (8005d8c <xTaskPriorityInherit+0xe8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d253      	bcs.n	8005d70 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	db06      	blt.n	8005cde <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd0:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <xTaskPriorityInherit+0xe8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	f1c3 0207 	rsb	r2, r3, #7
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6959      	ldr	r1, [r3, #20]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4a28      	ldr	r2, [pc, #160]	; (8005d90 <xTaskPriorityInherit+0xec>)
 8005cf0:	4413      	add	r3, r2
 8005cf2:	4299      	cmp	r1, r3
 8005cf4:	d12f      	bne.n	8005d56 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe fb3b 	bl	8004376 <uxListRemove>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	43da      	mvns	r2, r3
 8005d12:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <xTaskPriorityInherit+0xf0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4013      	ands	r3, r2
 8005d18:	4a1e      	ldr	r2, [pc, #120]	; (8005d94 <xTaskPriorityInherit+0xf0>)
 8005d1a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <xTaskPriorityInherit+0xe8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	409a      	lsls	r2, r3
 8005d2e:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <xTaskPriorityInherit+0xf0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	4a17      	ldr	r2, [pc, #92]	; (8005d94 <xTaskPriorityInherit+0xf0>)
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <xTaskPriorityInherit+0xec>)
 8005d46:	441a      	add	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7fe fab4 	bl	80042bc <vListInsertEnd>
 8005d54:	e004      	b.n	8005d60 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <xTaskPriorityInherit+0xe8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4619      	mov	r1, r3
 8005d64:	2049      	movs	r0, #73	; 0x49
 8005d66:	f001 fc7b 	bl	8007660 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e008      	b.n	8005d82 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <xTaskPriorityInherit+0xe8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d201      	bcs.n	8005d82 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005d82:	68fb      	ldr	r3, [r7, #12]
    }
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000504 	.word	0x20000504
 8005d90:	20000508 	.word	0x20000508
 8005d94:	2000060c 	.word	0x2000060c

08005d98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d068      	beq.n	8005e80 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005dae:	4b37      	ldr	r3, [pc, #220]	; (8005e8c <xTaskPriorityDisinherit+0xf4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d00a      	beq.n	8005dce <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	60fb      	str	r3, [r7, #12]
    }
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10a      	bne.n	8005dec <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	60bb      	str	r3, [r7, #8]
    }
 8005de8:	bf00      	nop
 8005dea:	e7fe      	b.n	8005dea <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df0:	1e5a      	subs	r2, r3, #1
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d03e      	beq.n	8005e80 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d13a      	bne.n	8005e80 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe fab1 	bl	8004376 <uxListRemove>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	2201      	movs	r2, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	43da      	mvns	r2, r3
 8005e26:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <xTaskPriorityDisinherit+0xf8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <xTaskPriorityDisinherit+0xf8>)
 8005e2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4619      	mov	r1, r3
 8005e34:	204a      	movs	r0, #74	; 0x4a
 8005e36:	f001 fc13 	bl	8007660 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	f1c3 0207 	rsb	r2, r3, #7
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	2201      	movs	r2, #1
 8005e54:	409a      	lsls	r2, r3
 8005e56:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <xTaskPriorityDisinherit+0xf8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	4a0c      	ldr	r2, [pc, #48]	; (8005e90 <xTaskPriorityDisinherit+0xf8>)
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <xTaskPriorityDisinherit+0xfc>)
 8005e6e:	441a      	add	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f7fe fa20 	bl	80042bc <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005e80:	697b      	ldr	r3, [r7, #20]
    }
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000504 	.word	0x20000504
 8005e90:	2000060c 	.word	0x2000060c
 8005e94:	20000508 	.word	0x20000508

08005e98 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	; 0x28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80ab 	beq.w	8006008 <vTaskPriorityDisinheritAfterTimeout+0x170>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	613b      	str	r3, [r7, #16]
    }
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d902      	bls.n	8005ee0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ede:	e002      	b.n	8005ee6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eec:	429a      	cmp	r2, r3
 8005eee:	f000 808b 	beq.w	8006008 <vTaskPriorityDisinheritAfterTimeout+0x170>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	f040 8085 	bne.w	8006008 <vTaskPriorityDisinheritAfterTimeout+0x170>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005efe:	4b44      	ldr	r3, [pc, #272]	; (8006010 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d10a      	bne.n	8005f1e <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	60fb      	str	r3, [r7, #12]
    }
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4619      	mov	r1, r3
 8005f22:	204a      	movs	r0, #74	; 0x4a
 8005f24:	f001 fb9c 	bl	8007660 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f32:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	db04      	blt.n	8005f46 <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	f1c3 0207 	rsb	r2, r3, #7
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	6959      	ldr	r1, [r3, #20]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4a2f      	ldr	r2, [pc, #188]	; (8006014 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005f56:	4413      	add	r3, r2
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	d155      	bne.n	8006008 <vTaskPriorityDisinheritAfterTimeout+0x170>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fa08 	bl	8004376 <uxListRemove>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	2201      	movs	r2, #1
 8005f72:	fa02 f303 	lsl.w	r3, r2, r3
 8005f76:	43da      	mvns	r2, r3
 8005f78:	4b27      	ldr	r3, [pc, #156]	; (8006018 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	4a26      	ldr	r2, [pc, #152]	; (8006018 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8005f80:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f002 f8eb 	bl	8008160 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	2201      	movs	r2, #1
 8005f90:	409a      	lsls	r2, r3
 8005f92:	4b21      	ldr	r3, [pc, #132]	; (8006018 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	4a1f      	ldr	r2, [pc, #124]	; (8006018 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa0:	491c      	ldr	r1, [pc, #112]	; (8006014 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3304      	adds	r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	60da      	str	r2, [r3, #12]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	6a3a      	ldr	r2, [r7, #32]
 8005fc6:	3204      	adds	r2, #4
 8005fc8:	605a      	str	r2, [r3, #4]
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	1d1a      	adds	r2, r3, #4
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	609a      	str	r2, [r3, #8]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4a0d      	ldr	r2, [pc, #52]	; (8006014 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005fe0:	441a      	add	r2, r3
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	615a      	str	r2, [r3, #20]
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fea:	490a      	ldr	r1, [pc, #40]	; (8006014 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c59      	adds	r1, r3, #1
 8005ffa:	4806      	ldr	r0, [pc, #24]	; (8006014 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4403      	add	r3, r0
 8006006:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006008:	bf00      	nop
 800600a:	3728      	adds	r7, #40	; 0x28
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000504 	.word	0x20000504
 8006014:	20000508 	.word	0x20000508
 8006018:	2000060c 	.word	0x2000060c

0800601c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <pvTaskIncrementMutexHeldCount+0x24>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <pvTaskIncrementMutexHeldCount+0x24>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800602e:	3201      	adds	r2, #1
 8006030:	649a      	str	r2, [r3, #72]	; 0x48
        }

        return pxCurrentTCB;
 8006032:	4b03      	ldr	r3, [pc, #12]	; (8006040 <pvTaskIncrementMutexHeldCount+0x24>)
 8006034:	681b      	ldr	r3, [r3, #0]
    }
 8006036:	4618      	mov	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	20000504 	.word	0x20000504

08006044 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800604e:	4b36      	ldr	r3, [pc, #216]	; (8006128 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006054:	4b35      	ldr	r3, [pc, #212]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe f98b 	bl	8004376 <uxListRemove>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006066:	4b31      	ldr	r3, [pc, #196]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	2201      	movs	r2, #1
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43da      	mvns	r2, r3
 8006074:	4b2e      	ldr	r3, [pc, #184]	; (8006130 <prvAddCurrentTaskToDelayedList+0xec>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4013      	ands	r3, r2
 800607a:	4a2d      	ldr	r2, [pc, #180]	; (8006130 <prvAddCurrentTaskToDelayedList+0xec>)
 800607c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d124      	bne.n	80060d0 <prvAddCurrentTaskToDelayedList+0x8c>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d021      	beq.n	80060d0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608c:	4b29      	ldr	r3, [pc, #164]	; (8006134 <prvAddCurrentTaskToDelayedList+0xf0>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	4b26      	ldr	r3, [pc, #152]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	609a      	str	r2, [r3, #8]
 800609a:	4b24      	ldr	r3, [pc, #144]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	6892      	ldr	r2, [r2, #8]
 80060a2:	60da      	str	r2, [r3, #12]
 80060a4:	4b21      	ldr	r3, [pc, #132]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	3204      	adds	r2, #4
 80060ae:	605a      	str	r2, [r3, #4]
 80060b0:	4b1e      	ldr	r3, [pc, #120]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	1d1a      	adds	r2, r3, #4
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	609a      	str	r2, [r3, #8]
 80060ba:	4b1c      	ldr	r3, [pc, #112]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1d      	ldr	r2, [pc, #116]	; (8006134 <prvAddCurrentTaskToDelayedList+0xf0>)
 80060c0:	615a      	str	r2, [r3, #20]
 80060c2:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <prvAddCurrentTaskToDelayedList+0xf0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3301      	adds	r3, #1
 80060c8:	4a1a      	ldr	r2, [pc, #104]	; (8006134 <prvAddCurrentTaskToDelayedList+0xf0>)
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80060ce:	e026      	b.n	800611e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4413      	add	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060d8:	4b14      	ldr	r3, [pc, #80]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d209      	bcs.n	80060fc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e8:	4b13      	ldr	r3, [pc, #76]	; (8006138 <prvAddCurrentTaskToDelayedList+0xf4>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b0f      	ldr	r3, [pc, #60]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3304      	adds	r3, #4
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f7fe f905 	bl	8004304 <vListInsert>
}
 80060fa:	e010      	b.n	800611e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060fc:	4b0f      	ldr	r3, [pc, #60]	; (800613c <prvAddCurrentTaskToDelayedList+0xf8>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3304      	adds	r3, #4
 8006106:	4619      	mov	r1, r3
 8006108:	4610      	mov	r0, r2
 800610a:	f7fe f8fb 	bl	8004304 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800610e:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	429a      	cmp	r2, r3
 8006116:	d202      	bcs.n	800611e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006118:	4a09      	ldr	r2, [pc, #36]	; (8006140 <prvAddCurrentTaskToDelayedList+0xfc>)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6013      	str	r3, [r2, #0]
}
 800611e:	bf00      	nop
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000608 	.word	0x20000608
 800612c:	20000504 	.word	0x20000504
 8006130:	2000060c 	.word	0x2000060c
 8006134:	200005f0 	.word	0x200005f0
 8006138:	200005c0 	.word	0x200005c0
 800613c:	200005bc 	.word	0x200005bc
 8006140:	20000624 	.word	0x20000624

08006144 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3b04      	subs	r3, #4
 8006154:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800615c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3b04      	subs	r3, #4
 8006162:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f023 0201 	bic.w	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3b04      	subs	r3, #4
 8006172:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006174:	4a0c      	ldr	r2, [pc, #48]	; (80061a8 <pxPortInitialiseStack+0x64>)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3b14      	subs	r3, #20
 800617e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3b04      	subs	r3, #4
 800618a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f06f 0202 	mvn.w	r2, #2
 8006192:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3b20      	subs	r3, #32
 8006198:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800619a:	68fb      	ldr	r3, [r7, #12]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	080061ad 	.word	0x080061ad

080061ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <prvTaskExitError+0x54>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d00a      	beq.n	80061d6 <prvTaskExitError+0x2a>
        __asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	60fb      	str	r3, [r7, #12]
    }
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <prvTaskExitError+0x28>
        __asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60bb      	str	r3, [r7, #8]
    }
 80061e8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80061ea:	bf00      	nop
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0fc      	beq.n	80061ec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000010 	.word	0x20000010
	...

08006210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006210:	4b07      	ldr	r3, [pc, #28]	; (8006230 <pxCurrentTCBConst2>)
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	6808      	ldr	r0, [r1, #0]
 8006216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621a:	f380 8809 	msr	PSP, r0
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f04f 0000 	mov.w	r0, #0
 8006226:	f380 8811 	msr	BASEPRI, r0
 800622a:	4770      	bx	lr
 800622c:	f3af 8000 	nop.w

08006230 <pxCurrentTCBConst2>:
 8006230:	20000504 	.word	0x20000504
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop

08006238 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006238:	4808      	ldr	r0, [pc, #32]	; (800625c <prvPortStartFirstTask+0x24>)
 800623a:	6800      	ldr	r0, [r0, #0]
 800623c:	6800      	ldr	r0, [r0, #0]
 800623e:	f380 8808 	msr	MSP, r0
 8006242:	f04f 0000 	mov.w	r0, #0
 8006246:	f380 8814 	msr	CONTROL, r0
 800624a:	b662      	cpsie	i
 800624c:	b661      	cpsie	f
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	df00      	svc	0
 8006258:	bf00      	nop
 800625a:	0000      	.short	0x0000
 800625c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop

08006264 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800626a:	4b46      	ldr	r3, [pc, #280]	; (8006384 <xPortStartScheduler+0x120>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a46      	ldr	r2, [pc, #280]	; (8006388 <xPortStartScheduler+0x124>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10a      	bne.n	800628a <xPortStartScheduler+0x26>
        __asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	613b      	str	r3, [r7, #16]
    }
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800628a:	4b3e      	ldr	r3, [pc, #248]	; (8006384 <xPortStartScheduler+0x120>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a3f      	ldr	r2, [pc, #252]	; (800638c <xPortStartScheduler+0x128>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d10a      	bne.n	80062aa <xPortStartScheduler+0x46>
        __asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	60fb      	str	r3, [r7, #12]
    }
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062aa:	4b39      	ldr	r3, [pc, #228]	; (8006390 <xPortStartScheduler+0x12c>)
 80062ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	22ff      	movs	r2, #255	; 0xff
 80062ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	4b31      	ldr	r3, [pc, #196]	; (8006394 <xPortStartScheduler+0x130>)
 80062d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062d2:	4b31      	ldr	r3, [pc, #196]	; (8006398 <xPortStartScheduler+0x134>)
 80062d4:	2207      	movs	r2, #7
 80062d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062d8:	e009      	b.n	80062ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80062da:	4b2f      	ldr	r3, [pc, #188]	; (8006398 <xPortStartScheduler+0x134>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3b01      	subs	r3, #1
 80062e0:	4a2d      	ldr	r2, [pc, #180]	; (8006398 <xPortStartScheduler+0x134>)
 80062e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062e4:	78fb      	ldrb	r3, [r7, #3]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f6:	2b80      	cmp	r3, #128	; 0x80
 80062f8:	d0ef      	beq.n	80062da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062fa:	4b27      	ldr	r3, [pc, #156]	; (8006398 <xPortStartScheduler+0x134>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f1c3 0307 	rsb	r3, r3, #7
 8006302:	2b04      	cmp	r3, #4
 8006304:	d00a      	beq.n	800631c <xPortStartScheduler+0xb8>
        __asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60bb      	str	r3, [r7, #8]
    }
 8006318:	bf00      	nop
 800631a:	e7fe      	b.n	800631a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800631c:	4b1e      	ldr	r3, [pc, #120]	; (8006398 <xPortStartScheduler+0x134>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <xPortStartScheduler+0x134>)
 8006324:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006326:	4b1c      	ldr	r3, [pc, #112]	; (8006398 <xPortStartScheduler+0x134>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800632e:	4a1a      	ldr	r2, [pc, #104]	; (8006398 <xPortStartScheduler+0x134>)
 8006330:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	b2da      	uxtb	r2, r3
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800633a:	4b18      	ldr	r3, [pc, #96]	; (800639c <xPortStartScheduler+0x138>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a17      	ldr	r2, [pc, #92]	; (800639c <xPortStartScheduler+0x138>)
 8006340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006344:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006346:	4b15      	ldr	r3, [pc, #84]	; (800639c <xPortStartScheduler+0x138>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a14      	ldr	r2, [pc, #80]	; (800639c <xPortStartScheduler+0x138>)
 800634c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006350:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006352:	f000 f963 	bl	800661c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006356:	4b12      	ldr	r3, [pc, #72]	; (80063a0 <xPortStartScheduler+0x13c>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800635c:	f000 f982 	bl	8006664 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006360:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <xPortStartScheduler+0x140>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a0f      	ldr	r2, [pc, #60]	; (80063a4 <xPortStartScheduler+0x140>)
 8006366:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800636a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800636c:	f7ff ff64 	bl	8006238 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006370:	f7ff f9a6 	bl	80056c0 <vTaskSwitchContext>
    prvTaskExitError();
 8006374:	f7ff ff1a 	bl	80061ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	e000ed00 	.word	0xe000ed00
 8006388:	410fc271 	.word	0x410fc271
 800638c:	410fc270 	.word	0x410fc270
 8006390:	e000e400 	.word	0xe000e400
 8006394:	20000630 	.word	0x20000630
 8006398:	20000634 	.word	0x20000634
 800639c:	e000ed20 	.word	0xe000ed20
 80063a0:	20000010 	.word	0x20000010
 80063a4:	e000ef34 	.word	0xe000ef34

080063a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063ae:	4b37      	ldr	r3, [pc, #220]	; (800648c <vInitPrioGroupValue+0xe4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a37      	ldr	r2, [pc, #220]	; (8006490 <vInitPrioGroupValue+0xe8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d10a      	bne.n	80063ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	613b      	str	r3, [r7, #16]
    }
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063ce:	4b2f      	ldr	r3, [pc, #188]	; (800648c <vInitPrioGroupValue+0xe4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a30      	ldr	r2, [pc, #192]	; (8006494 <vInitPrioGroupValue+0xec>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d10a      	bne.n	80063ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	60fb      	str	r3, [r7, #12]
    }
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063ee:	4b2a      	ldr	r3, [pc, #168]	; (8006498 <vInitPrioGroupValue+0xf0>)
 80063f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	22ff      	movs	r2, #255	; 0xff
 80063fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006410:	b2da      	uxtb	r2, r3
 8006412:	4b22      	ldr	r3, [pc, #136]	; (800649c <vInitPrioGroupValue+0xf4>)
 8006414:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006416:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <vInitPrioGroupValue+0xf8>)
 8006418:	2207      	movs	r2, #7
 800641a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800641c:	e009      	b.n	8006432 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800641e:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <vInitPrioGroupValue+0xf8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3b01      	subs	r3, #1
 8006424:	4a1e      	ldr	r2, [pc, #120]	; (80064a0 <vInitPrioGroupValue+0xf8>)
 8006426:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	b2db      	uxtb	r3, r3
 8006430:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d0ef      	beq.n	800641e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800643e:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <vInitPrioGroupValue+0xf8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1c3 0307 	rsb	r3, r3, #7
 8006446:	2b04      	cmp	r3, #4
 8006448:	d00a      	beq.n	8006460 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60bb      	str	r3, [r7, #8]
    }
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <vInitPrioGroupValue+0xf8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	4a0e      	ldr	r2, [pc, #56]	; (80064a0 <vInitPrioGroupValue+0xf8>)
 8006468:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800646a:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <vInitPrioGroupValue+0xf8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006472:	4a0b      	ldr	r2, [pc, #44]	; (80064a0 <vInitPrioGroupValue+0xf8>)
 8006474:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	b2da      	uxtb	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	e000ed00 	.word	0xe000ed00
 8006490:	410fc271 	.word	0x410fc271
 8006494:	410fc270 	.word	0x410fc270
 8006498:	e000e400 	.word	0xe000e400
 800649c:	20000630 	.word	0x20000630
 80064a0:	20000634 	.word	0x20000634

080064a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
        __asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	607b      	str	r3, [r7, #4]
    }
 80064bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80064be:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <vPortEnterCritical+0x58>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a0d      	ldr	r2, [pc, #52]	; (80064fc <vPortEnterCritical+0x58>)
 80064c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <vPortEnterCritical+0x58>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d10f      	bne.n	80064f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <vPortEnterCritical+0x5c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	603b      	str	r3, [r7, #0]
    }
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <vPortEnterCritical+0x4a>
    }
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	20000010 	.word	0x20000010
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800650a:	4b12      	ldr	r3, [pc, #72]	; (8006554 <vPortExitCritical+0x50>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10a      	bne.n	8006528 <vPortExitCritical+0x24>
        __asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	607b      	str	r3, [r7, #4]
    }
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <vPortExitCritical+0x50>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3b01      	subs	r3, #1
 800652e:	4a09      	ldr	r2, [pc, #36]	; (8006554 <vPortExitCritical+0x50>)
 8006530:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <vPortExitCritical+0x50>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d105      	bne.n	8006546 <vPortExitCritical+0x42>
 800653a:	2300      	movs	r3, #0
 800653c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006544:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000010 	.word	0x20000010
	...

08006560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006560:	f3ef 8009 	mrs	r0, PSP
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <pxCurrentTCBConst>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	f01e 0f10 	tst.w	lr, #16
 8006570:	bf08      	it	eq
 8006572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657a:	6010      	str	r0, [r2, #0]
 800657c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006584:	f380 8811 	msr	BASEPRI, r0
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f7ff f896 	bl	80056c0 <vTaskSwitchContext>
 8006594:	f04f 0000 	mov.w	r0, #0
 8006598:	f380 8811 	msr	BASEPRI, r0
 800659c:	bc09      	pop	{r0, r3}
 800659e:	6819      	ldr	r1, [r3, #0]
 80065a0:	6808      	ldr	r0, [r1, #0]
 80065a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a6:	f01e 0f10 	tst.w	lr, #16
 80065aa:	bf08      	it	eq
 80065ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065b0:	f380 8809 	msr	PSP, r0
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	f3af 8000 	nop.w

080065c0 <pxCurrentTCBConst>:
 80065c0:	20000504 	.word	0x20000504
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop

080065c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
        __asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
    }
 80065e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80065e2:	f001 fca3 	bl	8007f2c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80065e6:	f7fe ff51 	bl	800548c <xTaskIncrementTick>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d006      	beq.n	80065fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80065f0:	f001 fcfa 	bl	8007fe8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065f4:	4b08      	ldr	r3, [pc, #32]	; (8006618 <SysTick_Handler+0x50>)
 80065f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	e001      	b.n	8006602 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80065fe:	f001 fcd7 	bl	8007fb0 <SEGGER_SYSVIEW_RecordExitISR>
 8006602:	2300      	movs	r3, #0
 8006604:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	f383 8811 	msr	BASEPRI, r3
    }
 800660c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <vPortSetupTimerInterrupt+0x34>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006626:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <vPortSetupTimerInterrupt+0x38>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800662c:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <vPortSetupTimerInterrupt+0x3c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a0a      	ldr	r2, [pc, #40]	; (800665c <vPortSetupTimerInterrupt+0x40>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	099b      	lsrs	r3, r3, #6
 8006638:	4a09      	ldr	r2, [pc, #36]	; (8006660 <vPortSetupTimerInterrupt+0x44>)
 800663a:	3b01      	subs	r3, #1
 800663c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800663e:	4b04      	ldr	r3, [pc, #16]	; (8006650 <vPortSetupTimerInterrupt+0x34>)
 8006640:	2207      	movs	r2, #7
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	e000e010 	.word	0xe000e010
 8006654:	e000e018 	.word	0xe000e018
 8006658:	20000000 	.word	0x20000000
 800665c:	10624dd3 	.word	0x10624dd3
 8006660:	e000e014 	.word	0xe000e014

08006664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006674 <vPortEnableVFP+0x10>
 8006668:	6801      	ldr	r1, [r0, #0]
 800666a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800666e:	6001      	str	r1, [r0, #0]
 8006670:	4770      	bx	lr
 8006672:	0000      	.short	0x0000
 8006674:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop

0800667c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006682:	f3ef 8305 	mrs	r3, IPSR
 8006686:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b0f      	cmp	r3, #15
 800668c:	d914      	bls.n	80066b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800668e:	4a17      	ldr	r2, [pc, #92]	; (80066ec <vPortValidateInterruptPriority+0x70>)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006698:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <vPortValidateInterruptPriority+0x74>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	7afa      	ldrb	r2, [r7, #11]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d20a      	bcs.n	80066b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	607b      	str	r3, [r7, #4]
    }
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066b8:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <vPortValidateInterruptPriority+0x78>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066c0:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <vPortValidateInterruptPriority+0x7c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d90a      	bls.n	80066de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	603b      	str	r3, [r7, #0]
    }
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <vPortValidateInterruptPriority+0x60>
    }
 80066de:	bf00      	nop
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	e000e3f0 	.word	0xe000e3f0
 80066f0:	20000630 	.word	0x20000630
 80066f4:	e000ed0c 	.word	0xe000ed0c
 80066f8:	20000634 	.word	0x20000634

080066fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	; 0x28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006704:	2300      	movs	r3, #0
 8006706:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006708:	f7fe fda0 	bl	800524c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800670c:	4b53      	ldr	r3, [pc, #332]	; (800685c <pvPortMalloc+0x160>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006714:	f000 f908 	bl	8006928 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d012      	beq.n	8006744 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800671e:	2208      	movs	r2, #8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	3308      	adds	r3, #8
 800672a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	43db      	mvns	r3, r3
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d804      	bhi.n	8006740 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	4413      	add	r3, r2
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	e001      	b.n	8006744 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	db70      	blt.n	800682c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d06d      	beq.n	800682c <pvPortMalloc+0x130>
 8006750:	4b43      	ldr	r3, [pc, #268]	; (8006860 <pvPortMalloc+0x164>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d868      	bhi.n	800682c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800675a:	4b42      	ldr	r3, [pc, #264]	; (8006864 <pvPortMalloc+0x168>)
 800675c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800675e:	4b41      	ldr	r3, [pc, #260]	; (8006864 <pvPortMalloc+0x168>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006764:	e004      	b.n	8006770 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	429a      	cmp	r2, r3
 8006778:	d903      	bls.n	8006782 <pvPortMalloc+0x86>
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f1      	bne.n	8006766 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006782:	4b36      	ldr	r3, [pc, #216]	; (800685c <pvPortMalloc+0x160>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006788:	429a      	cmp	r2, r3
 800678a:	d04f      	beq.n	800682c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	4413      	add	r3, r2
 8006794:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	2308      	movs	r3, #8
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d91f      	bls.n	80067ee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4413      	add	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <pvPortMalloc+0xda>
        __asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	613b      	str	r3, [r7, #16]
    }
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	1ad2      	subs	r2, r2, r3
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067e8:	6978      	ldr	r0, [r7, #20]
 80067ea:	f000 f8f9 	bl	80069e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067ee:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <pvPortMalloc+0x164>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	4a19      	ldr	r2, [pc, #100]	; (8006860 <pvPortMalloc+0x164>)
 80067fa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067fc:	4b18      	ldr	r3, [pc, #96]	; (8006860 <pvPortMalloc+0x164>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b19      	ldr	r3, [pc, #100]	; (8006868 <pvPortMalloc+0x16c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d203      	bcs.n	8006810 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006808:	4b15      	ldr	r3, [pc, #84]	; (8006860 <pvPortMalloc+0x164>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a16      	ldr	r2, [pc, #88]	; (8006868 <pvPortMalloc+0x16c>)
 800680e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <pvPortMalloc+0x170>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3301      	adds	r3, #1
 8006828:	4a10      	ldr	r2, [pc, #64]	; (800686c <pvPortMalloc+0x170>)
 800682a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800682c:	f7fe fd1c 	bl	8005268 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <pvPortMalloc+0x154>
        __asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
    }
 800684c:	bf00      	nop
 800684e:	e7fe      	b.n	800684e <pvPortMalloc+0x152>
    return pvReturn;
 8006850:	69fb      	ldr	r3, [r7, #28]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3728      	adds	r7, #40	; 0x28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20002e40 	.word	0x20002e40
 8006860:	20002e44 	.word	0x20002e44
 8006864:	20002e38 	.word	0x20002e38
 8006868:	20002e48 	.word	0x20002e48
 800686c:	20002e4c 	.word	0x20002e4c

08006870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d049      	beq.n	8006916 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006882:	2308      	movs	r3, #8
 8006884:	425b      	negs	r3, r3
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4413      	add	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	db0a      	blt.n	80068ae <vPortFree+0x3e>
        __asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
    }
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <vPortFree+0x5c>
        __asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60bb      	str	r3, [r7, #8]
    }
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	0fdb      	lsrs	r3, r3, #31
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01c      	beq.n	8006916 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d118      	bne.n	8006916 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80068f0:	f7fe fcac 	bl	800524c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <vPortFree+0xb0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4413      	add	r3, r2
 80068fe:	4a08      	ldr	r2, [pc, #32]	; (8006920 <vPortFree+0xb0>)
 8006900:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006902:	6938      	ldr	r0, [r7, #16]
 8006904:	f000 f86c 	bl	80069e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <vPortFree+0xb4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	4a05      	ldr	r2, [pc, #20]	; (8006924 <vPortFree+0xb4>)
 8006910:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006912:	f7fe fca9 	bl	8005268 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006916:	bf00      	nop
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20002e44 	.word	0x20002e44
 8006924:	20002e50 	.word	0x20002e50

08006928 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800692e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006932:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006934:	4b25      	ldr	r3, [pc, #148]	; (80069cc <prvHeapInit+0xa4>)
 8006936:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3307      	adds	r3, #7
 8006946:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	4a1d      	ldr	r2, [pc, #116]	; (80069cc <prvHeapInit+0xa4>)
 8006958:	4413      	add	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006960:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <prvHeapInit+0xa8>)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006966:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <prvHeapInit+0xa8>)
 8006968:	2200      	movs	r2, #0
 800696a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4413      	add	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006974:	2208      	movs	r2, #8
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0307 	bic.w	r3, r3, #7
 8006982:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4a13      	ldr	r2, [pc, #76]	; (80069d4 <prvHeapInit+0xac>)
 8006988:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800698a:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <prvHeapInit+0xac>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006992:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <prvHeapInit+0xac>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	1ad2      	subs	r2, r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <prvHeapInit+0xac>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <prvHeapInit+0xb0>)
 80069b6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4a07      	ldr	r2, [pc, #28]	; (80069dc <prvHeapInit+0xb4>)
 80069be:	6013      	str	r3, [r2, #0]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	20000638 	.word	0x20000638
 80069d0:	20002e38 	.word	0x20002e38
 80069d4:	20002e40 	.word	0x20002e40
 80069d8:	20002e48 	.word	0x20002e48
 80069dc:	20002e44 	.word	0x20002e44

080069e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069e8:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <prvInsertBlockIntoFreeList+0xac>)
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	e002      	b.n	80069f4 <prvInsertBlockIntoFreeList+0x14>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d8f7      	bhi.n	80069ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	4413      	add	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d108      	bne.n	8006a22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	441a      	add	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	441a      	add	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d118      	bne.n	8006a68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <prvInsertBlockIntoFreeList+0xb0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d00d      	beq.n	8006a5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	441a      	add	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	e008      	b.n	8006a70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <prvInsertBlockIntoFreeList+0xb0>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e003      	b.n	8006a70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d002      	beq.n	8006a7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20002e38 	.word	0x20002e38
 8006a90:	20002e40 	.word	0x20002e40

08006a94 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006a98:	4803      	ldr	r0, [pc, #12]	; (8006aa8 <_cbSendSystemDesc+0x14>)
 8006a9a:	f001 f9f1 	bl	8007e80 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006a9e:	4803      	ldr	r0, [pc, #12]	; (8006aac <_cbSendSystemDesc+0x18>)
 8006aa0:	f001 f9ee 	bl	8007e80 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006aa4:	bf00      	nop
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	08008f04 	.word	0x08008f04
 8006aac:	08008f40 	.word	0x08008f40

08006ab0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <SEGGER_SYSVIEW_Conf+0x20>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <SEGGER_SYSVIEW_Conf+0x20>)
 8006aba:	6819      	ldr	r1, [r3, #0]
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <SEGGER_SYSVIEW_Conf+0x24>)
 8006abe:	4a06      	ldr	r2, [pc, #24]	; (8006ad8 <SEGGER_SYSVIEW_Conf+0x28>)
 8006ac0:	f000 fd5c 	bl	800757c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006ac4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006ac8:	f000 fd9c 	bl	8007604 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006acc:	bf00      	nop
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20000000 	.word	0x20000000
 8006ad4:	08006a95 	.word	0x08006a95
 8006ad8:	0800900c 	.word	0x0800900c

08006adc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	607b      	str	r3, [r7, #4]
 8006ae6:	e033      	b.n	8006b50 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006ae8:	491e      	ldr	r1, [pc, #120]	; (8006b64 <_cbSendTaskList+0x88>)
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	491a      	ldr	r1, [pc, #104]	; (8006b64 <_cbSendTaskList+0x88>)
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	3304      	adds	r3, #4
 8006b08:	6819      	ldr	r1, [r3, #0]
 8006b0a:	4c16      	ldr	r4, [pc, #88]	; (8006b64 <_cbSendTaskList+0x88>)
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4423      	add	r3, r4
 8006b18:	3308      	adds	r3, #8
 8006b1a:	681c      	ldr	r4, [r3, #0]
 8006b1c:	4d11      	ldr	r5, [pc, #68]	; (8006b64 <_cbSendTaskList+0x88>)
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	442b      	add	r3, r5
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	681d      	ldr	r5, [r3, #0]
 8006b2e:	4e0d      	ldr	r6, [pc, #52]	; (8006b64 <_cbSendTaskList+0x88>)
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4433      	add	r3, r6
 8006b3c:	3310      	adds	r3, #16
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	462b      	mov	r3, r5
 8006b44:	4622      	mov	r2, r4
 8006b46:	f000 f8bd 	bl	8006cc4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	607b      	str	r3, [r7, #4]
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <_cbSendTaskList+0x8c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d3c6      	bcc.n	8006ae8 <_cbSendTaskList+0xc>
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b64:	20002e54 	.word	0x20002e54
 8006b68:	20002ef4 	.word	0x20002ef4

08006b6c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006b74:	f7fe fc78 	bl	8005468 <xTaskGetTickCountFromISR>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	469a      	mov	sl, r3
 8006b7e:	4693      	mov	fp, r2
 8006b80:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	f04f 0a00 	mov.w	sl, #0
 8006b90:	f04f 0b00 	mov.w	fp, #0
 8006b94:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006b98:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006b9c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006ba0:	4652      	mov	r2, sl
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	1a14      	subs	r4, r2, r0
 8006ba6:	eb63 0501 	sbc.w	r5, r3, r1
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	00ab      	lsls	r3, r5, #2
 8006bb4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006bb8:	00a2      	lsls	r2, r4, #2
 8006bba:	4614      	mov	r4, r2
 8006bbc:	461d      	mov	r5, r3
 8006bbe:	eb14 0800 	adds.w	r8, r4, r0
 8006bc2:	eb45 0901 	adc.w	r9, r5, r1
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bda:	4690      	mov	r8, r2
 8006bdc:	4699      	mov	r9, r3
 8006bde:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006be2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006be6:	4610      	mov	r0, r2
 8006be8:	4619      	mov	r1, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006bf4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006c02:	2205      	movs	r2, #5
 8006c04:	492b      	ldr	r1, [pc, #172]	; (8006cb4 <SYSVIEW_AddTask+0xc0>)
 8006c06:	68b8      	ldr	r0, [r7, #8]
 8006c08:	f001 fc5e 	bl	80084c8 <memcmp>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d04b      	beq.n	8006caa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006c12:	4b29      	ldr	r3, [pc, #164]	; (8006cb8 <SYSVIEW_AddTask+0xc4>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b07      	cmp	r3, #7
 8006c18:	d903      	bls.n	8006c22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006c1a:	4828      	ldr	r0, [pc, #160]	; (8006cbc <SYSVIEW_AddTask+0xc8>)
 8006c1c:	f001 fbd8 	bl	80083d0 <SEGGER_SYSVIEW_Warn>
    return;
 8006c20:	e044      	b.n	8006cac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006c22:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <SYSVIEW_AddTask+0xc4>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4926      	ldr	r1, [pc, #152]	; (8006cc0 <SYSVIEW_AddTask+0xcc>)
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006c36:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <SYSVIEW_AddTask+0xc4>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4921      	ldr	r1, [pc, #132]	; (8006cc0 <SYSVIEW_AddTask+0xcc>)
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	3304      	adds	r3, #4
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006c4c:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <SYSVIEW_AddTask+0xc4>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	491b      	ldr	r1, [pc, #108]	; (8006cc0 <SYSVIEW_AddTask+0xcc>)
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006c62:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <SYSVIEW_AddTask+0xc4>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4916      	ldr	r1, [pc, #88]	; (8006cc0 <SYSVIEW_AddTask+0xcc>)
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	330c      	adds	r3, #12
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006c78:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <SYSVIEW_AddTask+0xc4>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	4910      	ldr	r1, [pc, #64]	; (8006cc0 <SYSVIEW_AddTask+0xcc>)
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	3310      	adds	r3, #16
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <SYSVIEW_AddTask+0xc4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a08      	ldr	r2, [pc, #32]	; (8006cb8 <SYSVIEW_AddTask+0xc4>)
 8006c96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f80e 	bl	8006cc4 <SYSVIEW_SendTaskInfo>
 8006ca8:	e000      	b.n	8006cac <SYSVIEW_AddTask+0xb8>
    return;
 8006caa:	bf00      	nop

}
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	08008f50 	.word	0x08008f50
 8006cb8:	20002ef4 	.word	0x20002ef4
 8006cbc:	08008f58 	.word	0x08008f58
 8006cc0:	20002e54 	.word	0x20002e54

08006cc4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08a      	sub	sp, #40	; 0x28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006cd2:	f107 0314 	add.w	r3, r7, #20
 8006cd6:	2214      	movs	r2, #20
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fc04 	bl	80084e8 <memset>
  TaskInfo.TaskID     = TaskID;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006cf4:	f107 0314 	add.w	r3, r7, #20
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 ffc9 	bl	8007c90 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006cfe:	bf00      	nop
 8006d00:	3728      	adds	r7, #40	; 0x28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006d0e:	4b26      	ldr	r3, [pc, #152]	; (8006da8 <_DoInit+0xa0>)
 8006d10:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8006d12:	22a8      	movs	r2, #168	; 0xa8
 8006d14:	2100      	movs	r1, #0
 8006d16:	6838      	ldr	r0, [r7, #0]
 8006d18:	f001 fbe6 	bl	80084e8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2203      	movs	r2, #3
 8006d26:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	4a20      	ldr	r2, [pc, #128]	; (8006dac <_DoInit+0xa4>)
 8006d2c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	4a1f      	ldr	r2, [pc, #124]	; (8006db0 <_DoInit+0xa8>)
 8006d32:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d3a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2200      	movs	r2, #0
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	4a16      	ldr	r2, [pc, #88]	; (8006dac <_DoInit+0xa4>)
 8006d52:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <_DoInit+0xac>)
 8006d58:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2210      	movs	r2, #16
 8006d5e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006d72:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006d76:	2300      	movs	r3, #0
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	e00c      	b.n	8006d96 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f1c3 030f 	rsb	r3, r3, #15
 8006d82:	4a0d      	ldr	r2, [pc, #52]	; (8006db8 <_DoInit+0xb0>)
 8006d84:	5cd1      	ldrb	r1, [r2, r3]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3301      	adds	r3, #1
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b0f      	cmp	r3, #15
 8006d9a:	d9ef      	bls.n	8006d7c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006d9c:	f3bf 8f5f 	dmb	sy
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20002ef8 	.word	0x20002ef8
 8006dac:	08008fa8 	.word	0x08008fa8
 8006db0:	20002fa0 	.word	0x20002fa0
 8006db4:	200033a0 	.word	0x200033a0
 8006db8:	08009014 	.word	0x08009014

08006dbc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08c      	sub	sp, #48	; 0x30
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006dc8:	4b3e      	ldr	r3, [pc, #248]	; (8006ec4 <SEGGER_RTT_ReadNoLock+0x108>)
 8006dca:	623b      	str	r3, [r7, #32]
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b53      	cmp	r3, #83	; 0x53
 8006dd4:	d001      	beq.n	8006dda <SEGGER_RTT_ReadNoLock+0x1e>
 8006dd6:	f7ff ff97 	bl	8006d08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	4413      	add	r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	3360      	adds	r3, #96	; 0x60
 8006de6:	4a37      	ldr	r2, [pc, #220]	; (8006ec4 <SEGGER_RTT_ReadNoLock+0x108>)
 8006de8:	4413      	add	r3, r2
 8006dea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d92b      	bls.n	8006e60 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4293      	cmp	r3, r2
 8006e18:	bf28      	it	cs
 8006e1a:	4613      	movcs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	4413      	add	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	6939      	ldr	r1, [r7, #16]
 8006e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e2e:	f001 fbdf 	bl	80085f0 <memcpy>
    NumBytesRead += NumBytesRem;
 8006e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	4413      	add	r3, r2
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	4413      	add	r3, r2
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	4413      	add	r3, r2
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d101      	bne.n	8006e60 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	bf28      	it	cs
 8006e70:	4613      	movcs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d019      	beq.n	8006eae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	4413      	add	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	6939      	ldr	r1, [r7, #16]
 8006e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e8a:	f001 fbb1 	bl	80085f0 <memcpy>
    NumBytesRead += NumBytesRem;
 8006e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	4413      	add	r3, r2
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	4413      	add	r3, r2
 8006eac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3730      	adds	r7, #48	; 0x30
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20002ef8 	.word	0x20002ef8

08006ec8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	; (8006fcc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b53      	cmp	r3, #83	; 0x53
 8006ee2:	d001      	beq.n	8006ee8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006ee4:	f7ff ff10 	bl	8006d08 <_DoInit>
  SEGGER_RTT_LOCK();
 8006ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8006eec:	f04f 0120 	mov.w	r1, #32
 8006ef0:	f381 8811 	msr	BASEPRI, r1
 8006ef4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006ef6:	4b35      	ldr	r3, [pc, #212]	; (8006fcc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006ef8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006efe:	6939      	ldr	r1, [r7, #16]
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	4613      	mov	r3, r2
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4413      	add	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	440b      	add	r3, r1
 8006f0e:	3304      	adds	r3, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	dbeb      	blt.n	8006efe <SEGGER_RTT_AllocUpBuffer+0x36>
 8006f26:	e000      	b.n	8006f2a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006f28:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	da3f      	bge.n	8006fb4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006f34:	6939      	ldr	r1, [r7, #16]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	4413      	add	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	440b      	add	r3, r1
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006f48:	6939      	ldr	r1, [r7, #16]
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	4613      	mov	r3, r2
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4413      	add	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	440b      	add	r3, r1
 8006f58:	3304      	adds	r3, #4
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006f5e:	6939      	ldr	r1, [r7, #16]
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	4613      	mov	r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	440b      	add	r3, r1
 8006f6c:	3320      	adds	r3, #32
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006f72:	6939      	ldr	r1, [r7, #16]
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	4613      	mov	r3, r2
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	4413      	add	r3, r2
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	440b      	add	r3, r1
 8006f80:	3328      	adds	r3, #40	; 0x28
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006f86:	6939      	ldr	r1, [r7, #16]
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	440b      	add	r3, r1
 8006f94:	3324      	adds	r3, #36	; 0x24
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006f9a:	6939      	ldr	r1, [r7, #16]
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	4413      	add	r3, r2
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	440b      	add	r3, r1
 8006fa8:	332c      	adds	r3, #44	; 0x2c
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006fae:	f3bf 8f5f 	dmb	sy
 8006fb2:	e002      	b.n	8006fba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20002ef8 	.word	0x20002ef8

08006fd0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	; 0x28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8006fde:	4b21      	ldr	r3, [pc, #132]	; (8007064 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006fe0:	623b      	str	r3, [r7, #32]
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b53      	cmp	r3, #83	; 0x53
 8006fea:	d001      	beq.n	8006ff0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006fec:	f7ff fe8c 	bl	8006d08 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006ff0:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006ff2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d82c      	bhi.n	8007054 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8006ffe:	f04f 0120 	mov.w	r1, #32
 8007002:	f381 8811 	msr	BASEPRI, r1
 8007006:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4613      	mov	r3, r2
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	4413      	add	r3, r2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	3360      	adds	r3, #96	; 0x60
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	4413      	add	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00e      	beq.n	800703e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2200      	movs	r2, #0
 8007036:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2200      	movs	r2, #0
 800703c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007042:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007044:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800704e:	2300      	movs	r3, #0
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
 8007052:	e002      	b.n	800705a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8007054:	f04f 33ff 	mov.w	r3, #4294967295
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800705c:	4618      	mov	r0, r3
 800705e:	3728      	adds	r7, #40	; 0x28
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20002ef8 	.word	0x20002ef8

08007068 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	60fa      	str	r2, [r7, #12]
 800707e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d90a      	bls.n	800709c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8007086:	2380      	movs	r3, #128	; 0x80
 8007088:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800708a:	e007      	b.n	800709c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	1c53      	adds	r3, r2, #1
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1c59      	adds	r1, r3, #1
 8007096:	60f9      	str	r1, [r7, #12]
 8007098:	7812      	ldrb	r2, [r2, #0]
 800709a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	1e5a      	subs	r2, r3, #1
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <_EncodeStr+0x46>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1ee      	bne.n	800708c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80070ba:	68fb      	ldr	r3, [r7, #12]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3307      	adds	r3, #7
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80070e6:	4b34      	ldr	r3, [pc, #208]	; (80071b8 <_HandleIncomingPacket+0xd8>)
 80070e8:	7e1b      	ldrb	r3, [r3, #24]
 80070ea:	4618      	mov	r0, r3
 80070ec:	1cfb      	adds	r3, r7, #3
 80070ee:	2201      	movs	r2, #1
 80070f0:	4619      	mov	r1, r3
 80070f2:	f7ff fe63 	bl	8006dbc <SEGGER_RTT_ReadNoLock>
 80070f6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d057      	beq.n	80071ae <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	2b80      	cmp	r3, #128	; 0x80
 8007102:	d031      	beq.n	8007168 <_HandleIncomingPacket+0x88>
 8007104:	2b80      	cmp	r3, #128	; 0x80
 8007106:	dc40      	bgt.n	800718a <_HandleIncomingPacket+0xaa>
 8007108:	2b07      	cmp	r3, #7
 800710a:	dc15      	bgt.n	8007138 <_HandleIncomingPacket+0x58>
 800710c:	2b00      	cmp	r3, #0
 800710e:	dd3c      	ble.n	800718a <_HandleIncomingPacket+0xaa>
 8007110:	3b01      	subs	r3, #1
 8007112:	2b06      	cmp	r3, #6
 8007114:	d839      	bhi.n	800718a <_HandleIncomingPacket+0xaa>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <_HandleIncomingPacket+0x3c>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	0800713f 	.word	0x0800713f
 8007120:	08007145 	.word	0x08007145
 8007124:	0800714b 	.word	0x0800714b
 8007128:	08007151 	.word	0x08007151
 800712c:	08007157 	.word	0x08007157
 8007130:	0800715d 	.word	0x0800715d
 8007134:	08007163 	.word	0x08007163
 8007138:	2b7f      	cmp	r3, #127	; 0x7f
 800713a:	d033      	beq.n	80071a4 <_HandleIncomingPacket+0xc4>
 800713c:	e025      	b.n	800718a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800713e:	f000 fc2d 	bl	800799c <SEGGER_SYSVIEW_Start>
      break;
 8007142:	e034      	b.n	80071ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007144:	f000 fce4 	bl	8007b10 <SEGGER_SYSVIEW_Stop>
      break;
 8007148:	e031      	b.n	80071ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800714a:	f000 febd 	bl	8007ec8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800714e:	e02e      	b.n	80071ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007150:	f000 fe82 	bl	8007e58 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007154:	e02b      	b.n	80071ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007156:	f000 fd01 	bl	8007b5c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800715a:	e028      	b.n	80071ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800715c:	f001 f8fa 	bl	8008354 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007160:	e025      	b.n	80071ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007162:	f001 f8d9 	bl	8008318 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007166:	e022      	b.n	80071ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007168:	4b13      	ldr	r3, [pc, #76]	; (80071b8 <_HandleIncomingPacket+0xd8>)
 800716a:	7e1b      	ldrb	r3, [r3, #24]
 800716c:	4618      	mov	r0, r3
 800716e:	1cfb      	adds	r3, r7, #3
 8007170:	2201      	movs	r2, #1
 8007172:	4619      	mov	r1, r3
 8007174:	f7ff fe22 	bl	8006dbc <SEGGER_RTT_ReadNoLock>
 8007178:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d013      	beq.n	80071a8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	4618      	mov	r0, r3
 8007184:	f001 f83e 	bl	8008204 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007188:	e00e      	b.n	80071a8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	b25b      	sxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	da0c      	bge.n	80071ac <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <_HandleIncomingPacket+0xd8>)
 8007194:	7e1b      	ldrb	r3, [r3, #24]
 8007196:	4618      	mov	r0, r3
 8007198:	1cfb      	adds	r3, r7, #3
 800719a:	2201      	movs	r2, #1
 800719c:	4619      	mov	r1, r3
 800719e:	f7ff fe0d 	bl	8006dbc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80071a2:	e003      	b.n	80071ac <_HandleIncomingPacket+0xcc>
      break;
 80071a4:	bf00      	nop
 80071a6:	e002      	b.n	80071ae <_HandleIncomingPacket+0xce>
      break;
 80071a8:	bf00      	nop
 80071aa:	e000      	b.n	80071ae <_HandleIncomingPacket+0xce>
      break;
 80071ac:	bf00      	nop
    }
  }
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200047b8 	.word	0x200047b8

080071bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08c      	sub	sp, #48	; 0x30
 80071c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80071c2:	2301      	movs	r3, #1
 80071c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80071c6:	1d3b      	adds	r3, r7, #4
 80071c8:	3301      	adds	r3, #1
 80071ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071d0:	4b31      	ldr	r3, [pc, #196]	; (8007298 <_TrySendOverflowPacket+0xdc>)
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d6:	e00b      	b.n	80071f0 <_TrySendOverflowPacket+0x34>
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80071e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	09db      	lsrs	r3, r3, #7
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	2b7f      	cmp	r3, #127	; 0x7f
 80071f4:	d8f0      	bhi.n	80071d8 <_TrySendOverflowPacket+0x1c>
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007206:	4b25      	ldr	r3, [pc, #148]	; (800729c <_TrySendOverflowPacket+0xe0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800720c:	4b22      	ldr	r3, [pc, #136]	; (8007298 <_TrySendOverflowPacket+0xdc>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	623b      	str	r3, [r7, #32]
 800721e:	e00b      	b.n	8007238 <_TrySendOverflowPacket+0x7c>
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	b2da      	uxtb	r2, r3
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	1c59      	adds	r1, r3, #1
 8007228:	6279      	str	r1, [r7, #36]	; 0x24
 800722a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	701a      	strb	r2, [r3, #0]
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	09db      	lsrs	r3, r3, #7
 8007236:	623b      	str	r3, [r7, #32]
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	2b7f      	cmp	r3, #127	; 0x7f
 800723c:	d8f0      	bhi.n	8007220 <_TrySendOverflowPacket+0x64>
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	627a      	str	r2, [r7, #36]	; 0x24
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800724e:	4b12      	ldr	r3, [pc, #72]	; (8007298 <_TrySendOverflowPacket+0xdc>)
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	4618      	mov	r0, r3
 8007254:	1d3b      	adds	r3, r7, #4
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	461a      	mov	r2, r3
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	4619      	mov	r1, r3
 8007260:	f7f8 ffb6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007264:	4603      	mov	r3, r0
 8007266:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d009      	beq.n	8007282 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800726e:	4a0a      	ldr	r2, [pc, #40]	; (8007298 <_TrySendOverflowPacket+0xdc>)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007274:	4b08      	ldr	r3, [pc, #32]	; (8007298 <_TrySendOverflowPacket+0xdc>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	3b01      	subs	r3, #1
 800727a:	b2da      	uxtb	r2, r3
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <_TrySendOverflowPacket+0xdc>)
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	e004      	b.n	800728c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007282:	4b05      	ldr	r3, [pc, #20]	; (8007298 <_TrySendOverflowPacket+0xdc>)
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	3301      	adds	r3, #1
 8007288:	4a03      	ldr	r2, [pc, #12]	; (8007298 <_TrySendOverflowPacket+0xdc>)
 800728a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800728c:	693b      	ldr	r3, [r7, #16]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3730      	adds	r7, #48	; 0x30
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	200047b8 	.word	0x200047b8
 800729c:	e0001004 	.word	0xe0001004

080072a0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08a      	sub	sp, #40	; 0x28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80072ac:	4b98      	ldr	r3, [pc, #608]	; (8007510 <_SendPacket+0x270>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d010      	beq.n	80072d6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80072b4:	4b96      	ldr	r3, [pc, #600]	; (8007510 <_SendPacket+0x270>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 812d 	beq.w	8007518 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80072be:	4b94      	ldr	r3, [pc, #592]	; (8007510 <_SendPacket+0x270>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d109      	bne.n	80072da <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80072c6:	f7ff ff79 	bl	80071bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80072ca:	4b91      	ldr	r3, [pc, #580]	; (8007510 <_SendPacket+0x270>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	f040 8124 	bne.w	800751c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80072d4:	e001      	b.n	80072da <_SendPacket+0x3a>
    goto Send;
 80072d6:	bf00      	nop
 80072d8:	e000      	b.n	80072dc <_SendPacket+0x3c>
Send:
 80072da:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b1f      	cmp	r3, #31
 80072e0:	d809      	bhi.n	80072f6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80072e2:	4b8b      	ldr	r3, [pc, #556]	; (8007510 <_SendPacket+0x270>)
 80072e4:	69da      	ldr	r2, [r3, #28]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 8115 	bne.w	8007520 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b17      	cmp	r3, #23
 80072fa:	d807      	bhi.n	800730c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3b01      	subs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	b2da      	uxtb	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	e0c4      	b.n	8007496 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	2b7f      	cmp	r3, #127	; 0x7f
 8007318:	d912      	bls.n	8007340 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	09da      	lsrs	r2, r3, #7
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3b01      	subs	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	3a01      	subs	r2, #1
 8007332:	60fa      	str	r2, [r7, #12]
 8007334:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007338:	b2da      	uxtb	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e006      	b.n	800734e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3b01      	subs	r3, #1
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b7e      	cmp	r3, #126	; 0x7e
 8007352:	d807      	bhi.n	8007364 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3b01      	subs	r3, #1
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	b2da      	uxtb	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	e098      	b.n	8007496 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800736a:	d212      	bcs.n	8007392 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	09da      	lsrs	r2, r3, #7
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3b01      	subs	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	3a01      	subs	r2, #1
 8007384:	60fa      	str	r2, [r7, #12]
 8007386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800738a:	b2da      	uxtb	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e081      	b.n	8007496 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007398:	d21d      	bcs.n	80073d6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	0b9a      	lsrs	r2, r3, #14
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	b2d2      	uxtb	r2, r2
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	09db      	lsrs	r3, r3, #7
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	3a01      	subs	r2, #1
 80073b4:	60fa      	str	r2, [r7, #12]
 80073b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	3a01      	subs	r2, #1
 80073c8:	60fa      	str	r2, [r7, #12]
 80073ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	e05f      	b.n	8007496 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073dc:	d228      	bcs.n	8007430 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	0d5a      	lsrs	r2, r3, #21
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	0b9b      	lsrs	r3, r3, #14
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	3a01      	subs	r2, #1
 80073f8:	60fa      	str	r2, [r7, #12]
 80073fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	09db      	lsrs	r3, r3, #7
 8007408:	b2db      	uxtb	r3, r3
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	3a01      	subs	r2, #1
 800740e:	60fa      	str	r2, [r7, #12]
 8007410:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007414:	b2da      	uxtb	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	3a01      	subs	r2, #1
 8007422:	60fa      	str	r2, [r7, #12]
 8007424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007428:	b2da      	uxtb	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e032      	b.n	8007496 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	0f1a      	lsrs	r2, r3, #28
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3b01      	subs	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	0d5b      	lsrs	r3, r3, #21
 8007444:	b2db      	uxtb	r3, r3
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	3a01      	subs	r2, #1
 800744a:	60fa      	str	r2, [r7, #12]
 800744c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007450:	b2da      	uxtb	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	0b9b      	lsrs	r3, r3, #14
 800745a:	b2db      	uxtb	r3, r3
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	3a01      	subs	r2, #1
 8007460:	60fa      	str	r2, [r7, #12]
 8007462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007466:	b2da      	uxtb	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	09db      	lsrs	r3, r3, #7
 8007470:	b2db      	uxtb	r3, r3
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	3a01      	subs	r2, #1
 8007476:	60fa      	str	r2, [r7, #12]
 8007478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800747c:	b2da      	uxtb	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	3a01      	subs	r2, #1
 800748a:	60fa      	str	r2, [r7, #12]
 800748c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007490:	b2da      	uxtb	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007496:	4b1f      	ldr	r3, [pc, #124]	; (8007514 <_SendPacket+0x274>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800749c:	4b1c      	ldr	r3, [pc, #112]	; (8007510 <_SendPacket+0x270>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	623b      	str	r3, [r7, #32]
 80074ae:	e00b      	b.n	80074c8 <_SendPacket+0x228>
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	1c59      	adds	r1, r3, #1
 80074b8:	6279      	str	r1, [r7, #36]	; 0x24
 80074ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	09db      	lsrs	r3, r3, #7
 80074c6:	623b      	str	r3, [r7, #32]
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	2b7f      	cmp	r3, #127	; 0x7f
 80074cc:	d8f0      	bhi.n	80074b0 <_SendPacket+0x210>
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	627a      	str	r2, [r7, #36]	; 0x24
 80074d4:	6a3a      	ldr	r2, [r7, #32]
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80074de:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <_SendPacket+0x270>)
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	4618      	mov	r0, r3
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	68f9      	ldr	r1, [r7, #12]
 80074ee:	f7f8 fe6f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80074f2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80074fa:	4a05      	ldr	r2, [pc, #20]	; (8007510 <_SendPacket+0x270>)
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	60d3      	str	r3, [r2, #12]
 8007500:	e00f      	b.n	8007522 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007502:	4b03      	ldr	r3, [pc, #12]	; (8007510 <_SendPacket+0x270>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	b2da      	uxtb	r2, r3
 800750a:	4b01      	ldr	r3, [pc, #4]	; (8007510 <_SendPacket+0x270>)
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	e008      	b.n	8007522 <_SendPacket+0x282>
 8007510:	200047b8 	.word	0x200047b8
 8007514:	e0001004 	.word	0xe0001004
    goto SendDone;
 8007518:	bf00      	nop
 800751a:	e002      	b.n	8007522 <_SendPacket+0x282>
      goto SendDone;
 800751c:	bf00      	nop
 800751e:	e000      	b.n	8007522 <_SendPacket+0x282>
      goto SendDone;
 8007520:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007522:	4b14      	ldr	r3, [pc, #80]	; (8007574 <_SendPacket+0x2d4>)
 8007524:	7e1b      	ldrb	r3, [r3, #24]
 8007526:	4619      	mov	r1, r3
 8007528:	4a13      	ldr	r2, [pc, #76]	; (8007578 <_SendPacket+0x2d8>)
 800752a:	460b      	mov	r3, r1
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	440b      	add	r3, r1
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	4413      	add	r3, r2
 8007534:	336c      	adds	r3, #108	; 0x6c
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <_SendPacket+0x2d4>)
 800753a:	7e1b      	ldrb	r3, [r3, #24]
 800753c:	4618      	mov	r0, r3
 800753e:	490e      	ldr	r1, [pc, #56]	; (8007578 <_SendPacket+0x2d8>)
 8007540:	4603      	mov	r3, r0
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	4403      	add	r3, r0
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	440b      	add	r3, r1
 800754a:	3370      	adds	r3, #112	; 0x70
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d00b      	beq.n	800756a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007552:	4b08      	ldr	r3, [pc, #32]	; (8007574 <_SendPacket+0x2d4>)
 8007554:	789b      	ldrb	r3, [r3, #2]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d107      	bne.n	800756a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800755a:	4b06      	ldr	r3, [pc, #24]	; (8007574 <_SendPacket+0x2d4>)
 800755c:	2201      	movs	r2, #1
 800755e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007560:	f7ff fdbe 	bl	80070e0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007564:	4b03      	ldr	r3, [pc, #12]	; (8007574 <_SendPacket+0x2d4>)
 8007566:	2200      	movs	r2, #0
 8007568:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800756a:	bf00      	nop
 800756c:	3728      	adds	r7, #40	; 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	200047b8 	.word	0x200047b8
 8007578:	20002ef8 	.word	0x20002ef8

0800757c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af02      	add	r7, sp, #8
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800758a:	2300      	movs	r3, #0
 800758c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007590:	4917      	ldr	r1, [pc, #92]	; (80075f0 <SEGGER_SYSVIEW_Init+0x74>)
 8007592:	4818      	ldr	r0, [pc, #96]	; (80075f4 <SEGGER_SYSVIEW_Init+0x78>)
 8007594:	f7ff fc98 	bl	8006ec8 <SEGGER_RTT_AllocUpBuffer>
 8007598:	4603      	mov	r3, r0
 800759a:	b2da      	uxtb	r2, r3
 800759c:	4b16      	ldr	r3, [pc, #88]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 800759e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80075a0:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075a2:	785a      	ldrb	r2, [r3, #1]
 80075a4:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075a6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80075a8:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075aa:	7e1b      	ldrb	r3, [r3, #24]
 80075ac:	4618      	mov	r0, r3
 80075ae:	2300      	movs	r3, #0
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	2308      	movs	r3, #8
 80075b4:	4a11      	ldr	r2, [pc, #68]	; (80075fc <SEGGER_SYSVIEW_Init+0x80>)
 80075b6:	490f      	ldr	r1, [pc, #60]	; (80075f4 <SEGGER_SYSVIEW_Init+0x78>)
 80075b8:	f7ff fd0a 	bl	8006fd0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80075bc:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075be:	2200      	movs	r2, #0
 80075c0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80075c2:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <SEGGER_SYSVIEW_Init+0x84>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075c8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80075ca:	4a0b      	ldr	r2, [pc, #44]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80075d0:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80075d6:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80075dc:	4a06      	ldr	r2, [pc, #24]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80075e2:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80075e8:	bf00      	nop
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	200033b0 	.word	0x200033b0
 80075f4:	08008fbc 	.word	0x08008fbc
 80075f8:	200047b8 	.word	0x200047b8
 80075fc:	200047b0 	.word	0x200047b0
 8007600:	e0001004 	.word	0xe0001004

08007604 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800760c:	4a04      	ldr	r2, [pc, #16]	; (8007620 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6113      	str	r3, [r2, #16]
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	200047b8 	.word	0x200047b8

08007624 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800762c:	f3ef 8311 	mrs	r3, BASEPRI
 8007630:	f04f 0120 	mov.w	r1, #32
 8007634:	f381 8811 	msr	BASEPRI, r1
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	4808      	ldr	r0, [pc, #32]	; (800765c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800763c:	f7ff fd44 	bl	80070c8 <_PreparePacket>
 8007640:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	68b8      	ldr	r0, [r7, #8]
 8007648:	f7ff fe2a 	bl	80072a0 <_SendPacket>
  RECORD_END();
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f383 8811 	msr	BASEPRI, r3
}
 8007652:	bf00      	nop
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	200047e8 	.word	0x200047e8

08007660 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800766a:	f3ef 8311 	mrs	r3, BASEPRI
 800766e:	f04f 0120 	mov.w	r1, #32
 8007672:	f381 8811 	msr	BASEPRI, r1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	4816      	ldr	r0, [pc, #88]	; (80076d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800767a:	f7ff fd25 	bl	80070c8 <_PreparePacket>
 800767e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	e00b      	b.n	80076a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	1c59      	adds	r1, r3, #1
 8007696:	61f9      	str	r1, [r7, #28]
 8007698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	09db      	lsrs	r3, r3, #7
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b7f      	cmp	r3, #127	; 0x7f
 80076aa:	d8f0      	bhi.n	800768e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	61fa      	str	r2, [r7, #28]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	6938      	ldr	r0, [r7, #16]
 80076c2:	f7ff fded 	bl	80072a0 <_SendPacket>
  RECORD_END();
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f383 8811 	msr	BASEPRI, r3
}
 80076cc:	bf00      	nop
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	200047e8 	.word	0x200047e8

080076d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08c      	sub	sp, #48	; 0x30
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80076e4:	f3ef 8311 	mrs	r3, BASEPRI
 80076e8:	f04f 0120 	mov.w	r1, #32
 80076ec:	f381 8811 	msr	BASEPRI, r1
 80076f0:	61fb      	str	r3, [r7, #28]
 80076f2:	4825      	ldr	r0, [pc, #148]	; (8007788 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80076f4:	f7ff fce8 	bl	80070c8 <_PreparePacket>
 80076f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
 8007706:	e00b      	b.n	8007720 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	b2da      	uxtb	r2, r3
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770e:	1c59      	adds	r1, r3, #1
 8007710:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	09db      	lsrs	r3, r3, #7
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	2b7f      	cmp	r3, #127	; 0x7f
 8007724:	d8f0      	bhi.n	8007708 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800772c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	623b      	str	r3, [r7, #32]
 800773e:	e00b      	b.n	8007758 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	b2da      	uxtb	r2, r3
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	1c59      	adds	r1, r3, #1
 8007748:	6279      	str	r1, [r7, #36]	; 0x24
 800774a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	09db      	lsrs	r3, r3, #7
 8007756:	623b      	str	r3, [r7, #32]
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	2b7f      	cmp	r3, #127	; 0x7f
 800775c:	d8f0      	bhi.n	8007740 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	627a      	str	r2, [r7, #36]	; 0x24
 8007764:	6a3a      	ldr	r2, [r7, #32]
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	6979      	ldr	r1, [r7, #20]
 8007772:	69b8      	ldr	r0, [r7, #24]
 8007774:	f7ff fd94 	bl	80072a0 <_SendPacket>
  RECORD_END();
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	f383 8811 	msr	BASEPRI, r3
}
 800777e:	bf00      	nop
 8007780:	3730      	adds	r7, #48	; 0x30
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200047e8 	.word	0x200047e8

0800778c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800778c:	b580      	push	{r7, lr}
 800778e:	b08e      	sub	sp, #56	; 0x38
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800779a:	f3ef 8311 	mrs	r3, BASEPRI
 800779e:	f04f 0120 	mov.w	r1, #32
 80077a2:	f381 8811 	msr	BASEPRI, r1
 80077a6:	61fb      	str	r3, [r7, #28]
 80077a8:	4832      	ldr	r0, [pc, #200]	; (8007874 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80077aa:	f7ff fc8d 	bl	80070c8 <_PreparePacket>
 80077ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	637b      	str	r3, [r7, #52]	; 0x34
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	633b      	str	r3, [r7, #48]	; 0x30
 80077bc:	e00b      	b.n	80077d6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c4:	1c59      	adds	r1, r3, #1
 80077c6:	6379      	str	r1, [r7, #52]	; 0x34
 80077c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	09db      	lsrs	r3, r3, #7
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	2b7f      	cmp	r3, #127	; 0x7f
 80077da:	d8f0      	bhi.n	80077be <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	637a      	str	r2, [r7, #52]	; 0x34
 80077e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	701a      	strb	r2, [r3, #0]
 80077e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077f4:	e00b      	b.n	800780e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	1c59      	adds	r1, r3, #1
 80077fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007800:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007804:	b2d2      	uxtb	r2, r2
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	09db      	lsrs	r3, r3, #7
 800780c:	62bb      	str	r3, [r7, #40]	; 0x28
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	2b7f      	cmp	r3, #127	; 0x7f
 8007812:	d8f0      	bhi.n	80077f6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800781a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800781c:	b2d2      	uxtb	r2, r2
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	623b      	str	r3, [r7, #32]
 800782c:	e00b      	b.n	8007846 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	b2da      	uxtb	r2, r3
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	1c59      	adds	r1, r3, #1
 8007836:	6279      	str	r1, [r7, #36]	; 0x24
 8007838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	09db      	lsrs	r3, r3, #7
 8007844:	623b      	str	r3, [r7, #32]
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	2b7f      	cmp	r3, #127	; 0x7f
 800784a:	d8f0      	bhi.n	800782e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	627a      	str	r2, [r7, #36]	; 0x24
 8007852:	6a3a      	ldr	r2, [r7, #32]
 8007854:	b2d2      	uxtb	r2, r2
 8007856:	701a      	strb	r2, [r3, #0]
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	6979      	ldr	r1, [r7, #20]
 8007860:	69b8      	ldr	r0, [r7, #24]
 8007862:	f7ff fd1d 	bl	80072a0 <_SendPacket>
  RECORD_END();
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f383 8811 	msr	BASEPRI, r3
}
 800786c:	bf00      	nop
 800786e:	3738      	adds	r7, #56	; 0x38
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	200047e8 	.word	0x200047e8

08007878 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b090      	sub	sp, #64	; 0x40
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007886:	f3ef 8311 	mrs	r3, BASEPRI
 800788a:	f04f 0120 	mov.w	r1, #32
 800788e:	f381 8811 	msr	BASEPRI, r1
 8007892:	61fb      	str	r3, [r7, #28]
 8007894:	4840      	ldr	r0, [pc, #256]	; (8007998 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007896:	f7ff fc17 	bl	80070c8 <_PreparePacket>
 800789a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078a8:	e00b      	b.n	80078c2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b0:	1c59      	adds	r1, r3, #1
 80078b2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80078b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078b8:	b2d2      	uxtb	r2, r2
 80078ba:	701a      	strb	r2, [r3, #0]
 80078bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078be:	09db      	lsrs	r3, r3, #7
 80078c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	2b7f      	cmp	r3, #127	; 0x7f
 80078c6:	d8f0      	bhi.n	80078aa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80078c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80078ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	637b      	str	r3, [r7, #52]	; 0x34
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	633b      	str	r3, [r7, #48]	; 0x30
 80078e0:	e00b      	b.n	80078fa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e8:	1c59      	adds	r1, r3, #1
 80078ea:	6379      	str	r1, [r7, #52]	; 0x34
 80078ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	09db      	lsrs	r3, r3, #7
 80078f8:	633b      	str	r3, [r7, #48]	; 0x30
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	2b7f      	cmp	r3, #127	; 0x7f
 80078fe:	d8f0      	bhi.n	80078e2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	637a      	str	r2, [r7, #52]	; 0x34
 8007906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
 8007918:	e00b      	b.n	8007932 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791c:	b2da      	uxtb	r2, r3
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	1c59      	adds	r1, r3, #1
 8007922:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	09db      	lsrs	r3, r3, #7
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	2b7f      	cmp	r3, #127	; 0x7f
 8007936:	d8f0      	bhi.n	800791a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800793e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
 800794c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800794e:	623b      	str	r3, [r7, #32]
 8007950:	e00b      	b.n	800796a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	b2da      	uxtb	r2, r3
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	1c59      	adds	r1, r3, #1
 800795a:	6279      	str	r1, [r7, #36]	; 0x24
 800795c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007960:	b2d2      	uxtb	r2, r2
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	09db      	lsrs	r3, r3, #7
 8007968:	623b      	str	r3, [r7, #32]
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	2b7f      	cmp	r3, #127	; 0x7f
 800796e:	d8f0      	bhi.n	8007952 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	627a      	str	r2, [r7, #36]	; 0x24
 8007976:	6a3a      	ldr	r2, [r7, #32]
 8007978:	b2d2      	uxtb	r2, r2
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	69b8      	ldr	r0, [r7, #24]
 8007986:	f7ff fc8b 	bl	80072a0 <_SendPacket>
  RECORD_END();
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f383 8811 	msr	BASEPRI, r3
}
 8007990:	bf00      	nop
 8007992:	3740      	adds	r7, #64	; 0x40
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	200047e8 	.word	0x200047e8

0800799c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800799c:	b580      	push	{r7, lr}
 800799e:	b08c      	sub	sp, #48	; 0x30
 80079a0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80079a2:	4b58      	ldr	r3, [pc, #352]	; (8007b04 <SEGGER_SYSVIEW_Start+0x168>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80079a8:	f3ef 8311 	mrs	r3, BASEPRI
 80079ac:	f04f 0120 	mov.w	r1, #32
 80079b0:	f381 8811 	msr	BASEPRI, r1
 80079b4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80079b6:	4b53      	ldr	r3, [pc, #332]	; (8007b04 <SEGGER_SYSVIEW_Start+0x168>)
 80079b8:	785b      	ldrb	r3, [r3, #1]
 80079ba:	220a      	movs	r2, #10
 80079bc:	4952      	ldr	r1, [pc, #328]	; (8007b08 <SEGGER_SYSVIEW_Start+0x16c>)
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f8 fc06 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80079ca:	200a      	movs	r0, #10
 80079cc:	f7ff fe2a 	bl	8007624 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80079d0:	f3ef 8311 	mrs	r3, BASEPRI
 80079d4:	f04f 0120 	mov.w	r1, #32
 80079d8:	f381 8811 	msr	BASEPRI, r1
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	484b      	ldr	r0, [pc, #300]	; (8007b0c <SEGGER_SYSVIEW_Start+0x170>)
 80079e0:	f7ff fb72 	bl	80070c8 <_PreparePacket>
 80079e4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ee:	4b45      	ldr	r3, [pc, #276]	; (8007b04 <SEGGER_SYSVIEW_Start+0x168>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80079f4:	e00b      	b.n	8007a0e <SEGGER_SYSVIEW_Start+0x72>
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	1c59      	adds	r1, r3, #1
 80079fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	701a      	strb	r2, [r3, #0]
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	09db      	lsrs	r3, r3, #7
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	2b7f      	cmp	r3, #127	; 0x7f
 8007a12:	d8f0      	bhi.n	80079f6 <SEGGER_SYSVIEW_Start+0x5a>
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
 8007a28:	4b36      	ldr	r3, [pc, #216]	; (8007b04 <SEGGER_SYSVIEW_Start+0x168>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	623b      	str	r3, [r7, #32]
 8007a2e:	e00b      	b.n	8007a48 <SEGGER_SYSVIEW_Start+0xac>
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	1c59      	adds	r1, r3, #1
 8007a38:	6279      	str	r1, [r7, #36]	; 0x24
 8007a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	09db      	lsrs	r3, r3, #7
 8007a46:	623b      	str	r3, [r7, #32]
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a4c:	d8f0      	bhi.n	8007a30 <SEGGER_SYSVIEW_Start+0x94>
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	627a      	str	r2, [r7, #36]	; 0x24
 8007a54:	6a3a      	ldr	r2, [r7, #32]
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	4b28      	ldr	r3, [pc, #160]	; (8007b04 <SEGGER_SYSVIEW_Start+0x168>)
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	61bb      	str	r3, [r7, #24]
 8007a68:	e00b      	b.n	8007a82 <SEGGER_SYSVIEW_Start+0xe6>
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	1c59      	adds	r1, r3, #1
 8007a72:	61f9      	str	r1, [r7, #28]
 8007a74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	09db      	lsrs	r3, r3, #7
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b7f      	cmp	r3, #127	; 0x7f
 8007a86:	d8f0      	bhi.n	8007a6a <SEGGER_SYSVIEW_Start+0xce>
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	61fa      	str	r2, [r7, #28]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	b2d2      	uxtb	r2, r2
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	e00b      	b.n	8007aba <SEGGER_SYSVIEW_Start+0x11e>
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	1c59      	adds	r1, r3, #1
 8007aaa:	6179      	str	r1, [r7, #20]
 8007aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ab0:	b2d2      	uxtb	r2, r2
 8007ab2:	701a      	strb	r2, [r3, #0]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	09db      	lsrs	r3, r3, #7
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b7f      	cmp	r3, #127	; 0x7f
 8007abe:	d8f0      	bhi.n	8007aa2 <SEGGER_SYSVIEW_Start+0x106>
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	617a      	str	r2, [r7, #20]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007ad0:	2218      	movs	r2, #24
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff fbe3 	bl	80072a0 <_SendPacket>
      RECORD_END();
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007ae0:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <SEGGER_SYSVIEW_Start+0x168>)
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007ae8:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <SEGGER_SYSVIEW_Start+0x168>)
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007aee:	f000 f9eb 	bl	8007ec8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007af2:	f000 f9b1 	bl	8007e58 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007af6:	f000 fc2d 	bl	8008354 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007afa:	bf00      	nop
 8007afc:	3730      	adds	r7, #48	; 0x30
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200047b8 	.word	0x200047b8
 8007b08:	08009028 	.word	0x08009028
 8007b0c:	200047e8 	.word	0x200047e8

08007b10 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b16:	f3ef 8311 	mrs	r3, BASEPRI
 8007b1a:	f04f 0120 	mov.w	r1, #32
 8007b1e:	f381 8811 	msr	BASEPRI, r1
 8007b22:	607b      	str	r3, [r7, #4]
 8007b24:	480b      	ldr	r0, [pc, #44]	; (8007b54 <SEGGER_SYSVIEW_Stop+0x44>)
 8007b26:	f7ff facf 	bl	80070c8 <_PreparePacket>
 8007b2a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <SEGGER_SYSVIEW_Stop+0x48>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007b34:	220b      	movs	r2, #11
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6838      	ldr	r0, [r7, #0]
 8007b3a:	f7ff fbb1 	bl	80072a0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <SEGGER_SYSVIEW_Stop+0x48>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f383 8811 	msr	BASEPRI, r3
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	200047e8 	.word	0x200047e8
 8007b58:	200047b8 	.word	0x200047b8

08007b5c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08c      	sub	sp, #48	; 0x30
 8007b60:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007b62:	f3ef 8311 	mrs	r3, BASEPRI
 8007b66:	f04f 0120 	mov.w	r1, #32
 8007b6a:	f381 8811 	msr	BASEPRI, r1
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	4845      	ldr	r0, [pc, #276]	; (8007c88 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007b72:	f7ff faa9 	bl	80070c8 <_PreparePacket>
 8007b76:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b80:	4b42      	ldr	r3, [pc, #264]	; (8007c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b86:	e00b      	b.n	8007ba0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	1c59      	adds	r1, r3, #1
 8007b90:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007b92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	09db      	lsrs	r3, r3, #7
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ba4:	d8f0      	bhi.n	8007b88 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bba:	4b34      	ldr	r3, [pc, #208]	; (8007c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	623b      	str	r3, [r7, #32]
 8007bc0:	e00b      	b.n	8007bda <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	1c59      	adds	r1, r3, #1
 8007bca:	6279      	str	r1, [r7, #36]	; 0x24
 8007bcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	09db      	lsrs	r3, r3, #7
 8007bd8:	623b      	str	r3, [r7, #32]
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8007bde:	d8f0      	bhi.n	8007bc2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	627a      	str	r2, [r7, #36]	; 0x24
 8007be6:	6a3a      	ldr	r2, [r7, #32]
 8007be8:	b2d2      	uxtb	r2, r2
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	61fb      	str	r3, [r7, #28]
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	61bb      	str	r3, [r7, #24]
 8007bfa:	e00b      	b.n	8007c14 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	1c59      	adds	r1, r3, #1
 8007c04:	61f9      	str	r1, [r7, #28]
 8007c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	09db      	lsrs	r3, r3, #7
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2b7f      	cmp	r3, #127	; 0x7f
 8007c18:	d8f0      	bhi.n	8007bfc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	61fa      	str	r2, [r7, #28]
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	613b      	str	r3, [r7, #16]
 8007c32:	e00b      	b.n	8007c4c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	1c59      	adds	r1, r3, #1
 8007c3c:	6179      	str	r1, [r7, #20]
 8007c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	09db      	lsrs	r3, r3, #7
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c50:	d8f0      	bhi.n	8007c34 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	617a      	str	r2, [r7, #20]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007c62:	2218      	movs	r2, #24
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	68b8      	ldr	r0, [r7, #8]
 8007c68:	f7ff fb1a 	bl	80072a0 <_SendPacket>
  RECORD_END();
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007c72:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007c7a:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	4798      	blx	r3
  }
}
 8007c80:	bf00      	nop
 8007c82:	3730      	adds	r7, #48	; 0x30
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	200047e8 	.word	0x200047e8
 8007c8c:	200047b8 	.word	0x200047b8

08007c90 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b092      	sub	sp, #72	; 0x48
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007c98:	f3ef 8311 	mrs	r3, BASEPRI
 8007c9c:	f04f 0120 	mov.w	r1, #32
 8007ca0:	f381 8811 	msr	BASEPRI, r1
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	486a      	ldr	r0, [pc, #424]	; (8007e50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007ca8:	f7ff fa0e 	bl	80070c8 <_PreparePacket>
 8007cac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b66      	ldr	r3, [pc, #408]	; (8007e54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8007cc2:	e00b      	b.n	8007cdc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cca:	1c59      	adds	r1, r3, #1
 8007ccc:	6479      	str	r1, [r7, #68]	; 0x44
 8007cce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd8:	09db      	lsrs	r3, r3, #7
 8007cda:	643b      	str	r3, [r7, #64]	; 0x40
 8007cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cde:	2b7f      	cmp	r3, #127	; 0x7f
 8007ce0:	d8f0      	bhi.n	8007cc4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	647a      	str	r2, [r7, #68]	; 0x44
 8007ce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cfc:	e00b      	b.n	8007d16 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d04:	1c59      	adds	r1, r3, #1
 8007d06:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d0c:	b2d2      	uxtb	r2, r2
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	09db      	lsrs	r3, r3, #7
 8007d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	2b7f      	cmp	r3, #127	; 0x7f
 8007d1a:	d8f0      	bhi.n	8007cfe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	701a      	strb	r2, [r3, #0]
 8007d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	4619      	mov	r1, r3
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7ff f997 	bl	8007068 <_EncodeStr>
 8007d3a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007d3c:	2209      	movs	r2, #9
 8007d3e:	68f9      	ldr	r1, [r7, #12]
 8007d40:	6938      	ldr	r0, [r7, #16]
 8007d42:	f7ff faad 	bl	80072a0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b40      	ldr	r3, [pc, #256]	; (8007e54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	633b      	str	r3, [r7, #48]	; 0x30
 8007d5a:	e00b      	b.n	8007d74 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d62:	1c59      	adds	r1, r3, #1
 8007d64:	6379      	str	r1, [r7, #52]	; 0x34
 8007d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	09db      	lsrs	r3, r3, #7
 8007d72:	633b      	str	r3, [r7, #48]	; 0x30
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	2b7f      	cmp	r3, #127	; 0x7f
 8007d78:	d8f0      	bhi.n	8007d5c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	637a      	str	r2, [r7, #52]	; 0x34
 8007d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d94:	e00b      	b.n	8007dae <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	1c59      	adds	r1, r3, #1
 8007d9e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007da4:	b2d2      	uxtb	r2, r2
 8007da6:	701a      	strb	r2, [r3, #0]
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	09db      	lsrs	r3, r3, #7
 8007dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	2b7f      	cmp	r3, #127	; 0x7f
 8007db2:	d8f0      	bhi.n	8007d96 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	623b      	str	r3, [r7, #32]
 8007dce:	e00b      	b.n	8007de8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	1c59      	adds	r1, r3, #1
 8007dd8:	6279      	str	r1, [r7, #36]	; 0x24
 8007dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	09db      	lsrs	r3, r3, #7
 8007de6:	623b      	str	r3, [r7, #32]
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	2b7f      	cmp	r3, #127	; 0x7f
 8007dec:	d8f0      	bhi.n	8007dd0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	627a      	str	r2, [r7, #36]	; 0x24
 8007df4:	6a3a      	ldr	r2, [r7, #32]
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	61fb      	str	r3, [r7, #28]
 8007e02:	2300      	movs	r3, #0
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	e00b      	b.n	8007e20 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	1c59      	adds	r1, r3, #1
 8007e10:	61f9      	str	r1, [r7, #28]
 8007e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	09db      	lsrs	r3, r3, #7
 8007e1e:	61bb      	str	r3, [r7, #24]
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2b7f      	cmp	r3, #127	; 0x7f
 8007e24:	d8f0      	bhi.n	8007e08 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	61fa      	str	r2, [r7, #28]
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007e36:	2215      	movs	r2, #21
 8007e38:	68f9      	ldr	r1, [r7, #12]
 8007e3a:	6938      	ldr	r0, [r7, #16]
 8007e3c:	f7ff fa30 	bl	80072a0 <_SendPacket>
  RECORD_END();
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f383 8811 	msr	BASEPRI, r3
}
 8007e46:	bf00      	nop
 8007e48:	3748      	adds	r7, #72	; 0x48
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	200047e8 	.word	0x200047e8
 8007e54:	200047b8 	.word	0x200047b8

08007e58 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d008      	beq.n	8007e76 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007e6e:	4b03      	ldr	r3, [pc, #12]	; (8007e7c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	4798      	blx	r3
  }
}
 8007e76:	bf00      	nop
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	200047b8 	.word	0x200047b8

08007e80 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e88:	f3ef 8311 	mrs	r3, BASEPRI
 8007e8c:	f04f 0120 	mov.w	r1, #32
 8007e90:	f381 8811 	msr	BASEPRI, r1
 8007e94:	617b      	str	r3, [r7, #20]
 8007e96:	480b      	ldr	r0, [pc, #44]	; (8007ec4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007e98:	f7ff f916 	bl	80070c8 <_PreparePacket>
 8007e9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e9e:	2280      	movs	r2, #128	; 0x80
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	6938      	ldr	r0, [r7, #16]
 8007ea4:	f7ff f8e0 	bl	8007068 <_EncodeStr>
 8007ea8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007eaa:	220e      	movs	r2, #14
 8007eac:	68f9      	ldr	r1, [r7, #12]
 8007eae:	6938      	ldr	r0, [r7, #16]
 8007eb0:	f7ff f9f6 	bl	80072a0 <_SendPacket>
  RECORD_END();
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f383 8811 	msr	BASEPRI, r3
}
 8007eba:	bf00      	nop
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200047e8 	.word	0x200047e8

08007ec8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007ec8:	b590      	push	{r4, r7, lr}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007ece:	4b15      	ldr	r3, [pc, #84]	; (8007f24 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d01a      	beq.n	8007f0c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007ed6:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d015      	beq.n	8007f0c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007ee0:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4798      	blx	r3
 8007ee8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007eec:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	000a      	movs	r2, r1
 8007efc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007efe:	4613      	mov	r3, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	4621      	mov	r1, r4
 8007f04:	200d      	movs	r0, #13
 8007f06:	f7ff fbe7 	bl	80076d8 <SEGGER_SYSVIEW_RecordU32x2>
 8007f0a:	e006      	b.n	8007f1a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4619      	mov	r1, r3
 8007f12:	200c      	movs	r0, #12
 8007f14:	f7ff fba4 	bl	8007660 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd90      	pop	{r4, r7, pc}
 8007f22:	bf00      	nop
 8007f24:	200047b8 	.word	0x200047b8
 8007f28:	e0001004 	.word	0xe0001004

08007f2c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007f32:	f3ef 8311 	mrs	r3, BASEPRI
 8007f36:	f04f 0120 	mov.w	r1, #32
 8007f3a:	f381 8811 	msr	BASEPRI, r1
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	4819      	ldr	r0, [pc, #100]	; (8007fa8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007f42:	f7ff f8c1 	bl	80070c8 <_PreparePacket>
 8007f46:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007f4c:	4b17      	ldr	r3, [pc, #92]	; (8007fac <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f54:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	617b      	str	r3, [r7, #20]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	613b      	str	r3, [r7, #16]
 8007f5e:	e00b      	b.n	8007f78 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	1c59      	adds	r1, r3, #1
 8007f68:	6179      	str	r1, [r7, #20]
 8007f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	09db      	lsrs	r3, r3, #7
 8007f76:	613b      	str	r3, [r7, #16]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f7c:	d8f0      	bhi.n	8007f60 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	617a      	str	r2, [r7, #20]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007f8e:	2202      	movs	r2, #2
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	68b8      	ldr	r0, [r7, #8]
 8007f94:	f7ff f984 	bl	80072a0 <_SendPacket>
  RECORD_END();
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f383 8811 	msr	BASEPRI, r3
}
 8007f9e:	bf00      	nop
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200047e8 	.word	0x200047e8
 8007fac:	e000ed04 	.word	0xe000ed04

08007fb0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8007fba:	f04f 0120 	mov.w	r1, #32
 8007fbe:	f381 8811 	msr	BASEPRI, r1
 8007fc2:	607b      	str	r3, [r7, #4]
 8007fc4:	4807      	ldr	r0, [pc, #28]	; (8007fe4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007fc6:	f7ff f87f 	bl	80070c8 <_PreparePacket>
 8007fca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007fcc:	2203      	movs	r2, #3
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6838      	ldr	r0, [r7, #0]
 8007fd2:	f7ff f965 	bl	80072a0 <_SendPacket>
  RECORD_END();
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f383 8811 	msr	BASEPRI, r3
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200047e8 	.word	0x200047e8

08007fe8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007fee:	f3ef 8311 	mrs	r3, BASEPRI
 8007ff2:	f04f 0120 	mov.w	r1, #32
 8007ff6:	f381 8811 	msr	BASEPRI, r1
 8007ffa:	607b      	str	r3, [r7, #4]
 8007ffc:	4807      	ldr	r0, [pc, #28]	; (800801c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007ffe:	f7ff f863 	bl	80070c8 <_PreparePacket>
 8008002:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008004:	2212      	movs	r2, #18
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6838      	ldr	r0, [r7, #0]
 800800a:	f7ff f949 	bl	80072a0 <_SendPacket>
  RECORD_END();
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f383 8811 	msr	BASEPRI, r3
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	200047e8 	.word	0x200047e8

08008020 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008026:	f3ef 8311 	mrs	r3, BASEPRI
 800802a:	f04f 0120 	mov.w	r1, #32
 800802e:	f381 8811 	msr	BASEPRI, r1
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	4807      	ldr	r0, [pc, #28]	; (8008054 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008036:	f7ff f847 	bl	80070c8 <_PreparePacket>
 800803a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800803c:	2211      	movs	r2, #17
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6838      	ldr	r0, [r7, #0]
 8008042:	f7ff f92d 	bl	80072a0 <_SendPacket>
  RECORD_END();
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f383 8811 	msr	BASEPRI, r3
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	200047e8 	.word	0x200047e8

08008058 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008060:	f3ef 8311 	mrs	r3, BASEPRI
 8008064:	f04f 0120 	mov.w	r1, #32
 8008068:	f381 8811 	msr	BASEPRI, r1
 800806c:	617b      	str	r3, [r7, #20]
 800806e:	4819      	ldr	r0, [pc, #100]	; (80080d4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008070:	f7ff f82a 	bl	80070c8 <_PreparePacket>
 8008074:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800807a:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	e00b      	b.n	80080a6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	b2da      	uxtb	r2, r3
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	1c59      	adds	r1, r3, #1
 8008096:	61f9      	str	r1, [r7, #28]
 8008098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	09db      	lsrs	r3, r3, #7
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b7f      	cmp	r3, #127	; 0x7f
 80080aa:	d8f0      	bhi.n	800808e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	61fa      	str	r2, [r7, #28]
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80080bc:	2208      	movs	r2, #8
 80080be:	68f9      	ldr	r1, [r7, #12]
 80080c0:	6938      	ldr	r0, [r7, #16]
 80080c2:	f7ff f8ed 	bl	80072a0 <_SendPacket>
  RECORD_END();
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f383 8811 	msr	BASEPRI, r3
}
 80080cc:	bf00      	nop
 80080ce:	3720      	adds	r7, #32
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	200047e8 	.word	0x200047e8
 80080d8:	200047b8 	.word	0x200047b8

080080dc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80080e4:	f3ef 8311 	mrs	r3, BASEPRI
 80080e8:	f04f 0120 	mov.w	r1, #32
 80080ec:	f381 8811 	msr	BASEPRI, r1
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	4819      	ldr	r0, [pc, #100]	; (8008158 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80080f4:	f7fe ffe8 	bl	80070c8 <_PreparePacket>
 80080f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80080fe:	4b17      	ldr	r3, [pc, #92]	; (800815c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	e00b      	b.n	800812a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	b2da      	uxtb	r2, r3
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	1c59      	adds	r1, r3, #1
 800811a:	61f9      	str	r1, [r7, #28]
 800811c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	701a      	strb	r2, [r3, #0]
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	09db      	lsrs	r3, r3, #7
 8008128:	61bb      	str	r3, [r7, #24]
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	2b7f      	cmp	r3, #127	; 0x7f
 800812e:	d8f0      	bhi.n	8008112 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	61fa      	str	r2, [r7, #28]
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	b2d2      	uxtb	r2, r2
 800813a:	701a      	strb	r2, [r3, #0]
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008140:	2204      	movs	r2, #4
 8008142:	68f9      	ldr	r1, [r7, #12]
 8008144:	6938      	ldr	r0, [r7, #16]
 8008146:	f7ff f8ab 	bl	80072a0 <_SendPacket>
  RECORD_END();
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f383 8811 	msr	BASEPRI, r3
}
 8008150:	bf00      	nop
 8008152:	3720      	adds	r7, #32
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	200047e8 	.word	0x200047e8
 800815c:	200047b8 	.word	0x200047b8

08008160 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008168:	f3ef 8311 	mrs	r3, BASEPRI
 800816c:	f04f 0120 	mov.w	r1, #32
 8008170:	f381 8811 	msr	BASEPRI, r1
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	4819      	ldr	r0, [pc, #100]	; (80081dc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008178:	f7fe ffa6 	bl	80070c8 <_PreparePacket>
 800817c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008182:	4b17      	ldr	r3, [pc, #92]	; (80081e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	61fb      	str	r3, [r7, #28]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	61bb      	str	r3, [r7, #24]
 8008194:	e00b      	b.n	80081ae <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	b2da      	uxtb	r2, r3
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	1c59      	adds	r1, r3, #1
 800819e:	61f9      	str	r1, [r7, #28]
 80081a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	09db      	lsrs	r3, r3, #7
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b7f      	cmp	r3, #127	; 0x7f
 80081b2:	d8f0      	bhi.n	8008196 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	61fa      	str	r2, [r7, #28]
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80081c4:	2206      	movs	r2, #6
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	6938      	ldr	r0, [r7, #16]
 80081ca:	f7ff f869 	bl	80072a0 <_SendPacket>
  RECORD_END();
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f383 8811 	msr	BASEPRI, r3
}
 80081d4:	bf00      	nop
 80081d6:	3720      	adds	r7, #32
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	200047e8 	.word	0x200047e8
 80081e0:	200047b8 	.word	0x200047b8

080081e4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	1ad3      	subs	r3, r2, r3
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	200047b8 	.word	0x200047b8

08008204 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b08c      	sub	sp, #48	; 0x30
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800820e:	4b40      	ldr	r3, [pc, #256]	; (8008310 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d077      	beq.n	8008306 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8008216:	4b3e      	ldr	r3, [pc, #248]	; (8008310 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800821c:	2300      	movs	r3, #0
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008220:	e008      	b.n	8008234 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	3301      	adds	r3, #1
 8008232:	62bb      	str	r3, [r7, #40]	; 0x28
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008238:	429a      	cmp	r2, r3
 800823a:	d3f2      	bcc.n	8008222 <SEGGER_SYSVIEW_SendModule+0x1e>
 800823c:	e000      	b.n	8008240 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800823e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d055      	beq.n	80082f2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008246:	f3ef 8311 	mrs	r3, BASEPRI
 800824a:	f04f 0120 	mov.w	r1, #32
 800824e:	f381 8811 	msr	BASEPRI, r1
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	482f      	ldr	r0, [pc, #188]	; (8008314 <SEGGER_SYSVIEW_SendModule+0x110>)
 8008256:	f7fe ff37 	bl	80070c8 <_PreparePacket>
 800825a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
 8008264:	79fb      	ldrb	r3, [r7, #7]
 8008266:	623b      	str	r3, [r7, #32]
 8008268:	e00b      	b.n	8008282 <SEGGER_SYSVIEW_SendModule+0x7e>
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	b2da      	uxtb	r2, r3
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	1c59      	adds	r1, r3, #1
 8008272:	6279      	str	r1, [r7, #36]	; 0x24
 8008274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	09db      	lsrs	r3, r3, #7
 8008280:	623b      	str	r3, [r7, #32]
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	2b7f      	cmp	r3, #127	; 0x7f
 8008286:	d8f0      	bhi.n	800826a <SEGGER_SYSVIEW_SendModule+0x66>
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	627a      	str	r2, [r7, #36]	; 0x24
 800828e:	6a3a      	ldr	r2, [r7, #32]
 8008290:	b2d2      	uxtb	r2, r2
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	61fb      	str	r3, [r7, #28]
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	61bb      	str	r3, [r7, #24]
 80082a2:	e00b      	b.n	80082bc <SEGGER_SYSVIEW_SendModule+0xb8>
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	1c59      	adds	r1, r3, #1
 80082ac:	61f9      	str	r1, [r7, #28]
 80082ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	09db      	lsrs	r3, r3, #7
 80082ba:	61bb      	str	r3, [r7, #24]
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b7f      	cmp	r3, #127	; 0x7f
 80082c0:	d8f0      	bhi.n	80082a4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	61fa      	str	r2, [r7, #28]
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	b2d2      	uxtb	r2, r2
 80082cc:	701a      	strb	r2, [r3, #0]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2280      	movs	r2, #128	; 0x80
 80082d8:	4619      	mov	r1, r3
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7fe fec4 	bl	8007068 <_EncodeStr>
 80082e0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80082e2:	2216      	movs	r2, #22
 80082e4:	68f9      	ldr	r1, [r7, #12]
 80082e6:	6938      	ldr	r0, [r7, #16]
 80082e8:	f7fe ffda 	bl	80072a0 <_SendPacket>
      RECORD_END();
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d006      	beq.n	8008306 <SEGGER_SYSVIEW_SendModule+0x102>
 80082f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	4798      	blx	r3
    }
  }
}
 8008306:	bf00      	nop
 8008308:	3730      	adds	r7, #48	; 0x30
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	200047e0 	.word	0x200047e0
 8008314:	200047e8 	.word	0x200047e8

08008318 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800831e:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00f      	beq.n	8008346 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008326:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1f2      	bne.n	800832c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	200047e0 	.word	0x200047e0

08008354 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800835a:	f3ef 8311 	mrs	r3, BASEPRI
 800835e:	f04f 0120 	mov.w	r1, #32
 8008362:	f381 8811 	msr	BASEPRI, r1
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	4817      	ldr	r0, [pc, #92]	; (80083c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800836a:	f7fe fead 	bl	80070c8 <_PreparePacket>
 800836e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	4b14      	ldr	r3, [pc, #80]	; (80083cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	e00b      	b.n	8008398 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	b2da      	uxtb	r2, r3
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	1c59      	adds	r1, r3, #1
 8008388:	6179      	str	r1, [r7, #20]
 800838a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800838e:	b2d2      	uxtb	r2, r2
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	09db      	lsrs	r3, r3, #7
 8008396:	613b      	str	r3, [r7, #16]
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2b7f      	cmp	r3, #127	; 0x7f
 800839c:	d8f0      	bhi.n	8008380 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	617a      	str	r2, [r7, #20]
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80083ae:	221b      	movs	r2, #27
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	68b8      	ldr	r0, [r7, #8]
 80083b4:	f7fe ff74 	bl	80072a0 <_SendPacket>
  RECORD_END();
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f383 8811 	msr	BASEPRI, r3
}
 80083be:	bf00      	nop
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200047e8 	.word	0x200047e8
 80083cc:	200047e4 	.word	0x200047e4

080083d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	; 0x28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80083d8:	f3ef 8311 	mrs	r3, BASEPRI
 80083dc:	f04f 0120 	mov.w	r1, #32
 80083e0:	f381 8811 	msr	BASEPRI, r1
 80083e4:	617b      	str	r3, [r7, #20]
 80083e6:	4827      	ldr	r0, [pc, #156]	; (8008484 <SEGGER_SYSVIEW_Warn+0xb4>)
 80083e8:	f7fe fe6e 	bl	80070c8 <_PreparePacket>
 80083ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80083ee:	2280      	movs	r2, #128	; 0x80
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	6938      	ldr	r0, [r7, #16]
 80083f4:	f7fe fe38 	bl	8007068 <_EncodeStr>
 80083f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
 80083fe:	2301      	movs	r3, #1
 8008400:	623b      	str	r3, [r7, #32]
 8008402:	e00b      	b.n	800841c <SEGGER_SYSVIEW_Warn+0x4c>
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	b2da      	uxtb	r2, r3
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	1c59      	adds	r1, r3, #1
 800840c:	6279      	str	r1, [r7, #36]	; 0x24
 800840e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008412:	b2d2      	uxtb	r2, r2
 8008414:	701a      	strb	r2, [r3, #0]
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	09db      	lsrs	r3, r3, #7
 800841a:	623b      	str	r3, [r7, #32]
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	2b7f      	cmp	r3, #127	; 0x7f
 8008420:	d8f0      	bhi.n	8008404 <SEGGER_SYSVIEW_Warn+0x34>
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	627a      	str	r2, [r7, #36]	; 0x24
 8008428:	6a3a      	ldr	r2, [r7, #32]
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	61fb      	str	r3, [r7, #28]
 8008436:	2300      	movs	r3, #0
 8008438:	61bb      	str	r3, [r7, #24]
 800843a:	e00b      	b.n	8008454 <SEGGER_SYSVIEW_Warn+0x84>
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	b2da      	uxtb	r2, r3
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	1c59      	adds	r1, r3, #1
 8008444:	61f9      	str	r1, [r7, #28]
 8008446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	09db      	lsrs	r3, r3, #7
 8008452:	61bb      	str	r3, [r7, #24]
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	2b7f      	cmp	r3, #127	; 0x7f
 8008458:	d8f0      	bhi.n	800843c <SEGGER_SYSVIEW_Warn+0x6c>
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	61fa      	str	r2, [r7, #28]
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	b2d2      	uxtb	r2, r2
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800846a:	221a      	movs	r2, #26
 800846c:	68f9      	ldr	r1, [r7, #12]
 800846e:	6938      	ldr	r0, [r7, #16]
 8008470:	f7fe ff16 	bl	80072a0 <_SendPacket>
  RECORD_END();
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f383 8811 	msr	BASEPRI, r3
}
 800847a:	bf00      	nop
 800847c:	3728      	adds	r7, #40	; 0x28
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	200047e8 	.word	0x200047e8

08008488 <siprintf>:
 8008488:	b40e      	push	{r1, r2, r3}
 800848a:	b500      	push	{lr}
 800848c:	b09c      	sub	sp, #112	; 0x70
 800848e:	ab1d      	add	r3, sp, #116	; 0x74
 8008490:	9002      	str	r0, [sp, #8]
 8008492:	9006      	str	r0, [sp, #24]
 8008494:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008498:	4809      	ldr	r0, [pc, #36]	; (80084c0 <siprintf+0x38>)
 800849a:	9107      	str	r1, [sp, #28]
 800849c:	9104      	str	r1, [sp, #16]
 800849e:	4909      	ldr	r1, [pc, #36]	; (80084c4 <siprintf+0x3c>)
 80084a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084a4:	9105      	str	r1, [sp, #20]
 80084a6:	6800      	ldr	r0, [r0, #0]
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	a902      	add	r1, sp, #8
 80084ac:	f000 fa00 	bl	80088b0 <_svfiprintf_r>
 80084b0:	9b02      	ldr	r3, [sp, #8]
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]
 80084b6:	b01c      	add	sp, #112	; 0x70
 80084b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084bc:	b003      	add	sp, #12
 80084be:	4770      	bx	lr
 80084c0:	20000060 	.word	0x20000060
 80084c4:	ffff0208 	.word	0xffff0208

080084c8 <memcmp>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	3901      	subs	r1, #1
 80084cc:	4402      	add	r2, r0
 80084ce:	4290      	cmp	r0, r2
 80084d0:	d101      	bne.n	80084d6 <memcmp+0xe>
 80084d2:	2000      	movs	r0, #0
 80084d4:	e005      	b.n	80084e2 <memcmp+0x1a>
 80084d6:	7803      	ldrb	r3, [r0, #0]
 80084d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80084dc:	42a3      	cmp	r3, r4
 80084de:	d001      	beq.n	80084e4 <memcmp+0x1c>
 80084e0:	1b18      	subs	r0, r3, r4
 80084e2:	bd10      	pop	{r4, pc}
 80084e4:	3001      	adds	r0, #1
 80084e6:	e7f2      	b.n	80084ce <memcmp+0x6>

080084e8 <memset>:
 80084e8:	4402      	add	r2, r0
 80084ea:	4603      	mov	r3, r0
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d100      	bne.n	80084f2 <memset+0xa>
 80084f0:	4770      	bx	lr
 80084f2:	f803 1b01 	strb.w	r1, [r3], #1
 80084f6:	e7f9      	b.n	80084ec <memset+0x4>

080084f8 <_reclaim_reent>:
 80084f8:	4b29      	ldr	r3, [pc, #164]	; (80085a0 <_reclaim_reent+0xa8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4283      	cmp	r3, r0
 80084fe:	b570      	push	{r4, r5, r6, lr}
 8008500:	4604      	mov	r4, r0
 8008502:	d04b      	beq.n	800859c <_reclaim_reent+0xa4>
 8008504:	69c3      	ldr	r3, [r0, #28]
 8008506:	b143      	cbz	r3, 800851a <_reclaim_reent+0x22>
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d144      	bne.n	8008598 <_reclaim_reent+0xa0>
 800850e:	69e3      	ldr	r3, [r4, #28]
 8008510:	6819      	ldr	r1, [r3, #0]
 8008512:	b111      	cbz	r1, 800851a <_reclaim_reent+0x22>
 8008514:	4620      	mov	r0, r4
 8008516:	f000 f879 	bl	800860c <_free_r>
 800851a:	6961      	ldr	r1, [r4, #20]
 800851c:	b111      	cbz	r1, 8008524 <_reclaim_reent+0x2c>
 800851e:	4620      	mov	r0, r4
 8008520:	f000 f874 	bl	800860c <_free_r>
 8008524:	69e1      	ldr	r1, [r4, #28]
 8008526:	b111      	cbz	r1, 800852e <_reclaim_reent+0x36>
 8008528:	4620      	mov	r0, r4
 800852a:	f000 f86f 	bl	800860c <_free_r>
 800852e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008530:	b111      	cbz	r1, 8008538 <_reclaim_reent+0x40>
 8008532:	4620      	mov	r0, r4
 8008534:	f000 f86a 	bl	800860c <_free_r>
 8008538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800853a:	b111      	cbz	r1, 8008542 <_reclaim_reent+0x4a>
 800853c:	4620      	mov	r0, r4
 800853e:	f000 f865 	bl	800860c <_free_r>
 8008542:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008544:	b111      	cbz	r1, 800854c <_reclaim_reent+0x54>
 8008546:	4620      	mov	r0, r4
 8008548:	f000 f860 	bl	800860c <_free_r>
 800854c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800854e:	b111      	cbz	r1, 8008556 <_reclaim_reent+0x5e>
 8008550:	4620      	mov	r0, r4
 8008552:	f000 f85b 	bl	800860c <_free_r>
 8008556:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008558:	b111      	cbz	r1, 8008560 <_reclaim_reent+0x68>
 800855a:	4620      	mov	r0, r4
 800855c:	f000 f856 	bl	800860c <_free_r>
 8008560:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008562:	b111      	cbz	r1, 800856a <_reclaim_reent+0x72>
 8008564:	4620      	mov	r0, r4
 8008566:	f000 f851 	bl	800860c <_free_r>
 800856a:	6a23      	ldr	r3, [r4, #32]
 800856c:	b1b3      	cbz	r3, 800859c <_reclaim_reent+0xa4>
 800856e:	4620      	mov	r0, r4
 8008570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008574:	4718      	bx	r3
 8008576:	5949      	ldr	r1, [r1, r5]
 8008578:	b941      	cbnz	r1, 800858c <_reclaim_reent+0x94>
 800857a:	3504      	adds	r5, #4
 800857c:	69e3      	ldr	r3, [r4, #28]
 800857e:	2d80      	cmp	r5, #128	; 0x80
 8008580:	68d9      	ldr	r1, [r3, #12]
 8008582:	d1f8      	bne.n	8008576 <_reclaim_reent+0x7e>
 8008584:	4620      	mov	r0, r4
 8008586:	f000 f841 	bl	800860c <_free_r>
 800858a:	e7c0      	b.n	800850e <_reclaim_reent+0x16>
 800858c:	680e      	ldr	r6, [r1, #0]
 800858e:	4620      	mov	r0, r4
 8008590:	f000 f83c 	bl	800860c <_free_r>
 8008594:	4631      	mov	r1, r6
 8008596:	e7ef      	b.n	8008578 <_reclaim_reent+0x80>
 8008598:	2500      	movs	r5, #0
 800859a:	e7ef      	b.n	800857c <_reclaim_reent+0x84>
 800859c:	bd70      	pop	{r4, r5, r6, pc}
 800859e:	bf00      	nop
 80085a0:	20000060 	.word	0x20000060

080085a4 <__libc_init_array>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	4d0d      	ldr	r5, [pc, #52]	; (80085dc <__libc_init_array+0x38>)
 80085a8:	4c0d      	ldr	r4, [pc, #52]	; (80085e0 <__libc_init_array+0x3c>)
 80085aa:	1b64      	subs	r4, r4, r5
 80085ac:	10a4      	asrs	r4, r4, #2
 80085ae:	2600      	movs	r6, #0
 80085b0:	42a6      	cmp	r6, r4
 80085b2:	d109      	bne.n	80085c8 <__libc_init_array+0x24>
 80085b4:	4d0b      	ldr	r5, [pc, #44]	; (80085e4 <__libc_init_array+0x40>)
 80085b6:	4c0c      	ldr	r4, [pc, #48]	; (80085e8 <__libc_init_array+0x44>)
 80085b8:	f000 fc78 	bl	8008eac <_init>
 80085bc:	1b64      	subs	r4, r4, r5
 80085be:	10a4      	asrs	r4, r4, #2
 80085c0:	2600      	movs	r6, #0
 80085c2:	42a6      	cmp	r6, r4
 80085c4:	d105      	bne.n	80085d2 <__libc_init_array+0x2e>
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085cc:	4798      	blx	r3
 80085ce:	3601      	adds	r6, #1
 80085d0:	e7ee      	b.n	80085b0 <__libc_init_array+0xc>
 80085d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d6:	4798      	blx	r3
 80085d8:	3601      	adds	r6, #1
 80085da:	e7f2      	b.n	80085c2 <__libc_init_array+0x1e>
 80085dc:	08009070 	.word	0x08009070
 80085e0:	08009070 	.word	0x08009070
 80085e4:	08009070 	.word	0x08009070
 80085e8:	08009074 	.word	0x08009074

080085ec <__retarget_lock_acquire_recursive>:
 80085ec:	4770      	bx	lr

080085ee <__retarget_lock_release_recursive>:
 80085ee:	4770      	bx	lr

080085f0 <memcpy>:
 80085f0:	440a      	add	r2, r1
 80085f2:	4291      	cmp	r1, r2
 80085f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085f8:	d100      	bne.n	80085fc <memcpy+0xc>
 80085fa:	4770      	bx	lr
 80085fc:	b510      	push	{r4, lr}
 80085fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008606:	4291      	cmp	r1, r2
 8008608:	d1f9      	bne.n	80085fe <memcpy+0xe>
 800860a:	bd10      	pop	{r4, pc}

0800860c <_free_r>:
 800860c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800860e:	2900      	cmp	r1, #0
 8008610:	d044      	beq.n	800869c <_free_r+0x90>
 8008612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008616:	9001      	str	r0, [sp, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f1a1 0404 	sub.w	r4, r1, #4
 800861e:	bfb8      	it	lt
 8008620:	18e4      	addlt	r4, r4, r3
 8008622:	f000 f8df 	bl	80087e4 <__malloc_lock>
 8008626:	4a1e      	ldr	r2, [pc, #120]	; (80086a0 <_free_r+0x94>)
 8008628:	9801      	ldr	r0, [sp, #4]
 800862a:	6813      	ldr	r3, [r2, #0]
 800862c:	b933      	cbnz	r3, 800863c <_free_r+0x30>
 800862e:	6063      	str	r3, [r4, #4]
 8008630:	6014      	str	r4, [r2, #0]
 8008632:	b003      	add	sp, #12
 8008634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008638:	f000 b8da 	b.w	80087f0 <__malloc_unlock>
 800863c:	42a3      	cmp	r3, r4
 800863e:	d908      	bls.n	8008652 <_free_r+0x46>
 8008640:	6825      	ldr	r5, [r4, #0]
 8008642:	1961      	adds	r1, r4, r5
 8008644:	428b      	cmp	r3, r1
 8008646:	bf01      	itttt	eq
 8008648:	6819      	ldreq	r1, [r3, #0]
 800864a:	685b      	ldreq	r3, [r3, #4]
 800864c:	1949      	addeq	r1, r1, r5
 800864e:	6021      	streq	r1, [r4, #0]
 8008650:	e7ed      	b.n	800862e <_free_r+0x22>
 8008652:	461a      	mov	r2, r3
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	b10b      	cbz	r3, 800865c <_free_r+0x50>
 8008658:	42a3      	cmp	r3, r4
 800865a:	d9fa      	bls.n	8008652 <_free_r+0x46>
 800865c:	6811      	ldr	r1, [r2, #0]
 800865e:	1855      	adds	r5, r2, r1
 8008660:	42a5      	cmp	r5, r4
 8008662:	d10b      	bne.n	800867c <_free_r+0x70>
 8008664:	6824      	ldr	r4, [r4, #0]
 8008666:	4421      	add	r1, r4
 8008668:	1854      	adds	r4, r2, r1
 800866a:	42a3      	cmp	r3, r4
 800866c:	6011      	str	r1, [r2, #0]
 800866e:	d1e0      	bne.n	8008632 <_free_r+0x26>
 8008670:	681c      	ldr	r4, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	6053      	str	r3, [r2, #4]
 8008676:	440c      	add	r4, r1
 8008678:	6014      	str	r4, [r2, #0]
 800867a:	e7da      	b.n	8008632 <_free_r+0x26>
 800867c:	d902      	bls.n	8008684 <_free_r+0x78>
 800867e:	230c      	movs	r3, #12
 8008680:	6003      	str	r3, [r0, #0]
 8008682:	e7d6      	b.n	8008632 <_free_r+0x26>
 8008684:	6825      	ldr	r5, [r4, #0]
 8008686:	1961      	adds	r1, r4, r5
 8008688:	428b      	cmp	r3, r1
 800868a:	bf04      	itt	eq
 800868c:	6819      	ldreq	r1, [r3, #0]
 800868e:	685b      	ldreq	r3, [r3, #4]
 8008690:	6063      	str	r3, [r4, #4]
 8008692:	bf04      	itt	eq
 8008694:	1949      	addeq	r1, r1, r5
 8008696:	6021      	streq	r1, [r4, #0]
 8008698:	6054      	str	r4, [r2, #4]
 800869a:	e7ca      	b.n	8008632 <_free_r+0x26>
 800869c:	b003      	add	sp, #12
 800869e:	bd30      	pop	{r4, r5, pc}
 80086a0:	20004a0c 	.word	0x20004a0c

080086a4 <sbrk_aligned>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	4e0e      	ldr	r6, [pc, #56]	; (80086e0 <sbrk_aligned+0x3c>)
 80086a8:	460c      	mov	r4, r1
 80086aa:	6831      	ldr	r1, [r6, #0]
 80086ac:	4605      	mov	r5, r0
 80086ae:	b911      	cbnz	r1, 80086b6 <sbrk_aligned+0x12>
 80086b0:	f000 fba6 	bl	8008e00 <_sbrk_r>
 80086b4:	6030      	str	r0, [r6, #0]
 80086b6:	4621      	mov	r1, r4
 80086b8:	4628      	mov	r0, r5
 80086ba:	f000 fba1 	bl	8008e00 <_sbrk_r>
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	d00a      	beq.n	80086d8 <sbrk_aligned+0x34>
 80086c2:	1cc4      	adds	r4, r0, #3
 80086c4:	f024 0403 	bic.w	r4, r4, #3
 80086c8:	42a0      	cmp	r0, r4
 80086ca:	d007      	beq.n	80086dc <sbrk_aligned+0x38>
 80086cc:	1a21      	subs	r1, r4, r0
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 fb96 	bl	8008e00 <_sbrk_r>
 80086d4:	3001      	adds	r0, #1
 80086d6:	d101      	bne.n	80086dc <sbrk_aligned+0x38>
 80086d8:	f04f 34ff 	mov.w	r4, #4294967295
 80086dc:	4620      	mov	r0, r4
 80086de:	bd70      	pop	{r4, r5, r6, pc}
 80086e0:	20004a10 	.word	0x20004a10

080086e4 <_malloc_r>:
 80086e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e8:	1ccd      	adds	r5, r1, #3
 80086ea:	f025 0503 	bic.w	r5, r5, #3
 80086ee:	3508      	adds	r5, #8
 80086f0:	2d0c      	cmp	r5, #12
 80086f2:	bf38      	it	cc
 80086f4:	250c      	movcc	r5, #12
 80086f6:	2d00      	cmp	r5, #0
 80086f8:	4607      	mov	r7, r0
 80086fa:	db01      	blt.n	8008700 <_malloc_r+0x1c>
 80086fc:	42a9      	cmp	r1, r5
 80086fe:	d905      	bls.n	800870c <_malloc_r+0x28>
 8008700:	230c      	movs	r3, #12
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	2600      	movs	r6, #0
 8008706:	4630      	mov	r0, r6
 8008708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087e0 <_malloc_r+0xfc>
 8008710:	f000 f868 	bl	80087e4 <__malloc_lock>
 8008714:	f8d8 3000 	ldr.w	r3, [r8]
 8008718:	461c      	mov	r4, r3
 800871a:	bb5c      	cbnz	r4, 8008774 <_malloc_r+0x90>
 800871c:	4629      	mov	r1, r5
 800871e:	4638      	mov	r0, r7
 8008720:	f7ff ffc0 	bl	80086a4 <sbrk_aligned>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	4604      	mov	r4, r0
 8008728:	d155      	bne.n	80087d6 <_malloc_r+0xf2>
 800872a:	f8d8 4000 	ldr.w	r4, [r8]
 800872e:	4626      	mov	r6, r4
 8008730:	2e00      	cmp	r6, #0
 8008732:	d145      	bne.n	80087c0 <_malloc_r+0xdc>
 8008734:	2c00      	cmp	r4, #0
 8008736:	d048      	beq.n	80087ca <_malloc_r+0xe6>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	4631      	mov	r1, r6
 800873c:	4638      	mov	r0, r7
 800873e:	eb04 0903 	add.w	r9, r4, r3
 8008742:	f000 fb5d 	bl	8008e00 <_sbrk_r>
 8008746:	4581      	cmp	r9, r0
 8008748:	d13f      	bne.n	80087ca <_malloc_r+0xe6>
 800874a:	6821      	ldr	r1, [r4, #0]
 800874c:	1a6d      	subs	r5, r5, r1
 800874e:	4629      	mov	r1, r5
 8008750:	4638      	mov	r0, r7
 8008752:	f7ff ffa7 	bl	80086a4 <sbrk_aligned>
 8008756:	3001      	adds	r0, #1
 8008758:	d037      	beq.n	80087ca <_malloc_r+0xe6>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	442b      	add	r3, r5
 800875e:	6023      	str	r3, [r4, #0]
 8008760:	f8d8 3000 	ldr.w	r3, [r8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d038      	beq.n	80087da <_malloc_r+0xf6>
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	42a2      	cmp	r2, r4
 800876c:	d12b      	bne.n	80087c6 <_malloc_r+0xe2>
 800876e:	2200      	movs	r2, #0
 8008770:	605a      	str	r2, [r3, #4]
 8008772:	e00f      	b.n	8008794 <_malloc_r+0xb0>
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	1b52      	subs	r2, r2, r5
 8008778:	d41f      	bmi.n	80087ba <_malloc_r+0xd6>
 800877a:	2a0b      	cmp	r2, #11
 800877c:	d917      	bls.n	80087ae <_malloc_r+0xca>
 800877e:	1961      	adds	r1, r4, r5
 8008780:	42a3      	cmp	r3, r4
 8008782:	6025      	str	r5, [r4, #0]
 8008784:	bf18      	it	ne
 8008786:	6059      	strne	r1, [r3, #4]
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	bf08      	it	eq
 800878c:	f8c8 1000 	streq.w	r1, [r8]
 8008790:	5162      	str	r2, [r4, r5]
 8008792:	604b      	str	r3, [r1, #4]
 8008794:	4638      	mov	r0, r7
 8008796:	f104 060b 	add.w	r6, r4, #11
 800879a:	f000 f829 	bl	80087f0 <__malloc_unlock>
 800879e:	f026 0607 	bic.w	r6, r6, #7
 80087a2:	1d23      	adds	r3, r4, #4
 80087a4:	1af2      	subs	r2, r6, r3
 80087a6:	d0ae      	beq.n	8008706 <_malloc_r+0x22>
 80087a8:	1b9b      	subs	r3, r3, r6
 80087aa:	50a3      	str	r3, [r4, r2]
 80087ac:	e7ab      	b.n	8008706 <_malloc_r+0x22>
 80087ae:	42a3      	cmp	r3, r4
 80087b0:	6862      	ldr	r2, [r4, #4]
 80087b2:	d1dd      	bne.n	8008770 <_malloc_r+0x8c>
 80087b4:	f8c8 2000 	str.w	r2, [r8]
 80087b8:	e7ec      	b.n	8008794 <_malloc_r+0xb0>
 80087ba:	4623      	mov	r3, r4
 80087bc:	6864      	ldr	r4, [r4, #4]
 80087be:	e7ac      	b.n	800871a <_malloc_r+0x36>
 80087c0:	4634      	mov	r4, r6
 80087c2:	6876      	ldr	r6, [r6, #4]
 80087c4:	e7b4      	b.n	8008730 <_malloc_r+0x4c>
 80087c6:	4613      	mov	r3, r2
 80087c8:	e7cc      	b.n	8008764 <_malloc_r+0x80>
 80087ca:	230c      	movs	r3, #12
 80087cc:	603b      	str	r3, [r7, #0]
 80087ce:	4638      	mov	r0, r7
 80087d0:	f000 f80e 	bl	80087f0 <__malloc_unlock>
 80087d4:	e797      	b.n	8008706 <_malloc_r+0x22>
 80087d6:	6025      	str	r5, [r4, #0]
 80087d8:	e7dc      	b.n	8008794 <_malloc_r+0xb0>
 80087da:	605b      	str	r3, [r3, #4]
 80087dc:	deff      	udf	#255	; 0xff
 80087de:	bf00      	nop
 80087e0:	20004a0c 	.word	0x20004a0c

080087e4 <__malloc_lock>:
 80087e4:	4801      	ldr	r0, [pc, #4]	; (80087ec <__malloc_lock+0x8>)
 80087e6:	f7ff bf01 	b.w	80085ec <__retarget_lock_acquire_recursive>
 80087ea:	bf00      	nop
 80087ec:	20004a08 	.word	0x20004a08

080087f0 <__malloc_unlock>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__malloc_unlock+0x8>)
 80087f2:	f7ff befc 	b.w	80085ee <__retarget_lock_release_recursive>
 80087f6:	bf00      	nop
 80087f8:	20004a08 	.word	0x20004a08

080087fc <__ssputs_r>:
 80087fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008800:	688e      	ldr	r6, [r1, #8]
 8008802:	461f      	mov	r7, r3
 8008804:	42be      	cmp	r6, r7
 8008806:	680b      	ldr	r3, [r1, #0]
 8008808:	4682      	mov	sl, r0
 800880a:	460c      	mov	r4, r1
 800880c:	4690      	mov	r8, r2
 800880e:	d82c      	bhi.n	800886a <__ssputs_r+0x6e>
 8008810:	898a      	ldrh	r2, [r1, #12]
 8008812:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008816:	d026      	beq.n	8008866 <__ssputs_r+0x6a>
 8008818:	6965      	ldr	r5, [r4, #20]
 800881a:	6909      	ldr	r1, [r1, #16]
 800881c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008820:	eba3 0901 	sub.w	r9, r3, r1
 8008824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008828:	1c7b      	adds	r3, r7, #1
 800882a:	444b      	add	r3, r9
 800882c:	106d      	asrs	r5, r5, #1
 800882e:	429d      	cmp	r5, r3
 8008830:	bf38      	it	cc
 8008832:	461d      	movcc	r5, r3
 8008834:	0553      	lsls	r3, r2, #21
 8008836:	d527      	bpl.n	8008888 <__ssputs_r+0x8c>
 8008838:	4629      	mov	r1, r5
 800883a:	f7ff ff53 	bl	80086e4 <_malloc_r>
 800883e:	4606      	mov	r6, r0
 8008840:	b360      	cbz	r0, 800889c <__ssputs_r+0xa0>
 8008842:	6921      	ldr	r1, [r4, #16]
 8008844:	464a      	mov	r2, r9
 8008846:	f7ff fed3 	bl	80085f0 <memcpy>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	6126      	str	r6, [r4, #16]
 8008858:	6165      	str	r5, [r4, #20]
 800885a:	444e      	add	r6, r9
 800885c:	eba5 0509 	sub.w	r5, r5, r9
 8008860:	6026      	str	r6, [r4, #0]
 8008862:	60a5      	str	r5, [r4, #8]
 8008864:	463e      	mov	r6, r7
 8008866:	42be      	cmp	r6, r7
 8008868:	d900      	bls.n	800886c <__ssputs_r+0x70>
 800886a:	463e      	mov	r6, r7
 800886c:	6820      	ldr	r0, [r4, #0]
 800886e:	4632      	mov	r2, r6
 8008870:	4641      	mov	r1, r8
 8008872:	f000 faab 	bl	8008dcc <memmove>
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	1b9b      	subs	r3, r3, r6
 800887a:	60a3      	str	r3, [r4, #8]
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	4433      	add	r3, r6
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	2000      	movs	r0, #0
 8008884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008888:	462a      	mov	r2, r5
 800888a:	f000 fac9 	bl	8008e20 <_realloc_r>
 800888e:	4606      	mov	r6, r0
 8008890:	2800      	cmp	r0, #0
 8008892:	d1e0      	bne.n	8008856 <__ssputs_r+0x5a>
 8008894:	6921      	ldr	r1, [r4, #16]
 8008896:	4650      	mov	r0, sl
 8008898:	f7ff feb8 	bl	800860c <_free_r>
 800889c:	230c      	movs	r3, #12
 800889e:	f8ca 3000 	str.w	r3, [sl]
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a8:	81a3      	strh	r3, [r4, #12]
 80088aa:	f04f 30ff 	mov.w	r0, #4294967295
 80088ae:	e7e9      	b.n	8008884 <__ssputs_r+0x88>

080088b0 <_svfiprintf_r>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	4698      	mov	r8, r3
 80088b6:	898b      	ldrh	r3, [r1, #12]
 80088b8:	061b      	lsls	r3, r3, #24
 80088ba:	b09d      	sub	sp, #116	; 0x74
 80088bc:	4607      	mov	r7, r0
 80088be:	460d      	mov	r5, r1
 80088c0:	4614      	mov	r4, r2
 80088c2:	d50e      	bpl.n	80088e2 <_svfiprintf_r+0x32>
 80088c4:	690b      	ldr	r3, [r1, #16]
 80088c6:	b963      	cbnz	r3, 80088e2 <_svfiprintf_r+0x32>
 80088c8:	2140      	movs	r1, #64	; 0x40
 80088ca:	f7ff ff0b 	bl	80086e4 <_malloc_r>
 80088ce:	6028      	str	r0, [r5, #0]
 80088d0:	6128      	str	r0, [r5, #16]
 80088d2:	b920      	cbnz	r0, 80088de <_svfiprintf_r+0x2e>
 80088d4:	230c      	movs	r3, #12
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	e0d0      	b.n	8008a80 <_svfiprintf_r+0x1d0>
 80088de:	2340      	movs	r3, #64	; 0x40
 80088e0:	616b      	str	r3, [r5, #20]
 80088e2:	2300      	movs	r3, #0
 80088e4:	9309      	str	r3, [sp, #36]	; 0x24
 80088e6:	2320      	movs	r3, #32
 80088e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80088f0:	2330      	movs	r3, #48	; 0x30
 80088f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a98 <_svfiprintf_r+0x1e8>
 80088f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088fa:	f04f 0901 	mov.w	r9, #1
 80088fe:	4623      	mov	r3, r4
 8008900:	469a      	mov	sl, r3
 8008902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008906:	b10a      	cbz	r2, 800890c <_svfiprintf_r+0x5c>
 8008908:	2a25      	cmp	r2, #37	; 0x25
 800890a:	d1f9      	bne.n	8008900 <_svfiprintf_r+0x50>
 800890c:	ebba 0b04 	subs.w	fp, sl, r4
 8008910:	d00b      	beq.n	800892a <_svfiprintf_r+0x7a>
 8008912:	465b      	mov	r3, fp
 8008914:	4622      	mov	r2, r4
 8008916:	4629      	mov	r1, r5
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff ff6f 	bl	80087fc <__ssputs_r>
 800891e:	3001      	adds	r0, #1
 8008920:	f000 80a9 	beq.w	8008a76 <_svfiprintf_r+0x1c6>
 8008924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008926:	445a      	add	r2, fp
 8008928:	9209      	str	r2, [sp, #36]	; 0x24
 800892a:	f89a 3000 	ldrb.w	r3, [sl]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 80a1 	beq.w	8008a76 <_svfiprintf_r+0x1c6>
 8008934:	2300      	movs	r3, #0
 8008936:	f04f 32ff 	mov.w	r2, #4294967295
 800893a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800893e:	f10a 0a01 	add.w	sl, sl, #1
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	9307      	str	r3, [sp, #28]
 8008946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800894a:	931a      	str	r3, [sp, #104]	; 0x68
 800894c:	4654      	mov	r4, sl
 800894e:	2205      	movs	r2, #5
 8008950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008954:	4850      	ldr	r0, [pc, #320]	; (8008a98 <_svfiprintf_r+0x1e8>)
 8008956:	f7f7 fc93 	bl	8000280 <memchr>
 800895a:	9a04      	ldr	r2, [sp, #16]
 800895c:	b9d8      	cbnz	r0, 8008996 <_svfiprintf_r+0xe6>
 800895e:	06d0      	lsls	r0, r2, #27
 8008960:	bf44      	itt	mi
 8008962:	2320      	movmi	r3, #32
 8008964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008968:	0711      	lsls	r1, r2, #28
 800896a:	bf44      	itt	mi
 800896c:	232b      	movmi	r3, #43	; 0x2b
 800896e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008972:	f89a 3000 	ldrb.w	r3, [sl]
 8008976:	2b2a      	cmp	r3, #42	; 0x2a
 8008978:	d015      	beq.n	80089a6 <_svfiprintf_r+0xf6>
 800897a:	9a07      	ldr	r2, [sp, #28]
 800897c:	4654      	mov	r4, sl
 800897e:	2000      	movs	r0, #0
 8008980:	f04f 0c0a 	mov.w	ip, #10
 8008984:	4621      	mov	r1, r4
 8008986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800898a:	3b30      	subs	r3, #48	; 0x30
 800898c:	2b09      	cmp	r3, #9
 800898e:	d94d      	bls.n	8008a2c <_svfiprintf_r+0x17c>
 8008990:	b1b0      	cbz	r0, 80089c0 <_svfiprintf_r+0x110>
 8008992:	9207      	str	r2, [sp, #28]
 8008994:	e014      	b.n	80089c0 <_svfiprintf_r+0x110>
 8008996:	eba0 0308 	sub.w	r3, r0, r8
 800899a:	fa09 f303 	lsl.w	r3, r9, r3
 800899e:	4313      	orrs	r3, r2
 80089a0:	9304      	str	r3, [sp, #16]
 80089a2:	46a2      	mov	sl, r4
 80089a4:	e7d2      	b.n	800894c <_svfiprintf_r+0x9c>
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	1d19      	adds	r1, r3, #4
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	9103      	str	r1, [sp, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bfbb      	ittet	lt
 80089b2:	425b      	neglt	r3, r3
 80089b4:	f042 0202 	orrlt.w	r2, r2, #2
 80089b8:	9307      	strge	r3, [sp, #28]
 80089ba:	9307      	strlt	r3, [sp, #28]
 80089bc:	bfb8      	it	lt
 80089be:	9204      	strlt	r2, [sp, #16]
 80089c0:	7823      	ldrb	r3, [r4, #0]
 80089c2:	2b2e      	cmp	r3, #46	; 0x2e
 80089c4:	d10c      	bne.n	80089e0 <_svfiprintf_r+0x130>
 80089c6:	7863      	ldrb	r3, [r4, #1]
 80089c8:	2b2a      	cmp	r3, #42	; 0x2a
 80089ca:	d134      	bne.n	8008a36 <_svfiprintf_r+0x186>
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	1d1a      	adds	r2, r3, #4
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	9203      	str	r2, [sp, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	bfb8      	it	lt
 80089d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80089dc:	3402      	adds	r4, #2
 80089de:	9305      	str	r3, [sp, #20]
 80089e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008aa8 <_svfiprintf_r+0x1f8>
 80089e4:	7821      	ldrb	r1, [r4, #0]
 80089e6:	2203      	movs	r2, #3
 80089e8:	4650      	mov	r0, sl
 80089ea:	f7f7 fc49 	bl	8000280 <memchr>
 80089ee:	b138      	cbz	r0, 8008a00 <_svfiprintf_r+0x150>
 80089f0:	9b04      	ldr	r3, [sp, #16]
 80089f2:	eba0 000a 	sub.w	r0, r0, sl
 80089f6:	2240      	movs	r2, #64	; 0x40
 80089f8:	4082      	lsls	r2, r0
 80089fa:	4313      	orrs	r3, r2
 80089fc:	3401      	adds	r4, #1
 80089fe:	9304      	str	r3, [sp, #16]
 8008a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a04:	4825      	ldr	r0, [pc, #148]	; (8008a9c <_svfiprintf_r+0x1ec>)
 8008a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a0a:	2206      	movs	r2, #6
 8008a0c:	f7f7 fc38 	bl	8000280 <memchr>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d038      	beq.n	8008a86 <_svfiprintf_r+0x1d6>
 8008a14:	4b22      	ldr	r3, [pc, #136]	; (8008aa0 <_svfiprintf_r+0x1f0>)
 8008a16:	bb1b      	cbnz	r3, 8008a60 <_svfiprintf_r+0x1b0>
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	3307      	adds	r3, #7
 8008a1c:	f023 0307 	bic.w	r3, r3, #7
 8008a20:	3308      	adds	r3, #8
 8008a22:	9303      	str	r3, [sp, #12]
 8008a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a26:	4433      	add	r3, r6
 8008a28:	9309      	str	r3, [sp, #36]	; 0x24
 8008a2a:	e768      	b.n	80088fe <_svfiprintf_r+0x4e>
 8008a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a30:	460c      	mov	r4, r1
 8008a32:	2001      	movs	r0, #1
 8008a34:	e7a6      	b.n	8008984 <_svfiprintf_r+0xd4>
 8008a36:	2300      	movs	r3, #0
 8008a38:	3401      	adds	r4, #1
 8008a3a:	9305      	str	r3, [sp, #20]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f04f 0c0a 	mov.w	ip, #10
 8008a42:	4620      	mov	r0, r4
 8008a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a48:	3a30      	subs	r2, #48	; 0x30
 8008a4a:	2a09      	cmp	r2, #9
 8008a4c:	d903      	bls.n	8008a56 <_svfiprintf_r+0x1a6>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0c6      	beq.n	80089e0 <_svfiprintf_r+0x130>
 8008a52:	9105      	str	r1, [sp, #20]
 8008a54:	e7c4      	b.n	80089e0 <_svfiprintf_r+0x130>
 8008a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e7f0      	b.n	8008a42 <_svfiprintf_r+0x192>
 8008a60:	ab03      	add	r3, sp, #12
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	462a      	mov	r2, r5
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <_svfiprintf_r+0x1f4>)
 8008a68:	a904      	add	r1, sp, #16
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	f3af 8000 	nop.w
 8008a70:	1c42      	adds	r2, r0, #1
 8008a72:	4606      	mov	r6, r0
 8008a74:	d1d6      	bne.n	8008a24 <_svfiprintf_r+0x174>
 8008a76:	89ab      	ldrh	r3, [r5, #12]
 8008a78:	065b      	lsls	r3, r3, #25
 8008a7a:	f53f af2d 	bmi.w	80088d8 <_svfiprintf_r+0x28>
 8008a7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a80:	b01d      	add	sp, #116	; 0x74
 8008a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a86:	ab03      	add	r3, sp, #12
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	462a      	mov	r2, r5
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <_svfiprintf_r+0x1f4>)
 8008a8e:	a904      	add	r1, sp, #16
 8008a90:	4638      	mov	r0, r7
 8008a92:	f000 f879 	bl	8008b88 <_printf_i>
 8008a96:	e7eb      	b.n	8008a70 <_svfiprintf_r+0x1c0>
 8008a98:	08009032 	.word	0x08009032
 8008a9c:	0800903c 	.word	0x0800903c
 8008aa0:	00000000 	.word	0x00000000
 8008aa4:	080087fd 	.word	0x080087fd
 8008aa8:	08009038 	.word	0x08009038

08008aac <_printf_common>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	4616      	mov	r6, r2
 8008ab2:	4699      	mov	r9, r3
 8008ab4:	688a      	ldr	r2, [r1, #8]
 8008ab6:	690b      	ldr	r3, [r1, #16]
 8008ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008abc:	4293      	cmp	r3, r2
 8008abe:	bfb8      	it	lt
 8008ac0:	4613      	movlt	r3, r2
 8008ac2:	6033      	str	r3, [r6, #0]
 8008ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ac8:	4607      	mov	r7, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	b10a      	cbz	r2, 8008ad2 <_printf_common+0x26>
 8008ace:	3301      	adds	r3, #1
 8008ad0:	6033      	str	r3, [r6, #0]
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	0699      	lsls	r1, r3, #26
 8008ad6:	bf42      	ittt	mi
 8008ad8:	6833      	ldrmi	r3, [r6, #0]
 8008ada:	3302      	addmi	r3, #2
 8008adc:	6033      	strmi	r3, [r6, #0]
 8008ade:	6825      	ldr	r5, [r4, #0]
 8008ae0:	f015 0506 	ands.w	r5, r5, #6
 8008ae4:	d106      	bne.n	8008af4 <_printf_common+0x48>
 8008ae6:	f104 0a19 	add.w	sl, r4, #25
 8008aea:	68e3      	ldr	r3, [r4, #12]
 8008aec:	6832      	ldr	r2, [r6, #0]
 8008aee:	1a9b      	subs	r3, r3, r2
 8008af0:	42ab      	cmp	r3, r5
 8008af2:	dc26      	bgt.n	8008b42 <_printf_common+0x96>
 8008af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008af8:	1e13      	subs	r3, r2, #0
 8008afa:	6822      	ldr	r2, [r4, #0]
 8008afc:	bf18      	it	ne
 8008afe:	2301      	movne	r3, #1
 8008b00:	0692      	lsls	r2, r2, #26
 8008b02:	d42b      	bmi.n	8008b5c <_printf_common+0xb0>
 8008b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b08:	4649      	mov	r1, r9
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	47c0      	blx	r8
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d01e      	beq.n	8008b50 <_printf_common+0xa4>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	6922      	ldr	r2, [r4, #16]
 8008b16:	f003 0306 	and.w	r3, r3, #6
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	bf02      	ittt	eq
 8008b1e:	68e5      	ldreq	r5, [r4, #12]
 8008b20:	6833      	ldreq	r3, [r6, #0]
 8008b22:	1aed      	subeq	r5, r5, r3
 8008b24:	68a3      	ldr	r3, [r4, #8]
 8008b26:	bf0c      	ite	eq
 8008b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b2c:	2500      	movne	r5, #0
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bfc4      	itt	gt
 8008b32:	1a9b      	subgt	r3, r3, r2
 8008b34:	18ed      	addgt	r5, r5, r3
 8008b36:	2600      	movs	r6, #0
 8008b38:	341a      	adds	r4, #26
 8008b3a:	42b5      	cmp	r5, r6
 8008b3c:	d11a      	bne.n	8008b74 <_printf_common+0xc8>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e008      	b.n	8008b54 <_printf_common+0xa8>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4652      	mov	r2, sl
 8008b46:	4649      	mov	r1, r9
 8008b48:	4638      	mov	r0, r7
 8008b4a:	47c0      	blx	r8
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d103      	bne.n	8008b58 <_printf_common+0xac>
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b58:	3501      	adds	r5, #1
 8008b5a:	e7c6      	b.n	8008aea <_printf_common+0x3e>
 8008b5c:	18e1      	adds	r1, r4, r3
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	2030      	movs	r0, #48	; 0x30
 8008b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b66:	4422      	add	r2, r4
 8008b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b70:	3302      	adds	r3, #2
 8008b72:	e7c7      	b.n	8008b04 <_printf_common+0x58>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4622      	mov	r2, r4
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	47c0      	blx	r8
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d0e6      	beq.n	8008b50 <_printf_common+0xa4>
 8008b82:	3601      	adds	r6, #1
 8008b84:	e7d9      	b.n	8008b3a <_printf_common+0x8e>
	...

08008b88 <_printf_i>:
 8008b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8c:	7e0f      	ldrb	r7, [r1, #24]
 8008b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b90:	2f78      	cmp	r7, #120	; 0x78
 8008b92:	4691      	mov	r9, r2
 8008b94:	4680      	mov	r8, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	469a      	mov	sl, r3
 8008b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b9e:	d807      	bhi.n	8008bb0 <_printf_i+0x28>
 8008ba0:	2f62      	cmp	r7, #98	; 0x62
 8008ba2:	d80a      	bhi.n	8008bba <_printf_i+0x32>
 8008ba4:	2f00      	cmp	r7, #0
 8008ba6:	f000 80d4 	beq.w	8008d52 <_printf_i+0x1ca>
 8008baa:	2f58      	cmp	r7, #88	; 0x58
 8008bac:	f000 80c0 	beq.w	8008d30 <_printf_i+0x1a8>
 8008bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bb8:	e03a      	b.n	8008c30 <_printf_i+0xa8>
 8008bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bbe:	2b15      	cmp	r3, #21
 8008bc0:	d8f6      	bhi.n	8008bb0 <_printf_i+0x28>
 8008bc2:	a101      	add	r1, pc, #4	; (adr r1, 8008bc8 <_printf_i+0x40>)
 8008bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bc8:	08008c21 	.word	0x08008c21
 8008bcc:	08008c35 	.word	0x08008c35
 8008bd0:	08008bb1 	.word	0x08008bb1
 8008bd4:	08008bb1 	.word	0x08008bb1
 8008bd8:	08008bb1 	.word	0x08008bb1
 8008bdc:	08008bb1 	.word	0x08008bb1
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008bb1 	.word	0x08008bb1
 8008be8:	08008bb1 	.word	0x08008bb1
 8008bec:	08008bb1 	.word	0x08008bb1
 8008bf0:	08008bb1 	.word	0x08008bb1
 8008bf4:	08008d39 	.word	0x08008d39
 8008bf8:	08008c61 	.word	0x08008c61
 8008bfc:	08008cf3 	.word	0x08008cf3
 8008c00:	08008bb1 	.word	0x08008bb1
 8008c04:	08008bb1 	.word	0x08008bb1
 8008c08:	08008d5b 	.word	0x08008d5b
 8008c0c:	08008bb1 	.word	0x08008bb1
 8008c10:	08008c61 	.word	0x08008c61
 8008c14:	08008bb1 	.word	0x08008bb1
 8008c18:	08008bb1 	.word	0x08008bb1
 8008c1c:	08008cfb 	.word	0x08008cfb
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	1d1a      	adds	r2, r3, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	602a      	str	r2, [r5, #0]
 8008c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c30:	2301      	movs	r3, #1
 8008c32:	e09f      	b.n	8008d74 <_printf_i+0x1ec>
 8008c34:	6820      	ldr	r0, [r4, #0]
 8008c36:	682b      	ldr	r3, [r5, #0]
 8008c38:	0607      	lsls	r7, r0, #24
 8008c3a:	f103 0104 	add.w	r1, r3, #4
 8008c3e:	6029      	str	r1, [r5, #0]
 8008c40:	d501      	bpl.n	8008c46 <_printf_i+0xbe>
 8008c42:	681e      	ldr	r6, [r3, #0]
 8008c44:	e003      	b.n	8008c4e <_printf_i+0xc6>
 8008c46:	0646      	lsls	r6, r0, #25
 8008c48:	d5fb      	bpl.n	8008c42 <_printf_i+0xba>
 8008c4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	da03      	bge.n	8008c5a <_printf_i+0xd2>
 8008c52:	232d      	movs	r3, #45	; 0x2d
 8008c54:	4276      	negs	r6, r6
 8008c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c5a:	485a      	ldr	r0, [pc, #360]	; (8008dc4 <_printf_i+0x23c>)
 8008c5c:	230a      	movs	r3, #10
 8008c5e:	e012      	b.n	8008c86 <_printf_i+0xfe>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	1d19      	adds	r1, r3, #4
 8008c66:	6029      	str	r1, [r5, #0]
 8008c68:	0605      	lsls	r5, r0, #24
 8008c6a:	d501      	bpl.n	8008c70 <_printf_i+0xe8>
 8008c6c:	681e      	ldr	r6, [r3, #0]
 8008c6e:	e002      	b.n	8008c76 <_printf_i+0xee>
 8008c70:	0641      	lsls	r1, r0, #25
 8008c72:	d5fb      	bpl.n	8008c6c <_printf_i+0xe4>
 8008c74:	881e      	ldrh	r6, [r3, #0]
 8008c76:	4853      	ldr	r0, [pc, #332]	; (8008dc4 <_printf_i+0x23c>)
 8008c78:	2f6f      	cmp	r7, #111	; 0x6f
 8008c7a:	bf0c      	ite	eq
 8008c7c:	2308      	moveq	r3, #8
 8008c7e:	230a      	movne	r3, #10
 8008c80:	2100      	movs	r1, #0
 8008c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c86:	6865      	ldr	r5, [r4, #4]
 8008c88:	60a5      	str	r5, [r4, #8]
 8008c8a:	2d00      	cmp	r5, #0
 8008c8c:	bfa2      	ittt	ge
 8008c8e:	6821      	ldrge	r1, [r4, #0]
 8008c90:	f021 0104 	bicge.w	r1, r1, #4
 8008c94:	6021      	strge	r1, [r4, #0]
 8008c96:	b90e      	cbnz	r6, 8008c9c <_printf_i+0x114>
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	d04b      	beq.n	8008d34 <_printf_i+0x1ac>
 8008c9c:	4615      	mov	r5, r2
 8008c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ca6:	5dc7      	ldrb	r7, [r0, r7]
 8008ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cac:	4637      	mov	r7, r6
 8008cae:	42bb      	cmp	r3, r7
 8008cb0:	460e      	mov	r6, r1
 8008cb2:	d9f4      	bls.n	8008c9e <_printf_i+0x116>
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d10b      	bne.n	8008cd0 <_printf_i+0x148>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	07de      	lsls	r6, r3, #31
 8008cbc:	d508      	bpl.n	8008cd0 <_printf_i+0x148>
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	6861      	ldr	r1, [r4, #4]
 8008cc2:	4299      	cmp	r1, r3
 8008cc4:	bfde      	ittt	le
 8008cc6:	2330      	movle	r3, #48	; 0x30
 8008cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ccc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cd0:	1b52      	subs	r2, r2, r5
 8008cd2:	6122      	str	r2, [r4, #16]
 8008cd4:	f8cd a000 	str.w	sl, [sp]
 8008cd8:	464b      	mov	r3, r9
 8008cda:	aa03      	add	r2, sp, #12
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4640      	mov	r0, r8
 8008ce0:	f7ff fee4 	bl	8008aac <_printf_common>
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d14a      	bne.n	8008d7e <_printf_i+0x1f6>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	b004      	add	sp, #16
 8008cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	f043 0320 	orr.w	r3, r3, #32
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	4833      	ldr	r0, [pc, #204]	; (8008dc8 <_printf_i+0x240>)
 8008cfc:	2778      	movs	r7, #120	; 0x78
 8008cfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	6829      	ldr	r1, [r5, #0]
 8008d06:	061f      	lsls	r7, r3, #24
 8008d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d0c:	d402      	bmi.n	8008d14 <_printf_i+0x18c>
 8008d0e:	065f      	lsls	r7, r3, #25
 8008d10:	bf48      	it	mi
 8008d12:	b2b6      	uxthmi	r6, r6
 8008d14:	07df      	lsls	r7, r3, #31
 8008d16:	bf48      	it	mi
 8008d18:	f043 0320 	orrmi.w	r3, r3, #32
 8008d1c:	6029      	str	r1, [r5, #0]
 8008d1e:	bf48      	it	mi
 8008d20:	6023      	strmi	r3, [r4, #0]
 8008d22:	b91e      	cbnz	r6, 8008d2c <_printf_i+0x1a4>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	f023 0320 	bic.w	r3, r3, #32
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	e7a7      	b.n	8008c80 <_printf_i+0xf8>
 8008d30:	4824      	ldr	r0, [pc, #144]	; (8008dc4 <_printf_i+0x23c>)
 8008d32:	e7e4      	b.n	8008cfe <_printf_i+0x176>
 8008d34:	4615      	mov	r5, r2
 8008d36:	e7bd      	b.n	8008cb4 <_printf_i+0x12c>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	6826      	ldr	r6, [r4, #0]
 8008d3c:	6961      	ldr	r1, [r4, #20]
 8008d3e:	1d18      	adds	r0, r3, #4
 8008d40:	6028      	str	r0, [r5, #0]
 8008d42:	0635      	lsls	r5, r6, #24
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	d501      	bpl.n	8008d4c <_printf_i+0x1c4>
 8008d48:	6019      	str	r1, [r3, #0]
 8008d4a:	e002      	b.n	8008d52 <_printf_i+0x1ca>
 8008d4c:	0670      	lsls	r0, r6, #25
 8008d4e:	d5fb      	bpl.n	8008d48 <_printf_i+0x1c0>
 8008d50:	8019      	strh	r1, [r3, #0]
 8008d52:	2300      	movs	r3, #0
 8008d54:	6123      	str	r3, [r4, #16]
 8008d56:	4615      	mov	r5, r2
 8008d58:	e7bc      	b.n	8008cd4 <_printf_i+0x14c>
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	1d1a      	adds	r2, r3, #4
 8008d5e:	602a      	str	r2, [r5, #0]
 8008d60:	681d      	ldr	r5, [r3, #0]
 8008d62:	6862      	ldr	r2, [r4, #4]
 8008d64:	2100      	movs	r1, #0
 8008d66:	4628      	mov	r0, r5
 8008d68:	f7f7 fa8a 	bl	8000280 <memchr>
 8008d6c:	b108      	cbz	r0, 8008d72 <_printf_i+0x1ea>
 8008d6e:	1b40      	subs	r0, r0, r5
 8008d70:	6060      	str	r0, [r4, #4]
 8008d72:	6863      	ldr	r3, [r4, #4]
 8008d74:	6123      	str	r3, [r4, #16]
 8008d76:	2300      	movs	r3, #0
 8008d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d7c:	e7aa      	b.n	8008cd4 <_printf_i+0x14c>
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	462a      	mov	r2, r5
 8008d82:	4649      	mov	r1, r9
 8008d84:	4640      	mov	r0, r8
 8008d86:	47d0      	blx	sl
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d0ad      	beq.n	8008ce8 <_printf_i+0x160>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	079b      	lsls	r3, r3, #30
 8008d90:	d413      	bmi.n	8008dba <_printf_i+0x232>
 8008d92:	68e0      	ldr	r0, [r4, #12]
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	4298      	cmp	r0, r3
 8008d98:	bfb8      	it	lt
 8008d9a:	4618      	movlt	r0, r3
 8008d9c:	e7a6      	b.n	8008cec <_printf_i+0x164>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	4632      	mov	r2, r6
 8008da2:	4649      	mov	r1, r9
 8008da4:	4640      	mov	r0, r8
 8008da6:	47d0      	blx	sl
 8008da8:	3001      	adds	r0, #1
 8008daa:	d09d      	beq.n	8008ce8 <_printf_i+0x160>
 8008dac:	3501      	adds	r5, #1
 8008dae:	68e3      	ldr	r3, [r4, #12]
 8008db0:	9903      	ldr	r1, [sp, #12]
 8008db2:	1a5b      	subs	r3, r3, r1
 8008db4:	42ab      	cmp	r3, r5
 8008db6:	dcf2      	bgt.n	8008d9e <_printf_i+0x216>
 8008db8:	e7eb      	b.n	8008d92 <_printf_i+0x20a>
 8008dba:	2500      	movs	r5, #0
 8008dbc:	f104 0619 	add.w	r6, r4, #25
 8008dc0:	e7f5      	b.n	8008dae <_printf_i+0x226>
 8008dc2:	bf00      	nop
 8008dc4:	08009043 	.word	0x08009043
 8008dc8:	08009054 	.word	0x08009054

08008dcc <memmove>:
 8008dcc:	4288      	cmp	r0, r1
 8008dce:	b510      	push	{r4, lr}
 8008dd0:	eb01 0402 	add.w	r4, r1, r2
 8008dd4:	d902      	bls.n	8008ddc <memmove+0x10>
 8008dd6:	4284      	cmp	r4, r0
 8008dd8:	4623      	mov	r3, r4
 8008dda:	d807      	bhi.n	8008dec <memmove+0x20>
 8008ddc:	1e43      	subs	r3, r0, #1
 8008dde:	42a1      	cmp	r1, r4
 8008de0:	d008      	beq.n	8008df4 <memmove+0x28>
 8008de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dea:	e7f8      	b.n	8008dde <memmove+0x12>
 8008dec:	4402      	add	r2, r0
 8008dee:	4601      	mov	r1, r0
 8008df0:	428a      	cmp	r2, r1
 8008df2:	d100      	bne.n	8008df6 <memmove+0x2a>
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dfe:	e7f7      	b.n	8008df0 <memmove+0x24>

08008e00 <_sbrk_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d06      	ldr	r5, [pc, #24]	; (8008e1c <_sbrk_r+0x1c>)
 8008e04:	2300      	movs	r3, #0
 8008e06:	4604      	mov	r4, r0
 8008e08:	4608      	mov	r0, r1
 8008e0a:	602b      	str	r3, [r5, #0]
 8008e0c:	f000 f840 	bl	8008e90 <_sbrk>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d102      	bne.n	8008e1a <_sbrk_r+0x1a>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <_sbrk_r+0x1a>
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	20004a04 	.word	0x20004a04

08008e20 <_realloc_r>:
 8008e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e24:	4680      	mov	r8, r0
 8008e26:	4614      	mov	r4, r2
 8008e28:	460e      	mov	r6, r1
 8008e2a:	b921      	cbnz	r1, 8008e36 <_realloc_r+0x16>
 8008e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e30:	4611      	mov	r1, r2
 8008e32:	f7ff bc57 	b.w	80086e4 <_malloc_r>
 8008e36:	b92a      	cbnz	r2, 8008e44 <_realloc_r+0x24>
 8008e38:	f7ff fbe8 	bl	800860c <_free_r>
 8008e3c:	4625      	mov	r5, r4
 8008e3e:	4628      	mov	r0, r5
 8008e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e44:	f000 f81b 	bl	8008e7e <_malloc_usable_size_r>
 8008e48:	4284      	cmp	r4, r0
 8008e4a:	4607      	mov	r7, r0
 8008e4c:	d802      	bhi.n	8008e54 <_realloc_r+0x34>
 8008e4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e52:	d812      	bhi.n	8008e7a <_realloc_r+0x5a>
 8008e54:	4621      	mov	r1, r4
 8008e56:	4640      	mov	r0, r8
 8008e58:	f7ff fc44 	bl	80086e4 <_malloc_r>
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d0ed      	beq.n	8008e3e <_realloc_r+0x1e>
 8008e62:	42bc      	cmp	r4, r7
 8008e64:	4622      	mov	r2, r4
 8008e66:	4631      	mov	r1, r6
 8008e68:	bf28      	it	cs
 8008e6a:	463a      	movcs	r2, r7
 8008e6c:	f7ff fbc0 	bl	80085f0 <memcpy>
 8008e70:	4631      	mov	r1, r6
 8008e72:	4640      	mov	r0, r8
 8008e74:	f7ff fbca 	bl	800860c <_free_r>
 8008e78:	e7e1      	b.n	8008e3e <_realloc_r+0x1e>
 8008e7a:	4635      	mov	r5, r6
 8008e7c:	e7df      	b.n	8008e3e <_realloc_r+0x1e>

08008e7e <_malloc_usable_size_r>:
 8008e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e82:	1f18      	subs	r0, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bfbc      	itt	lt
 8008e88:	580b      	ldrlt	r3, [r1, r0]
 8008e8a:	18c0      	addlt	r0, r0, r3
 8008e8c:	4770      	bx	lr
	...

08008e90 <_sbrk>:
 8008e90:	4a04      	ldr	r2, [pc, #16]	; (8008ea4 <_sbrk+0x14>)
 8008e92:	6811      	ldr	r1, [r2, #0]
 8008e94:	4603      	mov	r3, r0
 8008e96:	b909      	cbnz	r1, 8008e9c <_sbrk+0xc>
 8008e98:	4903      	ldr	r1, [pc, #12]	; (8008ea8 <_sbrk+0x18>)
 8008e9a:	6011      	str	r1, [r2, #0]
 8008e9c:	6810      	ldr	r0, [r2, #0]
 8008e9e:	4403      	add	r3, r0
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	4770      	bx	lr
 8008ea4:	20004a14 	.word	0x20004a14
 8008ea8:	20004a18 	.word	0x20004a18

08008eac <_init>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr

08008eb8 <_fini>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	bf00      	nop
 8008ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ebe:	bc08      	pop	{r3}
 8008ec0:	469e      	mov	lr, r3
 8008ec2:	4770      	bx	lr
