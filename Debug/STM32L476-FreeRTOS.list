
STM32L476-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a860  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800a9f0  0800a9f0  0001a9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad18  0800ad18  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad18  0800ad18  0001ad18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad20  0800ad20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad24  0800ad24  0001ad24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ad28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b88  20000074  0800ad9c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bfc  0800ad9c  00024bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021213  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004462  00000000  00000000  000412fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  00045760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014e5  00000000  00000000  00047248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bcaf  00000000  00000000  0004872d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ecd  00000000  00000000  000743dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001086aa  00000000  00000000  000952a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007358  00000000  00000000  0019d954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001a4cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9d8 	.word	0x0800a9d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a9d8 	.word	0x0800a9d8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200030e8 	.word	0x200030e8

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b970 	b.w	8000580 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	9e08      	ldr	r6, [sp, #32]
 80002be:	460d      	mov	r5, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	460f      	mov	r7, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14a      	bne.n	800035e <__udivmoddi4+0xa6>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4694      	mov	ip, r2
 80002cc:	d965      	bls.n	800039a <__udivmoddi4+0xe2>
 80002ce:	fab2 f382 	clz	r3, r2
 80002d2:	b143      	cbz	r3, 80002e6 <__udivmoddi4+0x2e>
 80002d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	fa20 f202 	lsr.w	r2, r0, r2
 80002e2:	4317      	orrs	r7, r2
 80002e4:	409c      	lsls	r4, r3
 80002e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ea:	fa1f f58c 	uxth.w	r5, ip
 80002ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	4290      	cmp	r0, r2
 8000302:	d90a      	bls.n	800031a <__udivmoddi4+0x62>
 8000304:	eb1c 0202 	adds.w	r2, ip, r2
 8000308:	f101 37ff 	add.w	r7, r1, #4294967295
 800030c:	f080 811c 	bcs.w	8000548 <__udivmoddi4+0x290>
 8000310:	4290      	cmp	r0, r2
 8000312:	f240 8119 	bls.w	8000548 <__udivmoddi4+0x290>
 8000316:	3902      	subs	r1, #2
 8000318:	4462      	add	r2, ip
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032a:	fb00 f505 	mul.w	r5, r0, r5
 800032e:	42a5      	cmp	r5, r4
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x90>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	f080 8107 	bcs.w	800054c <__udivmoddi4+0x294>
 800033e:	42a5      	cmp	r5, r4
 8000340:	f240 8104 	bls.w	800054c <__udivmoddi4+0x294>
 8000344:	4464      	add	r4, ip
 8000346:	3802      	subs	r0, #2
 8000348:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	2100      	movs	r1, #0
 8000350:	b11e      	cbz	r6, 800035a <__udivmoddi4+0xa2>
 8000352:	40dc      	lsrs	r4, r3
 8000354:	2300      	movs	r3, #0
 8000356:	e9c6 4300 	strd	r4, r3, [r6]
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0xbc>
 8000362:	2e00      	cmp	r6, #0
 8000364:	f000 80ed 	beq.w	8000542 <__udivmoddi4+0x28a>
 8000368:	2100      	movs	r1, #0
 800036a:	e9c6 0500 	strd	r0, r5, [r6]
 800036e:	4608      	mov	r0, r1
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d149      	bne.n	8000410 <__udivmoddi4+0x158>
 800037c:	42ab      	cmp	r3, r5
 800037e:	d302      	bcc.n	8000386 <__udivmoddi4+0xce>
 8000380:	4282      	cmp	r2, r0
 8000382:	f200 80f8 	bhi.w	8000576 <__udivmoddi4+0x2be>
 8000386:	1a84      	subs	r4, r0, r2
 8000388:	eb65 0203 	sbc.w	r2, r5, r3
 800038c:	2001      	movs	r0, #1
 800038e:	4617      	mov	r7, r2
 8000390:	2e00      	cmp	r6, #0
 8000392:	d0e2      	beq.n	800035a <__udivmoddi4+0xa2>
 8000394:	e9c6 4700 	strd	r4, r7, [r6]
 8000398:	e7df      	b.n	800035a <__udivmoddi4+0xa2>
 800039a:	b902      	cbnz	r2, 800039e <__udivmoddi4+0xe6>
 800039c:	deff      	udf	#255	; 0xff
 800039e:	fab2 f382 	clz	r3, r2
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	f040 8090 	bne.w	80004c8 <__udivmoddi4+0x210>
 80003a8:	1a8a      	subs	r2, r1, r2
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2101      	movs	r1, #1
 80003b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b8:	fb07 2015 	mls	r0, r7, r5, r2
 80003bc:	0c22      	lsrs	r2, r4, #16
 80003be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c2:	fb0e f005 	mul.w	r0, lr, r5
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x124>
 80003ca:	eb1c 0202 	adds.w	r2, ip, r2
 80003ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x122>
 80003d4:	4290      	cmp	r0, r2
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2b8>
 80003da:	4645      	mov	r5, r8
 80003dc:	1a12      	subs	r2, r2, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e4:	fb07 2210 	mls	r2, r7, r0, r2
 80003e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x14e>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x14c>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2c2>
 8000404:	4610      	mov	r0, r2
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x98>
 8000410:	f1c1 0720 	rsb	r7, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa05 f401 	lsl.w	r4, r5, r1
 8000422:	fa20 f307 	lsr.w	r3, r0, r7
 8000426:	40fd      	lsrs	r5, r7
 8000428:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042c:	4323      	orrs	r3, r4
 800042e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	fb09 5518 	mls	r5, r9, r8, r5
 800043a:	0c1c      	lsrs	r4, r3, #16
 800043c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000440:	fb08 f50e 	mul.w	r5, r8, lr
 8000444:	42a5      	cmp	r5, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	fa00 f001 	lsl.w	r0, r0, r1
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b0>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2b4>
 800045c:	42a5      	cmp	r5, r4
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2b4>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4464      	add	r4, ip
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	b29d      	uxth	r5, r3
 800046c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000470:	fb09 4413 	mls	r4, r9, r3, r4
 8000474:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000478:	fb03 fe0e 	mul.w	lr, r3, lr
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1da>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f103 35ff 	add.w	r5, r3, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2ac>
 800048a:	45a6      	cmp	lr, r4
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2ac>
 800048e:	3b02      	subs	r3, #2
 8000490:	4464      	add	r4, ip
 8000492:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000496:	fba3 9502 	umull	r9, r5, r3, r2
 800049a:	eba4 040e 	sub.w	r4, r4, lr
 800049e:	42ac      	cmp	r4, r5
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46ae      	mov	lr, r5
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x29c>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x298>
 80004a8:	b156      	cbz	r6, 80004c0 <__udivmoddi4+0x208>
 80004aa:	ebb0 0208 	subs.w	r2, r0, r8
 80004ae:	eb64 040e 	sbc.w	r4, r4, lr
 80004b2:	fa04 f707 	lsl.w	r7, r4, r7
 80004b6:	40ca      	lsrs	r2, r1
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	4317      	orrs	r7, r2
 80004bc:	e9c6 7400 	strd	r7, r4, [r6]
 80004c0:	4618      	mov	r0, r3
 80004c2:	2100      	movs	r1, #0
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	f1c3 0120 	rsb	r1, r3, #32
 80004cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d0:	fa20 f201 	lsr.w	r2, r0, r1
 80004d4:	fa25 f101 	lsr.w	r1, r5, r1
 80004d8:	409d      	lsls	r5, r3
 80004da:	432a      	orrs	r2, r5
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ec:	0c11      	lsrs	r1, r2, #16
 80004ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f2:	fb00 f50e 	mul.w	r5, r0, lr
 80004f6:	428d      	cmp	r5, r1
 80004f8:	fa04 f403 	lsl.w	r4, r4, r3
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x258>
 80004fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b0>
 8000508:	428d      	cmp	r5, r1
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b0>
 800050c:	3802      	subs	r0, #2
 800050e:	4461      	add	r1, ip
 8000510:	1b49      	subs	r1, r1, r5
 8000512:	b292      	uxth	r2, r2
 8000514:	fbb1 f5f7 	udiv	r5, r1, r7
 8000518:	fb07 1115 	mls	r1, r7, r5, r1
 800051c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000520:	fb05 f10e 	mul.w	r1, r5, lr
 8000524:	4291      	cmp	r1, r2
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x282>
 8000528:	eb1c 0202 	adds.w	r2, ip, r2
 800052c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2a8>
 8000532:	4291      	cmp	r1, r2
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2a8>
 8000536:	3d02      	subs	r5, #2
 8000538:	4462      	add	r2, ip
 800053a:	1a52      	subs	r2, r2, r1
 800053c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0xfc>
 8000542:	4631      	mov	r1, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e708      	b.n	800035a <__udivmoddi4+0xa2>
 8000548:	4639      	mov	r1, r7
 800054a:	e6e6      	b.n	800031a <__udivmoddi4+0x62>
 800054c:	4610      	mov	r0, r2
 800054e:	e6fb      	b.n	8000348 <__udivmoddi4+0x90>
 8000550:	4548      	cmp	r0, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f0>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb65 0e0c 	sbc.w	lr, r5, ip
 800055c:	3b01      	subs	r3, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f0>
 8000560:	4645      	mov	r5, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x282>
 8000564:	462b      	mov	r3, r5
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1da>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x258>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b0>
 8000570:	3d02      	subs	r5, #2
 8000572:	4462      	add	r2, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x124>
 8000576:	4608      	mov	r0, r1
 8000578:	e70a      	b.n	8000390 <__udivmoddi4+0xd8>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x14e>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000090 	.word	0x20000090
 80005b4:	20000130 	.word	0x20000130

080005b8 <ledEffectTurnAllOff>:


#include "main.h"

void ledEffectTurnAllOff(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <ledEffectTurnAllOff+0x28>)
 80005c2:	f001 fb77 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2102      	movs	r1, #2
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <ledEffectTurnAllOff+0x28>)
 80005cc:	f001 fb72 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <ledEffectTurnAllOff+0x2c>)
 80005d6:	f001 fb6d 	bl	8001cb4 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	48000800 	.word	0x48000800
 80005e4:	48000400 	.word	0x48000400

080005e8 <ledEffectTurnAllOn>:

void ledEffectTurnAllOn(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <ledEffectTurnAllOn+0x28>)
 80005f2:	f001 fb5f 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2102      	movs	r1, #2
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <ledEffectTurnAllOn+0x28>)
 80005fc:	f001 fb5a 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2101      	movs	r1, #1
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <ledEffectTurnAllOn+0x2c>)
 8000606:	f001 fb55 	bl	8001cb4 <HAL_GPIO_WritePin>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	48000800 	.word	0x48000800
 8000614:	48000400 	.word	0x48000400

08000618 <ledEffectCornerLed>:

void ledEffectCornerLed(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2101      	movs	r1, #1
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <ledEffectCornerLed+0x28>)
 8000622:	f001 fb47 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2102      	movs	r1, #2
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <ledEffectCornerLed+0x28>)
 800062c:	f001 fb42 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <ledEffectCornerLed+0x2c>)
 8000636:	f001 fb3d 	bl	8001cb4 <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	48000800 	.word	0x48000800
 8000644:	48000400 	.word	0x48000400

08000648 <ledEffectCentralLed>:

void ledEffectCentralLed(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	4807      	ldr	r0, [pc, #28]	; (8000670 <ledEffectCentralLed+0x28>)
 8000652:	f001 fb2f 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2102      	movs	r1, #2
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <ledEffectCentralLed+0x28>)
 800065c:	f001 fb2a 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <ledEffectCentralLed+0x2c>)
 8000666:	f001 fb25 	bl	8001cb4 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	48000800 	.word	0x48000800
 8000674:	48000400 	.word	0x48000400

08000678 <ledEffect1>:

void ledEffect1(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	 * 0 0 0
	 * 0 1 1 <-
	 * 1 0 1
	 * 1 1 0 <-
	 * */
	(flag ^= 1) ? ledEffectTurnAllOff() : ledEffectTurnAllOn();
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <ledEffect1+0x28>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	f083 0301 	eor.w	r3, r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <ledEffect1+0x28>)
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <ledEffect1+0x28>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <ledEffect1+0x20>
 8000692:	f7ff ff91 	bl	80005b8 <ledEffectTurnAllOff>
}
 8000696:	e001      	b.n	800069c <ledEffect1+0x24>
	(flag ^= 1) ? ledEffectTurnAllOff() : ledEffectTurnAllOn();
 8000698:	f7ff ffa6 	bl	80005e8 <ledEffectTurnAllOn>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000000 	.word	0x20000000

080006a4 <ledEffect2>:

void ledEffect2(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	 * 0 0 0
	 * 0 1 1 <-
	 * 1 0 1
	 * 1 1 0 <-
	 * */
	(flag ^= 1) ? ledEffectCornerLed() : ledEffectCentralLed();
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <ledEffect2+0x28>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f083 0301 	eor.w	r3, r3, #1
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <ledEffect2+0x28>)
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <ledEffect2+0x28>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d002      	beq.n	80006c4 <ledEffect2+0x20>
 80006be:	f7ff ffab 	bl	8000618 <ledEffectCornerLed>

}
 80006c2:	e001      	b.n	80006c8 <ledEffect2+0x24>
	(flag ^= 1) ? ledEffectCornerLed() : ledEffectCentralLed();
 80006c4:	f7ff ffc0 	bl	8000648 <ledEffectCentralLed>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000001 	.word	0x20000001

080006d0 <ledEffect3>:
void ledEffect3(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	static uint8_t counter = 1;

	switch(counter)
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <ledEffect3+0xa0>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d032      	beq.n	8000742 <ledEffect3+0x72>
 80006dc:	2b03      	cmp	r3, #3
 80006de:	dc43      	bgt.n	8000768 <ledEffect3+0x98>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d002      	beq.n	80006ea <ledEffect3+0x1a>
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d016      	beq.n	8000716 <ledEffect3+0x46>
			counter = 1;
			break;
		}

		default: {
			break;
 80006e8:	e03e      	b.n	8000768 <ledEffect3+0x98>
			HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2101      	movs	r1, #1
 80006ee:	4821      	ldr	r0, [pc, #132]	; (8000774 <ledEffect3+0xa4>)
 80006f0:	f001 fae0 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2102      	movs	r1, #2
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <ledEffect3+0xa4>)
 80006fa:	f001 fadb 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	481d      	ldr	r0, [pc, #116]	; (8000778 <ledEffect3+0xa8>)
 8000704:	f001 fad6 	bl	8001cb4 <HAL_GPIO_WritePin>
			counter++;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <ledEffect3+0xa0>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <ledEffect3+0xa0>)
 8000712:	701a      	strb	r2, [r3, #0]
			break;
 8000714:	e029      	b.n	800076a <ledEffect3+0x9a>
			HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2101      	movs	r1, #1
 800071a:	4816      	ldr	r0, [pc, #88]	; (8000774 <ledEffect3+0xa4>)
 800071c:	f001 faca 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2102      	movs	r1, #2
 8000724:	4813      	ldr	r0, [pc, #76]	; (8000774 <ledEffect3+0xa4>)
 8000726:	f001 fac5 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2101      	movs	r1, #1
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <ledEffect3+0xa8>)
 8000730:	f001 fac0 	bl	8001cb4 <HAL_GPIO_WritePin>
			counter++;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <ledEffect3+0xa0>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <ledEffect3+0xa0>)
 800073e:	701a      	strb	r2, [r3, #0]
			break;
 8000740:	e013      	b.n	800076a <ledEffect3+0x9a>
			HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2101      	movs	r1, #1
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <ledEffect3+0xa4>)
 8000748:	f001 fab4 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2102      	movs	r1, #2
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <ledEffect3+0xa4>)
 8000752:	f001 faaf 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <ledEffect3+0xa8>)
 800075c:	f001 faaa 	bl	8001cb4 <HAL_GPIO_WritePin>
			counter = 1;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <ledEffect3+0xa0>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
			break;
 8000766:	e000      	b.n	800076a <ledEffect3+0x9a>
			break;
 8000768:	bf00      	nop
		}
	}
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000002 	.word	0x20000002
 8000774:	48000800 	.word	0x48000800
 8000778:	48000400 	.word	0x48000400

0800077c <ledEffect4>:
void ledEffect4(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	static uint8_t counter = 3;

	switch(counter)
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <ledEffect4+0xa0>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d02f      	beq.n	80007e8 <ledEffect4+0x6c>
 8000788:	2b03      	cmp	r3, #3
 800078a:	dc43      	bgt.n	8000814 <ledEffect4+0x98>
 800078c:	2b01      	cmp	r3, #1
 800078e:	d002      	beq.n	8000796 <ledEffect4+0x1a>
 8000790:	2b02      	cmp	r3, #2
 8000792:	d013      	beq.n	80007bc <ledEffect4+0x40>
			counter--;
			break;
		}

		default: {
			break;
 8000794:	e03e      	b.n	8000814 <ledEffect4+0x98>
			HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2101      	movs	r1, #1
 800079a:	4821      	ldr	r0, [pc, #132]	; (8000820 <ledEffect4+0xa4>)
 800079c:	f001 fa8a 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2102      	movs	r1, #2
 80007a4:	481e      	ldr	r0, [pc, #120]	; (8000820 <ledEffect4+0xa4>)
 80007a6:	f001 fa85 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	481d      	ldr	r0, [pc, #116]	; (8000824 <ledEffect4+0xa8>)
 80007b0:	f001 fa80 	bl	8001cb4 <HAL_GPIO_WritePin>
			counter = 3;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <ledEffect4+0xa0>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	701a      	strb	r2, [r3, #0]
			break;
 80007ba:	e02c      	b.n	8000816 <ledEffect4+0x9a>
			HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2101      	movs	r1, #1
 80007c0:	4817      	ldr	r0, [pc, #92]	; (8000820 <ledEffect4+0xa4>)
 80007c2:	f001 fa77 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2102      	movs	r1, #2
 80007ca:	4815      	ldr	r0, [pc, #84]	; (8000820 <ledEffect4+0xa4>)
 80007cc:	f001 fa72 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	4813      	ldr	r0, [pc, #76]	; (8000824 <ledEffect4+0xa8>)
 80007d6:	f001 fa6d 	bl	8001cb4 <HAL_GPIO_WritePin>
			counter--;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <ledEffect4+0xa0>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	3b01      	subs	r3, #1
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <ledEffect4+0xa0>)
 80007e4:	701a      	strb	r2, [r3, #0]
			break;
 80007e6:	e016      	b.n	8000816 <ledEffect4+0x9a>
			HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2101      	movs	r1, #1
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <ledEffect4+0xa4>)
 80007ee:	f001 fa61 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2102      	movs	r1, #2
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <ledEffect4+0xa4>)
 80007f8:	f001 fa5c 	bl	8001cb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2101      	movs	r1, #1
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <ledEffect4+0xa8>)
 8000802:	f001 fa57 	bl	8001cb4 <HAL_GPIO_WritePin>
			counter--;
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <ledEffect4+0xa0>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	3b01      	subs	r3, #1
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b03      	ldr	r3, [pc, #12]	; (800081c <ledEffect4+0xa0>)
 8000810:	701a      	strb	r2, [r3, #0]
			break;
 8000812:	e000      	b.n	8000816 <ledEffect4+0x9a>
			break;
 8000814:	bf00      	nop
		}
	}
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000003 	.word	0x20000003
 8000820:	48000800 	.word	0x48000800
 8000824:	48000400 	.word	0x48000400

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b08f      	sub	sp, #60	; 0x3c
 800082c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fef5 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f92f 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f9d9 	bl	8000bec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800083a:	f000 f9a7 	bl	8000b8c <MX_USART2_UART_Init>
  MX_RTC_Init();
 800083e:	f000 f97d 	bl	8000b3c <MX_RTC_Init>
  /* Enable the Cortex-M4 CYCCNT counter register.
   * Address: 0xE0001000
   * Access: Read/Write
   * Reset State: 0x40000000
  */
  DWT_CTRL |= (1 << 0);
 8000842:	4b7d      	ldr	r3, [pc, #500]	; (8000a38 <main+0x210>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a7c      	ldr	r2, [pc, #496]	; (8000a38 <main+0x210>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800084e:	f008 fa2f 	bl	8008cb0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000852:	f009 fa51 	bl	8009cf8 <SEGGER_SYSVIEW_Start>


  /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
  /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */

  uint32_t stackSize = (1024 * 1);
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t stack = stackSize / sizeof(StackType_t);
 800085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	627b      	str	r3, [r7, #36]	; 0x24


  xStatus = xTaskCreate(menuTask, "MENU", (uint16_t)stack, (void *)&xPrintQueue, 2, &xMenuTask);
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b75      	ldr	r3, [pc, #468]	; (8000a3c <main+0x214>)
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	2302      	movs	r3, #2
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <main+0x218>)
 8000870:	4974      	ldr	r1, [pc, #464]	; (8000a44 <main+0x21c>)
 8000872:	4875      	ldr	r0, [pc, #468]	; (8000a48 <main+0x220>)
 8000874:	f005 fd52 	bl	800631c <xTaskCreate>
 8000878:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d00a      	beq.n	8000896 <main+0x6e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000884:	f383 8811 	msr	BASEPRI, r3
 8000888:	f3bf 8f6f 	isb	sy
 800088c:	f3bf 8f4f 	dsb	sy
 8000890:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000892:	bf00      	nop
 8000894:	e7fe      	b.n	8000894 <main+0x6c>

  xStatus = xTaskCreate(cmdTask, "CMD", (uint16_t)stack, (void *)&xDataQueue, 2, &xCmdTask);
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	b29a      	uxth	r2, r3
 800089a:	4b6c      	ldr	r3, [pc, #432]	; (8000a4c <main+0x224>)
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	2302      	movs	r3, #2
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	4b6b      	ldr	r3, [pc, #428]	; (8000a50 <main+0x228>)
 80008a4:	496b      	ldr	r1, [pc, #428]	; (8000a54 <main+0x22c>)
 80008a6:	486c      	ldr	r0, [pc, #432]	; (8000a58 <main+0x230>)
 80008a8:	f005 fd38 	bl	800631c <xTaskCreate>
 80008ac:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d00a      	beq.n	80008ca <main+0xa2>
        __asm volatile
 80008b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b8:	f383 8811 	msr	BASEPRI, r3
 80008bc:	f3bf 8f6f 	isb	sy
 80008c0:	f3bf 8f4f 	dsb	sy
 80008c4:	61bb      	str	r3, [r7, #24]
    }
 80008c6:	bf00      	nop
 80008c8:	e7fe      	b.n	80008c8 <main+0xa0>

  xStatus = xTaskCreate(printTask, "PRINT", (uint16_t)stack, (void *)&xPrintQueue, 2, &xPrintTask);
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b63      	ldr	r3, [pc, #396]	; (8000a5c <main+0x234>)
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	2302      	movs	r3, #2
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	4b5a      	ldr	r3, [pc, #360]	; (8000a40 <main+0x218>)
 80008d8:	4961      	ldr	r1, [pc, #388]	; (8000a60 <main+0x238>)
 80008da:	4862      	ldr	r0, [pc, #392]	; (8000a64 <main+0x23c>)
 80008dc:	f005 fd1e 	bl	800631c <xTaskCreate>
 80008e0:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d00a      	beq.n	80008fe <main+0xd6>
        __asm volatile
 80008e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ec:	f383 8811 	msr	BASEPRI, r3
 80008f0:	f3bf 8f6f 	isb	sy
 80008f4:	f3bf 8f4f 	dsb	sy
 80008f8:	617b      	str	r3, [r7, #20]
    }
 80008fa:	bf00      	nop
 80008fc:	e7fe      	b.n	80008fc <main+0xd4>

  xStatus = xTaskCreate(rtcTask, "RTC", (uint16_t)stack, (void *)&xPrintQueue, 2, &xRtcTask);
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <main+0x240>)
 8000904:	9301      	str	r3, [sp, #4]
 8000906:	2302      	movs	r3, #2
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4b4d      	ldr	r3, [pc, #308]	; (8000a40 <main+0x218>)
 800090c:	4957      	ldr	r1, [pc, #348]	; (8000a6c <main+0x244>)
 800090e:	4858      	ldr	r0, [pc, #352]	; (8000a70 <main+0x248>)
 8000910:	f005 fd04 	bl	800631c <xTaskCreate>
 8000914:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 8000916:	6a3b      	ldr	r3, [r7, #32]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d00a      	beq.n	8000932 <main+0x10a>
        __asm volatile
 800091c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000920:	f383 8811 	msr	BASEPRI, r3
 8000924:	f3bf 8f6f 	isb	sy
 8000928:	f3bf 8f4f 	dsb	sy
 800092c:	613b      	str	r3, [r7, #16]
    }
 800092e:	bf00      	nop
 8000930:	e7fe      	b.n	8000930 <main+0x108>

  xStatus = xTaskCreate(ledTask, "LED", (uint16_t)stack, (void *)&xPrintQueue, 2, &xLedTask);
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	b29a      	uxth	r2, r3
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <main+0x24c>)
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	2302      	movs	r3, #2
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <main+0x218>)
 8000940:	494d      	ldr	r1, [pc, #308]	; (8000a78 <main+0x250>)
 8000942:	484e      	ldr	r0, [pc, #312]	; (8000a7c <main+0x254>)
 8000944:	f005 fcea 	bl	800631c <xTaskCreate>
 8000948:	6238      	str	r0, [r7, #32]
  configASSERT(xStatus == pdPASS);
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d00a      	beq.n	8000966 <main+0x13e>
        __asm volatile
 8000950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000954:	f383 8811 	msr	BASEPRI, r3
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	60fb      	str	r3, [r7, #12]
    }
 8000962:	bf00      	nop
 8000964:	e7fe      	b.n	8000964 <main+0x13c>

  xDataQueue = xQueueCreate(16, sizeof(char));
 8000966:	2200      	movs	r2, #0
 8000968:	2101      	movs	r1, #1
 800096a:	2010      	movs	r0, #16
 800096c:	f004 fe6c 	bl	8005648 <xQueueGenericCreate>
 8000970:	4603      	mov	r3, r0
 8000972:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <main+0x228>)
 8000974:	6013      	str	r3, [r2, #0]
  configASSERT(xDataQueue != NULL);
 8000976:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <main+0x228>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10a      	bne.n	8000994 <main+0x16c>
        __asm volatile
 800097e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000982:	f383 8811 	msr	BASEPRI, r3
 8000986:	f3bf 8f6f 	isb	sy
 800098a:	f3bf 8f4f 	dsb	sy
 800098e:	60bb      	str	r3, [r7, #8]
    }
 8000990:	bf00      	nop
 8000992:	e7fe      	b.n	8000992 <main+0x16a>

  // String Queue (item size equal to a pointer pointing to a string)
  xPrintQueue = xQueueCreate(16, sizeof(size_t));
 8000994:	2200      	movs	r2, #0
 8000996:	2104      	movs	r1, #4
 8000998:	2010      	movs	r0, #16
 800099a:	f004 fe55 	bl	8005648 <xQueueGenericCreate>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a27      	ldr	r2, [pc, #156]	; (8000a40 <main+0x218>)
 80009a2:	6013      	str	r3, [r2, #0]
  configASSERT(xPrintQueue != NULL);
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <main+0x218>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10a      	bne.n	80009c2 <main+0x19a>
        __asm volatile
 80009ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b0:	f383 8811 	msr	BASEPRI, r3
 80009b4:	f3bf 8f6f 	isb	sy
 80009b8:	f3bf 8f4f 	dsb	sy
 80009bc:	607b      	str	r3, [r7, #4]
    }
 80009be:	bf00      	nop
 80009c0:	e7fe      	b.n	80009c0 <main+0x198>

  // Software timers for LED effects
  for(uint8_t idx = 0; idx < NUM_TIMERS; idx++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80009c8:	e029      	b.n	8000a1e <main+0x1f6>
  {
	  xLedTimerList[idx] = xTimerCreate("LED_TIMER", pdMS_TO_TICKS(500), pdTRUE, (void*)(idx+1), vLedEffectCB);
 80009ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ce:	3301      	adds	r3, #1
 80009d0:	461a      	mov	r2, r3
 80009d2:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <main+0x258>)
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	4613      	mov	r3, r2
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009e2:	4828      	ldr	r0, [pc, #160]	; (8000a84 <main+0x25c>)
 80009e4:	f007 f98c 	bl	8007d00 <xTimerCreate>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <main+0x260>)
 80009ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  configASSERT( xLedTimerList[idx] );
 80009f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009f4:	4a24      	ldr	r2, [pc, #144]	; (8000a88 <main+0x260>)
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10a      	bne.n	8000a14 <main+0x1ec>
        __asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	603b      	str	r3, [r7, #0]
    }
 8000a10:	bf00      	nop
 8000a12:	e7fe      	b.n	8000a12 <main+0x1ea>
  for(uint8_t idx = 0; idx < NUM_TIMERS; idx++)
 8000a14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a18:	3301      	adds	r3, #1
 8000a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d9d1      	bls.n	80009ca <main+0x1a2>
  }

  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000a26:	2201      	movs	r2, #1
 8000a28:	4918      	ldr	r1, [pc, #96]	; (8000a8c <main+0x264>)
 8000a2a:	4819      	ldr	r0, [pc, #100]	; (8000a90 <main+0x268>)
 8000a2c:	f003 f97a 	bl	8003d24 <HAL_UART_Receive_IT>

  // start the freeRTOS scheduler
   vTaskStartScheduler();
 8000a30:	f005 fe0a 	bl	8006648 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <main+0x20c>
 8000a36:	bf00      	nop
 8000a38:	e0001000 	.word	0xe0001000
 8000a3c:	200003dc 	.word	0x200003dc
 8000a40:	200003f4 	.word	0x200003f4
 8000a44:	0800a9f0 	.word	0x0800a9f0
 8000a48:	0800123d 	.word	0x0800123d
 8000a4c:	200003e0 	.word	0x200003e0
 8000a50:	200003f0 	.word	0x200003f0
 8000a54:	0800a9f8 	.word	0x0800a9f8
 8000a58:	08001325 	.word	0x08001325
 8000a5c:	200003e4 	.word	0x200003e4
 8000a60:	0800a9fc 	.word	0x0800a9fc
 8000a64:	08001425 	.word	0x08001425
 8000a68:	200003ec 	.word	0x200003ec
 8000a6c:	0800aa04 	.word	0x0800aa04
 8000a70:	08001575 	.word	0x08001575
 8000a74:	200003e8 	.word	0x200003e8
 8000a78:	0800aa08 	.word	0x0800aa08
 8000a7c:	08001449 	.word	0x08001449
 8000a80:	08000df5 	.word	0x08000df5
 8000a84:	0800aa0c 	.word	0x0800aa0c
 8000a88:	200003f8 	.word	0x200003f8
 8000a8c:	20000408 	.word	0x20000408
 8000a90:	20000354 	.word	0x20000354

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b096      	sub	sp, #88	; 0x58
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2244      	movs	r2, #68	; 0x44
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f009 feae 	bl	800a804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ab6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aba:	f001 f945 	bl	8001d48 <HAL_PWREx_ControlVoltageScaling>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac4:	f000 fa38 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aea:	2307      	movs	r3, #7
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 f97a 	bl	8001df4 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000b06:	f000 fa17 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2104      	movs	r1, #4
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fd42 	bl	80025ac <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b2e:	f000 fa03 	bl	8000f38 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3758      	adds	r7, #88	; 0x58
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <MX_RTC_Init+0x4c>)
 8000b44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b4e:	227f      	movs	r2, #127	; 0x7f
 8000b50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b54:	22ff      	movs	r2, #255	; 0xff
 8000b56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b72:	f002 fc2d 	bl	80033d0 <HAL_RTC_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000b7c:	f000 f9dc 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000330 	.word	0x20000330
 8000b88:	40002800 	.word	0x40002800

08000b8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bd0:	f002 ffd0 	bl	8003b74 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bda:	f000 f9ad 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000354 	.word	0x20000354
 8000be8:	40004400 	.word	0x40004400

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b4a      	ldr	r3, [pc, #296]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a49      	ldr	r2, [pc, #292]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b47      	ldr	r3, [pc, #284]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	4b44      	ldr	r3, [pc, #272]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a43      	ldr	r2, [pc, #268]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b3b      	ldr	r3, [pc, #236]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a37      	ldr	r2, [pc, #220]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <MX_GPIO_Init+0x140>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2103      	movs	r1, #3
 8000c66:	4832      	ldr	r0, [pc, #200]	; (8000d30 <MX_GPIO_Init+0x144>)
 8000c68:	f001 f824 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2120      	movs	r1, #32
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f001 f81e 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	482d      	ldr	r0, [pc, #180]	; (8000d34 <MX_GPIO_Init+0x148>)
 8000c7e:	f001 f819 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4825      	ldr	r0, [pc, #148]	; (8000d30 <MX_GPIO_Init+0x144>)
 8000c9a:	f000 fe61 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481e      	ldr	r0, [pc, #120]	; (8000d30 <MX_GPIO_Init+0x144>)
 8000cb6:	f000 fe53 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cba:	2320      	movs	r3, #32
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd4:	f000 fe44 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4811      	ldr	r0, [pc, #68]	; (8000d34 <MX_GPIO_Init+0x148>)
 8000cf0:	f000 fe36 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 fe27 	bl	8001960 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2106      	movs	r1, #6
 8000d16:	2028      	movs	r0, #40	; 0x28
 8000d18:	f000 fd78 	bl	800180c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d1c:	2028      	movs	r0, #40	; 0x28
 8000d1e:	f000 fd91 	bl	8001844 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000400 	.word	0x48000400

08000d38 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	6078      	str	r0, [r7, #4]
            the HAL_UART_RxCpltCallback can be implemented in the user file.
  */

  uint8_t dummy;

  if(xQueueIsQueueFullFromISR(xDataQueue) == pdFALSE)
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <HAL_UART_RxCpltCallback+0x80>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 f9d6 	bl	80060f6 <xQueueIsQueueFullFromISR>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d107      	bne.n	8000d60 <HAL_UART_RxCpltCallback+0x28>
  {
	  // enqueue data
	  xQueueSendFromISR(xDataQueue, (void *)&rxData, NULL);
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_UART_RxCpltCallback+0x80>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	2300      	movs	r3, #0
 8000d56:	2200      	movs	r2, #0
 8000d58:	4918      	ldr	r1, [pc, #96]	; (8000dbc <HAL_UART_RxCpltCallback+0x84>)
 8000d5a:	f004 fe13 	bl	8005984 <xQueueGenericSendFromISR>
 8000d5e:	e012      	b.n	8000d86 <HAL_UART_RxCpltCallback+0x4e>
  }
  else
  {
	  if(rxData == 0x0D) // \r in ASCII table - end of data
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_UART_RxCpltCallback+0x84>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b0d      	cmp	r3, #13
 8000d66:	d10e      	bne.n	8000d86 <HAL_UART_RxCpltCallback+0x4e>
	  {
		  // force the last byte as \r
		  xQueueReceiveFromISR(xDataQueue, (void *)&dummy, NULL);
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_UART_RxCpltCallback+0x80>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f107 010f 	add.w	r1, r7, #15
 8000d70:	2200      	movs	r2, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 ffdc 	bl	8005d30 <xQueueReceiveFromISR>
		  xQueueSendFromISR(xDataQueue, (void *)&rxData, NULL);
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_UART_RxCpltCallback+0x80>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2200      	movs	r2, #0
 8000d80:	490e      	ldr	r1, [pc, #56]	; (8000dbc <HAL_UART_RxCpltCallback+0x84>)
 8000d82:	f004 fdff 	bl	8005984 <xQueueGenericSendFromISR>
	  }
  }

  if(rxData == 0x0D) // \r in ASCII table - end of data
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_UART_RxCpltCallback+0x84>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b0d      	cmp	r3, #13
 8000d8c:	d10a      	bne.n	8000da4 <HAL_UART_RxCpltCallback+0x6c>
  {
	  // send notification to cmdTask
	  xTaskNotifyFromISR(xCmdTask, 0, eNoAction, NULL);
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_UART_RxCpltCallback+0x88>)
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2300      	movs	r3, #0
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f006 fd78 	bl	8007894 <xTaskGenericNotifyFromISR>
  }

  // enable UART data byte reception again in IT mode
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	4905      	ldr	r1, [pc, #20]	; (8000dbc <HAL_UART_RxCpltCallback+0x84>)
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <HAL_UART_RxCpltCallback+0x8c>)
 8000daa:	f002 ffbb 	bl	8003d24 <HAL_UART_Receive_IT>

}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200003f0 	.word	0x200003f0
 8000dbc:	20000408 	.word	0x20000408
 8000dc0:	200003e0 	.word	0x200003e0
 8000dc4:	20000354 	.word	0x20000354

08000dc8 <printMsg>:

void printMsg(uint32_t* msg)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fa51 	bl	8000278 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <printMsg+0x28>)
 8000de2:	f002 ff15 	bl	8003c10 <HAL_UART_Transmit>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000354 	.word	0x20000354

08000df4 <vLedEffectCB>:

// Define a callback function that will be used by multiple timer instance
void vLedEffectCB (TimerHandle_t xTimer)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	/* Optionally do something if the pxTimer parameter is NULL. */
	configASSERT( xTimer );
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10a      	bne.n	8000e18 <vLedEffectCB+0x24>
        __asm volatile
 8000e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	60bb      	str	r3, [r7, #8]
    }
 8000e14:	bf00      	nop
 8000e16:	e7fe      	b.n	8000e16 <vLedEffectCB+0x22>

	uint32_t id = (uint32_t) pvTimerGetTimerID( xTimer );
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f007 fa75 	bl	8008308 <pvTimerGetTimerID>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60fb      	str	r3, [r7, #12]

	switch(id)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d816      	bhi.n	8000e58 <vLedEffectCB+0x64>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <vLedEffectCB+0x3c>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000e47 	.word	0x08000e47
 8000e38:	08000e4d 	.word	0x08000e4d
 8000e3c:	08000e53 	.word	0x08000e53
	{
		case 1: {
			ledEffect1();
 8000e40:	f7ff fc1a 	bl	8000678 <ledEffect1>
		break;
 8000e44:	e009      	b.n	8000e5a <vLedEffectCB+0x66>
		}

		case 2: {
			ledEffect2();
 8000e46:	f7ff fc2d 	bl	80006a4 <ledEffect2>
		break;
 8000e4a:	e006      	b.n	8000e5a <vLedEffectCB+0x66>
		}

		case 3: {
			ledEffect3();
 8000e4c:	f7ff fc40 	bl	80006d0 <ledEffect3>
		break;
 8000e50:	e003      	b.n	8000e5a <vLedEffectCB+0x66>
		}

		case 4: {
			ledEffect4();
 8000e52:	f7ff fc93 	bl	800077c <ledEffect4>
		break;
 8000e56:	e000      	b.n	8000e5a <vLedEffectCB+0x66>
		}

		default:
			break;
 8000e58:	bf00      	nop
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop

08000e64 <ledEffectStop>:

void ledEffectStop(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af02      	add	r7, sp, #8
	ledEffectTurnAllOff();
 8000e6a:	f7ff fba5 	bl	80005b8 <ledEffectTurnAllOff>
	for(uint8_t idx = 0; idx < NUM_TIMERS; idx++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	71fb      	strb	r3, [r7, #7]
 8000e72:	e00e      	b.n	8000e92 <ledEffectStop+0x2e>
	{
	  xTimerStop(xLedTimerList[idx], portMAX_DELAY);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <ledEffectStop+0x40>)
 8000e78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2300      	movs	r3, #0
 8000e84:	2200      	movs	r2, #0
 8000e86:	2103      	movs	r1, #3
 8000e88:	f006 ff94 	bl	8007db4 <xTimerGenericCommand>
	for(uint8_t idx = 0; idx < NUM_TIMERS; idx++)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d9ed      	bls.n	8000e74 <ledEffectStop+0x10>
	}
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200003f8 	.word	0x200003f8

08000ea8 <ledEffectStart>:

void ledEffectStart(uint32_t opt)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
	ledEffectStop();
 8000eb0:	f7ff ffd8 	bl	8000e64 <ledEffectStop>
	xTimerStart(xLedTimerList[opt - 1], portMAX_DELAY);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <ledEffectStart+0x34>)
 8000eba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000ebe:	f005 fd57 	bl	8006970 <xTaskGetTickCount>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f006 ff70 	bl	8007db4 <xTimerGenericCommand>
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	200003f8 	.word	0x200003f8

08000ee0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <vApplicationGetTimerTaskMemory+0x2c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <vApplicationGetTimerTaskMemory+0x30>)
 8000ef6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2240      	movs	r2, #64	; 0x40
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000040c 	.word	0x2000040c
 8000f10:	200004ac 	.word	0x200004ac

08000f14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f26:	f000 fb99 	bl	800165c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40001000 	.word	0x40001000

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x44>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_MspInit+0x44>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6613      	str	r3, [r2, #96]	; 0x60
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_MspInit+0x44>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_MspInit+0x44>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_MspInit+0x44>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  // This initializes a variable which is related to priority grouping
  // This initialization is actually done by the scheduler, but the problem
  // is that the priority grouping initialization is required for the SEGGER
  // start function.
  vInitPrioGroupValue();
 8000f7a:	f007 fb15 	bl	80085a8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0a4      	sub	sp, #144	; 0x90
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	2288      	movs	r2, #136	; 0x88
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f009 fc31 	bl	800a804 <memset>
  if(hrtc->Instance==RTC)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_RTC_MspInit+0x5c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d118      	bne.n	8000fde <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fd4a 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fca:	f7ff ffb5 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_RTC_MspInit+0x60>)
 8000fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_RTC_MspInit+0x60>)
 8000fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3790      	adds	r7, #144	; 0x90
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40002800 	.word	0x40002800
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0ac      	sub	sp, #176	; 0xb0
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2288      	movs	r2, #136	; 0x88
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fbf7 	bl	800a804 <memset>
  if(huart->Instance==USART2)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <HAL_UART_MspInit+0xc0>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d143      	bne.n	80010a8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001020:	2302      	movs	r3, #2
 8001022:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001024:	2300      	movs	r3, #0
 8001026:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fd13 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001038:	f7ff ff7e 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_UART_MspInit+0xc4>)
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <HAL_UART_MspInit+0xc4>)
 8001042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001046:	6593      	str	r3, [r2, #88]	; 0x58
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_UART_MspInit+0xc4>)
 800104a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0xc4>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001058:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <HAL_UART_MspInit+0xc4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_UART_MspInit+0xc4>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800106c:	230c      	movs	r3, #12
 800106e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001084:	2307      	movs	r3, #7
 8001086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f000 fc64 	bl	8001960 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2106      	movs	r1, #6
 800109c:	2026      	movs	r0, #38	; 0x26
 800109e:	f000 fbb5 	bl	800180c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010a2:	2026      	movs	r0, #38	; 0x26
 80010a4:	f000 fbce 	bl	8001844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	37b0      	adds	r7, #176	; 0xb0
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	; 0x38
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <HAL_InitTick+0xe0>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	4a33      	ldr	r2, [pc, #204]	; (8001198 <HAL_InitTick+0xe0>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_InitTick+0xe0>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010de:	f107 0210 	add.w	r2, r7, #16
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fc23 	bl	8002934 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010f8:	f001 fbf0 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 80010fc:	6378      	str	r0, [r7, #52]	; 0x34
 80010fe:	e004      	b.n	800110a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001100:	f001 fbec 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8001104:	4603      	mov	r3, r0
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800110a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110c:	4a23      	ldr	r2, [pc, #140]	; (800119c <HAL_InitTick+0xe4>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9b      	lsrs	r3, r3, #18
 8001114:	3b01      	subs	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <HAL_InitTick+0xe8>)
 800111a:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <HAL_InitTick+0xec>)
 800111c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_InitTick+0xe8>)
 8001120:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001124:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_InitTick+0xe8>)
 8001128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_InitTick+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_InitTick+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_InitTick+0xe8>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800113e:	4818      	ldr	r0, [pc, #96]	; (80011a0 <HAL_InitTick+0xe8>)
 8001140:	f002 fa64 	bl	800360c <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800114a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800114e:	2b00      	cmp	r3, #0
 8001150:	d11b      	bne.n	800118a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001152:	4813      	ldr	r0, [pc, #76]	; (80011a0 <HAL_InitTick+0xe8>)
 8001154:	f002 fabc 	bl	80036d0 <HAL_TIM_Base_Start_IT>
 8001158:	4603      	mov	r3, r0
 800115a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800115e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001162:	2b00      	cmp	r3, #0
 8001164:	d111      	bne.n	800118a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001166:	2036      	movs	r0, #54	; 0x36
 8001168:	f000 fb6c 	bl	8001844 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	d808      	bhi.n	8001184 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001172:	2200      	movs	r2, #0
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	2036      	movs	r0, #54	; 0x36
 8001178:	f000 fb48 	bl	800180c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_InitTick+0xf0>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e002      	b.n	800118a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800118a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800118e:	4618      	mov	r0, r3
 8001190:	3738      	adds	r7, #56	; 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	431bde83 	.word	0x431bde83
 80011a0:	200005ac 	.word	0x200005ac
 80011a4:	40001000 	.word	0x40001000
 80011a8:	20000014 	.word	0x20000014

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <USART2_IRQHandler+0x10>)
 80011de:	f002 fded 	bl	8003dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000354 	.word	0x20000354

080011ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80011f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011f4:	f000 fd76 	bl	8001ce4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011fc:	f000 fd72 	bl	8001ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <TIM6_DAC_IRQHandler+0x10>)
 800120a:	f002 fad1 	bl	80037b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200005ac 	.word	0x200005ac

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <menuTask>:
			  	  	  "Enter your choice here : ";

const char* msgInvalid = "\r\n\r\n////Invalid Option////\r\n\r\n";

void menuTask (void* pvParameters)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af02      	add	r7, sp, #8
 8001242:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	uint32_t cmdAddr;
	cmd_t* cmd;

	xTaskHandle xLed, xRtc;
	xLed = xTaskGetHandle("LED");
 8001244:	4833      	ldr	r0, [pc, #204]	; (8001314 <menuTask+0xd8>)
 8001246:	f005 fc2f 	bl	8006aa8 <xTaskGetHandle>
 800124a:	61f8      	str	r0, [r7, #28]
	xRtc = xTaskGetHandle("RTC");
 800124c:	4832      	ldr	r0, [pc, #200]	; (8001318 <menuTask+0xdc>)
 800124e:	f005 fc2b 	bl	8006aa8 <xTaskGetHandle>
 8001252:	61b8      	str	r0, [r7, #24]

	while(1)
	{
		// sending the pointer of the string
		xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgMenu, portMAX_DELAY);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	f04f 32ff 	mov.w	r2, #4294967295
 800125e:	492f      	ldr	r1, [pc, #188]	; (800131c <menuTask+0xe0>)
 8001260:	f004 fa6a 	bl	8005738 <xQueueGenericSend>

		// wait until receive some notification with command address
		ret = xTaskNotifyWait(0,0, &cmdAddr, portMAX_DELAY);
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	9200      	str	r2, [sp, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2000      	movs	r0, #0
 8001274:	f006 f952 	bl	800751c <xTaskGenericNotifyWait>
 8001278:	6178      	str	r0, [r7, #20]

		if(ret == pdTRUE)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d13e      	bne.n	80012fe <menuTask+0xc2>
		{
			cmd = (cmd_t *)cmdAddr;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	613b      	str	r3, [r7, #16]

			if(cmd->buffSize == 1)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	7c1b      	ldrb	r3, [r3, #16]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d12e      	bne.n	80012ea <menuTask+0xae>
			{
				operation_t opt = cmd->buff[0] - 48; // ASCII to number
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b30      	subs	r3, #48	; 0x30
 8001292:	73fb      	strb	r3, [r7, #15]

				switch(opt)
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d030      	beq.n	80012fc <menuTask+0xc0>
 800129a:	2b02      	cmp	r3, #2
 800129c:	dc1c      	bgt.n	80012d8 <menuTask+0x9c>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <menuTask+0x6c>
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d00c      	beq.n	80012c0 <menuTask+0x84>
 80012a6:	e017      	b.n	80012d8 <menuTask+0x9c>
				{
					case LED: {
						setState(LED_EFFECT);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f000 f97b 	bl	80015a4 <setState>
						xTaskNotify(xLed, 0, eNoAction);
 80012ae:	2300      	movs	r3, #0
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2300      	movs	r3, #0
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	69f8      	ldr	r0, [r7, #28]
 80012ba:	f006 f9b7 	bl	800762c <xTaskGenericNotify>
					break;
 80012be:	e01e      	b.n	80012fe <menuTask+0xc2>
					}

					case DATA_TIME: {
						setState(RTC_MENU);
 80012c0:	2002      	movs	r0, #2
 80012c2:	f000 f96f 	bl	80015a4 <setState>
						xTaskNotify(xRtc, 0, eNoAction);
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	69b8      	ldr	r0, [r7, #24]
 80012d2:	f006 f9ab 	bl	800762c <xTaskGenericNotify>
					break;
 80012d6:	e012      	b.n	80012fe <menuTask+0xc2>
					break;
					}

					default:
						// sending the pointer of the string
						xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgInvalid, portMAX_DELAY);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	2300      	movs	r3, #0
 80012de:	f04f 32ff 	mov.w	r2, #4294967295
 80012e2:	490f      	ldr	r1, [pc, #60]	; (8001320 <menuTask+0xe4>)
 80012e4:	f004 fa28 	bl	8005738 <xQueueGenericSend>
						break;
 80012e8:	e009      	b.n	80012fe <menuTask+0xc2>
				}
			}
			else
			{
				// sending the pointer of the string
				xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgInvalid, portMAX_DELAY);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	490a      	ldr	r1, [pc, #40]	; (8001320 <menuTask+0xe4>)
 80012f6:	f004 fa1f 	bl	8005738 <xQueueGenericSend>
				continue;
 80012fa:	e009      	b.n	8001310 <menuTask+0xd4>
					break;
 80012fc:	bf00      	nop
			}
		}

		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2000      	movs	r0, #0
 800130c:	f006 f906 	bl	800751c <xTaskGenericNotifyWait>
		xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgMenu, portMAX_DELAY);
 8001310:	e7a0      	b.n	8001254 <menuTask+0x18>
 8001312:	bf00      	nop
 8001314:	0800aba8 	.word	0x0800aba8
 8001318:	0800abac 	.word	0x0800abac
 800131c:	20000008 	.word	0x20000008
 8001320:	20000010 	.word	0x20000010

08001324 <cmdTask>:
	}
}

void cmdTask (void* pvParameters)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	; 0x38
 8001328:	af02      	add	r7, sp, #8
 800132a:	6078      	str	r0, [r7, #4]
	uint8_t data, idx;

	cmd_t cmd;

	xTaskHandle xMenu, xLed;
	xMenu = xTaskGetHandle("MENU");
 800132c:	483b      	ldr	r0, [pc, #236]	; (800141c <cmdTask+0xf8>)
 800132e:	f005 fbbb 	bl	8006aa8 <xTaskGetHandle>
 8001332:	62b8      	str	r0, [r7, #40]	; 0x28
	xLed = xTaskGetHandle("LED");
 8001334:	483a      	ldr	r0, [pc, #232]	; (8001420 <cmdTask+0xfc>)
 8001336:	f005 fbb7 	bl	8006aa8 <xTaskGetHandle>
 800133a:	6278      	str	r0, [r7, #36]	; 0x24
//	xRtc = xTaskGetHandle("RTC");

	while(1)
	{
		// wait until receive some notification -> portMAX_DELAY
		ret = xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2000      	movs	r0, #0
 800134a:	f006 f8e7 	bl	800751c <xTaskGenericNotifyWait>
 800134e:	6238      	str	r0, [r7, #32]

		// the notification is received
		if(ret == pdTRUE)
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d1f2      	bne.n	800133c <cmdTask+0x18>
		{
			ret = uxQueueMessagesWaiting( (*(QueueHandle_t*)(pvParameters)) );
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f004 fd9d 	bl	8005e9a <uxQueueMessagesWaiting>
 8001360:	4603      	mov	r3, r0
 8001362:	623b      	str	r3, [r7, #32]

			if(ret != 0)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0e8      	beq.n	800133c <cmdTask+0x18>
			{
				memset(&cmd, 0, sizeof(cmd));
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2211      	movs	r2, #17
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f009 fa46 	bl	800a804 <memset>
				idx = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				data = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	77bb      	strb	r3, [r7, #30]

				while(1)
				{
					ret = xQueueReceive( (*(QueueHandle_t*)(pvParameters)), &data, 0);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f107 011e 	add.w	r1, r7, #30
 800138a:	2200      	movs	r2, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f004 fbbf 	bl	8005b10 <xQueueReceive>
 8001392:	6238      	str	r0, [r7, #32]
					if(ret == pdTRUE)
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d1f3      	bne.n	8001382 <cmdTask+0x5e>
					{
						if(data == 0xD)
 800139a:	7fbb      	ldrb	r3, [r7, #30]
 800139c:	2b0d      	cmp	r3, #13
 800139e:	d00c      	beq.n	80013ba <cmdTask+0x96>
							break;

						cmd.buff[idx] = data;
 80013a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013a4:	7fba      	ldrb	r2, [r7, #30]
 80013a6:	3330      	adds	r3, #48	; 0x30
 80013a8:	443b      	add	r3, r7
 80013aa:	f803 2c24 	strb.w	r2, [r3, #-36]
						idx++;
 80013ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013b2:	3301      	adds	r3, #1
 80013b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					ret = xQueueReceive( (*(QueueHandle_t*)(pvParameters)), &data, 0);
 80013b8:	e7e3      	b.n	8001382 <cmdTask+0x5e>
							break;
 80013ba:	bf00      	nop
					}
				}
				cmd.buffSize = idx;
 80013bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013c0:	773b      	strb	r3, [r7, #28]

				getState(&currState);
 80013c2:	f107 031f 	add.w	r3, r7, #31
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f8da 	bl	8001580 <getState>
				switch(currState)
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d822      	bhi.n	8001418 <cmdTask+0xf4>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <cmdTask+0xb4>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013f1 	.word	0x080013f1
 80013dc:	08001405 	.word	0x08001405
 80013e0:	08001419 	.word	0x08001419
 80013e4:	08001419 	.word	0x08001419
 80013e8:	08001419 	.word	0x08001419
 80013ec:	08001419 	.word	0x08001419
				{
					case MAIN_MENU: {
						xTaskNotify(xMenu, (uint32_t)&cmd, eSetValueWithOverwrite);
 80013f0:	f107 020c 	add.w	r2, r7, #12
 80013f4:	2300      	movs	r3, #0
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2303      	movs	r3, #3
 80013fa:	2100      	movs	r1, #0
 80013fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013fe:	f006 f915 	bl	800762c <xTaskGenericNotify>
					break;
 8001402:	e00a      	b.n	800141a <cmdTask+0xf6>
					}

					case LED_EFFECT: {
						xTaskNotify(xLed, (uint32_t)&cmd, eSetValueWithOverwrite);
 8001404:	f107 020c 	add.w	r2, r7, #12
 8001408:	2300      	movs	r3, #0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2303      	movs	r3, #3
 800140e:	2100      	movs	r1, #0
 8001410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001412:	f006 f90b 	bl	800762c <xTaskGenericNotify>
					break;
 8001416:	e000      	b.n	800141a <cmdTask+0xf6>

					break;
					}

					default:
						break;
 8001418:	bf00      	nop
		ret = xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 800141a:	e78f      	b.n	800133c <cmdTask+0x18>
 800141c:	0800abb0 	.word	0x0800abb0
 8001420:	0800aba8 	.word	0x0800aba8

08001424 <printTask>:
		}
	}
}

void printTask (void* pvParameters)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	uint32_t* msg;
	while(1)
	{
		// stay blocked until some data is inserted into the queue
		// getting the pointer of the string
		xQueueReceive( (*(QueueHandle_t*)(pvParameters)), &msg, portMAX_DELAY );
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f107 010c 	add.w	r1, r7, #12
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	4618      	mov	r0, r3
 800143a:	f004 fb69 	bl	8005b10 <xQueueReceive>
		printMsg(msg);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fcc1 	bl	8000dc8 <printMsg>
		xQueueReceive( (*(QueueHandle_t*)(pvParameters)), &msg, portMAX_DELAY );
 8001446:	e7f1      	b.n	800142c <printTask+0x8>

08001448 <ledTask>:
	}
}

void ledTask (void* pvParameters)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af02      	add	r7, sp, #8
 800144e:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	uint32_t cmdAddr;
	cmd_t* cmd;

	xTaskHandle xMenu;
	xMenu = xTaskGetHandle("MENU");
 8001450:	4840      	ldr	r0, [pc, #256]	; (8001554 <ledTask+0x10c>)
 8001452:	f005 fb29 	bl	8006aa8 <xTaskGetHandle>
 8001456:	6178      	str	r0, [r7, #20]

	while(1)
	{
		//wait to run again when some other task notifies
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2300      	movs	r3, #0
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2000      	movs	r0, #0
 8001466:	f006 f859 	bl	800751c <xTaskGenericNotifyWait>

		// sending the pointer of the string
		xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgLed, portMAX_DELAY);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	4938      	ldr	r1, [pc, #224]	; (8001558 <ledTask+0x110>)
 8001476:	f004 f95f 	bl	8005738 <xQueueGenericSend>

		ret = xTaskNotifyWait(0,0, &cmdAddr, portMAX_DELAY);
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	f04f 32ff 	mov.w	r2, #4294967295
 8001482:	9200      	str	r2, [sp, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2000      	movs	r0, #0
 800148a:	f006 f847 	bl	800751c <xTaskGenericNotifyWait>
 800148e:	6138      	str	r0, [r7, #16]

		if(ret == pdTRUE)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d1e0      	bne.n	8001458 <ledTask+0x10>
		{
			cmd = (cmd_t *)cmdAddr;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	60fb      	str	r3, [r7, #12]

			if(cmd->buffSize <= 4)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	7c1b      	ldrb	r3, [r3, #16]
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d843      	bhi.n	800152a <ledTask+0xe2>
			{
				if(! strcmp( (char*)cmd->buff , "none"))
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	492d      	ldr	r1, [pc, #180]	; (800155c <ledTask+0x114>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fedc 	bl	8000264 <strcmp>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <ledTask+0x70>
					ledEffectStop();
 80014b2:	f7ff fcd7 	bl	8000e64 <ledEffectStop>
 80014b6:	e040      	b.n	800153a <ledTask+0xf2>

				else if(! strcmp( (char*)cmd->buff , "e1"))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4929      	ldr	r1, [pc, #164]	; (8001560 <ledTask+0x118>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fed1 	bl	8000264 <strcmp>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d103      	bne.n	80014d0 <ledTask+0x88>
					ledEffectStart(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff fced 	bl	8000ea8 <ledEffectStart>
 80014ce:	e034      	b.n	800153a <ledTask+0xf2>

				else if(! strcmp( (char*)cmd->buff , "e2"))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4924      	ldr	r1, [pc, #144]	; (8001564 <ledTask+0x11c>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe fec5 	bl	8000264 <strcmp>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d103      	bne.n	80014e8 <ledTask+0xa0>
					ledEffectStart(2);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f7ff fce1 	bl	8000ea8 <ledEffectStart>
 80014e6:	e028      	b.n	800153a <ledTask+0xf2>

				else if(! strcmp( (char*)cmd->buff , "e3"))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	491f      	ldr	r1, [pc, #124]	; (8001568 <ledTask+0x120>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe feb9 	bl	8000264 <strcmp>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d103      	bne.n	8001500 <ledTask+0xb8>
					ledEffectStart(3);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f7ff fcd5 	bl	8000ea8 <ledEffectStart>
 80014fe:	e01c      	b.n	800153a <ledTask+0xf2>

				else if(! strcmp( (char*)cmd->buff , "e4"))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	491a      	ldr	r1, [pc, #104]	; (800156c <ledTask+0x124>)
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe fead 	bl	8000264 <strcmp>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d103      	bne.n	8001518 <ledTask+0xd0>
					ledEffectStart(4);
 8001510:	2004      	movs	r0, #4
 8001512:	f7ff fcc9 	bl	8000ea8 <ledEffectStart>
 8001516:	e010      	b.n	800153a <ledTask+0xf2>
				else
					xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgInvalid, portMAX_DELAY);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	f04f 32ff 	mov.w	r2, #4294967295
 8001522:	4913      	ldr	r1, [pc, #76]	; (8001570 <ledTask+0x128>)
 8001524:	f004 f908 	bl	8005738 <xQueueGenericSend>
 8001528:	e007      	b.n	800153a <ledTask+0xf2>
			}
			else
			{
				// sending the pointer of the string
				xQueueSend((*(QueueHandle_t*)(pvParameters)), &msgInvalid, portMAX_DELAY);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	490e      	ldr	r1, [pc, #56]	; (8001570 <ledTask+0x128>)
 8001536:	f004 f8ff 	bl	8005738 <xQueueGenericSend>
			}
			setState(MAIN_MENU);
 800153a:	2000      	movs	r0, #0
 800153c:	f000 f832 	bl	80015a4 <setState>
			xTaskNotify(xMenu, 0, eNoAction);
 8001540:	2300      	movs	r3, #0
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2300      	movs	r3, #0
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f006 f86e 	bl	800762c <xTaskGenericNotify>
		xTaskNotifyWait(0,0, NULL, portMAX_DELAY);
 8001550:	e782      	b.n	8001458 <ledTask+0x10>
 8001552:	bf00      	nop
 8001554:	0800abb0 	.word	0x0800abb0
 8001558:	2000000c 	.word	0x2000000c
 800155c:	0800abb8 	.word	0x0800abb8
 8001560:	0800abc0 	.word	0x0800abc0
 8001564:	0800abc4 	.word	0x0800abc4
 8001568:	0800abc8 	.word	0x0800abc8
 800156c:	0800abcc 	.word	0x0800abcc
 8001570:	20000010 	.word	0x20000010

08001574 <rtcTask>:
		}
	}
}

void rtcTask (void* pvParameters)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	while(1)
 800157c:	e7fe      	b.n	800157c <rtcTask+0x8>
	...

08001580 <getState>:

	}
}

void getState(state_t* currState)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	portENTER_CRITICAL();
 8001588:	f007 f88c 	bl	80086a4 <vPortEnterCritical>
	(*currState) = state;
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <getState+0x20>)
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	701a      	strb	r2, [r3, #0]
	portEXIT_CRITICAL();
 8001594:	f007 f8b6 	bl	8008704 <vPortExitCritical>

}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200005f8 	.word	0x200005f8

080015a4 <setState>:

void setState(state_t newState)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	portENTER_CRITICAL();
 80015ae:	f007 f879 	bl	80086a4 <vPortEnterCritical>
	state = newState;
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <setState+0x20>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	7013      	strb	r3, [r2, #0]
	portEXIT_CRITICAL();
 80015b8:	f007 f8a4 	bl	8008704 <vPortExitCritical>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200005f8 	.word	0x200005f8

080015c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015cc:	f7ff fe24 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <LoopForever+0x6>)
  ldr r1, =_edata
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <LoopForever+0xe>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e8:	4c0a      	ldr	r4, [pc, #40]	; (8001614 <LoopForever+0x16>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f6:	f009 f963 	bl	800a8c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015fa:	f7ff f915 	bl	8000828 <main>

080015fe <LoopForever>:

LoopForever:
    b LoopForever
 80015fe:	e7fe      	b.n	80015fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001600:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800160c:	0800ad28 	.word	0x0800ad28
  ldr r2, =_sbss
 8001610:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001614:	20004bfc 	.word	0x20004bfc

08001618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC1_2_IRQHandler>
	...

0800161c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_Init+0x3c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_Init+0x3c>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001632:	2003      	movs	r0, #3
 8001634:	f000 f8df 	bl	80017f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001638:	200f      	movs	r0, #15
 800163a:	f7ff fd3d 	bl	80010b8 <HAL_InitTick>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	e001      	b.n	800164e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164a:	f7ff fc7b 	bl	8000f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800164e:	79fb      	ldrb	r3, [r7, #7]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40022000 	.word	0x40022000

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000018 	.word	0x20000018
 8001680:	200005fc 	.word	0x200005fc

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	200005fc 	.word	0x200005fc

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4907      	ldr	r1, [pc, #28]	; (8001738 <__NVIC_EnableIRQ+0x38>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ff4c 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800181e:	f7ff ff61 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001822:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	6978      	ldr	r0, [r7, #20]
 800182a:	f7ff ffb1 	bl	8001790 <NVIC_EncodePriority>
 800182e:	4602      	mov	r2, r0
 8001830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff80 	bl	800173c <__NVIC_SetPriority>
}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff54 	bl	8001700 <__NVIC_EnableIRQ>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d008      	beq.n	800188a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2204      	movs	r2, #4
 800187c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e022      	b.n	80018d0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 020e 	bic.w	r2, r2, #14
 8001898:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0201 	bic.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 021c 	and.w	r2, r3, #28
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f202 	lsl.w	r2, r1, r2
 80018bc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d005      	beq.n	8001900 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	e029      	b.n	8001954 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 020e 	bic.w	r2, r2, #14
 800190e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f003 021c 	and.w	r2, r3, #28
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	4798      	blx	r3
    }
  }
  return status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e17f      	b.n	8001c70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8171 	beq.w	8001c6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d005      	beq.n	80019a0 <HAL_GPIO_Init+0x40>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d130      	bne.n	8001a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019d6:	2201      	movs	r2, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	f003 0201 	and.w	r2, r3, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d118      	bne.n	8001a40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a14:	2201      	movs	r2, #1
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f003 0201 	and.w	r2, r3, #1
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d017      	beq.n	8001a7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d123      	bne.n	8001ad0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	6939      	ldr	r1, [r7, #16]
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80ac 	beq.w	8001c6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_GPIO_Init+0x330>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	4a5e      	ldr	r2, [pc, #376]	; (8001c90 <HAL_GPIO_Init+0x330>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_GPIO_Init+0x330>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b2a:	4a5a      	ldr	r2, [pc, #360]	; (8001c94 <HAL_GPIO_Init+0x334>)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b54:	d025      	beq.n	8001ba2 <HAL_GPIO_Init+0x242>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4f      	ldr	r2, [pc, #316]	; (8001c98 <HAL_GPIO_Init+0x338>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01f      	beq.n	8001b9e <HAL_GPIO_Init+0x23e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4e      	ldr	r2, [pc, #312]	; (8001c9c <HAL_GPIO_Init+0x33c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x23a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4d      	ldr	r2, [pc, #308]	; (8001ca0 <HAL_GPIO_Init+0x340>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x236>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4c      	ldr	r2, [pc, #304]	; (8001ca4 <HAL_GPIO_Init+0x344>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x232>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4b      	ldr	r2, [pc, #300]	; (8001ca8 <HAL_GPIO_Init+0x348>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x22e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4a      	ldr	r2, [pc, #296]	; (8001cac <HAL_GPIO_Init+0x34c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x22a>
 8001b86:	2306      	movs	r3, #6
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x244>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bb4:	4937      	ldr	r1, [pc, #220]	; (8001c94 <HAL_GPIO_Init+0x334>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c10:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_GPIO_Init+0x350>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f47f ae78 	bne.w	8001970 <HAL_GPIO_Init+0x10>
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	48000c00 	.word	0x48000c00
 8001ca4:	48001000 	.word	0x48001000
 8001ca8:	48001400 	.word	0x48001400
 8001cac:	48001800 	.word	0x48001800
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f806 	bl	8001d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000

08001d48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d56:	d130      	bne.n	8001dba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d64:	d038      	beq.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2232      	movs	r2, #50	; 0x32
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9b      	lsrs	r3, r3, #18
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8c:	e002      	b.n	8001d94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da0:	d102      	bne.n	8001da8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f2      	bne.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db4:	d110      	bne.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e00f      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc6:	d007      	beq.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40007000 	.word	0x40007000
 8001dec:	20000004 	.word	0x20000004
 8001df0:	431bde83 	.word	0x431bde83

08001df4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e3ca      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e06:	4b97      	ldr	r3, [pc, #604]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e10:	4b94      	ldr	r3, [pc, #592]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80e4 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4a>
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	f040 808b 	bne.w	8001f4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f040 8087 	bne.w	8001f4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e3e:	4b89      	ldr	r3, [pc, #548]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x62>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e3a2      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1a      	ldr	r2, [r3, #32]
 8001e5a:	4b82      	ldr	r3, [pc, #520]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_RCC_OscConfig+0x7c>
 8001e66:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6e:	e005      	b.n	8001e7c <HAL_RCC_OscConfig+0x88>
 8001e70:	4b7c      	ldr	r3, [pc, #496]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d223      	bcs.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fd87 	bl	8002998 <RCC_SetFlashLatencyFromMSIRange>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e383      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e94:	4b73      	ldr	r3, [pc, #460]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a72      	ldr	r2, [pc, #456]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b70      	ldr	r3, [pc, #448]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	496d      	ldr	r1, [pc, #436]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb2:	4b6c      	ldr	r3, [pc, #432]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	4968      	ldr	r1, [pc, #416]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
 8001ec6:	e025      	b.n	8001f14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec8:	4b66      	ldr	r3, [pc, #408]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a65      	ldr	r2, [pc, #404]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4960      	ldr	r1, [pc, #384]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee6:	4b5f      	ldr	r3, [pc, #380]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	495b      	ldr	r1, [pc, #364]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fd47 	bl	8002998 <RCC_SetFlashLatencyFromMSIRange>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e343      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f14:	f000 fc4a 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b52      	ldr	r3, [pc, #328]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	4950      	ldr	r1, [pc, #320]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	4a4e      	ldr	r2, [pc, #312]	; (800206c <HAL_RCC_OscConfig+0x278>)
 8001f32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f34:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <HAL_RCC_OscConfig+0x27c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f8bd 	bl	80010b8 <HAL_InitTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d052      	beq.n	8001fee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	e327      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d032      	beq.n	8001fba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f54:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a42      	ldr	r2, [pc, #264]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fb90 	bl	8001684 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f68:	f7ff fb8c 	bl	8001684 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e310      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a36      	ldr	r2, [pc, #216]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4931      	ldr	r1, [pc, #196]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa4:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	492c      	ldr	r1, [pc, #176]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e01a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a29      	ldr	r2, [pc, #164]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fb5d 	bl	8001684 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fce:	f7ff fb59 	bl	8001684 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e2dd      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x1da>
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d074      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d005      	beq.n	800200e <HAL_RCC_OscConfig+0x21a>
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b0c      	cmp	r3, #12
 8002006:	d10e      	bne.n	8002026 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d10b      	bne.n	8002026 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d064      	beq.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d160      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e2ba      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x24a>
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e026      	b.n	800208c <HAL_RCC_OscConfig+0x298>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002046:	d115      	bne.n	8002074 <HAL_RCC_OscConfig+0x280>
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a05      	ldr	r2, [pc, #20]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 800204e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a02      	ldr	r2, [pc, #8]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e014      	b.n	800208c <HAL_RCC_OscConfig+0x298>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	0800aca8 	.word	0x0800aca8
 800206c:	20000004 	.word	0x20000004
 8002070:	20000014 	.word	0x20000014
 8002074:	4ba0      	ldr	r3, [pc, #640]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a9f      	ldr	r2, [pc, #636]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800207a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b9d      	ldr	r3, [pc, #628]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a9c      	ldr	r2, [pc, #624]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff faf6 	bl	8001684 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff faf2 	bl	8001684 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e276      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ae:	4b92      	ldr	r3, [pc, #584]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x2a8>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff fae2 	bl	8001684 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fade 	bl	8001684 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e262      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2d0>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d060      	beq.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_OscConfig+0x310>
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d119      	bne.n	8002132 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d116      	bne.n	8002132 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002104:	4b7c      	ldr	r3, [pc, #496]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x328>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e23f      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	4973      	ldr	r1, [pc, #460]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002130:	e040      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d023      	beq.n	8002182 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213a:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7ff fa9d 	bl	8001684 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7ff fa99 	bl	8001684 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e21d      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002160:	4b65      	ldr	r3, [pc, #404]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b62      	ldr	r3, [pc, #392]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	495f      	ldr	r1, [pc, #380]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
 8002180:	e018      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5c      	ldr	r2, [pc, #368]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7ff fa79 	bl	8001684 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff fa75 	bl	8001684 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1f9      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d03c      	beq.n	800223a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01c      	beq.n	8002202 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80021ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ce:	4a4a      	ldr	r2, [pc, #296]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d8:	f7ff fa54 	bl	8001684 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e0:	f7ff fa50 	bl	8001684 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1d4      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ef      	beq.n	80021e0 <HAL_RCC_OscConfig+0x3ec>
 8002200:	e01b      	b.n	800223a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002208:	4a3b      	ldr	r2, [pc, #236]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800220a:	f023 0301 	bic.w	r3, r3, #1
 800220e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7ff fa37 	bl	8001684 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221a:	f7ff fa33 	bl	8001684 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1b7      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800222c:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800222e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ef      	bne.n	800221a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80a6 	beq.w	8002394 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10d      	bne.n	8002274 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	4a26      	ldr	r2, [pc, #152]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	6593      	str	r3, [r2, #88]	; 0x58
 8002264:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002270:	2301      	movs	r3, #1
 8002272:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_RCC_OscConfig+0x508>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d118      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_RCC_OscConfig+0x508>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <HAL_RCC_OscConfig+0x508>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228c:	f7ff f9fa 	bl	8001684 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002294:	f7ff f9f6 	bl	8001684 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e17a      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_RCC_OscConfig+0x508>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <HAL_RCC_OscConfig+0x4d8>
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ca:	e029      	b.n	8002320 <HAL_RCC_OscConfig+0x52c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d115      	bne.n	8002300 <HAL_RCC_OscConfig+0x50c>
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <HAL_RCC_OscConfig+0x504>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f4:	e014      	b.n	8002320 <HAL_RCC_OscConfig+0x52c>
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40007000 	.word	0x40007000
 8002300:	4b9c      	ldr	r3, [pc, #624]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a9b      	ldr	r2, [pc, #620]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002310:	4b98      	ldr	r3, [pc, #608]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	4a97      	ldr	r2, [pc, #604]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d016      	beq.n	8002356 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7ff f9ac 	bl	8001684 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232e:	e00a      	b.n	8002346 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7ff f9a8 	bl	8001684 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e12a      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002346:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0ed      	beq.n	8002330 <HAL_RCC_OscConfig+0x53c>
 8002354:	e015      	b.n	8002382 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002356:	f7ff f995 	bl	8001684 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800235c:	e00a      	b.n	8002374 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7ff f991 	bl	8001684 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e113      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002374:	4b7f      	ldr	r3, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ed      	bne.n	800235e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002382:	7ffb      	ldrb	r3, [r7, #31]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b7a      	ldr	r3, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	4a79      	ldr	r2, [pc, #484]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80fe 	beq.w	800259a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	f040 80d0 	bne.w	8002548 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023a8:	4b72      	ldr	r3, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0203 	and.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d130      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	3b01      	subs	r3, #1
 80023c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d127      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d11f      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023e8:	2a07      	cmp	r2, #7
 80023ea:	bf14      	ite	ne
 80023ec:	2201      	movne	r2, #1
 80023ee:	2200      	moveq	r2, #0
 80023f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d113      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	3b01      	subs	r3, #1
 8002404:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d109      	bne.n	800241e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	3b01      	subs	r3, #1
 8002418:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d06e      	beq.n	80024fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b0c      	cmp	r3, #12
 8002422:	d069      	beq.n	80024f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002424:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002430:	4b50      	ldr	r3, [pc, #320]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0ad      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002440:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a4b      	ldr	r2, [pc, #300]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800244c:	f7ff f91a 	bl	8001684 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7ff f916 	bl	8001684 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e09a      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002472:	4b40      	ldr	r3, [pc, #256]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	4b40      	ldr	r3, [pc, #256]	; (8002578 <HAL_RCC_OscConfig+0x784>)
 8002478:	4013      	ands	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002482:	3a01      	subs	r2, #1
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800248c:	0212      	lsls	r2, r2, #8
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002494:	0852      	lsrs	r2, r2, #1
 8002496:	3a01      	subs	r2, #1
 8002498:	0552      	lsls	r2, r2, #21
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024a0:	0852      	lsrs	r2, r2, #1
 80024a2:	3a01      	subs	r2, #1
 80024a4:	0652      	lsls	r2, r2, #25
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ac:	0912      	lsrs	r2, r2, #4
 80024ae:	0452      	lsls	r2, r2, #17
 80024b0:	430a      	orrs	r2, r1
 80024b2:	4930      	ldr	r1, [pc, #192]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024b8:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2d      	ldr	r2, [pc, #180]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a2a      	ldr	r2, [pc, #168]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024d0:	f7ff f8d8 	bl	8001684 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7ff f8d4 	bl	8001684 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e058      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f6:	e050      	b.n	800259a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e04f      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d148      	bne.n	800259a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a16      	ldr	r2, [pc, #88]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002520:	f7ff f8b0 	bl	8001684 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff f8ac 	bl	8001684 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e030      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x734>
 8002546:	e028      	b.n	800259a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d023      	beq.n	8002596 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_RCC_OscConfig+0x780>)
 8002554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7ff f893 	bl	8001684 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002560:	e00c      	b.n	800257c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7ff f88f 	bl	8001684 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d905      	bls.n	800257c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e013      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
 8002574:	40021000 	.word	0x40021000
 8002578:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_OscConfig+0x7b0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ec      	bne.n	8002562 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_OscConfig+0x7b0>)
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	4905      	ldr	r1, [pc, #20]	; (80025a4 <HAL_RCC_OscConfig+0x7b0>)
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x7b4>)
 8002590:	4013      	ands	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
 8002594:	e001      	b.n	800259a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	feeefffc 	.word	0xfeeefffc

080025ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0e7      	b.n	8002790 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b75      	ldr	r3, [pc, #468]	; (8002798 <HAL_RCC_ClockConfig+0x1ec>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d910      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b72      	ldr	r3, [pc, #456]	; (8002798 <HAL_RCC_ClockConfig+0x1ec>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4970      	ldr	r1, [pc, #448]	; (8002798 <HAL_RCC_ClockConfig+0x1ec>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b6e      	ldr	r3, [pc, #440]	; (8002798 <HAL_RCC_ClockConfig+0x1ec>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0cf      	b.n	8002790 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d010      	beq.n	800261e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	4b66      	ldr	r3, [pc, #408]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002608:	429a      	cmp	r2, r3
 800260a:	d908      	bls.n	800261e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b63      	ldr	r3, [pc, #396]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4960      	ldr	r1, [pc, #384]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d04c      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	4b5a      	ldr	r3, [pc, #360]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d121      	bne.n	8002682 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0a6      	b.n	8002790 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e09a      	b.n	8002790 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002662:	4b4e      	ldr	r3, [pc, #312]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e08e      	b.n	8002790 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e086      	b.n	8002790 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4943      	ldr	r1, [pc, #268]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 8002690:	4313      	orrs	r3, r2
 8002692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002694:	f7fe fff6 	bl	8001684 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7fe fff2 	bl	8001684 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e06e      	b.n	8002790 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d010      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026dc:	429a      	cmp	r2, r3
 80026de:	d208      	bcs.n	80026f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e0:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	492b      	ldr	r1, [pc, #172]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f2:	4b29      	ldr	r3, [pc, #164]	; (8002798 <HAL_RCC_ClockConfig+0x1ec>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d210      	bcs.n	8002722 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_RCC_ClockConfig+0x1ec>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 0207 	bic.w	r2, r3, #7
 8002708:	4923      	ldr	r1, [pc, #140]	; (8002798 <HAL_RCC_ClockConfig+0x1ec>)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_RCC_ClockConfig+0x1ec>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e036      	b.n	8002790 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4918      	ldr	r1, [pc, #96]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d009      	beq.n	8002760 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4910      	ldr	r1, [pc, #64]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002760:	f000 f824 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	490b      	ldr	r1, [pc, #44]	; (80027a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <HAL_RCC_ClockConfig+0x1f8>)
 800277e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fc97 	bl	80010b8 <HAL_InitTick>
 800278a:	4603      	mov	r3, r0
 800278c:	72fb      	strb	r3, [r7, #11]

  return status;
 800278e:	7afb      	ldrb	r3, [r7, #11]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40022000 	.word	0x40022000
 800279c:	40021000 	.word	0x40021000
 80027a0:	0800aca8 	.word	0x0800aca8
 80027a4:	20000004 	.word	0x20000004
 80027a8:	20000014 	.word	0x20000014

080027ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c4:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x34>
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d121      	bne.n	800281e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d11e      	bne.n	800281e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027ec:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	e005      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002808:	4a2b      	ldr	r2, [pc, #172]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002810:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10d      	bne.n	8002834 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b04      	cmp	r3, #4
 8002822:	d102      	bne.n	800282a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	e004      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d101      	bne.n	8002834 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002830:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002832:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d134      	bne.n	80028a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800283a:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d003      	beq.n	8002852 <HAL_RCC_GetSysClockFreq+0xa6>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d003      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0xac>
 8002850:	e005      	b.n	800285e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002854:	617b      	str	r3, [r7, #20]
      break;
 8002856:	e005      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800285a:	617b      	str	r3, [r7, #20]
      break;
 800285c:	e002      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	617b      	str	r3, [r7, #20]
      break;
 8002862:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	3301      	adds	r3, #1
 8002870:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	fb03 f202 	mul.w	r2, r3, r2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	0e5b      	lsrs	r3, r3, #25
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	3301      	adds	r3, #1
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028a4:	69bb      	ldr	r3, [r7, #24]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	; 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	0800acc0 	.word	0x0800acc0
 80028bc:	00f42400 	.word	0x00f42400
 80028c0:	007a1200 	.word	0x007a1200

080028c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028e0:	f7ff fff0 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4904      	ldr	r1, [pc, #16]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	0800acb8 	.word	0x0800acb8

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800290c:	f7ff ffda 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0adb      	lsrs	r3, r3, #11
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4904      	ldr	r1, [pc, #16]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x28>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	0800acb8 	.word	0x0800acb8

08002934 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	220f      	movs	r2, #15
 8002942:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_GetClockConfig+0x5c>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0203 	and.w	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_RCC_GetClockConfig+0x5c>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <HAL_RCC_GetClockConfig+0x5c>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_GetClockConfig+0x5c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	08db      	lsrs	r3, r3, #3
 800296e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_RCC_GetClockConfig+0x60>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0207 	and.w	r2, r3, #7
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	40022000 	.word	0x40022000

08002998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029b0:	f7ff f9bc 	bl	8001d2c <HAL_PWREx_GetVoltageRange>
 80029b4:	6178      	str	r0, [r7, #20]
 80029b6:	e014      	b.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	; 0x58
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029d0:	f7ff f9ac 	bl	8001d2c <HAL_PWREx_GetVoltageRange>
 80029d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e8:	d10b      	bne.n	8002a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d919      	bls.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2ba0      	cmp	r3, #160	; 0xa0
 80029f4:	d902      	bls.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029f6:	2302      	movs	r3, #2
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	e013      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029fc:	2301      	movs	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e010      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b80      	cmp	r3, #128	; 0x80
 8002a06:	d902      	bls.n	8002a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a08:	2303      	movs	r3, #3
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	e00a      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d102      	bne.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a14:	2302      	movs	r3, #2
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e004      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b70      	cmp	r3, #112	; 0x70
 8002a1e:	d101      	bne.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a20:	2301      	movs	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 0207 	bic.w	r2, r3, #7
 8002a2c:	4909      	ldr	r1, [pc, #36]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40022000 	.word	0x40022000

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a60:	2300      	movs	r3, #0
 8002a62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a64:	2300      	movs	r3, #0
 8002a66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d041      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a7c:	d02a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a82:	d824      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a88:	d008      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a8e:	d81e      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a98:	d010      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a9a:	e018      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a9c:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a85      	ldr	r2, [pc, #532]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fabb 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aba:	e00c      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3320      	adds	r3, #32
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fba6 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002acc:	e003      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aea:	4973      	ldr	r1, [pc, #460]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002af2:	e001      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d041      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b0c:	d02a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b12:	d824      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b18:	d008      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b1e:	d81e      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b28:	d010      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b2a:	e018      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b38:	e015      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fa73 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b4a:	e00c      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3320      	adds	r3, #32
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fb5e 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b5c:	e003      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	74fb      	strb	r3, [r7, #19]
      break;
 8002b62:	e000      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b6c:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7a:	494f      	ldr	r1, [pc, #316]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b82:	e001      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80a0 	beq.w	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
 8002bbc:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bcc:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3a      	ldr	r2, [pc, #232]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fd54 	bl	8001684 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bde:	e009      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be0:	f7fe fd50 	bl	8001684 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	74fb      	strb	r3, [r7, #19]
        break;
 8002bf2:	e005      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bf4:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ef      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d15c      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c06:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01f      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d019      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	4a20      	ldr	r2, [pc, #128]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d016      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe fd0f 	bl	8001684 <HAL_GetTick>
 8002c66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c68:	e00b      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe fd0b 	bl	8001684 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d902      	bls.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	74fb      	strb	r3, [r7, #19]
            break;
 8002c80:	e006      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ec      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca6:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cae:	e009      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	74bb      	strb	r3, [r7, #18]
 8002cb4:	e006      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc4:	7c7b      	ldrb	r3, [r7, #17]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cca:	4b9e      	ldr	r3, [pc, #632]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	4a9d      	ldr	r2, [pc, #628]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce2:	4b98      	ldr	r3, [pc, #608]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f023 0203 	bic.w	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	4994      	ldr	r1, [pc, #592]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d04:	4b8f      	ldr	r3, [pc, #572]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 020c 	bic.w	r2, r3, #12
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	498c      	ldr	r1, [pc, #560]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d26:	4b87      	ldr	r3, [pc, #540]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	4983      	ldr	r1, [pc, #524]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d48:	4b7e      	ldr	r3, [pc, #504]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	497b      	ldr	r1, [pc, #492]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d6a:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	4972      	ldr	r1, [pc, #456]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d8c:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	496a      	ldr	r1, [pc, #424]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dae:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	4961      	ldr	r1, [pc, #388]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dd0:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dde:	4959      	ldr	r1, [pc, #356]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df2:	4b54      	ldr	r3, [pc, #336]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	4950      	ldr	r1, [pc, #320]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e14:	4b4b      	ldr	r3, [pc, #300]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	4948      	ldr	r1, [pc, #288]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e36:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	493f      	ldr	r1, [pc, #252]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d028      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e58:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e66:	4937      	ldr	r1, [pc, #220]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e76:	d106      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a31      	ldr	r2, [pc, #196]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e82:	60d3      	str	r3, [r2, #12]
 8002e84:	e011      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f8c8 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d028      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	491f      	ldr	r1, [pc, #124]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ee0:	60d3      	str	r3, [r2, #12]
 8002ee2:	e011      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f899 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f22:	4908      	ldr	r1, [pc, #32]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f32:	d109      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a02      	ldr	r2, [pc, #8]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f3e:	60d3      	str	r3, [r2, #12]
 8002f40:	e014      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f867 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d02f      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f86:	4928      	ldr	r1, [pc, #160]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f844 	bl	800302c <RCCEx_PLLSAI1_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d014      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	74bb      	strb	r3, [r7, #18]
 8002fb2:	e011      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3320      	adds	r3, #32
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f925 	bl	8003214 <RCCEx_PLLSAI2_Config>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff2:	490d      	ldr	r1, [pc, #52]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003016:	4904      	ldr	r1, [pc, #16]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800301e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000

0800302c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800303a:	4b75      	ldr	r3, [pc, #468]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d018      	beq.n	8003078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003046:	4b72      	ldr	r3, [pc, #456]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d10d      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
       ||
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800305e:	4b6c      	ldr	r3, [pc, #432]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
       ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d047      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e044      	b.n	8003102 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d018      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x86>
 8003080:	2b03      	cmp	r3, #3
 8003082:	d825      	bhi.n	80030d0 <RCCEx_PLLSAI1_Config+0xa4>
 8003084:	2b01      	cmp	r3, #1
 8003086:	d002      	beq.n	800308e <RCCEx_PLLSAI1_Config+0x62>
 8003088:	2b02      	cmp	r3, #2
 800308a:	d009      	beq.n	80030a0 <RCCEx_PLLSAI1_Config+0x74>
 800308c:	e020      	b.n	80030d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800308e:	4b60      	ldr	r3, [pc, #384]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d11d      	bne.n	80030d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309e:	e01a      	b.n	80030d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a0:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d116      	bne.n	80030da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e013      	b.n	80030da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030b2:	4b57      	ldr	r3, [pc, #348]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030be:	4b54      	ldr	r3, [pc, #336]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ce:	e006      	b.n	80030de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e004      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030de:	bf00      	nop
    }

    if(status == HAL_OK)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	430b      	orrs	r3, r1
 80030fc:	4944      	ldr	r1, [pc, #272]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d17d      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003108:	4b41      	ldr	r3, [pc, #260]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a40      	ldr	r2, [pc, #256]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fe fab6 	bl	8001684 <HAL_GetTick>
 8003118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800311a:	e009      	b.n	8003130 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800311c:	f7fe fab2 	bl	8001684 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d902      	bls.n	8003130 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	73fb      	strb	r3, [r7, #15]
        break;
 800312e:	e005      	b.n	800313c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ef      	bne.n	800311c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d160      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d111      	bne.n	800316c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003148:	4b31      	ldr	r3, [pc, #196]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	0211      	lsls	r1, r2, #8
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	0912      	lsrs	r2, r2, #4
 8003160:	0452      	lsls	r2, r2, #17
 8003162:	430a      	orrs	r2, r1
 8003164:	492a      	ldr	r1, [pc, #168]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	610b      	str	r3, [r1, #16]
 800316a:	e027      	b.n	80031bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d112      	bne.n	8003198 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003172:	4b27      	ldr	r3, [pc, #156]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800317a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6892      	ldr	r2, [r2, #8]
 8003182:	0211      	lsls	r1, r2, #8
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6912      	ldr	r2, [r2, #16]
 8003188:	0852      	lsrs	r2, r2, #1
 800318a:	3a01      	subs	r2, #1
 800318c:	0552      	lsls	r2, r2, #21
 800318e:	430a      	orrs	r2, r1
 8003190:	491f      	ldr	r1, [pc, #124]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	610b      	str	r3, [r1, #16]
 8003196:	e011      	b.n	80031bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6892      	ldr	r2, [r2, #8]
 80031a8:	0211      	lsls	r1, r2, #8
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6952      	ldr	r2, [r2, #20]
 80031ae:	0852      	lsrs	r2, r2, #1
 80031b0:	3a01      	subs	r2, #1
 80031b2:	0652      	lsls	r2, r2, #25
 80031b4:	430a      	orrs	r2, r1
 80031b6:	4916      	ldr	r1, [pc, #88]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a13      	ldr	r2, [pc, #76]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fe fa5c 	bl	8001684 <HAL_GetTick>
 80031cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ce:	e009      	b.n	80031e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d0:	f7fe fa58 	bl	8001684 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d902      	bls.n	80031e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	73fb      	strb	r3, [r7, #15]
          break;
 80031e2:	e005      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ef      	beq.n	80031d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	4904      	ldr	r1, [pc, #16]	; (8003210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000

08003214 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003222:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d018      	beq.n	8003260 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800322e:	4b67      	ldr	r3, [pc, #412]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0203 	and.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d10d      	bne.n	800325a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
       ||
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003246:	4b61      	ldr	r3, [pc, #388]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
       ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d047      	beq.n	80032ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e044      	b.n	80032ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b03      	cmp	r3, #3
 8003266:	d018      	beq.n	800329a <RCCEx_PLLSAI2_Config+0x86>
 8003268:	2b03      	cmp	r3, #3
 800326a:	d825      	bhi.n	80032b8 <RCCEx_PLLSAI2_Config+0xa4>
 800326c:	2b01      	cmp	r3, #1
 800326e:	d002      	beq.n	8003276 <RCCEx_PLLSAI2_Config+0x62>
 8003270:	2b02      	cmp	r3, #2
 8003272:	d009      	beq.n	8003288 <RCCEx_PLLSAI2_Config+0x74>
 8003274:	e020      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003276:	4b55      	ldr	r3, [pc, #340]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11d      	bne.n	80032be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003286:	e01a      	b.n	80032be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003288:	4b50      	ldr	r3, [pc, #320]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d116      	bne.n	80032c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003298:	e013      	b.n	80032c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800329a:	4b4c      	ldr	r3, [pc, #304]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10f      	bne.n	80032c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032a6:	4b49      	ldr	r3, [pc, #292]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032b6:	e006      	b.n	80032c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      break;
 80032bc:	e004      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	430b      	orrs	r3, r1
 80032e4:	4939      	ldr	r1, [pc, #228]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d167      	bne.n	80033c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a35      	ldr	r2, [pc, #212]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fc:	f7fe f9c2 	bl	8001684 <HAL_GetTick>
 8003300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003302:	e009      	b.n	8003318 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003304:	f7fe f9be 	bl	8001684 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d902      	bls.n	8003318 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	73fb      	strb	r3, [r7, #15]
        break;
 8003316:	e005      	b.n	8003324 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003318:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ef      	bne.n	8003304 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d14a      	bne.n	80033c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d111      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6892      	ldr	r2, [r2, #8]
 8003340:	0211      	lsls	r1, r2, #8
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	0912      	lsrs	r2, r2, #4
 8003348:	0452      	lsls	r2, r2, #17
 800334a:	430a      	orrs	r2, r1
 800334c:	491f      	ldr	r1, [pc, #124]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800334e:	4313      	orrs	r3, r2
 8003350:	614b      	str	r3, [r1, #20]
 8003352:	e011      	b.n	8003378 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800335c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6892      	ldr	r2, [r2, #8]
 8003364:	0211      	lsls	r1, r2, #8
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6912      	ldr	r2, [r2, #16]
 800336a:	0852      	lsrs	r2, r2, #1
 800336c:	3a01      	subs	r2, #1
 800336e:	0652      	lsls	r2, r2, #25
 8003370:	430a      	orrs	r2, r1
 8003372:	4916      	ldr	r1, [pc, #88]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003374:	4313      	orrs	r3, r2
 8003376:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a13      	ldr	r2, [pc, #76]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe f97e 	bl	8001684 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800338a:	e009      	b.n	80033a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800338c:	f7fe f97a 	bl	8001684 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d902      	bls.n	80033a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	73fb      	strb	r3, [r7, #15]
          break;
 800339e:	e005      	b.n	80033ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ef      	beq.n	800338c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4904      	ldr	r1, [pc, #16]	; (80033cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d079      	beq.n	80034d6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fdc8 	bl	8000f8c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b10      	cmp	r3, #16
 8003410:	d058      	beq.n	80034c4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	22ca      	movs	r2, #202	; 0xca
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2253      	movs	r2, #83	; 0x53
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f880 	bl	8003528 <RTC_EnterInitMode>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d127      	bne.n	8003482 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003444:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68d2      	ldr	r2, [r2, #12]
 800346c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6919      	ldr	r1, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	041a      	lsls	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f884 	bl	8003590 <RTC_ExitInitMode>
 8003488:	4603      	mov	r3, r0
 800348a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d113      	bne.n	80034ba <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0203 	bic.w	r2, r2, #3
 80034a0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	22ff      	movs	r2, #255	; 0xff
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
 80034c2:	e001      	b.n	80034c8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0d      	ldr	r2, [pc, #52]	; (8003524 <HAL_RTC_WaitForSynchro+0x44>)
 80034ee:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80034f0:	f7fe f8c8 	bl	8001684 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80034f6:	e009      	b.n	800350c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034f8:	f7fe f8c4 	bl	8001684 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003506:	d901      	bls.n	800350c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e007      	b.n	800351c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ee      	beq.n	80034f8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	0003ff5f 	.word	0x0003ff5f

08003528 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	d120      	bne.n	8003584 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f04f 32ff 	mov.w	r2, #4294967295
 800354a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800354c:	f7fe f89a 	bl	8001684 <HAL_GetTick>
 8003550:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003552:	e00d      	b.n	8003570 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003554:	f7fe f896 	bl	8001684 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003562:	d905      	bls.n	8003570 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <RTC_EnterInitMode+0x5c>
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d1e7      	bne.n	8003554 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <RTC_ExitInitMode+0x78>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a19      	ldr	r2, [pc, #100]	; (8003608 <RTC_ExitInitMode+0x78>)
 80035a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <RTC_ExitInitMode+0x78>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10c      	bne.n	80035ce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ff93 	bl	80034e0 <HAL_RTC_WaitForSynchro>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01e      	beq.n	80035fe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2203      	movs	r2, #3
 80035c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e017      	b.n	80035fe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <RTC_ExitInitMode+0x78>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <RTC_ExitInitMode+0x78>)
 80035d4:	f023 0320 	bic.w	r3, r3, #32
 80035d8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ff80 	bl	80034e0 <HAL_RTC_WaitForSynchro>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <RTC_ExitInitMode+0x78>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4a04      	ldr	r2, [pc, #16]	; (8003608 <RTC_ExitInitMode+0x78>)
 80035f8:	f043 0320 	orr.w	r3, r3, #32
 80035fc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40002800 	.word	0x40002800

0800360c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e049      	b.n	80036b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f841 	bl	80036ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f000 f9da 	bl	8003a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d001      	beq.n	80036e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e04f      	b.n	8003788 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a23      	ldr	r2, [pc, #140]	; (8003794 <HAL_TIM_Base_Start_IT+0xc4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d01d      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d018      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_TIM_Base_Start_IT+0xc8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1e      	ldr	r2, [pc, #120]	; (800379c <HAL_TIM_Base_Start_IT+0xcc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00e      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x76>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d115      	bne.n	8003772 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <HAL_TIM_Base_Start_IT+0xdc>)
 800374e:	4013      	ands	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d015      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375e:	d011      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003770:	e008      	b.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e000      	b.n	8003786 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40013400 	.word	0x40013400
 80037a8:	40014000 	.word	0x40014000
 80037ac:	00010007 	.word	0x00010007

080037b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d020      	beq.n	8003814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01b      	beq.n	8003814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0202 	mvn.w	r2, #2
 80037e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8e4 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8d6 	bl	80039b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8e7 	bl	80039dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d020      	beq.n	8003860 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01b      	beq.n	8003860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0204 	mvn.w	r2, #4
 8003830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8be 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8b0 	bl	80039b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8c1 	bl	80039dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d020      	beq.n	80038ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01b      	beq.n	80038ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0208 	mvn.w	r2, #8
 800387c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2204      	movs	r2, #4
 8003882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f898 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f88a 	bl	80039b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f89b 	bl	80039dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d020      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01b      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0210 	mvn.w	r2, #16
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2208      	movs	r2, #8
 80038ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f872 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f864 	bl	80039b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f875 	bl	80039dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0201 	mvn.w	r2, #1
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fafc 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f906 	bl	8003b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00c      	beq.n	8003964 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800395c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8fe 	bl	8003b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00c      	beq.n	8003988 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f834 	bl	80039f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0220 	mvn.w	r2, #32
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f8c6 	bl	8003b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a40      	ldr	r2, [pc, #256]	; (8003b18 <TIM_Base_SetConfig+0x114>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a22:	d00f      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a3d      	ldr	r2, [pc, #244]	; (8003b1c <TIM_Base_SetConfig+0x118>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00b      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a3c      	ldr	r2, [pc, #240]	; (8003b20 <TIM_Base_SetConfig+0x11c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d007      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a3b      	ldr	r2, [pc, #236]	; (8003b24 <TIM_Base_SetConfig+0x120>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a3a      	ldr	r2, [pc, #232]	; (8003b28 <TIM_Base_SetConfig+0x124>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d108      	bne.n	8003a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2f      	ldr	r2, [pc, #188]	; (8003b18 <TIM_Base_SetConfig+0x114>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01f      	beq.n	8003a9e <TIM_Base_SetConfig+0x9a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d01b      	beq.n	8003a9e <TIM_Base_SetConfig+0x9a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a2c      	ldr	r2, [pc, #176]	; (8003b1c <TIM_Base_SetConfig+0x118>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d017      	beq.n	8003a9e <TIM_Base_SetConfig+0x9a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a2b      	ldr	r2, [pc, #172]	; (8003b20 <TIM_Base_SetConfig+0x11c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <TIM_Base_SetConfig+0x9a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a2a      	ldr	r2, [pc, #168]	; (8003b24 <TIM_Base_SetConfig+0x120>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00f      	beq.n	8003a9e <TIM_Base_SetConfig+0x9a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a29      	ldr	r2, [pc, #164]	; (8003b28 <TIM_Base_SetConfig+0x124>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <TIM_Base_SetConfig+0x9a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <TIM_Base_SetConfig+0x128>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <TIM_Base_SetConfig+0x9a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <TIM_Base_SetConfig+0x12c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_Base_SetConfig+0x9a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a26      	ldr	r2, [pc, #152]	; (8003b34 <TIM_Base_SetConfig+0x130>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <TIM_Base_SetConfig+0x114>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00f      	beq.n	8003afc <TIM_Base_SetConfig+0xf8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <TIM_Base_SetConfig+0x124>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00b      	beq.n	8003afc <TIM_Base_SetConfig+0xf8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a11      	ldr	r2, [pc, #68]	; (8003b2c <TIM_Base_SetConfig+0x128>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <TIM_Base_SetConfig+0xf8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <TIM_Base_SetConfig+0x12c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_Base_SetConfig+0xf8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a0f      	ldr	r2, [pc, #60]	; (8003b34 <TIM_Base_SetConfig+0x130>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d103      	bne.n	8003b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	615a      	str	r2, [r3, #20]
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40000400 	.word	0x40000400
 8003b20:	40000800 	.word	0x40000800
 8003b24:	40000c00 	.word	0x40000c00
 8003b28:	40013400 	.word	0x40013400
 8003b2c:	40014000 	.word	0x40014000
 8003b30:	40014400 	.word	0x40014400
 8003b34:	40014800 	.word	0x40014800

08003b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e040      	b.n	8003c08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd fa2a 	bl	8000ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fec0 	bl	8004940 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fc05 	bl	80043d0 <UART_SetConfig>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e01b      	b.n	8003c08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 ff3f 	bl	8004a84 <UART_CheckIdleState>
 8003c06:	4603      	mov	r3, r0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d178      	bne.n	8003d1a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_UART_Transmit+0x24>
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e071      	b.n	8003d1c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2221      	movs	r2, #33	; 0x21
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c46:	f7fd fd1d 	bl	8001684 <HAL_GetTick>
 8003c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c64:	d108      	bne.n	8003c78 <HAL_UART_Transmit+0x68>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	e003      	b.n	8003c80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c80:	e030      	b.n	8003ce4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 ffa1 	bl	8004bd4 <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e03c      	b.n	8003d1c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	881a      	ldrh	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb4:	b292      	uxth	r2, r2
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	3302      	adds	r3, #2
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e008      	b.n	8003cd2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1c8      	bne.n	8003c82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2140      	movs	r1, #64	; 0x40
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 ff6a 	bl	8004bd4 <UART_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e005      	b.n	8003d1c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e000      	b.n	8003d1c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
  }
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d137      	bne.n	8003dac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_UART_Receive_IT+0x24>
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e030      	b.n	8003dae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_UART_Receive_IT+0x94>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01f      	beq.n	8003d9c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d018      	beq.n	8003d9c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	613b      	str	r3, [r7, #16]
   return(result);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	69f9      	ldr	r1, [r7, #28]
 8003d8e:	6a3a      	ldr	r2, [r7, #32]
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 ff7e 	bl	8004ca4 <UART_Start_Receive_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	e000      	b.n	8003dae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3728      	adds	r7, #40	; 0x28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40008000 	.word	0x40008000

08003dbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b0ba      	sub	sp, #232	; 0xe8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003de2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003de6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003dea:	4013      	ands	r3, r2
 8003dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d115      	bne.n	8003e24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00f      	beq.n	8003e24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 82ae 	beq.w	8004376 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
      }
      return;
 8003e22:	e2a8      	b.n	8004376 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8117 	beq.w	800405c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e3e:	4b85      	ldr	r3, [pc, #532]	; (8004054 <HAL_UART_IRQHandler+0x298>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 810a 	beq.w	800405c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d011      	beq.n	8003e78 <HAL_UART_IRQHandler+0xbc>
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d011      	beq.n	8003ea8 <HAL_UART_IRQHandler+0xec>
 8003e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00b      	beq.n	8003ea8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2202      	movs	r2, #2
 8003e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9e:	f043 0204 	orr.w	r2, r3, #4
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d011      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x11c>
 8003eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d017      	beq.n	8003f14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2208      	movs	r2, #8
 8003f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0a:	f043 0208 	orr.w	r2, r3, #8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d012      	beq.n	8003f46 <HAL_UART_IRQHandler+0x18a>
 8003f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8214 	beq.w	800437a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d005      	beq.n	8003f9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d04f      	beq.n	800403e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 ff46 	bl	8004e30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d141      	bne.n	8004036 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1d9      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004002:	2b00      	cmp	r3, #0
 8004004:	d013      	beq.n	800402e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <HAL_UART_IRQHandler+0x29c>)
 800400c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd fc62 	bl	80018dc <HAL_DMA_Abort_IT>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d017      	beq.n	800404e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004028:	4610      	mov	r0, r2
 800402a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800402c:	e00f      	b.n	800404e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9b8 	bl	80043a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	e00b      	b.n	800404e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f9b4 	bl	80043a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	e007      	b.n	800404e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9b0 	bl	80043a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800404c:	e195      	b.n	800437a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404e:	bf00      	nop
    return;
 8004050:	e193      	b.n	800437a <HAL_UART_IRQHandler+0x5be>
 8004052:	bf00      	nop
 8004054:	04000120 	.word	0x04000120
 8004058:	08004ef9 	.word	0x08004ef9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	2b01      	cmp	r3, #1
 8004062:	f040 814e 	bne.w	8004302 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8147 	beq.w	8004302 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8140 	beq.w	8004302 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2210      	movs	r2, #16
 8004088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	f040 80b8 	bne.w	800420a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8167 	beq.w	800437e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ba:	429a      	cmp	r2, r3
 80040bc:	f080 815f 	bcs.w	800437e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 8086 	bne.w	80041e8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800410a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800411e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1da      	bne.n	80040dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3308      	adds	r3, #8
 800412c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3308      	adds	r3, #8
 8004146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800414a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800414e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800415c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e1      	bne.n	8004126 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3308      	adds	r3, #8
 8004168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800418c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e3      	bne.n	8004162 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b8:	f023 0310 	bic.w	r3, r3, #16
 80041bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80041cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e4      	bne.n	80041a8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fb3c 	bl	8001860 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	b29b      	uxth	r3, r3
 8004200:	4619      	mov	r1, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8d8 	bl	80043b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004208:	e0b9      	b.n	800437e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004216:	b29b      	uxth	r3, r3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80ab 	beq.w	8004382 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800422c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80a6 	beq.w	8004382 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800424a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004258:	647b      	str	r3, [r7, #68]	; 0x44
 800425a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800425e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e4      	bne.n	8004236 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3308      	adds	r3, #8
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	623b      	str	r3, [r7, #32]
   return(result);
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004290:	633a      	str	r2, [r7, #48]	; 0x30
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e3      	bne.n	800426c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f023 0310 	bic.w	r3, r3, #16
 80042cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	617b      	str	r3, [r7, #20]
   return(result);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e4      	bne.n	80042b8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f85c 	bl	80043b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004300:	e03f      	b.n	8004382 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00e      	beq.n	800432c <HAL_UART_IRQHandler+0x570>
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 ffe3 	bl	80052f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800432a:	e02d      	b.n	8004388 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01c      	beq.n	8004386 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
    }
    return;
 8004354:	e017      	b.n	8004386 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d012      	beq.n	8004388 <HAL_UART_IRQHandler+0x5cc>
 8004362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fdd8 	bl	8004f24 <UART_EndTransmit_IT>
    return;
 8004374:	e008      	b.n	8004388 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004376:	bf00      	nop
 8004378:	e006      	b.n	8004388 <HAL_UART_IRQHandler+0x5cc>
    return;
 800437a:	bf00      	nop
 800437c:	e004      	b.n	8004388 <HAL_UART_IRQHandler+0x5cc>
      return;
 800437e:	bf00      	nop
 8004380:	e002      	b.n	8004388 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004386:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004388:	37e8      	adds	r7, #232	; 0xe8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop

08004390 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d4:	b08a      	sub	sp, #40	; 0x28
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4ba4      	ldr	r3, [pc, #656]	; (8004690 <UART_SetConfig+0x2c0>)
 8004400:	4013      	ands	r3, r2
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004408:	430b      	orrs	r3, r1
 800440a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a99      	ldr	r2, [pc, #612]	; (8004694 <UART_SetConfig+0x2c4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004438:	4313      	orrs	r3, r2
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a90      	ldr	r2, [pc, #576]	; (8004698 <UART_SetConfig+0x2c8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d126      	bne.n	80044a8 <UART_SetConfig+0xd8>
 800445a:	4b90      	ldr	r3, [pc, #576]	; (800469c <UART_SetConfig+0x2cc>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b03      	cmp	r3, #3
 8004466:	d81b      	bhi.n	80044a0 <UART_SetConfig+0xd0>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0xa0>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004481 	.word	0x08004481
 8004474:	08004491 	.word	0x08004491
 8004478:	08004489 	.word	0x08004489
 800447c:	08004499 	.word	0x08004499
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004486:	e116      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004488:	2302      	movs	r3, #2
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448e:	e112      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004490:	2304      	movs	r3, #4
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004496:	e10e      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004498:	2308      	movs	r3, #8
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e10a      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80044a0:	2310      	movs	r3, #16
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e106      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a7c      	ldr	r2, [pc, #496]	; (80046a0 <UART_SetConfig+0x2d0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d138      	bne.n	8004524 <UART_SetConfig+0x154>
 80044b2:	4b7a      	ldr	r3, [pc, #488]	; (800469c <UART_SetConfig+0x2cc>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b0c      	cmp	r3, #12
 80044be:	d82d      	bhi.n	800451c <UART_SetConfig+0x14c>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <UART_SetConfig+0xf8>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	0800451d 	.word	0x0800451d
 80044d0:	0800451d 	.word	0x0800451d
 80044d4:	0800451d 	.word	0x0800451d
 80044d8:	0800450d 	.word	0x0800450d
 80044dc:	0800451d 	.word	0x0800451d
 80044e0:	0800451d 	.word	0x0800451d
 80044e4:	0800451d 	.word	0x0800451d
 80044e8:	08004505 	.word	0x08004505
 80044ec:	0800451d 	.word	0x0800451d
 80044f0:	0800451d 	.word	0x0800451d
 80044f4:	0800451d 	.word	0x0800451d
 80044f8:	08004515 	.word	0x08004515
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004502:	e0d8      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004504:	2302      	movs	r3, #2
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450a:	e0d4      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800450c:	2304      	movs	r3, #4
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e0d0      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004514:	2308      	movs	r3, #8
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451a:	e0cc      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800451c:	2310      	movs	r3, #16
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e0c8      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a5e      	ldr	r2, [pc, #376]	; (80046a4 <UART_SetConfig+0x2d4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d125      	bne.n	800457a <UART_SetConfig+0x1aa>
 800452e:	4b5b      	ldr	r3, [pc, #364]	; (800469c <UART_SetConfig+0x2cc>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004538:	2b30      	cmp	r3, #48	; 0x30
 800453a:	d016      	beq.n	800456a <UART_SetConfig+0x19a>
 800453c:	2b30      	cmp	r3, #48	; 0x30
 800453e:	d818      	bhi.n	8004572 <UART_SetConfig+0x1a2>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d00a      	beq.n	800455a <UART_SetConfig+0x18a>
 8004544:	2b20      	cmp	r3, #32
 8004546:	d814      	bhi.n	8004572 <UART_SetConfig+0x1a2>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <UART_SetConfig+0x182>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d008      	beq.n	8004562 <UART_SetConfig+0x192>
 8004550:	e00f      	b.n	8004572 <UART_SetConfig+0x1a2>
 8004552:	2300      	movs	r3, #0
 8004554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004558:	e0ad      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800455a:	2302      	movs	r3, #2
 800455c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004560:	e0a9      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004562:	2304      	movs	r3, #4
 8004564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004568:	e0a5      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800456a:	2308      	movs	r3, #8
 800456c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004570:	e0a1      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004572:	2310      	movs	r3, #16
 8004574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004578:	e09d      	b.n	80046b6 <UART_SetConfig+0x2e6>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a4a      	ldr	r2, [pc, #296]	; (80046a8 <UART_SetConfig+0x2d8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d125      	bne.n	80045d0 <UART_SetConfig+0x200>
 8004584:	4b45      	ldr	r3, [pc, #276]	; (800469c <UART_SetConfig+0x2cc>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800458e:	2bc0      	cmp	r3, #192	; 0xc0
 8004590:	d016      	beq.n	80045c0 <UART_SetConfig+0x1f0>
 8004592:	2bc0      	cmp	r3, #192	; 0xc0
 8004594:	d818      	bhi.n	80045c8 <UART_SetConfig+0x1f8>
 8004596:	2b80      	cmp	r3, #128	; 0x80
 8004598:	d00a      	beq.n	80045b0 <UART_SetConfig+0x1e0>
 800459a:	2b80      	cmp	r3, #128	; 0x80
 800459c:	d814      	bhi.n	80045c8 <UART_SetConfig+0x1f8>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <UART_SetConfig+0x1d8>
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d008      	beq.n	80045b8 <UART_SetConfig+0x1e8>
 80045a6:	e00f      	b.n	80045c8 <UART_SetConfig+0x1f8>
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e082      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045b0:	2302      	movs	r3, #2
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e07e      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e07a      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c6:	e076      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ce:	e072      	b.n	80046b6 <UART_SetConfig+0x2e6>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a35      	ldr	r2, [pc, #212]	; (80046ac <UART_SetConfig+0x2dc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d12a      	bne.n	8004630 <UART_SetConfig+0x260>
 80045da:	4b30      	ldr	r3, [pc, #192]	; (800469c <UART_SetConfig+0x2cc>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e8:	d01a      	beq.n	8004620 <UART_SetConfig+0x250>
 80045ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ee:	d81b      	bhi.n	8004628 <UART_SetConfig+0x258>
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f4:	d00c      	beq.n	8004610 <UART_SetConfig+0x240>
 80045f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045fa:	d815      	bhi.n	8004628 <UART_SetConfig+0x258>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <UART_SetConfig+0x238>
 8004600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004604:	d008      	beq.n	8004618 <UART_SetConfig+0x248>
 8004606:	e00f      	b.n	8004628 <UART_SetConfig+0x258>
 8004608:	2300      	movs	r3, #0
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460e:	e052      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004610:	2302      	movs	r3, #2
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004616:	e04e      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004618:	2304      	movs	r3, #4
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461e:	e04a      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004626:	e046      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462e:	e042      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a17      	ldr	r2, [pc, #92]	; (8004694 <UART_SetConfig+0x2c4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d13a      	bne.n	80046b0 <UART_SetConfig+0x2e0>
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <UART_SetConfig+0x2cc>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004648:	d01a      	beq.n	8004680 <UART_SetConfig+0x2b0>
 800464a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800464e:	d81b      	bhi.n	8004688 <UART_SetConfig+0x2b8>
 8004650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004654:	d00c      	beq.n	8004670 <UART_SetConfig+0x2a0>
 8004656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465a:	d815      	bhi.n	8004688 <UART_SetConfig+0x2b8>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <UART_SetConfig+0x298>
 8004660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004664:	d008      	beq.n	8004678 <UART_SetConfig+0x2a8>
 8004666:	e00f      	b.n	8004688 <UART_SetConfig+0x2b8>
 8004668:	2300      	movs	r3, #0
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e022      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004670:	2302      	movs	r3, #2
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e01e      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004678:	2304      	movs	r3, #4
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e01a      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004680:	2308      	movs	r3, #8
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e016      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004688:	2310      	movs	r3, #16
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e012      	b.n	80046b6 <UART_SetConfig+0x2e6>
 8004690:	efff69f3 	.word	0xefff69f3
 8004694:	40008000 	.word	0x40008000
 8004698:	40013800 	.word	0x40013800
 800469c:	40021000 	.word	0x40021000
 80046a0:	40004400 	.word	0x40004400
 80046a4:	40004800 	.word	0x40004800
 80046a8:	40004c00 	.word	0x40004c00
 80046ac:	40005000 	.word	0x40005000
 80046b0:	2310      	movs	r3, #16
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a9f      	ldr	r2, [pc, #636]	; (8004938 <UART_SetConfig+0x568>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d17a      	bne.n	80047b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d824      	bhi.n	8004712 <UART_SetConfig+0x342>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <UART_SetConfig+0x300>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	08004713 	.word	0x08004713
 80046d8:	080046fd 	.word	0x080046fd
 80046dc:	08004713 	.word	0x08004713
 80046e0:	08004703 	.word	0x08004703
 80046e4:	08004713 	.word	0x08004713
 80046e8:	08004713 	.word	0x08004713
 80046ec:	08004713 	.word	0x08004713
 80046f0:	0800470b 	.word	0x0800470b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f4:	f7fe f8f2 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 80046f8:	61f8      	str	r0, [r7, #28]
        break;
 80046fa:	e010      	b.n	800471e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046fc:	4b8f      	ldr	r3, [pc, #572]	; (800493c <UART_SetConfig+0x56c>)
 80046fe:	61fb      	str	r3, [r7, #28]
        break;
 8004700:	e00d      	b.n	800471e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004702:	f7fe f853 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 8004706:	61f8      	str	r0, [r7, #28]
        break;
 8004708:	e009      	b.n	800471e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470e:	61fb      	str	r3, [r7, #28]
        break;
 8004710:	e005      	b.n	800471e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800471c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80fb 	beq.w	800491c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	429a      	cmp	r2, r3
 8004734:	d305      	bcc.n	8004742 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	429a      	cmp	r2, r3
 8004740:	d903      	bls.n	800474a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004748:	e0e8      	b.n	800491c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2200      	movs	r2, #0
 800474e:	461c      	mov	r4, r3
 8004750:	4615      	mov	r5, r2
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	022b      	lsls	r3, r5, #8
 800475c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004760:	0222      	lsls	r2, r4, #8
 8004762:	68f9      	ldr	r1, [r7, #12]
 8004764:	6849      	ldr	r1, [r1, #4]
 8004766:	0849      	lsrs	r1, r1, #1
 8004768:	2000      	movs	r0, #0
 800476a:	4688      	mov	r8, r1
 800476c:	4681      	mov	r9, r0
 800476e:	eb12 0a08 	adds.w	sl, r2, r8
 8004772:	eb43 0b09 	adc.w	fp, r3, r9
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004784:	4650      	mov	r0, sl
 8004786:	4659      	mov	r1, fp
 8004788:	f7fb fd7e 	bl	8000288 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4613      	mov	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800479a:	d308      	bcc.n	80047ae <UART_SetConfig+0x3de>
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a2:	d204      	bcs.n	80047ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	e0b6      	b.n	800491c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047b4:	e0b2      	b.n	800491c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047be:	d15e      	bne.n	800487e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d828      	bhi.n	800481a <UART_SetConfig+0x44a>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x400>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fe f872 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 80047f8:	61f8      	str	r0, [r7, #28]
        break;
 80047fa:	e014      	b.n	8004826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fe f884 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8004800:	61f8      	str	r0, [r7, #28]
        break;
 8004802:	e010      	b.n	8004826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b4d      	ldr	r3, [pc, #308]	; (800493c <UART_SetConfig+0x56c>)
 8004806:	61fb      	str	r3, [r7, #28]
        break;
 8004808:	e00d      	b.n	8004826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fd ffcf 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 800480e:	61f8      	str	r0, [r7, #28]
        break;
 8004810:	e009      	b.n	8004826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	61fb      	str	r3, [r7, #28]
        break;
 8004818:	e005      	b.n	8004826 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d077      	beq.n	800491c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	005a      	lsls	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	441a      	add	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b0f      	cmp	r3, #15
 8004846:	d916      	bls.n	8004876 <UART_SetConfig+0x4a6>
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484e:	d212      	bcs.n	8004876 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f023 030f 	bic.w	r3, r3, #15
 8004858:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	b29b      	uxth	r3, r3
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	b29a      	uxth	r2, r3
 8004866:	8afb      	ldrh	r3, [r7, #22]
 8004868:	4313      	orrs	r3, r2
 800486a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	8afa      	ldrh	r2, [r7, #22]
 8004872:	60da      	str	r2, [r3, #12]
 8004874:	e052      	b.n	800491c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800487c:	e04e      	b.n	800491c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800487e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004882:	2b08      	cmp	r3, #8
 8004884:	d827      	bhi.n	80048d6 <UART_SetConfig+0x506>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0x4bc>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048c1 	.word	0x080048c1
 8004898:	080048d7 	.word	0x080048d7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048d7 	.word	0x080048d7
 80048a4:	080048d7 	.word	0x080048d7
 80048a8:	080048d7 	.word	0x080048d7
 80048ac:	080048cf 	.word	0x080048cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fe f814 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 80048b4:	61f8      	str	r0, [r7, #28]
        break;
 80048b6:	e014      	b.n	80048e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b8:	f7fe f826 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 80048bc:	61f8      	str	r0, [r7, #28]
        break;
 80048be:	e010      	b.n	80048e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c0:	4b1e      	ldr	r3, [pc, #120]	; (800493c <UART_SetConfig+0x56c>)
 80048c2:	61fb      	str	r3, [r7, #28]
        break;
 80048c4:	e00d      	b.n	80048e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c6:	f7fd ff71 	bl	80027ac <HAL_RCC_GetSysClockFreq>
 80048ca:	61f8      	str	r0, [r7, #28]
        break;
 80048cc:	e009      	b.n	80048e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d2:	61fb      	str	r3, [r7, #28]
        break;
 80048d4:	e005      	b.n	80048e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048e0:	bf00      	nop
    }

    if (pclk != 0U)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d019      	beq.n	800491c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	085a      	lsrs	r2, r3, #1
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	441a      	add	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d909      	bls.n	8004916 <UART_SetConfig+0x546>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004908:	d205      	bcs.n	8004916 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60da      	str	r2, [r3, #12]
 8004914:	e002      	b.n	800491c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004928:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800492c:	4618      	mov	r0, r3
 800492e:	3728      	adds	r7, #40	; 0x28
 8004930:	46bd      	mov	sp, r7
 8004932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004936:	bf00      	nop
 8004938:	40008000 	.word	0x40008000
 800493c:	00f42400 	.word	0x00f42400

08004940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01a      	beq.n	8004a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3e:	d10a      	bne.n	8004a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b098      	sub	sp, #96	; 0x60
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a94:	f7fc fdf6 	bl	8001684 <HAL_GetTick>
 8004a98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d12e      	bne.n	8004b06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f88c 	bl	8004bd4 <UART_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d021      	beq.n	8004b06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e6      	bne.n	8004ac2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e062      	b.n	8004bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d149      	bne.n	8004ba8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f856 	bl	8004bd4 <UART_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d03c      	beq.n	8004ba8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e6      	bne.n	8004b2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b80:	61fa      	str	r2, [r7, #28]
 8004b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	69b9      	ldr	r1, [r7, #24]
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e011      	b.n	8004bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3758      	adds	r7, #88	; 0x58
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be4:	e049      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d045      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fc fd49 	bl	8001684 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e048      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d031      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d110      	bne.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f8ff 	bl	8004e30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2208      	movs	r2, #8
 8004c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e029      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c54:	d111      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f8e5 	bl	8004e30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e00f      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	bf0c      	ite	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d0a6      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b097      	sub	sp, #92	; 0x5c
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	88fa      	ldrh	r2, [r7, #6]
 8004cc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd6:	d10e      	bne.n	8004cf6 <UART_Start_Receive_IT+0x52>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <UART_Start_Receive_IT+0x48>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ce6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cea:	e02d      	b.n	8004d48 <UART_Start_Receive_IT+0xa4>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	22ff      	movs	r2, #255	; 0xff
 8004cf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cf4:	e028      	b.n	8004d48 <UART_Start_Receive_IT+0xa4>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <UART_Start_Receive_IT+0x76>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <UART_Start_Receive_IT+0x6c>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	22ff      	movs	r2, #255	; 0xff
 8004d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d0e:	e01b      	b.n	8004d48 <UART_Start_Receive_IT+0xa4>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	227f      	movs	r2, #127	; 0x7f
 8004d14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d18:	e016      	b.n	8004d48 <UART_Start_Receive_IT+0xa4>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d22:	d10d      	bne.n	8004d40 <UART_Start_Receive_IT+0x9c>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <UART_Start_Receive_IT+0x92>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	227f      	movs	r2, #127	; 0x7f
 8004d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d34:	e008      	b.n	8004d48 <UART_Start_Receive_IT+0xa4>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	223f      	movs	r2, #63	; 0x3f
 8004d3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d3e:	e003      	b.n	8004d48 <UART_Start_Receive_IT+0xa4>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2222      	movs	r2, #34	; 0x22
 8004d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d78:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d94:	d107      	bne.n	8004da6 <UART_Start_Receive_IT+0x102>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a21      	ldr	r2, [pc, #132]	; (8004e28 <UART_Start_Receive_IT+0x184>)
 8004da2:	669a      	str	r2, [r3, #104]	; 0x68
 8004da4:	e002      	b.n	8004dac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <UART_Start_Receive_IT+0x188>)
 8004daa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d019      	beq.n	8004de8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e6      	bne.n	8004db4 <UART_Start_Receive_IT+0x110>
 8004de6:	e018      	b.n	8004e1a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	613b      	str	r3, [r7, #16]
   return(result);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f043 0320 	orr.w	r3, r3, #32
 8004dfc:	653b      	str	r3, [r7, #80]	; 0x50
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	69f9      	ldr	r1, [r7, #28]
 8004e0c:	6a3a      	ldr	r2, [r7, #32]
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e6      	bne.n	8004de8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	375c      	adds	r7, #92	; 0x5c
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	08005135 	.word	0x08005135
 8004e2c:	08004f79 	.word	0x08004f79

08004e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b095      	sub	sp, #84	; 0x54
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e56:	643b      	str	r3, [r7, #64]	; 0x40
 8004e58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e6      	bne.n	8004e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3308      	adds	r3, #8
 8004e70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e5      	bne.n	8004e6a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d118      	bne.n	8004ed8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f023 0310 	bic.w	r3, r3, #16
 8004eba:	647b      	str	r3, [r7, #68]	; 0x44
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6979      	ldr	r1, [r7, #20]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e6      	bne.n	8004ea6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004eec:	bf00      	nop
 8004eee:	3754      	adds	r7, #84	; 0x54
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff fa44 	bl	80043a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6979      	ldr	r1, [r7, #20]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	613b      	str	r3, [r7, #16]
   return(result);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e6      	bne.n	8004f2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fa10 	bl	8004390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f70:	bf00      	nop
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b09c      	sub	sp, #112	; 0x70
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f90:	2b22      	cmp	r3, #34	; 0x22
 8004f92:	f040 80be 	bne.w	8005112 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fa0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fa4:	b2d9      	uxtb	r1, r3
 8004fa6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb0:	400a      	ands	r2, r1
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 80a3 	bne.w	8005126 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005000:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800500c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e6      	bne.n	8004fe0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3308      	adds	r3, #8
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	667b      	str	r3, [r7, #100]	; 0x64
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3308      	adds	r3, #8
 8005030:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005032:	647a      	str	r2, [r7, #68]	; 0x44
 8005034:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e5      	bne.n	8005012 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a34      	ldr	r2, [pc, #208]	; (8005130 <UART_RxISR_8BIT+0x1b8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d01f      	beq.n	80050a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d018      	beq.n	80050a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	623b      	str	r3, [r7, #32]
   return(result);
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005086:	663b      	str	r3, [r7, #96]	; 0x60
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
 8005092:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e6      	bne.n	8005072 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d12e      	bne.n	800510a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0310 	bic.w	r3, r3, #16
 80050c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	69b9      	ldr	r1, [r7, #24]
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	617b      	str	r3, [r7, #20]
   return(result);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e6      	bne.n	80050b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d103      	bne.n	80050fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2210      	movs	r2, #16
 80050f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff f958 	bl	80043b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005108:	e00d      	b.n	8005126 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fb fe14 	bl	8000d38 <HAL_UART_RxCpltCallback>
}
 8005110:	e009      	b.n	8005126 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	8b1b      	ldrh	r3, [r3, #24]
 8005118:	b29a      	uxth	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0208 	orr.w	r2, r2, #8
 8005122:	b292      	uxth	r2, r2
 8005124:	831a      	strh	r2, [r3, #24]
}
 8005126:	bf00      	nop
 8005128:	3770      	adds	r7, #112	; 0x70
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40008000 	.word	0x40008000

08005134 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b09c      	sub	sp, #112	; 0x70
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005142:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514c:	2b22      	cmp	r3, #34	; 0x22
 800514e:	f040 80be 	bne.w	80052ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005158:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005162:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005166:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800516a:	4013      	ands	r3, r2
 800516c:	b29a      	uxth	r2, r3
 800516e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005170:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	1c9a      	adds	r2, r3, #2
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	f040 80a3 	bne.w	80052e2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051b0:	667b      	str	r3, [r7, #100]	; 0x64
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ba:	657b      	str	r3, [r7, #84]	; 0x54
 80051bc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e6      	bne.n	800519c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3308      	adds	r3, #8
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	663b      	str	r3, [r7, #96]	; 0x60
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3308      	adds	r3, #8
 80051ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051ee:	643a      	str	r2, [r7, #64]	; 0x40
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e5      	bne.n	80051ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a34      	ldr	r2, [pc, #208]	; (80052ec <UART_RxISR_16BIT+0x1b8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d01f      	beq.n	8005260 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d018      	beq.n	8005260 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	61fb      	str	r3, [r7, #28]
   return(result);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005242:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e6      	bne.n	800522e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005264:	2b01      	cmp	r3, #1
 8005266:	d12e      	bne.n	80052c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	60bb      	str	r3, [r7, #8]
   return(result);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f023 0310 	bic.w	r3, r3, #16
 8005282:	65bb      	str	r3, [r7, #88]	; 0x58
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6979      	ldr	r1, [r7, #20]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	613b      	str	r3, [r7, #16]
   return(result);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b10      	cmp	r3, #16
 80052ac:	d103      	bne.n	80052b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2210      	movs	r2, #16
 80052b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff f87a 	bl	80043b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052c4:	e00d      	b.n	80052e2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fb fd36 	bl	8000d38 <HAL_UART_RxCpltCallback>
}
 80052cc:	e009      	b.n	80052e2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	8b1b      	ldrh	r3, [r3, #24]
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0208 	orr.w	r2, r2, #8
 80052de:	b292      	uxth	r2, r2
 80052e0:	831a      	strh	r2, [r3, #24]
}
 80052e2:	bf00      	nop
 80052e4:	3770      	adds	r7, #112	; 0x70
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40008000 	.word	0x40008000

080052f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f103 0208 	add.w	r2, r3, #8
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f04f 32ff 	mov.w	r2, #4294967295
 800531c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f103 0208 	add.w	r2, r3, #8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f103 0208 	add.w	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800535e:	b480      	push	{r7}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	601a      	str	r2, [r3, #0]
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d103      	bne.n	80053c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e00c      	b.n	80053e0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3308      	adds	r3, #8
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e002      	b.n	80053d4 <vListInsert+0x2e>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d2f6      	bcs.n	80053ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6892      	ldr	r2, [r2, #8]
 800542e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6852      	ldr	r2, [r2, #4]
 8005438:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	d103      	bne.n	800544c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	1e5a      	subs	r2, r3, #1
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005476:	2301      	movs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueGenericReset+0x2e>
        __asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	60fb      	str	r3, [r7, #12]
    }
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d05d      	beq.n	800555c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d059      	beq.n	800555c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b0:	2100      	movs	r1, #0
 80054b2:	fba3 2302 	umull	r2, r3, r3, r2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d000      	beq.n	80054bc <xQueueGenericReset+0x50>
 80054ba:	2101      	movs	r1, #1
 80054bc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d14c      	bne.n	800555c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80054c2:	f003 f8ef 	bl	80086a4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	6939      	ldr	r1, [r7, #16]
 80054d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	441a      	add	r2, r3
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2200      	movs	r2, #0
 80054e0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	3b01      	subs	r3, #1
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	441a      	add	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	22ff      	movs	r2, #255	; 0xff
 800550e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d114      	bne.n	8005542 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01a      	beq.n	8005556 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	3310      	adds	r3, #16
 8005524:	4618      	mov	r0, r3
 8005526:	f001 fd21 	bl	8006f6c <xTaskRemoveFromEventList>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d012      	beq.n	8005556 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005530:	4b15      	ldr	r3, [pc, #84]	; (8005588 <xQueueGenericReset+0x11c>)
 8005532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	e009      	b.n	8005556 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3310      	adds	r3, #16
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fedc 	bl	8005304 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	3324      	adds	r3, #36	; 0x24
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fed7 	bl	8005304 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005556:	f003 f8d5 	bl	8008704 <vPortExitCritical>
 800555a:	e001      	b.n	8005560 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <xQueueGenericReset+0x110>
        __asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	60bb      	str	r3, [r7, #8]
    }
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800557c:	697b      	ldr	r3, [r7, #20]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800558c:	b580      	push	{r7, lr}
 800558e:	b08c      	sub	sp, #48	; 0x30
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	627b      	str	r3, [r7, #36]	; 0x24

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <xQueueGenericCreateStatic+0x2e>
        __asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	623b      	str	r3, [r7, #32]
    }
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d030      	beq.n	8005622 <xQueueGenericCreateStatic+0x96>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d02d      	beq.n	8005622 <xQueueGenericCreateStatic+0x96>
            ( pxStaticQueue != NULL ) &&
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <xQueueGenericCreateStatic+0x46>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d027      	beq.n	8005622 <xQueueGenericCreateStatic+0x96>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <xQueueGenericCreateStatic+0x52>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d121      	bne.n	8005622 <xQueueGenericCreateStatic+0x96>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80055de:	2348      	movs	r3, #72	; 0x48
 80055e0:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b48      	cmp	r3, #72	; 0x48
 80055e6:	d00a      	beq.n	80055fe <xQueueGenericCreateStatic+0x72>
        __asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	61fb      	str	r3, [r7, #28]
    }
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueGenericCreateStatic+0x70>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80055fe:	697b      	ldr	r3, [r7, #20]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800560c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f866 	bl	80056ec <prvInitialiseNewQueue>
 8005620:	e00d      	b.n	800563e <xQueueGenericCreateStatic+0xb2>
        }
        else
        {
            configASSERT( pxNewQueue );
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <xQueueGenericCreateStatic+0xb2>
        __asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	61bb      	str	r3, [r7, #24]
    }
 800563a:	bf00      	nop
 800563c:	e7fe      	b.n	800563c <xQueueGenericCreateStatic+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005640:	4618      	mov	r0, r3
 8005642:	3728      	adds	r7, #40	; 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	; 0x28
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d032      	beq.n	80056c6 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005660:	2100      	movs	r1, #0
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	fba3 2302 	umull	r2, r3, r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d000      	beq.n	8005670 <xQueueGenericCreate+0x28>
 800566e:	2101      	movs	r1, #1
 8005670:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005672:	2b00      	cmp	r3, #0
 8005674:	d127      	bne.n	80056c6 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800567e:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8005682:	d820      	bhi.n	80056c6 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	fb02 f303 	mul.w	r3, r2, r3
 800568c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3348      	adds	r3, #72	; 0x48
 8005692:	4618      	mov	r0, r3
 8005694:	f003 f932 	bl	80088fc <pvPortMalloc>
 8005698:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d020      	beq.n	80056e2 <xQueueGenericCreate+0x9a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	3348      	adds	r3, #72	; 0x48
 80056a8:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056b2:	79fa      	ldrb	r2, [r7, #7]
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f814 	bl	80056ec <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80056c4:	e00d      	b.n	80056e2 <xQueueGenericCreate+0x9a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xQueueGenericCreate+0x9a>
        __asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	613b      	str	r3, [r7, #16]
    }
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80056e2:	69fb      	ldr	r3, [r7, #28]
    }
 80056e4:	4618      	mov	r0, r3
 80056e6:	3720      	adds	r7, #32
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d103      	bne.n	8005708 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e002      	b.n	800570e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800571a:	2101      	movs	r1, #1
 800571c:	69b8      	ldr	r0, [r7, #24]
 800571e:	f7ff fea5 	bl	800546c <xQueueGenericReset>
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	2073      	movs	r0, #115	; 0x73
 800572a:	f004 f92f 	bl	800998c <SEGGER_SYSVIEW_RecordU32x3>
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b090      	sub	sp, #64	; 0x40
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005746:	2300      	movs	r3, #0
 8005748:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <xQueueGenericSend+0x32>
        __asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <xQueueGenericSend+0x40>
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <xQueueGenericSend+0x44>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <xQueueGenericSend+0x46>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <xQueueGenericSend+0x60>
        __asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d103      	bne.n	80057a6 <xQueueGenericSend+0x6e>
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <xQueueGenericSend+0x72>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <xQueueGenericSend+0x74>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueueGenericSend+0x8e>
        __asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	623b      	str	r3, [r7, #32]
    }
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057c6:	f001 fe0b 	bl	80073e0 <xTaskGetSchedulerState>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <xQueueGenericSend+0x9e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <xQueueGenericSend+0xa2>
 80057d6:	2301      	movs	r3, #1
 80057d8:	e000      	b.n	80057dc <xQueueGenericSend+0xa4>
 80057da:	2300      	movs	r3, #0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10a      	bne.n	80057f6 <xQueueGenericSend+0xbe>
        __asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	61fb      	str	r3, [r7, #28]
    }
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80057f6:	f002 ff55 	bl	80086a4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <xQueueGenericSend+0xd4>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d136      	bne.n	800587a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	4618      	mov	r0, r3
 8005810:	f004 fe96 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	460b      	mov	r3, r1
 800581e:	4601      	mov	r1, r0
 8005820:	205a      	movs	r0, #90	; 0x5a
 8005822:	f004 f929 	bl	8009a78 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800582c:	f000 fb53 	bl	8005ed6 <prvCopyDataToQueue>
 8005830:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	d010      	beq.n	800585c <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	3324      	adds	r3, #36	; 0x24
 800583e:	4618      	mov	r0, r3
 8005840:	f001 fb94 	bl	8006f6c <xTaskRemoveFromEventList>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d013      	beq.n	8005872 <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800584a:	4b4d      	ldr	r3, [pc, #308]	; (8005980 <xQueueGenericSend+0x248>)
 800584c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	e00a      	b.n	8005872 <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d007      	beq.n	8005872 <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005862:	4b47      	ldr	r3, [pc, #284]	; (8005980 <xQueueGenericSend+0x248>)
 8005864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005872:	f002 ff47 	bl	8008704 <vPortExitCritical>
                return pdPASS;
 8005876:	2301      	movs	r3, #1
 8005878:	e07d      	b.n	8005976 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d110      	bne.n	80058a2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005880:	f002 ff40 	bl	8008704 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	4618      	mov	r0, r3
 8005888:	f004 fe5a 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	460b      	mov	r3, r1
 8005896:	4601      	mov	r1, r0
 8005898:	205a      	movs	r0, #90	; 0x5a
 800589a:	f004 f8ed 	bl	8009a78 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	e069      	b.n	8005976 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80058a8:	f107 0314 	add.w	r3, r7, #20
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fc35 	bl	800711c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80058b6:	f002 ff25 	bl	8008704 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80058ba:	f000 ff4b 	bl	8006754 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80058be:	f002 fef1 	bl	80086a4 <vPortEnterCritical>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c8:	b25b      	sxtb	r3, r3
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d103      	bne.n	80058d8 <xQueueGenericSend+0x1a0>
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058de:	b25b      	sxtb	r3, r3
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d103      	bne.n	80058ee <xQueueGenericSend+0x1b6>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ee:	f002 ff09 	bl	8008704 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058f2:	1d3a      	adds	r2, r7, #4
 80058f4:	f107 0314 	add.w	r3, r7, #20
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 fc24 	bl	8007148 <xTaskCheckForTimeOut>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d124      	bne.n	8005950 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005908:	f000 fbdd 	bl	80060c6 <prvIsQueueFull>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d018      	beq.n	8005944 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	3310      	adds	r3, #16
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f001 faba 	bl	8006e94 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005922:	f000 fb68 	bl	8005ff6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005926:	f000 ff23 	bl	8006770 <xTaskResumeAll>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	f47f af62 	bne.w	80057f6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005932:	4b13      	ldr	r3, [pc, #76]	; (8005980 <xQueueGenericSend+0x248>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	e758      	b.n	80057f6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005946:	f000 fb56 	bl	8005ff6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800594a:	f000 ff11 	bl	8006770 <xTaskResumeAll>
 800594e:	e752      	b.n	80057f6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005952:	f000 fb50 	bl	8005ff6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005956:	f000 ff0b 	bl	8006770 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	4618      	mov	r0, r3
 800595e:	f004 fdef 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	460b      	mov	r3, r1
 800596c:	4601      	mov	r1, r0
 800596e:	205a      	movs	r0, #90	; 0x5a
 8005970:	f004 f882 	bl	8009a78 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8005974:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005976:	4618      	mov	r0, r3
 8005978:	3738      	adds	r7, #56	; 0x38
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	e000ed04 	.word	0xe000ed04

08005984 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b092      	sub	sp, #72	; 0x48
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8005996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <xQueueGenericSendFromISR+0x3c>
 80059b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <xQueueGenericSendFromISR+0x40>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <xQueueGenericSendFromISR+0x42>
 80059c4:	2300      	movs	r3, #0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d103      	bne.n	80059ee <xQueueGenericSendFromISR+0x6a>
 80059e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <xQueueGenericSendFromISR+0x6e>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <xQueueGenericSendFromISR+0x70>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a0e:	f002 ff35 	bl	800887c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005a12:	f3ef 8211 	mrs	r2, BASEPRI
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	623a      	str	r2, [r7, #32]
 8005a28:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <xQueueGenericSendFromISR+0xbc>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d150      	bne.n	8005ae2 <xQueueGenericSendFromISR+0x15e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a52:	4618      	mov	r0, r3
 8005a54:	f004 fd74 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005a58:	4601      	mov	r1, r0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	2060      	movs	r0, #96	; 0x60
 8005a60:	f003 ff3a 	bl	80098d8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005a6a:	f000 fa34 	bl	8005ed6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005a6e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d112      	bne.n	8005a9e <xQueueGenericSendFromISR+0x11a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d02d      	beq.n	8005adc <xQueueGenericSendFromISR+0x158>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fa71 	bl	8006f6c <xTaskRemoveFromEventList>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d025      	beq.n	8005adc <xQueueGenericSendFromISR+0x158>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d022      	beq.n	8005adc <xQueueGenericSendFromISR+0x158>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e01e      	b.n	8005adc <xQueueGenericSendFromISR+0x158>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005a9e:	f000 ff89 	bl	80069b4 <uxTaskGetNumberOfTasks>
 8005aa2:	6338      	str	r0, [r7, #48]	; 0x30
 8005aa4:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d916      	bls.n	8005adc <xQueueGenericSendFromISR+0x158>
 8005aae:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8005ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab4:	d10a      	bne.n	8005acc <xQueueGenericSendFromISR+0x148>
        __asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	61bb      	str	r3, [r7, #24]
    }
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <xQueueGenericSendFromISR+0x146>
 8005acc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	b25a      	sxtb	r2, r3
 8005ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005adc:	2301      	movs	r3, #1
 8005ade:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8005ae0:	e00b      	b.n	8005afa <xQueueGenericSendFromISR+0x176>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f004 fd2b 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005aea:	4601      	mov	r1, r0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	461a      	mov	r2, r3
 8005af0:	2060      	movs	r0, #96	; 0x60
 8005af2:	f003 fef1 	bl	80098d8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	647b      	str	r3, [r7, #68]	; 0x44
 8005afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afc:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005b04:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3748      	adds	r7, #72	; 0x48
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005b10:	b590      	push	{r4, r7, lr}
 8005b12:	b08f      	sub	sp, #60	; 0x3c
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <xQueueReceive+0x30>
        __asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	623b      	str	r3, [r7, #32]
    }
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <xQueueReceive+0x3e>
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <xQueueReceive+0x42>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <xQueueReceive+0x44>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueReceive+0x5e>
        __asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	61fb      	str	r3, [r7, #28]
    }
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b6e:	f001 fc37 	bl	80073e0 <xTaskGetSchedulerState>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <xQueueReceive+0x6e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <xQueueReceive+0x72>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <xQueueReceive+0x74>
 8005b82:	2300      	movs	r3, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <xQueueReceive+0x8e>
        __asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	61bb      	str	r3, [r7, #24]
    }
 8005b9a:	bf00      	nop
 8005b9c:	e7fe      	b.n	8005b9c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005b9e:	f002 fd81 	bl	80086a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d02f      	beq.n	8005c0e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb2:	f000 f9fa 	bl	8005faa <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f004 fcc1 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f004 fcbd 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2101      	movs	r1, #1
 8005bcc:	9100      	str	r1, [sp, #0]
 8005bce:	4621      	mov	r1, r4
 8005bd0:	205c      	movs	r0, #92	; 0x5c
 8005bd2:	f003 ff51 	bl	8009a78 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	1e5a      	subs	r2, r3, #1
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00f      	beq.n	8005c06 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	3310      	adds	r3, #16
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 f9be 	bl	8006f6c <xTaskRemoveFromEventList>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005bf6:	4b4d      	ldr	r3, [pc, #308]	; (8005d2c <xQueueReceive+0x21c>)
 8005bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005c06:	f002 fd7d 	bl	8008704 <vPortExitCritical>
                return pdPASS;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e08a      	b.n	8005d24 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d113      	bne.n	8005c3c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005c14:	f002 fd76 	bl	8008704 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f004 fc90 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005c20:	4604      	mov	r4, r0
 8005c22:	2000      	movs	r0, #0
 8005c24:	f004 fc8c 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	9100      	str	r1, [sp, #0]
 8005c30:	4621      	mov	r1, r4
 8005c32:	205c      	movs	r0, #92	; 0x5c
 8005c34:	f003 ff20 	bl	8009a78 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e073      	b.n	8005d24 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005c42:	f107 0310 	add.w	r3, r7, #16
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 fa68 	bl	800711c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005c50:	f002 fd58 	bl	8008704 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005c54:	f000 fd7e 	bl	8006754 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005c58:	f002 fd24 	bl	80086a4 <vPortEnterCritical>
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c62:	b25b      	sxtb	r3, r3
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d103      	bne.n	8005c72 <xQueueReceive+0x162>
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c78:	b25b      	sxtb	r3, r3
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d103      	bne.n	8005c88 <xQueueReceive+0x178>
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c88:	f002 fd3c 	bl	8008704 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c8c:	1d3a      	adds	r2, r7, #4
 8005c8e:	f107 0310 	add.w	r3, r7, #16
 8005c92:	4611      	mov	r1, r2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 fa57 	bl	8007148 <xTaskCheckForTimeOut>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d124      	bne.n	8005cea <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca2:	f000 f9fa 	bl	800609a <prvIsQueueEmpty>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d018      	beq.n	8005cde <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	3324      	adds	r3, #36	; 0x24
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 f8ed 	bl	8006e94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cbc:	f000 f99b 	bl	8005ff6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005cc0:	f000 fd56 	bl	8006770 <xTaskResumeAll>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f47f af69 	bne.w	8005b9e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005ccc:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <xQueueReceive+0x21c>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	e75f      	b.n	8005b9e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce0:	f000 f989 	bl	8005ff6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005ce4:	f000 fd44 	bl	8006770 <xTaskResumeAll>
 8005ce8:	e759      	b.n	8005b9e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cec:	f000 f983 	bl	8005ff6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005cf0:	f000 fd3e 	bl	8006770 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf6:	f000 f9d0 	bl	800609a <prvIsQueueEmpty>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f43f af4e 	beq.w	8005b9e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	4618      	mov	r0, r3
 8005d06:	f004 fc1b 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f004 fc17 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005d12:	4602      	mov	r2, r0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2101      	movs	r1, #1
 8005d18:	9100      	str	r1, [sp, #0]
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	205c      	movs	r0, #92	; 0x5c
 8005d1e:	f003 feab 	bl	8009a78 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005d22:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3734      	adds	r7, #52	; 0x34
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd90      	pop	{r4, r7, pc}
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d30:	b590      	push	{r4, r7, lr}
 8005d32:	b091      	sub	sp, #68	; 0x44
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <xQueueReceiveFromISR+0x3a>
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <xQueueReceiveFromISR+0x3e>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <xQueueReceiveFromISR+0x40>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	623b      	str	r3, [r7, #32]
    }
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d8a:	f002 fd77 	bl	800887c <vPortValidateInterruptPriority>
        __asm volatile
 8005d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	61fa      	str	r2, [r7, #28]
 8005da4:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8005da6:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d055      	beq.n	8005e62 <xQueueReceiveFromISR+0x132>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f004 fbbc 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005dc8:	4604      	mov	r4, r0
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f004 fbb7 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	2062      	movs	r0, #98	; 0x62
 8005dda:	f003 fdd7 	bl	800998c <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005de2:	f000 f8e2 	bl	8005faa <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	1e5a      	subs	r2, r3, #1
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005dee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d112      	bne.n	8005e1e <xQueueReceiveFromISR+0xee>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d02d      	beq.n	8005e5c <xQueueReceiveFromISR+0x12c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	3310      	adds	r3, #16
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 f8b1 	bl	8006f6c <xTaskRemoveFromEventList>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d025      	beq.n	8005e5c <xQueueReceiveFromISR+0x12c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d022      	beq.n	8005e5c <xQueueReceiveFromISR+0x12c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e01e      	b.n	8005e5c <xQueueReceiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8005e1e:	f000 fdc9 	bl	80069b4 <uxTaskGetNumberOfTasks>
 8005e22:	62b8      	str	r0, [r7, #40]	; 0x28
 8005e24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d916      	bls.n	8005e5c <xQueueReceiveFromISR+0x12c>
 8005e2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e32:	2b7f      	cmp	r3, #127	; 0x7f
 8005e34:	d10a      	bne.n	8005e4c <xQueueReceiveFromISR+0x11c>
        __asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	617b      	str	r3, [r7, #20]
    }
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <xQueueReceiveFromISR+0x11a>
 8005e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e50:	3301      	adds	r3, #1
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	b25a      	sxtb	r2, r3
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e60:	e010      	b.n	8005e84 <xQueueReceiveFromISR+0x154>
        }
        else
        {
            xReturn = pdFAIL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f004 fb69 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f004 fb64 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	2062      	movs	r0, #98	; 0x62
 8005e80:	f003 fd84 	bl	800998c <SEGGER_SYSVIEW_RecordU32x3>
 8005e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e86:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f383 8811 	msr	BASEPRI, r3
    }
 8005e8e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3744      	adds	r7, #68	; 0x44
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd90      	pop	{r4, r7, pc}

08005e9a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	60bb      	str	r3, [r7, #8]
    }
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005ebe:	f002 fbf1 	bl	80086a4 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005ec8:	f002 fc1c 	bl	8008704 <vPortExitCritical>

    return uxReturn;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10d      	bne.n	8005f10 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d14d      	bne.n	8005f98 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 fa8b 	bl	800741c <xTaskPriorityDisinherit>
 8005f06:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	609a      	str	r2, [r3, #8]
 8005f0e:	e043      	b.n	8005f98 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d119      	bne.n	8005f4a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6858      	ldr	r0, [r3, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	461a      	mov	r2, r3
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	f004 fcf3 	bl	800a90c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	441a      	add	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d32b      	bcc.n	8005f98 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	605a      	str	r2, [r3, #4]
 8005f48:	e026      	b.n	8005f98 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	68d8      	ldr	r0, [r3, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	461a      	mov	r2, r3
 8005f54:	68b9      	ldr	r1, [r7, #8]
 8005f56:	f004 fcd9 	bl	800a90c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	425b      	negs	r3, r3
 8005f64:	441a      	add	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d207      	bcs.n	8005f86 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	425b      	negs	r3, r3
 8005f80:	441a      	add	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d105      	bne.n	8005f98 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005fa0:	697b      	ldr	r3, [r7, #20]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d018      	beq.n	8005fee <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	441a      	add	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d303      	bcc.n	8005fde <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68d9      	ldr	r1, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6838      	ldr	r0, [r7, #0]
 8005fea:	f004 fc8f 	bl	800a90c <memcpy>
    }
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005ffe:	f002 fb51 	bl	80086a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006008:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800600a:	e011      	b.n	8006030 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d012      	beq.n	800603a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3324      	adds	r3, #36	; 0x24
 8006018:	4618      	mov	r0, r3
 800601a:	f000 ffa7 	bl	8006f6c <xTaskRemoveFromEventList>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006024:	f001 f8f6 	bl	8007214 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	3b01      	subs	r3, #1
 800602c:	b2db      	uxtb	r3, r3
 800602e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	dce9      	bgt.n	800600c <prvUnlockQueue+0x16>
 8006038:	e000      	b.n	800603c <prvUnlockQueue+0x46>
                    break;
 800603a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	22ff      	movs	r2, #255	; 0xff
 8006040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006044:	f002 fb5e 	bl	8008704 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006048:	f002 fb2c 	bl	80086a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006052:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006054:	e011      	b.n	800607a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d012      	beq.n	8006084 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3310      	adds	r3, #16
 8006062:	4618      	mov	r0, r3
 8006064:	f000 ff82 	bl	8006f6c <xTaskRemoveFromEventList>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800606e:	f001 f8d1 	bl	8007214 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	3b01      	subs	r3, #1
 8006076:	b2db      	uxtb	r3, r3
 8006078:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800607a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800607e:	2b00      	cmp	r3, #0
 8006080:	dce9      	bgt.n	8006056 <prvUnlockQueue+0x60>
 8006082:	e000      	b.n	8006086 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006084:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	22ff      	movs	r2, #255	; 0xff
 800608a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800608e:	f002 fb39 	bl	8008704 <vPortExitCritical>
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80060a2:	f002 faff 	bl	80086a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80060ae:	2301      	movs	r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	e001      	b.n	80060b8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80060b8:	f002 fb24 	bl	8008704 <vPortExitCritical>

    return xReturn;
 80060bc:	68fb      	ldr	r3, [r7, #12]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80060ce:	f002 fae9 	bl	80086a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	429a      	cmp	r2, r3
 80060dc:	d102      	bne.n	80060e4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80060de:	2301      	movs	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e001      	b.n	80060e8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80060e8:	f002 fb0c 	bl	8008704 <vPortExitCritical>

    return xReturn;
 80060ec:	68fb      	ldr	r3, [r7, #12]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80060f6:	b480      	push	{r7}
 80060f8:	b087      	sub	sp, #28
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	60fb      	str	r3, [r7, #12]
    }
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	429a      	cmp	r2, r3
 8006128:	d102      	bne.n	8006130 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800612a:	2301      	movs	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e001      	b.n	8006134 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006134:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006136:	4618      	mov	r0, r3
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	60fb      	str	r3, [r7, #12]
    }
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d024      	beq.n	80061be <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	e01e      	b.n	80061b8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800617a:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <vQueueAddToRegistry+0xa8>)
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	4413      	add	r3, r2
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	429a      	cmp	r2, r3
 8006188:	d105      	bne.n	8006196 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4a17      	ldr	r2, [pc, #92]	; (80061ec <vQueueAddToRegistry+0xa8>)
 8006190:	4413      	add	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
                    break;
 8006194:	e013      	b.n	80061be <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <vQueueAddToRegistry+0x6e>
 800619c:	4a13      	ldr	r2, [pc, #76]	; (80061ec <vQueueAddToRegistry+0xa8>)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4a0f      	ldr	r2, [pc, #60]	; (80061ec <vQueueAddToRegistry+0xa8>)
 80061ae:	4413      	add	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	3301      	adds	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b07      	cmp	r3, #7
 80061bc:	d9dd      	bls.n	800617a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00f      	beq.n	80061e4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f004 f9b4 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 80061d8:	4601      	mov	r1, r0
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	2071      	movs	r0, #113	; 0x71
 80061e0:	f003 fb7a 	bl	80098d8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80061e4:	bf00      	nop
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000600 	.word	0x20000600

080061f0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006200:	f002 fa50 	bl	80086a4 <vPortEnterCritical>
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800620a:	b25b      	sxtb	r3, r3
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d103      	bne.n	800621a <vQueueWaitForMessageRestricted+0x2a>
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006220:	b25b      	sxtb	r3, r3
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d103      	bne.n	8006230 <vQueueWaitForMessageRestricted+0x40>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006230:	f002 fa68 	bl	8008704 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	d106      	bne.n	800624a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	3324      	adds	r3, #36	; 0x24
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fe49 	bl	8006edc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	f7ff fed3 	bl	8005ff6 <prvUnlockQueue>
    }
 8006250:	bf00      	nop
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006258:	b580      	push	{r7, lr}
 800625a:	b08e      	sub	sp, #56	; 0x38
 800625c:	af04      	add	r7, sp, #16
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xTaskCreateStatic+0x2a>
        __asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	623b      	str	r3, [r7, #32]
    }
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xTaskCreateStatic+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <xTaskCreateStatic+0x46>
        __asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	61fb      	str	r3, [r7, #28]
    }
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xTaskCreateStatic+0x44>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800629e:	23a0      	movs	r3, #160	; 0xa0
 80062a0:	613b      	str	r3, [r7, #16]
            configASSERT( xSize == sizeof( TCB_t ) );
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2ba0      	cmp	r3, #160	; 0xa0
 80062a6:	d00a      	beq.n	80062be <xTaskCreateStatic+0x66>
        __asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	61bb      	str	r3, [r7, #24]
    }
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xTaskCreateStatic+0x64>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062be:	693b      	ldr	r3, [r7, #16]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d023      	beq.n	800630e <xTaskCreateStatic+0xb6>
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d020      	beq.n	800630e <xTaskCreateStatic+0xb6>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80062d0:	22a0      	movs	r2, #160	; 0xa0
 80062d2:	2100      	movs	r1, #0
 80062d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062d6:	f004 fa95 	bl	800a804 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062de:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062e8:	2300      	movs	r3, #0
 80062ea:	9303      	str	r3, [sp, #12]
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	9302      	str	r3, [sp, #8]
 80062f0:	f107 0314 	add.w	r3, r7, #20
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f855 	bl	80063b0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006308:	f000 f8ee 	bl	80064e8 <prvAddNewTaskToReadyList>
 800630c:	e001      	b.n	8006312 <xTaskCreateStatic+0xba>
        }
        else
        {
            xReturn = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8006312:	697b      	ldr	r3, [r7, #20]
    }
 8006314:	4618      	mov	r0, r3
 8006316:	3728      	adds	r7, #40	; 0x28
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800631c:	b580      	push	{r7, lr}
 800631e:	b08c      	sub	sp, #48	; 0x30
 8006320:	af04      	add	r7, sp, #16
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4618      	mov	r0, r3
 8006332:	f002 fae3 	bl	80088fc <pvPortMalloc>
 8006336:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d013      	beq.n	8006366 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800633e:	20a0      	movs	r0, #160	; 0xa0
 8006340:	f002 fadc 	bl	80088fc <pvPortMalloc>
 8006344:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800634c:	22a0      	movs	r2, #160	; 0xa0
 800634e:	2100      	movs	r1, #0
 8006350:	69f8      	ldr	r0, [r7, #28]
 8006352:	f004 fa57 	bl	800a804 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
 800635c:	e005      	b.n	800636a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800635e:	6978      	ldr	r0, [r7, #20]
 8006360:	f002 fb86 	bl	8008a70 <vPortFree>
 8006364:	e001      	b.n	800636a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d017      	beq.n	80063a0 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006378:	88fa      	ldrh	r2, [r7, #6]
 800637a:	2300      	movs	r3, #0
 800637c:	9303      	str	r3, [sp, #12]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	9302      	str	r3, [sp, #8]
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 f80e 	bl	80063b0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006394:	69f8      	ldr	r0, [r7, #28]
 8006396:	f000 f8a7 	bl	80064e8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800639a:	2301      	movs	r3, #1
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	e002      	b.n	80063a6 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80063a6:	69bb      	ldr	r3, [r7, #24]
    }
 80063a8:	4618      	mov	r0, r3
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063c8:	3b01      	subs	r3, #1
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f023 0307 	bic.w	r3, r3, #7
 80063d6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <prvInitialiseNewTask+0x48>
        __asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	617b      	str	r3, [r7, #20]
    }
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d01e      	beq.n	800643c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	e012      	b.n	800642a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	7819      	ldrb	r1, [r3, #0]
 800640c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	3334      	adds	r3, #52	; 0x34
 8006414:	460a      	mov	r2, r1
 8006416:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d006      	beq.n	8006432 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	3301      	adds	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2b0f      	cmp	r3, #15
 800642e:	d9e9      	bls.n	8006404 <prvInitialiseNewTask+0x54>
 8006430:	e000      	b.n	8006434 <prvInitialiseNewTask+0x84>
            {
                break;
 8006432:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	2b06      	cmp	r3, #6
 8006440:	d90a      	bls.n	8006458 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	613b      	str	r3, [r7, #16]
    }
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b06      	cmp	r3, #6
 800645c:	d901      	bls.n	8006462 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800645e:	2306      	movs	r3, #6
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	3304      	adds	r3, #4
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe ff66 	bl	8005344 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	3318      	adds	r3, #24
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe ff61 	bl	8005344 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006486:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	f1c3 0207 	rsb	r2, r3, #7
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006496:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	334c      	adds	r3, #76	; 0x4c
 800649c:	224c      	movs	r2, #76	; 0x4c
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f004 f9af 	bl	800a804 <memset>
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	4a0c      	ldr	r2, [pc, #48]	; (80064dc <prvInitialiseNewTask+0x12c>)
 80064aa:	651a      	str	r2, [r3, #80]	; 0x50
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	4a0c      	ldr	r2, [pc, #48]	; (80064e0 <prvInitialiseNewTask+0x130>)
 80064b0:	655a      	str	r2, [r3, #84]	; 0x54
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	4a0b      	ldr	r2, [pc, #44]	; (80064e4 <prvInitialiseNewTask+0x134>)
 80064b6:	659a      	str	r2, [r3, #88]	; 0x58
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	69b8      	ldr	r0, [r7, #24]
 80064be:	f001 ff43 	bl	8008348 <pxPortInitialiseStack>
 80064c2:	4602      	mov	r2, r0
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80064d4:	bf00      	nop
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20004abc 	.word	0x20004abc
 80064e0:	20004b24 	.word	0x20004b24
 80064e4:	20004b8c 	.word	0x20004b8c

080064e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80064e8:	b5b0      	push	{r4, r5, r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80064f0:	f002 f8d8 	bl	80086a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80064f4:	4b4d      	ldr	r3, [pc, #308]	; (800662c <prvAddNewTaskToReadyList+0x144>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3301      	adds	r3, #1
 80064fa:	4a4c      	ldr	r2, [pc, #304]	; (800662c <prvAddNewTaskToReadyList+0x144>)
 80064fc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80064fe:	4b4c      	ldr	r3, [pc, #304]	; (8006630 <prvAddNewTaskToReadyList+0x148>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006506:	4a4a      	ldr	r2, [pc, #296]	; (8006630 <prvAddNewTaskToReadyList+0x148>)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800650c:	4b47      	ldr	r3, [pc, #284]	; (800662c <prvAddNewTaskToReadyList+0x144>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d110      	bne.n	8006536 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006514:	f000 fea2 	bl	800725c <prvInitialiseTaskLists>
 8006518:	e00d      	b.n	8006536 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800651a:	4b46      	ldr	r3, [pc, #280]	; (8006634 <prvAddNewTaskToReadyList+0x14c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006522:	4b43      	ldr	r3, [pc, #268]	; (8006630 <prvAddNewTaskToReadyList+0x148>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	429a      	cmp	r2, r3
 800652e:	d802      	bhi.n	8006536 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006530:	4a3f      	ldr	r2, [pc, #252]	; (8006630 <prvAddNewTaskToReadyList+0x148>)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006536:	4b40      	ldr	r3, [pc, #256]	; (8006638 <prvAddNewTaskToReadyList+0x150>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	4a3e      	ldr	r2, [pc, #248]	; (8006638 <prvAddNewTaskToReadyList+0x150>)
 800653e:	6013      	str	r3, [r2, #0]
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d016      	beq.n	8006574 <prvAddNewTaskToReadyList+0x8c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4618      	mov	r0, r3
 800654a:	f003 ff33 	bl	800a3b4 <SEGGER_SYSVIEW_OnTaskCreate>
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	461d      	mov	r5, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	461c      	mov	r4, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656a:	1ae3      	subs	r3, r4, r3
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	462b      	mov	r3, r5
 8006570:	f002 fc40 	bl	8008df4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4618      	mov	r0, r3
 8006578:	f003 ffa0 	bl	800a4bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	2201      	movs	r2, #1
 8006582:	409a      	lsls	r2, r3
 8006584:	4b2d      	ldr	r3, [pc, #180]	; (800663c <prvAddNewTaskToReadyList+0x154>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4313      	orrs	r3, r2
 800658a:	4a2c      	ldr	r2, [pc, #176]	; (800663c <prvAddNewTaskToReadyList+0x154>)
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006592:	492b      	ldr	r1, [pc, #172]	; (8006640 <prvAddNewTaskToReadyList+0x158>)
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	3304      	adds	r3, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	609a      	str	r2, [r3, #8]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	3204      	adds	r2, #4
 80065ba:	605a      	str	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	1d1a      	adds	r2, r3, #4
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	609a      	str	r2, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <prvAddNewTaskToReadyList+0x158>)
 80065d2:	441a      	add	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	615a      	str	r2, [r3, #20]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	4918      	ldr	r1, [pc, #96]	; (8006640 <prvAddNewTaskToReadyList+0x158>)
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	4814      	ldr	r0, [pc, #80]	; (8006640 <prvAddNewTaskToReadyList+0x158>)
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4403      	add	r3, r0
 80065f8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80065fa:	f002 f883 	bl	8008704 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80065fe:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <prvAddNewTaskToReadyList+0x14c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00e      	beq.n	8006624 <prvAddNewTaskToReadyList+0x13c>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <prvAddNewTaskToReadyList+0x148>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	429a      	cmp	r2, r3
 8006612:	d207      	bcs.n	8006624 <prvAddNewTaskToReadyList+0x13c>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006614:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <prvAddNewTaskToReadyList+0x15c>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bdb0      	pop	{r4, r5, r7, pc}
 800662c:	20000740 	.word	0x20000740
 8006630:	20000640 	.word	0x20000640
 8006634:	2000074c 	.word	0x2000074c
 8006638:	2000075c 	.word	0x2000075c
 800663c:	20000748 	.word	0x20000748
 8006640:	20000644 	.word	0x20000644
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006656:	463a      	mov	r2, r7
 8006658:	1d39      	adds	r1, r7, #4
 800665a:	f107 0308 	add.w	r3, r7, #8
 800665e:	4618      	mov	r0, r3
 8006660:	f7f9 ff90 	bl	8000584 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	9202      	str	r2, [sp, #8]
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	2300      	movs	r3, #0
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	2300      	movs	r3, #0
 8006674:	460a      	mov	r2, r1
 8006676:	492e      	ldr	r1, [pc, #184]	; (8006730 <vTaskStartScheduler+0xe8>)
 8006678:	482e      	ldr	r0, [pc, #184]	; (8006734 <vTaskStartScheduler+0xec>)
 800667a:	f7ff fded 	bl	8006258 <xTaskCreateStatic>
 800667e:	4603      	mov	r3, r0
 8006680:	4a2d      	ldr	r2, [pc, #180]	; (8006738 <vTaskStartScheduler+0xf0>)
 8006682:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8006684:	4b2c      	ldr	r3, [pc, #176]	; (8006738 <vTaskStartScheduler+0xf0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800668c:	2301      	movs	r3, #1
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	e001      	b.n	8006696 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d102      	bne.n	80066a2 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800669c:	f001 fae8 	bl	8007c70 <xTimerCreateTimerTask>
 80066a0:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d12e      	bne.n	8006706 <vTaskStartScheduler+0xbe>
        __asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	613b      	str	r3, [r7, #16]
    }
 80066ba:	bf00      	nop

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 80066bc:	4b1f      	ldr	r3, [pc, #124]	; (800673c <vTaskStartScheduler+0xf4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	334c      	adds	r3, #76	; 0x4c
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <vTaskStartScheduler+0xf8>)
 80066c4:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80066c6:	4b1f      	ldr	r3, [pc, #124]	; (8006744 <vTaskStartScheduler+0xfc>)
 80066c8:	f04f 32ff 	mov.w	r2, #4294967295
 80066cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80066ce:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <vTaskStartScheduler+0x100>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066d4:	4b1d      	ldr	r3, [pc, #116]	; (800674c <vTaskStartScheduler+0x104>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80066da:	4b18      	ldr	r3, [pc, #96]	; (800673c <vTaskStartScheduler+0xf4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3334      	adds	r3, #52	; 0x34
 80066e0:	2205      	movs	r2, #5
 80066e2:	4913      	ldr	r1, [pc, #76]	; (8006730 <vTaskStartScheduler+0xe8>)
 80066e4:	4618      	mov	r0, r3
 80066e6:	f004 f87d 	bl	800a7e4 <memcmp>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <vTaskStartScheduler+0xb4>
 80066f0:	4b12      	ldr	r3, [pc, #72]	; (800673c <vTaskStartScheduler+0xf4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f003 fe9f 	bl	800a438 <SEGGER_SYSVIEW_OnTaskStartExec>
 80066fa:	e001      	b.n	8006700 <vTaskStartScheduler+0xb8>
 80066fc:	f003 fe3e 	bl	800a37c <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006700:	f001 feb0 	bl	8008464 <xPortStartScheduler>
 8006704:	e00e      	b.n	8006724 <vTaskStartScheduler+0xdc>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d10a      	bne.n	8006724 <vTaskStartScheduler+0xdc>
        __asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60fb      	str	r3, [r7, #12]
    }
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <vTaskStartScheduler+0xda>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006724:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <vTaskStartScheduler+0x108>)
 8006726:	681b      	ldr	r3, [r3, #0]
}
 8006728:	bf00      	nop
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	0800abd0 	.word	0x0800abd0
 8006734:	0800722d 	.word	0x0800722d
 8006738:	20000764 	.word	0x20000764
 800673c:	20000640 	.word	0x20000640
 8006740:	20000070 	.word	0x20000070
 8006744:	20000760 	.word	0x20000760
 8006748:	2000074c 	.word	0x2000074c
 800674c:	20000744 	.word	0x20000744
 8006750:	2000001c 	.word	0x2000001c

08006754 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <vTaskSuspendAll+0x18>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	4a03      	ldr	r2, [pc, #12]	; (800676c <vTaskSuspendAll+0x18>)
 8006760:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006762:	bf00      	nop
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	20000768 	.word	0x20000768

08006770 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800677a:	2300      	movs	r3, #0
 800677c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800677e:	4b73      	ldr	r3, [pc, #460]	; (800694c <xTaskResumeAll+0x1dc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <xTaskResumeAll+0x2c>
        __asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	607b      	str	r3, [r7, #4]
    }
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800679c:	f001 ff82 	bl	80086a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80067a0:	4b6a      	ldr	r3, [pc, #424]	; (800694c <xTaskResumeAll+0x1dc>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	4a69      	ldr	r2, [pc, #420]	; (800694c <xTaskResumeAll+0x1dc>)
 80067a8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067aa:	4b68      	ldr	r3, [pc, #416]	; (800694c <xTaskResumeAll+0x1dc>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f040 80c4 	bne.w	800693c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067b4:	4b66      	ldr	r3, [pc, #408]	; (8006950 <xTaskResumeAll+0x1e0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80bf 	beq.w	800693c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067be:	e08e      	b.n	80068de <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c0:	4b64      	ldr	r3, [pc, #400]	; (8006954 <xTaskResumeAll+0x1e4>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	6a12      	ldr	r2, [r2, #32]
 80067d6:	609a      	str	r2, [r3, #8]
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	69d2      	ldr	r2, [r2, #28]
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	3318      	adds	r3, #24
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d103      	bne.n	80067f6 <xTaskResumeAll+0x86>
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	605a      	str	r2, [r3, #4]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2200      	movs	r2, #0
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	1e5a      	subs	r2, r3, #1
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	68d2      	ldr	r2, [r2, #12]
 8006814:	609a      	str	r2, [r3, #8]
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	6892      	ldr	r2, [r2, #8]
 800681e:	605a      	str	r2, [r3, #4]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	3304      	adds	r3, #4
 8006828:	429a      	cmp	r2, r3
 800682a:	d103      	bne.n	8006834 <xTaskResumeAll+0xc4>
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2200      	movs	r2, #0
 8006838:	615a      	str	r2, [r3, #20]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	1e5a      	subs	r2, r3, #1
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4618      	mov	r0, r3
 8006848:	f003 fe38 	bl	800a4bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	2201      	movs	r2, #1
 8006852:	409a      	lsls	r2, r3
 8006854:	4b40      	ldr	r3, [pc, #256]	; (8006958 <xTaskResumeAll+0x1e8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4313      	orrs	r3, r2
 800685a:	4a3f      	ldr	r2, [pc, #252]	; (8006958 <xTaskResumeAll+0x1e8>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006862:	493e      	ldr	r1, [pc, #248]	; (800695c <xTaskResumeAll+0x1ec>)
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	3304      	adds	r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	609a      	str	r2, [r3, #8]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	3204      	adds	r2, #4
 800688a:	605a      	str	r2, [r3, #4]
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	1d1a      	adds	r2, r3, #4
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	609a      	str	r2, [r3, #8]
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4a2e      	ldr	r2, [pc, #184]	; (800695c <xTaskResumeAll+0x1ec>)
 80068a2:	441a      	add	r2, r3
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	615a      	str	r2, [r3, #20]
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ac:	492b      	ldr	r1, [pc, #172]	; (800695c <xTaskResumeAll+0x1ec>)
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	4827      	ldr	r0, [pc, #156]	; (800695c <xTaskResumeAll+0x1ec>)
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4403      	add	r3, r0
 80068c8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ce:	4b24      	ldr	r3, [pc, #144]	; (8006960 <xTaskResumeAll+0x1f0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d302      	bcc.n	80068de <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80068d8:	4b22      	ldr	r3, [pc, #136]	; (8006964 <xTaskResumeAll+0x1f4>)
 80068da:	2201      	movs	r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068de:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <xTaskResumeAll+0x1e4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f47f af6c 	bne.w	80067c0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80068ee:	f000 fd5b 	bl	80073a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <xTaskResumeAll+0x1f8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80068fe:	f000 f939 	bl	8006b74 <xTaskIncrementTick>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8006908:	4b16      	ldr	r3, [pc, #88]	; (8006964 <xTaskResumeAll+0x1f4>)
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	3b01      	subs	r3, #1
 8006912:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f1      	bne.n	80068fe <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <xTaskResumeAll+0x1f8>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006920:	4b10      	ldr	r3, [pc, #64]	; (8006964 <xTaskResumeAll+0x1f4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d009      	beq.n	800693c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800692c:	4b0f      	ldr	r3, [pc, #60]	; (800696c <xTaskResumeAll+0x1fc>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800693c:	f001 fee2 	bl	8008704 <vPortExitCritical>

    return xAlreadyYielded;
 8006940:	69bb      	ldr	r3, [r7, #24]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3720      	adds	r7, #32
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000768 	.word	0x20000768
 8006950:	20000740 	.word	0x20000740
 8006954:	20000700 	.word	0x20000700
 8006958:	20000748 	.word	0x20000748
 800695c:	20000644 	.word	0x20000644
 8006960:	20000640 	.word	0x20000640
 8006964:	20000754 	.word	0x20000754
 8006968:	20000750 	.word	0x20000750
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006976:	4b05      	ldr	r3, [pc, #20]	; (800698c <xTaskGetTickCount+0x1c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800697c:	687b      	ldr	r3, [r7, #4]
}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	20000744 	.word	0x20000744

08006990 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006996:	f001 ff71 	bl	800887c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800699e:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <xTaskGetTickCountFromISR+0x20>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80069a4:	683b      	ldr	r3, [r7, #0]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000744 	.word	0x20000744

080069b4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80069b8:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <uxTaskGetNumberOfTasks+0x14>)
 80069ba:	681b      	ldr	r3, [r3, #0]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000740 	.word	0x20000740

080069cc <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 80069cc:	b480      	push	{r7}
 80069ce:	b08b      	sub	sp, #44	; 0x2c
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB;
        TCB_t * pxFirstTCB;
        TCB_t * pxReturn = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d05b      	beq.n	8006a9a <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	605a      	str	r2, [r3, #4]
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	3308      	adds	r3, #8
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d104      	bne.n	8006a06 <prvSearchForNameWithinSingleList+0x3a>
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	605a      	str	r2, [r3, #4]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	3308      	adds	r3, #8
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d104      	bne.n	8006a32 <prvSearchForNameWithinSingleList+0x66>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	605a      	str	r2, [r3, #4]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a3e:	2300      	movs	r3, #0
 8006a40:	623b      	str	r3, [r7, #32]
 8006a42:	e01c      	b.n	8006a7e <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	4413      	add	r3, r2
 8006a4a:	3334      	adds	r3, #52	; 0x34
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	4413      	add	r3, r2
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	7afa      	ldrb	r2, [r7, #11]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d002      	beq.n	8006a64 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	e006      	b.n	8006a72 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d103      	bne.n	8006a72 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	623b      	str	r3, [r7, #32]
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	2b0f      	cmp	r3, #15
 8006a82:	d9df      	bls.n	8006a44 <prvSearchForNameWithinSingleList+0x78>
 8006a84:	e000      	b.n	8006a88 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8006a86:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d1bb      	bne.n	8006a0e <prvSearchForNameWithinSingleList+0x42>
 8006a96:	e000      	b.n	8006a9a <prvSearchForNameWithinSingleList+0xce>
                    break;
 8006a98:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	372c      	adds	r7, #44	; 0x2c
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8006ab0:	2307      	movs	r3, #7
 8006ab2:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7f9 fbdf 	bl	8000278 <strlen>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b0f      	cmp	r3, #15
 8006abe:	d90a      	bls.n	8006ad6 <xTaskGetHandle+0x2e>
        __asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
    }
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8006ad6:	f7ff fe3d 	bl	8006754 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <xTaskGetHandle+0xb8>)
 8006aec:	4413      	add	r3, r2
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff ff6b 	bl	80069cc <prvSearchForNameWithinSingleList>
 8006af6:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d103      	bne.n	8006b06 <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1ea      	bne.n	8006ada <xTaskGetHandle+0x32>
 8006b04:	e000      	b.n	8006b08 <xTaskGetHandle+0x60>
                    break;
 8006b06:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8006b0e:	4b15      	ldr	r3, [pc, #84]	; (8006b64 <xTaskGetHandle+0xbc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff59 	bl	80069cc <prvSearchForNameWithinSingleList>
 8006b1a:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8006b22:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <xTaskGetHandle+0xc0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff ff4f 	bl	80069cc <prvSearchForNameWithinSingleList>
 8006b2e:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <xTaskGetHandle+0x98>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	480c      	ldr	r0, [pc, #48]	; (8006b6c <xTaskGetHandle+0xc4>)
 8006b3a:	f7ff ff47 	bl	80069cc <prvSearchForNameWithinSingleList>
 8006b3e:	6138      	str	r0, [r7, #16]
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d104      	bne.n	8006b50 <xTaskGetHandle+0xa8>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4809      	ldr	r0, [pc, #36]	; (8006b70 <xTaskGetHandle+0xc8>)
 8006b4a:	f7ff ff3f 	bl	80069cc <prvSearchForNameWithinSingleList>
 8006b4e:	6138      	str	r0, [r7, #16]
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
 8006b50:	f7ff fe0e 	bl	8006770 <xTaskResumeAll>

        return pxTCB;
 8006b54:	693b      	ldr	r3, [r7, #16]
    }
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000644 	.word	0x20000644
 8006b64:	200006f8 	.word	0x200006f8
 8006b68:	200006fc 	.word	0x200006fc
 8006b6c:	2000072c 	.word	0x2000072c
 8006b70:	20000714 	.word	0x20000714

08006b74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08a      	sub	sp, #40	; 0x28
 8006b78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b7e:	4b7f      	ldr	r3, [pc, #508]	; (8006d7c <xTaskIncrementTick+0x208>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f040 80f0 	bne.w	8006d68 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b88:	4b7d      	ldr	r3, [pc, #500]	; (8006d80 <xTaskIncrementTick+0x20c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006b90:	4a7b      	ldr	r2, [pc, #492]	; (8006d80 <xTaskIncrementTick+0x20c>)
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d120      	bne.n	8006bde <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006b9c:	4b79      	ldr	r3, [pc, #484]	; (8006d84 <xTaskIncrementTick+0x210>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <xTaskIncrementTick+0x48>
        __asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	607b      	str	r3, [r7, #4]
    }
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <xTaskIncrementTick+0x46>
 8006bbc:	4b71      	ldr	r3, [pc, #452]	; (8006d84 <xTaskIncrementTick+0x210>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	4b71      	ldr	r3, [pc, #452]	; (8006d88 <xTaskIncrementTick+0x214>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6f      	ldr	r2, [pc, #444]	; (8006d84 <xTaskIncrementTick+0x210>)
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	4a6f      	ldr	r2, [pc, #444]	; (8006d88 <xTaskIncrementTick+0x214>)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	4b6e      	ldr	r3, [pc, #440]	; (8006d8c <xTaskIncrementTick+0x218>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4a6d      	ldr	r2, [pc, #436]	; (8006d8c <xTaskIncrementTick+0x218>)
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	f000 fbe5 	bl	80073a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006bde:	4b6c      	ldr	r3, [pc, #432]	; (8006d90 <xTaskIncrementTick+0x21c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6a3a      	ldr	r2, [r7, #32]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	f0c0 80aa 	bcc.w	8006d3e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bea:	4b66      	ldr	r3, [pc, #408]	; (8006d84 <xTaskIncrementTick+0x210>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf4:	4b66      	ldr	r3, [pc, #408]	; (8006d90 <xTaskIncrementTick+0x21c>)
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	601a      	str	r2, [r3, #0]
                    break;
 8006bfc:	e09f      	b.n	8006d3e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bfe:	4b61      	ldr	r3, [pc, #388]	; (8006d84 <xTaskIncrementTick+0x210>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006c0e:	6a3a      	ldr	r2, [r7, #32]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d203      	bcs.n	8006c1e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006c16:	4a5e      	ldr	r2, [pc, #376]	; (8006d90 <xTaskIncrementTick+0x21c>)
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006c1c:	e08f      	b.n	8006d3e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	68d2      	ldr	r2, [r2, #12]
 8006c2c:	609a      	str	r2, [r3, #8]
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	6892      	ldr	r2, [r2, #8]
 8006c36:	605a      	str	r2, [r3, #4]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d103      	bne.n	8006c4c <xTaskIncrementTick+0xd8>
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	615a      	str	r2, [r3, #20]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	1e5a      	subs	r2, r3, #1
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01e      	beq.n	8006ca2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	6a12      	ldr	r2, [r2, #32]
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	69d2      	ldr	r2, [r2, #28]
 8006c7c:	605a      	str	r2, [r3, #4]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	3318      	adds	r3, #24
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d103      	bne.n	8006c92 <xTaskIncrementTick+0x11e>
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	6a1a      	ldr	r2, [r3, #32]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2200      	movs	r2, #0
 8006c96:	629a      	str	r2, [r3, #40]	; 0x28
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	1e5a      	subs	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f003 fc09 	bl	800a4bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	2201      	movs	r2, #1
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	4b38      	ldr	r3, [pc, #224]	; (8006d94 <xTaskIncrementTick+0x220>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	4a36      	ldr	r2, [pc, #216]	; (8006d94 <xTaskIncrementTick+0x220>)
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc0:	4935      	ldr	r1, [pc, #212]	; (8006d98 <xTaskIncrementTick+0x224>)
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	3304      	adds	r3, #4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60bb      	str	r3, [r7, #8]
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	609a      	str	r2, [r3, #8]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	60da      	str	r2, [r3, #12]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	3204      	adds	r2, #4
 8006ce8:	605a      	str	r2, [r3, #4]
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	1d1a      	adds	r2, r3, #4
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <xTaskIncrementTick+0x224>)
 8006d00:	441a      	add	r2, r3
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	615a      	str	r2, [r3, #20]
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0a:	4923      	ldr	r1, [pc, #140]	; (8006d98 <xTaskIncrementTick+0x224>)
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	481f      	ldr	r0, [pc, #124]	; (8006d98 <xTaskIncrementTick+0x224>)
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4403      	add	r3, r0
 8006d26:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	4b1b      	ldr	r3, [pc, #108]	; (8006d9c <xTaskIncrementTick+0x228>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	f67f af59 	bls.w	8006bea <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d3c:	e755      	b.n	8006bea <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d3e:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <xTaskIncrementTick+0x228>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d44:	4914      	ldr	r1, [pc, #80]	; (8006d98 <xTaskIncrementTick+0x224>)
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d901      	bls.n	8006d5a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8006d56:	2301      	movs	r3, #1
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006d5a:	4b11      	ldr	r3, [pc, #68]	; (8006da0 <xTaskIncrementTick+0x22c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
 8006d66:	e004      	b.n	8006d72 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006d68:	4b0e      	ldr	r3, [pc, #56]	; (8006da4 <xTaskIncrementTick+0x230>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	4a0d      	ldr	r2, [pc, #52]	; (8006da4 <xTaskIncrementTick+0x230>)
 8006d70:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3728      	adds	r7, #40	; 0x28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000768 	.word	0x20000768
 8006d80:	20000744 	.word	0x20000744
 8006d84:	200006f8 	.word	0x200006f8
 8006d88:	200006fc 	.word	0x200006fc
 8006d8c:	20000758 	.word	0x20000758
 8006d90:	20000760 	.word	0x20000760
 8006d94:	20000748 	.word	0x20000748
 8006d98:	20000644 	.word	0x20000644
 8006d9c:	20000640 	.word	0x20000640
 8006da0:	20000754 	.word	0x20000754
 8006da4:	20000750 	.word	0x20000750

08006da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dae:	4b32      	ldr	r3, [pc, #200]	; (8006e78 <vTaskSwitchContext+0xd0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006db6:	4b31      	ldr	r3, [pc, #196]	; (8006e7c <vTaskSwitchContext+0xd4>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006dbc:	e057      	b.n	8006e6e <vTaskSwitchContext+0xc6>
        xYieldPending = pdFALSE;
 8006dbe:	4b2f      	ldr	r3, [pc, #188]	; (8006e7c <vTaskSwitchContext+0xd4>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc4:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <vTaskSwitchContext+0xd8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	fab3 f383 	clz	r3, r3
 8006dd0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006dd2:	7afb      	ldrb	r3, [r7, #11]
 8006dd4:	f1c3 031f 	rsb	r3, r3, #31
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	492a      	ldr	r1, [pc, #168]	; (8006e84 <vTaskSwitchContext+0xdc>)
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	607b      	str	r3, [r7, #4]
    }
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <vTaskSwitchContext+0x5a>
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <vTaskSwitchContext+0xdc>)
 8006e10:	4413      	add	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3308      	adds	r3, #8
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d104      	bne.n	8006e34 <vTaskSwitchContext+0x8c>
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	605a      	str	r2, [r3, #4]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	4a13      	ldr	r2, [pc, #76]	; (8006e88 <vTaskSwitchContext+0xe0>)
 8006e3c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <vTaskSwitchContext+0xe0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3334      	adds	r3, #52	; 0x34
 8006e44:	2205      	movs	r2, #5
 8006e46:	4911      	ldr	r1, [pc, #68]	; (8006e8c <vTaskSwitchContext+0xe4>)
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f003 fccb 	bl	800a7e4 <memcmp>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <vTaskSwitchContext+0xb8>
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <vTaskSwitchContext+0xe0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f003 faed 	bl	800a438 <SEGGER_SYSVIEW_OnTaskStartExec>
 8006e5e:	e001      	b.n	8006e64 <vTaskSwitchContext+0xbc>
 8006e60:	f003 fa8c 	bl	800a37c <SEGGER_SYSVIEW_OnIdle>
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8006e64:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <vTaskSwitchContext+0xe0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	334c      	adds	r3, #76	; 0x4c
 8006e6a:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <vTaskSwitchContext+0xe8>)
 8006e6c:	6013      	str	r3, [r2, #0]
}
 8006e6e:	bf00      	nop
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000768 	.word	0x20000768
 8006e7c:	20000754 	.word	0x20000754
 8006e80:	20000748 	.word	0x20000748
 8006e84:	20000644 	.word	0x20000644
 8006e88:	20000640 	.word	0x20000640
 8006e8c:	0800abd0 	.word	0x0800abd0
 8006e90:	20000070 	.word	0x20000070

08006e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	60fb      	str	r3, [r7, #12]
    }
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eba:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <vTaskPlaceOnEventList+0x44>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3318      	adds	r3, #24
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fe fa6f 	bl	80053a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ec8:	2101      	movs	r1, #1
 8006eca:	6838      	ldr	r0, [r7, #0]
 8006ecc:	f000 fe50 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20000640 	.word	0x20000640

08006edc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	613b      	str	r3, [r7, #16]
    }
 8006f00:	bf00      	nop
 8006f02:	e7fe      	b.n	8006f02 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	61da      	str	r2, [r3, #28]
 8006f12:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	6892      	ldr	r2, [r2, #8]
 8006f1a:	621a      	str	r2, [r3, #32]
 8006f1c:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	3218      	adds	r2, #24
 8006f26:	605a      	str	r2, [r3, #4]
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f103 0218 	add.w	r2, r3, #24
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f50:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006f52:	2024      	movs	r0, #36	; 0x24
 8006f54:	f002 fc66 	bl	8009824 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	68b8      	ldr	r0, [r7, #8]
 8006f5c:	f000 fe08 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
    }
 8006f60:	bf00      	nop
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000640 	.word	0x20000640

08006f6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60fb      	str	r3, [r7, #12]
    }
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	61fb      	str	r3, [r7, #28]
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	6a3a      	ldr	r2, [r7, #32]
 8006fa4:	6a12      	ldr	r2, [r2, #32]
 8006fa6:	609a      	str	r2, [r3, #8]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	6a3a      	ldr	r2, [r7, #32]
 8006fae:	69d2      	ldr	r2, [r2, #28]
 8006fb0:	605a      	str	r2, [r3, #4]
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	3318      	adds	r3, #24
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d103      	bne.n	8006fc6 <xTaskRemoveFromEventList+0x5a>
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	6a1a      	ldr	r2, [r3, #32]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	605a      	str	r2, [r3, #4]
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	1e5a      	subs	r2, r3, #1
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd6:	4b4b      	ldr	r3, [pc, #300]	; (8007104 <xTaskRemoveFromEventList+0x198>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d162      	bne.n	80070a4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	6a3a      	ldr	r2, [r7, #32]
 8006fea:	68d2      	ldr	r2, [r2, #12]
 8006fec:	609a      	str	r2, [r3, #8]
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	6a3a      	ldr	r2, [r7, #32]
 8006ff4:	6892      	ldr	r2, [r2, #8]
 8006ff6:	605a      	str	r2, [r3, #4]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	3304      	adds	r3, #4
 8007000:	429a      	cmp	r2, r3
 8007002:	d103      	bne.n	800700c <xTaskRemoveFromEventList+0xa0>
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	605a      	str	r2, [r3, #4]
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2200      	movs	r2, #0
 8007010:	615a      	str	r2, [r3, #20]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	1e5a      	subs	r2, r3, #1
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	4618      	mov	r0, r3
 8007020:	f003 fa4c 	bl	800a4bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	2201      	movs	r2, #1
 800702a:	409a      	lsls	r2, r3
 800702c:	4b36      	ldr	r3, [pc, #216]	; (8007108 <xTaskRemoveFromEventList+0x19c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4313      	orrs	r3, r2
 8007032:	4a35      	ldr	r2, [pc, #212]	; (8007108 <xTaskRemoveFromEventList+0x19c>)
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703a:	4934      	ldr	r1, [pc, #208]	; (800710c <xTaskRemoveFromEventList+0x1a0>)
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	3304      	adds	r3, #4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	609a      	str	r2, [r3, #8]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	60da      	str	r2, [r3, #12]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	3204      	adds	r2, #4
 8007062:	605a      	str	r2, [r3, #4]
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	1d1a      	adds	r2, r3, #4
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	609a      	str	r2, [r3, #8]
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007070:	4613      	mov	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4a24      	ldr	r2, [pc, #144]	; (800710c <xTaskRemoveFromEventList+0x1a0>)
 800707a:	441a      	add	r2, r3
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	615a      	str	r2, [r3, #20]
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007084:	4921      	ldr	r1, [pc, #132]	; (800710c <xTaskRemoveFromEventList+0x1a0>)
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	481d      	ldr	r0, [pc, #116]	; (800710c <xTaskRemoveFromEventList+0x1a0>)
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4403      	add	r3, r0
 80070a0:	6019      	str	r1, [r3, #0]
 80070a2:	e01b      	b.n	80070dc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070a4:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <xTaskRemoveFromEventList+0x1a4>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	61da      	str	r2, [r3, #28]
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	621a      	str	r2, [r3, #32]
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	6a3a      	ldr	r2, [r7, #32]
 80070be:	3218      	adds	r2, #24
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	f103 0218 	add.w	r2, r3, #24
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	609a      	str	r2, [r3, #8]
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	4a10      	ldr	r2, [pc, #64]	; (8007110 <xTaskRemoveFromEventList+0x1a4>)
 80070d0:	629a      	str	r2, [r3, #40]	; 0x28
 80070d2:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <xTaskRemoveFromEventList+0x1a4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3301      	adds	r3, #1
 80070d8:	4a0d      	ldr	r2, [pc, #52]	; (8007110 <xTaskRemoveFromEventList+0x1a4>)
 80070da:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <xTaskRemoveFromEventList+0x1a8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d905      	bls.n	80070f6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80070ea:	2301      	movs	r3, #1
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <xTaskRemoveFromEventList+0x1ac>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e001      	b.n	80070fa <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3728      	adds	r7, #40	; 0x28
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000768 	.word	0x20000768
 8007108:	20000748 	.word	0x20000748
 800710c:	20000644 	.word	0x20000644
 8007110:	20000700 	.word	0x20000700
 8007114:	20000640 	.word	0x20000640
 8007118:	20000754 	.word	0x20000754

0800711c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007124:	4b06      	ldr	r3, [pc, #24]	; (8007140 <vTaskInternalSetTimeOutState+0x24>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <vTaskInternalSetTimeOutState+0x28>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	20000758 	.word	0x20000758
 8007144:	20000744 	.word	0x20000744

08007148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10a      	bne.n	800716e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	613b      	str	r3, [r7, #16]
    }
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	60fb      	str	r3, [r7, #12]
    }
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800718a:	f001 fa8b 	bl	80086a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800718e:	4b1f      	ldr	r3, [pc, #124]	; (800720c <xTaskCheckForTimeOut+0xc4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a6:	d102      	bne.n	80071ae <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	e026      	b.n	80071fc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b17      	ldr	r3, [pc, #92]	; (8007210 <xTaskCheckForTimeOut+0xc8>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d00a      	beq.n	80071d0 <xTaskCheckForTimeOut+0x88>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d305      	bcc.n	80071d0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e015      	b.n	80071fc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d20b      	bcs.n	80071f2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	1ad2      	subs	r2, r2, r3
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff ff98 	bl	800711c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	e004      	b.n	80071fc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80071fc:	f001 fa82 	bl	8008704 <vPortExitCritical>

    return xReturn;
 8007200:	69fb      	ldr	r3, [r7, #28]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3720      	adds	r7, #32
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000744 	.word	0x20000744
 8007210:	20000758 	.word	0x20000758

08007214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007218:	4b03      	ldr	r3, [pc, #12]	; (8007228 <vTaskMissedYield+0x14>)
 800721a:	2201      	movs	r2, #1
 800721c:	601a      	str	r2, [r3, #0]
}
 800721e:	bf00      	nop
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	20000754 	.word	0x20000754

0800722c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007234:	f000 f852 	bl	80072dc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007238:	4b06      	ldr	r3, [pc, #24]	; (8007254 <prvIdleTask+0x28>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d9f9      	bls.n	8007234 <prvIdleTask+0x8>
            {
                taskYIELD();
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <prvIdleTask+0x2c>)
 8007242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007250:	e7f0      	b.n	8007234 <prvIdleTask+0x8>
 8007252:	bf00      	nop
 8007254:	20000644 	.word	0x20000644
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007262:	2300      	movs	r3, #0
 8007264:	607b      	str	r3, [r7, #4]
 8007266:	e00c      	b.n	8007282 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4a12      	ldr	r2, [pc, #72]	; (80072bc <prvInitialiseTaskLists+0x60>)
 8007274:	4413      	add	r3, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe f844 	bl	8005304 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3301      	adds	r3, #1
 8007280:	607b      	str	r3, [r7, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b06      	cmp	r3, #6
 8007286:	d9ef      	bls.n	8007268 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007288:	480d      	ldr	r0, [pc, #52]	; (80072c0 <prvInitialiseTaskLists+0x64>)
 800728a:	f7fe f83b 	bl	8005304 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800728e:	480d      	ldr	r0, [pc, #52]	; (80072c4 <prvInitialiseTaskLists+0x68>)
 8007290:	f7fe f838 	bl	8005304 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007294:	480c      	ldr	r0, [pc, #48]	; (80072c8 <prvInitialiseTaskLists+0x6c>)
 8007296:	f7fe f835 	bl	8005304 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800729a:	480c      	ldr	r0, [pc, #48]	; (80072cc <prvInitialiseTaskLists+0x70>)
 800729c:	f7fe f832 	bl	8005304 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80072a0:	480b      	ldr	r0, [pc, #44]	; (80072d0 <prvInitialiseTaskLists+0x74>)
 80072a2:	f7fe f82f 	bl	8005304 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <prvInitialiseTaskLists+0x78>)
 80072a8:	4a05      	ldr	r2, [pc, #20]	; (80072c0 <prvInitialiseTaskLists+0x64>)
 80072aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072ac:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <prvInitialiseTaskLists+0x7c>)
 80072ae:	4a05      	ldr	r2, [pc, #20]	; (80072c4 <prvInitialiseTaskLists+0x68>)
 80072b0:	601a      	str	r2, [r3, #0]
}
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000644 	.word	0x20000644
 80072c0:	200006d0 	.word	0x200006d0
 80072c4:	200006e4 	.word	0x200006e4
 80072c8:	20000700 	.word	0x20000700
 80072cc:	20000714 	.word	0x20000714
 80072d0:	2000072c 	.word	0x2000072c
 80072d4:	200006f8 	.word	0x200006f8
 80072d8:	200006fc 	.word	0x200006fc

080072dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072e2:	e019      	b.n	8007318 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80072e4:	f001 f9de 	bl	80086a4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e8:	4b10      	ldr	r3, [pc, #64]	; (800732c <prvCheckTasksWaitingTermination+0x50>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe f88f 	bl	8005418 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80072fa:	4b0d      	ldr	r3, [pc, #52]	; (8007330 <prvCheckTasksWaitingTermination+0x54>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3b01      	subs	r3, #1
 8007300:	4a0b      	ldr	r2, [pc, #44]	; (8007330 <prvCheckTasksWaitingTermination+0x54>)
 8007302:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007304:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <prvCheckTasksWaitingTermination+0x58>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3b01      	subs	r3, #1
 800730a:	4a0a      	ldr	r2, [pc, #40]	; (8007334 <prvCheckTasksWaitingTermination+0x58>)
 800730c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800730e:	f001 f9f9 	bl	8008704 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f810 	bl	8007338 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007318:	4b06      	ldr	r3, [pc, #24]	; (8007334 <prvCheckTasksWaitingTermination+0x58>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e1      	bne.n	80072e4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000714 	.word	0x20000714
 8007330:	20000740 	.word	0x20000740
 8007334:	20000728 	.word	0x20000728

08007338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8007340:	4b18      	ldr	r3, [pc, #96]	; (80073a4 <prvDeleteTCB+0x6c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	334c      	adds	r3, #76	; 0x4c
 8007346:	4618      	mov	r0, r3
 8007348:	f003 fa64 	bl	800a814 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007352:	2b00      	cmp	r3, #0
 8007354:	d108      	bne.n	8007368 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	4618      	mov	r0, r3
 800735c:	f001 fb88 	bl	8008a70 <vPortFree>
                vPortFree( pxTCB );
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 fb85 	bl	8008a70 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007366:	e018      	b.n	800739a <prvDeleteTCB+0x62>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800736e:	2b01      	cmp	r3, #1
 8007370:	d103      	bne.n	800737a <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 fb7c 	bl	8008a70 <vPortFree>
    }
 8007378:	e00f      	b.n	800739a <prvDeleteTCB+0x62>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007380:	2b02      	cmp	r3, #2
 8007382:	d00a      	beq.n	800739a <prvDeleteTCB+0x62>
        __asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60fb      	str	r3, [r7, #12]
    }
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <prvDeleteTCB+0x60>
    }
 800739a:	bf00      	nop
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20000640 	.word	0x20000640

080073a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <prvResetNextTaskUnblockTime+0x30>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80073b6:	4b09      	ldr	r3, [pc, #36]	; (80073dc <prvResetNextTaskUnblockTime+0x34>)
 80073b8:	f04f 32ff 	mov.w	r2, #4294967295
 80073bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80073be:	e005      	b.n	80073cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <prvResetNextTaskUnblockTime+0x30>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a04      	ldr	r2, [pc, #16]	; (80073dc <prvResetNextTaskUnblockTime+0x34>)
 80073ca:	6013      	str	r3, [r2, #0]
}
 80073cc:	bf00      	nop
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	200006f8 	.word	0x200006f8
 80073dc:	20000760 	.word	0x20000760

080073e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <xTaskGetSchedulerState+0x34>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80073ee:	2301      	movs	r3, #1
 80073f0:	607b      	str	r3, [r7, #4]
 80073f2:	e008      	b.n	8007406 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073f4:	4b08      	ldr	r3, [pc, #32]	; (8007418 <xTaskGetSchedulerState+0x38>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80073fc:	2302      	movs	r3, #2
 80073fe:	607b      	str	r3, [r7, #4]
 8007400:	e001      	b.n	8007406 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007402:	2300      	movs	r3, #0
 8007404:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007406:	687b      	ldr	r3, [r7, #4]
    }
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	2000074c 	.word	0x2000074c
 8007418:	20000768 	.word	0x20000768

0800741c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d068      	beq.n	8007504 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007432:	4b37      	ldr	r3, [pc, #220]	; (8007510 <xTaskPriorityDisinherit+0xf4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	429a      	cmp	r2, r3
 800743a:	d00a      	beq.n	8007452 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	60fb      	str	r3, [r7, #12]
    }
 800744e:	bf00      	nop
 8007450:	e7fe      	b.n	8007450 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	60bb      	str	r3, [r7, #8]
    }
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007474:	1e5a      	subs	r2, r3, #1
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007482:	429a      	cmp	r2, r3
 8007484:	d03e      	beq.n	8007504 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748a:	2b00      	cmp	r3, #0
 800748c:	d13a      	bne.n	8007504 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3304      	adds	r3, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f7fd ffc0 	bl	8005418 <uxListRemove>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	2201      	movs	r2, #1
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	43da      	mvns	r2, r3
 80074aa:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <xTaskPriorityDisinherit+0xf8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4013      	ands	r3, r2
 80074b0:	4a18      	ldr	r2, [pc, #96]	; (8007514 <xTaskPriorityDisinherit+0xf8>)
 80074b2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4619      	mov	r1, r3
 80074b8:	204a      	movs	r0, #74	; 0x4a
 80074ba:	f002 f9d1 	bl	8009860 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	f1c3 0207 	rsb	r2, r3, #7
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	2201      	movs	r2, #1
 80074d8:	409a      	lsls	r2, r3
 80074da:	4b0e      	ldr	r3, [pc, #56]	; (8007514 <xTaskPriorityDisinherit+0xf8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4313      	orrs	r3, r2
 80074e0:	4a0c      	ldr	r2, [pc, #48]	; (8007514 <xTaskPriorityDisinherit+0xf8>)
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4a09      	ldr	r2, [pc, #36]	; (8007518 <xTaskPriorityDisinherit+0xfc>)
 80074f2:	441a      	add	r2, r3
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4619      	mov	r1, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	f7fd ff2f 	bl	800535e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007504:	697b      	ldr	r3, [r7, #20]
    }
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000640 	.word	0x20000640
 8007514:	20000748 	.word	0x20000748
 8007518:	20000644 	.word	0x20000644

0800751c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
    }
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8007546:	f001 f8ad 	bl	80086a4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800754a:	4b36      	ldr	r3, [pc, #216]	; (8007624 <xTaskGenericNotifyWait+0x108>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	339c      	adds	r3, #156	; 0x9c
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b02      	cmp	r3, #2
 800755a:	d022      	beq.n	80075a2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800755c:	4b31      	ldr	r3, [pc, #196]	; (8007624 <xTaskGenericNotifyWait+0x108>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	3226      	adds	r2, #38	; 0x26
 8007564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	43d2      	mvns	r2, r2
 800756c:	4011      	ands	r1, r2
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	3226      	adds	r2, #38	; 0x26
 8007572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8007576:	4b2b      	ldr	r3, [pc, #172]	; (8007624 <xTaskGenericNotifyWait+0x108>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	339c      	adds	r3, #156	; 0x9c
 8007580:	2201      	movs	r2, #1
 8007582:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800758a:	2101      	movs	r1, #1
 800758c:	6a38      	ldr	r0, [r7, #32]
 800758e:	f000 faef 	bl	8007b70 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8007592:	4b25      	ldr	r3, [pc, #148]	; (8007628 <xTaskGenericNotifyWait+0x10c>)
 8007594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80075a2:	f001 f8af 	bl	8008704 <vPortExitCritical>

        taskENTER_CRITICAL();
 80075a6:	f001 f87d 	bl	80086a4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	2040      	movs	r0, #64	; 0x40
 80075b8:	f002 fa5e 	bl	8009a78 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d007      	beq.n	80075d2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80075c2:	4b18      	ldr	r3, [pc, #96]	; (8007624 <xTaskGenericNotifyWait+0x108>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	3226      	adds	r2, #38	; 0x26
 80075ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80075d2:	4b14      	ldr	r3, [pc, #80]	; (8007624 <xTaskGenericNotifyWait+0x108>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	339c      	adds	r3, #156	; 0x9c
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d002      	beq.n	80075ea <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e00e      	b.n	8007608 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80075ea:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <xTaskGenericNotifyWait+0x108>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	3226      	adds	r2, #38	; 0x26
 80075f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	43d2      	mvns	r2, r2
 80075fa:	4011      	ands	r1, r2
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	3226      	adds	r2, #38	; 0x26
 8007600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8007608:	4b06      	ldr	r3, [pc, #24]	; (8007624 <xTaskGenericNotifyWait+0x108>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	339c      	adds	r3, #156	; 0x9c
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8007616:	f001 f875 	bl	8008704 <vPortExitCritical>

        return xReturn;
 800761a:	697b      	ldr	r3, [r7, #20]
    }
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000640 	.word	0x20000640
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800762c:	b580      	push	{r7, lr}
 800762e:	b090      	sub	sp, #64	; 0x40
 8007630:	af02      	add	r7, sp, #8
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800763a:	2301      	movs	r3, #1
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <xTaskGenericNotify+0x2e>
        __asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	623b      	str	r3, [r7, #32]
    }
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xTaskGenericNotify+0x4a>
        __asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	61fb      	str	r3, [r7, #28]
    }
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800767a:	f001 f813 	bl	80086a4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800767e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	3226      	adds	r2, #38	; 0x26
 800768a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800768e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007690:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4413      	add	r3, r2
 8007698:	339c      	adds	r3, #156	; 0x9c
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80076a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4413      	add	r3, r2
 80076a6:	339c      	adds	r3, #156	; 0x9c
 80076a8:	2202      	movs	r2, #2
 80076aa:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d83b      	bhi.n	800772a <xTaskGenericNotify+0xfe>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <xTaskGenericNotify+0x8c>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	08007749 	.word	0x08007749
 80076bc:	080076cd 	.word	0x080076cd
 80076c0:	080076e9 	.word	0x080076e9
 80076c4:	08007701 	.word	0x08007701
 80076c8:	0800770f 	.word	0x0800770f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	3226      	adds	r2, #38	; 0x26
 80076d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	ea42 0103 	orr.w	r1, r2, r3
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	3226      	adds	r2, #38	; 0x26
 80076e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80076e6:	e032      	b.n	800774e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	3226      	adds	r2, #38	; 0x26
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	1c59      	adds	r1, r3, #1
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	3226      	adds	r2, #38	; 0x26
 80076fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80076fe:	e026      	b.n	800774e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	3226      	adds	r2, #38	; 0x26
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800770c:	e01f      	b.n	800774e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800770e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007712:	2b02      	cmp	r3, #2
 8007714:	d006      	beq.n	8007724 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	3226      	adds	r2, #38	; 0x26
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007722:	e014      	b.n	800774e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8007724:	2300      	movs	r3, #0
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8007728:	e011      	b.n	800774e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800772a:	4b55      	ldr	r3, [pc, #340]	; (8007880 <xTaskGenericNotify+0x254>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00c      	beq.n	800774c <xTaskGenericNotify+0x120>
        __asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	61bb      	str	r3, [r7, #24]
    }
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <xTaskGenericNotify+0x11a>
                    break;
 8007748:	bf00      	nop
 800774a:	e000      	b.n	800774e <xTaskGenericNotify+0x122>

                    break;
 800774c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	4618      	mov	r0, r3
 8007752:	f002 fef5 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 8007756:	4601      	mov	r1, r0
 8007758:	78fa      	ldrb	r2, [r7, #3]
 800775a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	4613      	mov	r3, r2
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	203e      	movs	r0, #62	; 0x3e
 8007764:	f002 f988 	bl	8009a78 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007768:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800776c:	2b01      	cmp	r3, #1
 800776e:	d17f      	bne.n	8007870 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	62bb      	str	r3, [r7, #40]	; 0x28
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800777c:	68d2      	ldr	r2, [r2, #12]
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007786:	6892      	ldr	r2, [r2, #8]
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	3304      	adds	r3, #4
 8007792:	429a      	cmp	r2, r3
 8007794:	d103      	bne.n	800779e <xTaskGenericNotify+0x172>
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	605a      	str	r2, [r3, #4]
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	2200      	movs	r2, #0
 80077a2:	615a      	str	r2, [r3, #20]
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	1e5a      	subs	r2, r3, #1
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	4618      	mov	r0, r3
 80077b2:	f002 fe83 	bl	800a4bc <SEGGER_SYSVIEW_OnTaskStartReady>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	2201      	movs	r2, #1
 80077bc:	409a      	lsls	r2, r3
 80077be:	4b31      	ldr	r3, [pc, #196]	; (8007884 <xTaskGenericNotify+0x258>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	4a2f      	ldr	r2, [pc, #188]	; (8007884 <xTaskGenericNotify+0x258>)
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077cc:	492e      	ldr	r1, [pc, #184]	; (8007888 <xTaskGenericNotify+0x25c>)
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	3304      	adds	r3, #4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	60da      	str	r2, [r3, #12]
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f2:	3204      	adds	r2, #4
 80077f4:	605a      	str	r2, [r3, #4]
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	1d1a      	adds	r2, r3, #4
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	609a      	str	r2, [r3, #8]
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4a1f      	ldr	r2, [pc, #124]	; (8007888 <xTaskGenericNotify+0x25c>)
 800780c:	441a      	add	r2, r3
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	615a      	str	r2, [r3, #20]
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007816:	491c      	ldr	r1, [pc, #112]	; (8007888 <xTaskGenericNotify+0x25c>)
 8007818:	4613      	mov	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	440b      	add	r3, r1
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	1c59      	adds	r1, r3, #1
 8007826:	4818      	ldr	r0, [pc, #96]	; (8007888 <xTaskGenericNotify+0x25c>)
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4403      	add	r3, r0
 8007832:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <xTaskGenericNotify+0x226>
        __asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	617b      	str	r3, [r7, #20]
    }
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007856:	4b0d      	ldr	r3, [pc, #52]	; (800788c <xTaskGenericNotify+0x260>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	429a      	cmp	r2, r3
 800785e:	d907      	bls.n	8007870 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <xTaskGenericNotify+0x264>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007870:	f000 ff48 	bl	8008704 <vPortExitCritical>

        return xReturn;
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8007876:	4618      	mov	r0, r3
 8007878:	3738      	adds	r7, #56	; 0x38
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000744 	.word	0x20000744
 8007884:	20000748 	.word	0x20000748
 8007888:	20000644 	.word	0x20000644
 800788c:	20000640 	.word	0x20000640
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8007894:	b580      	push	{r7, lr}
 8007896:	b094      	sub	sp, #80	; 0x50
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80078a2:	2301      	movs	r3, #1
 80078a4:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078de:	f000 ffcd 	bl	800887c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 80078e6:	f3ef 8211 	mrs	r2, BASEPRI
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	623a      	str	r2, [r7, #32]
 80078fc:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80078fe:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007900:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8007902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007904:	2b00      	cmp	r3, #0
 8007906:	d006      	beq.n	8007916 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	3226      	adds	r2, #38	; 0x26
 800790e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007914:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4413      	add	r3, r2
 800791c:	339c      	adds	r3, #156	; 0x9c
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007924:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4413      	add	r3, r2
 800792a:	339c      	adds	r3, #156	; 0x9c
 800792c:	2202      	movs	r2, #2
 800792e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	2b04      	cmp	r3, #4
 8007934:	d83b      	bhi.n	80079ae <xTaskGenericNotifyFromISR+0x11a>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <xTaskGenericNotifyFromISR+0xa8>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	080079cd 	.word	0x080079cd
 8007940:	08007951 	.word	0x08007951
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007985 	.word	0x08007985
 800794c:	08007993 	.word	0x08007993
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	3226      	adds	r2, #38	; 0x26
 8007956:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	ea42 0103 	orr.w	r1, r2, r3
 8007960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	3226      	adds	r2, #38	; 0x26
 8007966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800796a:	e032      	b.n	80079d2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800796c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	3226      	adds	r2, #38	; 0x26
 8007972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007976:	1c59      	adds	r1, r3, #1
 8007978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	3226      	adds	r2, #38	; 0x26
 800797e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007982:	e026      	b.n	80079d2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	3226      	adds	r2, #38	; 0x26
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007990:	e01f      	b.n	80079d2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007992:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007996:	2b02      	cmp	r3, #2
 8007998:	d006      	beq.n	80079a8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800799a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	3226      	adds	r2, #38	; 0x26
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80079a6:	e014      	b.n	80079d2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80079a8:	2300      	movs	r3, #0
 80079aa:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80079ac:	e011      	b.n	80079d2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80079ae:	4b69      	ldr	r3, [pc, #420]	; (8007b54 <xTaskGenericNotifyFromISR+0x2c0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00c      	beq.n	80079d0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	61bb      	str	r3, [r7, #24]
    }
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <xTaskGenericNotifyFromISR+0x136>
                    break;
 80079cc:	bf00      	nop
 80079ce:	e000      	b.n	80079d2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80079d0:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80079d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d4:	4618      	mov	r0, r3
 80079d6:	f002 fdb3 	bl	800a540 <SEGGER_SYSVIEW_ShrinkId>
 80079da:	78f9      	ldrb	r1, [r7, #3]
 80079dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079e0:	9201      	str	r2, [sp, #4]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	460b      	mov	r3, r1
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4601      	mov	r1, r0
 80079ea:	203f      	movs	r0, #63	; 0x3f
 80079ec:	f002 f8d6 	bl	8009b9c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80079f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	f040 80a2 	bne.w	8007b3e <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80079fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	617b      	str	r3, [r7, #20]
    }
 8007a14:	bf00      	nop
 8007a16:	e7fe      	b.n	8007a16 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a18:	4b4f      	ldr	r3, [pc, #316]	; (8007b58 <xTaskGenericNotifyFromISR+0x2c4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d162      	bne.n	8007ae6 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	633b      	str	r3, [r7, #48]	; 0x30
 8007a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a2c:	68d2      	ldr	r2, [r2, #12]
 8007a2e:	609a      	str	r2, [r3, #8]
 8007a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a36:	6892      	ldr	r2, [r2, #8]
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a40:	3304      	adds	r3, #4
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d103      	bne.n	8007a4e <xTaskGenericNotifyFromISR+0x1ba>
 8007a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a50:	2200      	movs	r2, #0
 8007a52:	615a      	str	r2, [r3, #20]
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	1e5a      	subs	r2, r3, #1
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a60:	4618      	mov	r0, r3
 8007a62:	f002 fd2b 	bl	800a4bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8007a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	409a      	lsls	r2, r3
 8007a6e:	4b3b      	ldr	r3, [pc, #236]	; (8007b5c <xTaskGenericNotifyFromISR+0x2c8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	4a39      	ldr	r2, [pc, #228]	; (8007b5c <xTaskGenericNotifyFromISR+0x2c8>)
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	4938      	ldr	r1, [pc, #224]	; (8007b60 <xTaskGenericNotifyFromISR+0x2cc>)
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	440b      	add	r3, r1
 8007a88:	3304      	adds	r3, #4
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a92:	609a      	str	r2, [r3, #8]
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9a:	60da      	str	r2, [r3, #12]
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aa2:	3204      	adds	r2, #4
 8007aa4:	605a      	str	r2, [r3, #4]
 8007aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa8:	1d1a      	adds	r2, r3, #4
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	609a      	str	r2, [r3, #8]
 8007aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4a29      	ldr	r2, [pc, #164]	; (8007b60 <xTaskGenericNotifyFromISR+0x2cc>)
 8007abc:	441a      	add	r2, r3
 8007abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac0:	615a      	str	r2, [r3, #20]
 8007ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac6:	4926      	ldr	r1, [pc, #152]	; (8007b60 <xTaskGenericNotifyFromISR+0x2cc>)
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	1c59      	adds	r1, r3, #1
 8007ad6:	4822      	ldr	r0, [pc, #136]	; (8007b60 <xTaskGenericNotifyFromISR+0x2cc>)
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4403      	add	r3, r0
 8007ae2:	6019      	str	r1, [r3, #0]
 8007ae4:	e01b      	b.n	8007b1e <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007ae6:	4b1f      	ldr	r3, [pc, #124]	; (8007b64 <xTaskGenericNotifyFromISR+0x2d0>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
 8007aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007af0:	61da      	str	r2, [r3, #28]
 8007af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af8:	621a      	str	r2, [r3, #32]
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b00:	3218      	adds	r2, #24
 8007b02:	605a      	str	r2, [r3, #4]
 8007b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b06:	f103 0218 	add.w	r2, r3, #24
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0c:	609a      	str	r2, [r3, #8]
 8007b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b10:	4a14      	ldr	r2, [pc, #80]	; (8007b64 <xTaskGenericNotifyFromISR+0x2d0>)
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28
 8007b14:	4b13      	ldr	r3, [pc, #76]	; (8007b64 <xTaskGenericNotifyFromISR+0x2d0>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	4a12      	ldr	r2, [pc, #72]	; (8007b64 <xTaskGenericNotifyFromISR+0x2d0>)
 8007b1c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b22:	4b11      	ldr	r3, [pc, #68]	; (8007b68 <xTaskGenericNotifyFromISR+0x2d4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d908      	bls.n	8007b3e <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007b38:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <xTaskGenericNotifyFromISR+0x2d8>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b40:	613b      	str	r3, [r7, #16]
        __asm volatile
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f383 8811 	msr	BASEPRI, r3
    }
 8007b48:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3748      	adds	r7, #72	; 0x48
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000744 	.word	0x20000744
 8007b58:	20000768 	.word	0x20000768
 8007b5c:	20000748 	.word	0x20000748
 8007b60:	20000644 	.word	0x20000644
 8007b64:	20000700 	.word	0x20000700
 8007b68:	20000640 	.word	0x20000640
 8007b6c:	20000754 	.word	0x20000754

08007b70 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007b7a:	4b36      	ldr	r3, [pc, #216]	; (8007c54 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b80:	4b35      	ldr	r3, [pc, #212]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fd fc46 	bl	8005418 <uxListRemove>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10b      	bne.n	8007baa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b92:	4b31      	ldr	r3, [pc, #196]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	2201      	movs	r2, #1
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	43da      	mvns	r2, r3
 8007ba0:	4b2e      	ldr	r3, [pc, #184]	; (8007c5c <prvAddCurrentTaskToDelayedList+0xec>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	4a2d      	ldr	r2, [pc, #180]	; (8007c5c <prvAddCurrentTaskToDelayedList+0xec>)
 8007ba8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb0:	d124      	bne.n	8007bfc <prvAddCurrentTaskToDelayedList+0x8c>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d021      	beq.n	8007bfc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bb8:	4b29      	ldr	r3, [pc, #164]	; (8007c60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	4b26      	ldr	r3, [pc, #152]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	609a      	str	r2, [r3, #8]
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	6892      	ldr	r2, [r2, #8]
 8007bce:	60da      	str	r2, [r3, #12]
 8007bd0:	4b21      	ldr	r3, [pc, #132]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	3204      	adds	r2, #4
 8007bda:	605a      	str	r2, [r3, #4]
 8007bdc:	4b1e      	ldr	r3, [pc, #120]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	1d1a      	adds	r2, r3, #4
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	609a      	str	r2, [r3, #8]
 8007be6:	4b1c      	ldr	r3, [pc, #112]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a1d      	ldr	r2, [pc, #116]	; (8007c60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007bec:	615a      	str	r2, [r3, #20]
 8007bee:	4b1c      	ldr	r3, [pc, #112]	; (8007c60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	4a1a      	ldr	r2, [pc, #104]	; (8007c60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007bfa:	e026      	b.n	8007c4a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c04:	4b14      	ldr	r3, [pc, #80]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d209      	bcs.n	8007c28 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c14:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4610      	mov	r0, r2
 8007c22:	f7fd fbc0 	bl	80053a6 <vListInsert>
}
 8007c26:	e010      	b.n	8007c4a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c28:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <prvAddCurrentTaskToDelayedList+0xf8>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3304      	adds	r3, #4
 8007c32:	4619      	mov	r1, r3
 8007c34:	4610      	mov	r0, r2
 8007c36:	f7fd fbb6 	bl	80053a6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007c3a:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <prvAddCurrentTaskToDelayedList+0xfc>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d202      	bcs.n	8007c4a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007c44:	4a09      	ldr	r2, [pc, #36]	; (8007c6c <prvAddCurrentTaskToDelayedList+0xfc>)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6013      	str	r3, [r2, #0]
}
 8007c4a:	bf00      	nop
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20000744 	.word	0x20000744
 8007c58:	20000640 	.word	0x20000640
 8007c5c:	20000748 	.word	0x20000748
 8007c60:	2000072c 	.word	0x2000072c
 8007c64:	200006fc 	.word	0x200006fc
 8007c68:	200006f8 	.word	0x200006f8
 8007c6c:	20000760 	.word	0x20000760

08007c70 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	; 0x28
 8007c74:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007c7a:	f000 fb05 	bl	8008288 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007c7e:	4b1c      	ldr	r3, [pc, #112]	; (8007cf0 <xTimerCreateTimerTask+0x80>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d021      	beq.n	8007cca <xTimerCreateTimerTask+0x5a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60bb      	str	r3, [r7, #8]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c8e:	1d3a      	adds	r2, r7, #4
 8007c90:	f107 0108 	add.w	r1, r7, #8
 8007c94:	f107 030c 	add.w	r3, r7, #12
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7f9 f921 	bl	8000ee0 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	9202      	str	r2, [sp, #8]
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	2302      	movs	r3, #2
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	2300      	movs	r3, #0
 8007cae:	460a      	mov	r2, r1
 8007cb0:	4910      	ldr	r1, [pc, #64]	; (8007cf4 <xTimerCreateTimerTask+0x84>)
 8007cb2:	4811      	ldr	r0, [pc, #68]	; (8007cf8 <xTimerCreateTimerTask+0x88>)
 8007cb4:	f7fe fad0 	bl	8006258 <xTaskCreateStatic>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	4a10      	ldr	r2, [pc, #64]	; (8007cfc <xTimerCreateTimerTask+0x8c>)
 8007cbc:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <xTimerCreateTimerTask+0x8c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <xTimerCreateTimerTask+0x5a>
                {
                    xReturn = pdPASS;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <xTimerCreateTimerTask+0x76>
        __asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	613b      	str	r3, [r7, #16]
    }
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xTimerCreateTimerTask+0x74>
        return xReturn;
 8007ce6:	697b      	ldr	r3, [r7, #20]
    }
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	2000079c 	.word	0x2000079c
 8007cf4:	0800abd8 	.word	0x0800abd8
 8007cf8:	08007ef5 	.word	0x08007ef5
 8007cfc:	200007a0 	.word	0x200007a0

08007d00 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007d0e:	2028      	movs	r0, #40	; 0x28
 8007d10:	f000 fdf4 	bl	80088fc <pvPortMalloc>
 8007d14:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 f805 	bl	8007d42 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8007d38:	697b      	ldr	r3, [r7, #20]
        }
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b086      	sub	sp, #24
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	617b      	str	r3, [r7, #20]
    }
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8007d6c:	f000 fa8c 	bl	8008288 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	6a3a      	ldr	r2, [r7, #32]
 8007d86:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fd fad9 	bl	8005344 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d008      	beq.n	8007daa <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d9e:	f043 0304 	orr.w	r3, r3, #4
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8007daa:	bf00      	nop
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08a      	sub	sp, #40	; 0x28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	623b      	str	r3, [r7, #32]
    }
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007de2:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <xTimerGenericCommand+0x98>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d02a      	beq.n	8007e40 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	dc18      	bgt.n	8007e2e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007dfc:	f7ff faf0 	bl	80073e0 <xTaskGetSchedulerState>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d109      	bne.n	8007e1a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e06:	4b11      	ldr	r3, [pc, #68]	; (8007e4c <xTimerGenericCommand+0x98>)
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	f107 0114 	add.w	r1, r7, #20
 8007e0e:	2300      	movs	r3, #0
 8007e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e12:	f7fd fc91 	bl	8005738 <xQueueGenericSend>
 8007e16:	6278      	str	r0, [r7, #36]	; 0x24
 8007e18:	e012      	b.n	8007e40 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <xTimerGenericCommand+0x98>)
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	f107 0114 	add.w	r1, r7, #20
 8007e22:	2300      	movs	r3, #0
 8007e24:	2200      	movs	r2, #0
 8007e26:	f7fd fc87 	bl	8005738 <xQueueGenericSend>
 8007e2a:	6278      	str	r0, [r7, #36]	; 0x24
 8007e2c:	e008      	b.n	8007e40 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <xTimerGenericCommand+0x98>)
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	f107 0114 	add.w	r1, r7, #20
 8007e36:	2300      	movs	r3, #0
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	f7fd fda3 	bl	8005984 <xQueueGenericSendFromISR>
 8007e3e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007e42:	4618      	mov	r0, r3
 8007e44:	3728      	adds	r7, #40	; 0x28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	2000079c 	.word	0x2000079c

08007e50 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007e5c:	e008      	b.n	8007e70 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	4413      	add	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	699a      	ldr	r2, [r3, #24]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	18d1      	adds	r1, r2, r3
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f8dd 	bl	800803c <prvInsertTimerInActiveList>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1ea      	bne.n	8007e5e <prvReloadTimer+0xe>
        }
    }
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9e:	4b14      	ldr	r3, [pc, #80]	; (8007ef0 <prvProcessExpiredTimer+0x5c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fd fab3 	bl	8005418 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d005      	beq.n	8007ecc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff ffc3 	bl	8007e50 <prvReloadTimer>
 8007eca:	e008      	b.n	8007ede <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	4798      	blx	r3
    }
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000794 	.word	0x20000794

08007ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007efc:	f107 0308 	add.w	r3, r7, #8
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 f857 	bl	8007fb4 <prvGetNextExpireTime>
 8007f06:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f803 	bl	8007f18 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007f12:	f000 f8d5 	bl	80080c0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f16:	e7f1      	b.n	8007efc <prvTimerTask+0x8>

08007f18 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007f22:	f7fe fc17 	bl	8006754 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f26:	f107 0308 	add.w	r3, r7, #8
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f866 	bl	8007ffc <prvSampleTimeNow>
 8007f30:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d130      	bne.n	8007f9a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <prvProcessTimerOrBlockTask+0x3c>
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d806      	bhi.n	8007f54 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007f46:	f7fe fc13 	bl	8006770 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff ffa1 	bl	8007e94 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007f52:	e024      	b.n	8007f9e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d008      	beq.n	8007f6c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <prvProcessTimerOrBlockTask+0x90>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <prvProcessTimerOrBlockTask+0x50>
 8007f64:	2301      	movs	r3, #1
 8007f66:	e000      	b.n	8007f6a <prvProcessTimerOrBlockTask+0x52>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <prvProcessTimerOrBlockTask+0x94>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f7fe f939 	bl	80061f0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007f7e:	f7fe fbf7 	bl	8006770 <xTaskResumeAll>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <prvProcessTimerOrBlockTask+0x98>)
 8007f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	f3bf 8f6f 	isb	sy
    }
 8007f98:	e001      	b.n	8007f9e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007f9a:	f7fe fbe9 	bl	8006770 <xTaskResumeAll>
    }
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000798 	.word	0x20000798
 8007fac:	2000079c 	.word	0x2000079c
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <prvGetNextExpireTime+0x44>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <prvGetNextExpireTime+0x16>
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	e000      	b.n	8007fcc <prvGetNextExpireTime+0x18>
 8007fca:	2200      	movs	r2, #0
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d105      	bne.n	8007fe4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fd8:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <prvGetNextExpireTime+0x44>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	e001      	b.n	8007fe8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
    }
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000794 	.word	0x20000794

08007ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008004:	f7fe fcb4 	bl	8006970 <xTaskGetTickCount>
 8008008:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <prvSampleTimeNow+0x3c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	429a      	cmp	r2, r3
 8008012:	d205      	bcs.n	8008020 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008014:	f000 f912 	bl	800823c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e002      	b.n	8008026 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008026:	4a04      	ldr	r2, [pc, #16]	; (8008038 <prvSampleTimeNow+0x3c>)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800802c:	68fb      	ldr	r3, [r7, #12]
    }
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	200007a4 	.word	0x200007a4

0800803c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d812      	bhi.n	8008088 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	1ad2      	subs	r2, r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	429a      	cmp	r2, r3
 800806e:	d302      	bcc.n	8008076 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008070:	2301      	movs	r3, #1
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	e01b      	b.n	80080ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008076:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <prvInsertTimerInActiveList+0x7c>)
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	4610      	mov	r0, r2
 8008082:	f7fd f990 	bl	80053a6 <vListInsert>
 8008086:	e012      	b.n	80080ae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d206      	bcs.n	800809e <prvInsertTimerInActiveList+0x62>
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d302      	bcc.n	800809e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	e007      	b.n	80080ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800809e:	4b07      	ldr	r3, [pc, #28]	; (80080bc <prvInsertTimerInActiveList+0x80>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f7fd f97c 	bl	80053a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80080ae:	697b      	ldr	r3, [r7, #20]
    }
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000798 	.word	0x20000798
 80080bc:	20000794 	.word	0x20000794

080080c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080c6:	e0a6      	b.n	8008216 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f2c0 80a3 	blt.w	8008216 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3304      	adds	r3, #4
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fd f999 	bl	8005418 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080e6:	1d3b      	adds	r3, r7, #4
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff ff87 	bl	8007ffc <prvSampleTimeNow>
 80080ee:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	f200 808d 	bhi.w	8008214 <prvProcessReceivedCommands+0x154>
 80080fa:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <prvProcessReceivedCommands+0x40>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008125 	.word	0x08008125
 8008104:	08008125 	.word	0x08008125
 8008108:	0800818d 	.word	0x0800818d
 800810c:	080081a1 	.word	0x080081a1
 8008110:	080081eb 	.word	0x080081eb
 8008114:	08008125 	.word	0x08008125
 8008118:	08008125 	.word	0x08008125
 800811c:	0800818d 	.word	0x0800818d
 8008120:	080081a1 	.word	0x080081a1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800812a:	f043 0301 	orr.w	r3, r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	18d1      	adds	r1, r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	69f8      	ldr	r0, [r7, #28]
 8008144:	f7ff ff7a 	bl	800803c <prvInsertTimerInActiveList>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d063      	beq.n	8008216 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	d009      	beq.n	8008170 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	4413      	add	r3, r2
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	4619      	mov	r1, r3
 8008168:	69f8      	ldr	r0, [r7, #28]
 800816a:	f7ff fe71 	bl	8007e50 <prvReloadTimer>
 800816e:	e008      	b.n	8008182 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008176:	f023 0301 	bic.w	r3, r3, #1
 800817a:	b2da      	uxtb	r2, r3
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	69f8      	ldr	r0, [r7, #28]
 8008188:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800818a:	e044      	b.n	8008216 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008192:	f023 0301 	bic.w	r3, r3, #1
 8008196:	b2da      	uxtb	r2, r3
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 800819e:	e03a      	b.n	8008216 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	617b      	str	r3, [r7, #20]
    }
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	18d1      	adds	r1, r2, r3
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	69f8      	ldr	r0, [r7, #28]
 80081e4:	f7ff ff2a 	bl	800803c <prvInsertTimerInActiveList>
                        break;
 80081e8:	e015      	b.n	8008216 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80081f8:	69f8      	ldr	r0, [r7, #28]
 80081fa:	f000 fc39 	bl	8008a70 <vPortFree>
 80081fe:	e00a      	b.n	8008216 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008206:	f023 0301 	bic.w	r3, r3, #1
 800820a:	b2da      	uxtb	r2, r3
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008212:	e000      	b.n	8008216 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008214:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008216:	4b08      	ldr	r3, [pc, #32]	; (8008238 <prvProcessReceivedCommands+0x178>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f107 0108 	add.w	r1, r7, #8
 800821e:	2200      	movs	r2, #0
 8008220:	4618      	mov	r0, r3
 8008222:	f7fd fc75 	bl	8005b10 <xQueueReceive>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	f47f af4d 	bne.w	80080c8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800822e:	bf00      	nop
 8008230:	bf00      	nop
 8008232:	3720      	adds	r7, #32
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	2000079c 	.word	0x2000079c

0800823c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008242:	e009      	b.n	8008258 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008244:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <prvSwitchTimerLists+0x44>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800824e:	f04f 31ff 	mov.w	r1, #4294967295
 8008252:	6838      	ldr	r0, [r7, #0]
 8008254:	f7ff fe1e 	bl	8007e94 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008258:	4b09      	ldr	r3, [pc, #36]	; (8008280 <prvSwitchTimerLists+0x44>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f0      	bne.n	8008244 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <prvSwitchTimerLists+0x44>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008268:	4b06      	ldr	r3, [pc, #24]	; (8008284 <prvSwitchTimerLists+0x48>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a04      	ldr	r2, [pc, #16]	; (8008280 <prvSwitchTimerLists+0x44>)
 800826e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008270:	4a04      	ldr	r2, [pc, #16]	; (8008284 <prvSwitchTimerLists+0x48>)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6013      	str	r3, [r2, #0]
    }
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000794 	.word	0x20000794
 8008284:	20000798 	.word	0x20000798

08008288 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800828e:	f000 fa09 	bl	80086a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008292:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <prvCheckForValidListAndQueue+0x60>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d120      	bne.n	80082dc <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800829a:	4814      	ldr	r0, [pc, #80]	; (80082ec <prvCheckForValidListAndQueue+0x64>)
 800829c:	f7fd f832 	bl	8005304 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80082a0:	4813      	ldr	r0, [pc, #76]	; (80082f0 <prvCheckForValidListAndQueue+0x68>)
 80082a2:	f7fd f82f 	bl	8005304 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80082a6:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <prvCheckForValidListAndQueue+0x6c>)
 80082a8:	4a10      	ldr	r2, [pc, #64]	; (80082ec <prvCheckForValidListAndQueue+0x64>)
 80082aa:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80082ac:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <prvCheckForValidListAndQueue+0x70>)
 80082ae:	4a10      	ldr	r2, [pc, #64]	; (80082f0 <prvCheckForValidListAndQueue+0x68>)
 80082b0:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082b2:	2300      	movs	r3, #0
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <prvCheckForValidListAndQueue+0x74>)
 80082b8:	4a11      	ldr	r2, [pc, #68]	; (8008300 <prvCheckForValidListAndQueue+0x78>)
 80082ba:	210c      	movs	r1, #12
 80082bc:	2004      	movs	r0, #4
 80082be:	f7fd f965 	bl	800558c <xQueueGenericCreateStatic>
 80082c2:	4603      	mov	r3, r0
 80082c4:	4a08      	ldr	r2, [pc, #32]	; (80082e8 <prvCheckForValidListAndQueue+0x60>)
 80082c6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80082c8:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <prvCheckForValidListAndQueue+0x60>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <prvCheckForValidListAndQueue+0x60>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	490b      	ldr	r1, [pc, #44]	; (8008304 <prvCheckForValidListAndQueue+0x7c>)
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd ff34 	bl	8006144 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80082dc:	f000 fa12 	bl	8008704 <vPortExitCritical>
    }
 80082e0:	bf00      	nop
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	2000079c 	.word	0x2000079c
 80082ec:	2000076c 	.word	0x2000076c
 80082f0:	20000780 	.word	0x20000780
 80082f4:	20000794 	.word	0x20000794
 80082f8:	20000798 	.word	0x20000798
 80082fc:	200007d8 	.word	0x200007d8
 8008300:	200007a8 	.word	0x200007a8
 8008304:	0800abe0 	.word	0x0800abe0

08008308 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10a      	bne.n	8008330 <pvTimerGetTimerID+0x28>
        __asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	60fb      	str	r3, [r7, #12]
    }
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8008330:	f000 f9b8 	bl	80086a4 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 800833a:	f000 f9e3 	bl	8008704 <vPortExitCritical>

        return pvReturn;
 800833e:	693b      	ldr	r3, [r7, #16]
    }
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3b04      	subs	r3, #4
 8008358:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008360:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3b04      	subs	r3, #4
 8008366:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f023 0201 	bic.w	r2, r3, #1
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3b04      	subs	r3, #4
 8008376:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008378:	4a0c      	ldr	r2, [pc, #48]	; (80083ac <pxPortInitialiseStack+0x64>)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3b14      	subs	r3, #20
 8008382:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3b04      	subs	r3, #4
 800838e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f06f 0202 	mvn.w	r2, #2
 8008396:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3b20      	subs	r3, #32
 800839c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800839e:	68fb      	ldr	r3, [r7, #12]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	080083b1 	.word	0x080083b1

080083b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <prvTaskExitError+0x54>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d00a      	beq.n	80083da <prvTaskExitError+0x2a>
        __asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	60fb      	str	r3, [r7, #12]
    }
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <prvTaskExitError+0x28>
        __asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	60bb      	str	r3, [r7, #8]
    }
 80083ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80083ee:	bf00      	nop
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0fc      	beq.n	80083f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80083f6:	bf00      	nop
 80083f8:	bf00      	nop
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	20000020 	.word	0x20000020
	...

08008410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008410:	4b07      	ldr	r3, [pc, #28]	; (8008430 <pxCurrentTCBConst2>)
 8008412:	6819      	ldr	r1, [r3, #0]
 8008414:	6808      	ldr	r0, [r1, #0]
 8008416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841a:	f380 8809 	msr	PSP, r0
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f04f 0000 	mov.w	r0, #0
 8008426:	f380 8811 	msr	BASEPRI, r0
 800842a:	4770      	bx	lr
 800842c:	f3af 8000 	nop.w

08008430 <pxCurrentTCBConst2>:
 8008430:	20000640 	.word	0x20000640
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop

08008438 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008438:	4808      	ldr	r0, [pc, #32]	; (800845c <prvPortStartFirstTask+0x24>)
 800843a:	6800      	ldr	r0, [r0, #0]
 800843c:	6800      	ldr	r0, [r0, #0]
 800843e:	f380 8808 	msr	MSP, r0
 8008442:	f04f 0000 	mov.w	r0, #0
 8008446:	f380 8814 	msr	CONTROL, r0
 800844a:	b662      	cpsie	i
 800844c:	b661      	cpsie	f
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	df00      	svc	0
 8008458:	bf00      	nop
 800845a:	0000      	.short	0x0000
 800845c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop

08008464 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800846a:	4b46      	ldr	r3, [pc, #280]	; (8008584 <xPortStartScheduler+0x120>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a46      	ldr	r2, [pc, #280]	; (8008588 <xPortStartScheduler+0x124>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d10a      	bne.n	800848a <xPortStartScheduler+0x26>
        __asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	613b      	str	r3, [r7, #16]
    }
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800848a:	4b3e      	ldr	r3, [pc, #248]	; (8008584 <xPortStartScheduler+0x120>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a3f      	ldr	r2, [pc, #252]	; (800858c <xPortStartScheduler+0x128>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d10a      	bne.n	80084aa <xPortStartScheduler+0x46>
        __asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	60fb      	str	r3, [r7, #12]
    }
 80084a6:	bf00      	nop
 80084a8:	e7fe      	b.n	80084a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084aa:	4b39      	ldr	r3, [pc, #228]	; (8008590 <xPortStartScheduler+0x12c>)
 80084ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	22ff      	movs	r2, #255	; 0xff
 80084ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	4b31      	ldr	r3, [pc, #196]	; (8008594 <xPortStartScheduler+0x130>)
 80084d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084d2:	4b31      	ldr	r3, [pc, #196]	; (8008598 <xPortStartScheduler+0x134>)
 80084d4:	2207      	movs	r2, #7
 80084d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084d8:	e009      	b.n	80084ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80084da:	4b2f      	ldr	r3, [pc, #188]	; (8008598 <xPortStartScheduler+0x134>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3b01      	subs	r3, #1
 80084e0:	4a2d      	ldr	r2, [pc, #180]	; (8008598 <xPortStartScheduler+0x134>)
 80084e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d0ef      	beq.n	80084da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084fa:	4b27      	ldr	r3, [pc, #156]	; (8008598 <xPortStartScheduler+0x134>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f1c3 0307 	rsb	r3, r3, #7
 8008502:	2b04      	cmp	r3, #4
 8008504:	d00a      	beq.n	800851c <xPortStartScheduler+0xb8>
        __asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	60bb      	str	r3, [r7, #8]
    }
 8008518:	bf00      	nop
 800851a:	e7fe      	b.n	800851a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800851c:	4b1e      	ldr	r3, [pc, #120]	; (8008598 <xPortStartScheduler+0x134>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	4a1d      	ldr	r2, [pc, #116]	; (8008598 <xPortStartScheduler+0x134>)
 8008524:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008526:	4b1c      	ldr	r3, [pc, #112]	; (8008598 <xPortStartScheduler+0x134>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800852e:	4a1a      	ldr	r2, [pc, #104]	; (8008598 <xPortStartScheduler+0x134>)
 8008530:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800853a:	4b18      	ldr	r3, [pc, #96]	; (800859c <xPortStartScheduler+0x138>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a17      	ldr	r2, [pc, #92]	; (800859c <xPortStartScheduler+0x138>)
 8008540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008544:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008546:	4b15      	ldr	r3, [pc, #84]	; (800859c <xPortStartScheduler+0x138>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a14      	ldr	r2, [pc, #80]	; (800859c <xPortStartScheduler+0x138>)
 800854c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008550:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008552:	f000 f963 	bl	800881c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008556:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <xPortStartScheduler+0x13c>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800855c:	f000 f982 	bl	8008864 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008560:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <xPortStartScheduler+0x140>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a0f      	ldr	r2, [pc, #60]	; (80085a4 <xPortStartScheduler+0x140>)
 8008566:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800856a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800856c:	f7ff ff64 	bl	8008438 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008570:	f7fe fc1a 	bl	8006da8 <vTaskSwitchContext>
    prvTaskExitError();
 8008574:	f7ff ff1c 	bl	80083b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	e000ed00 	.word	0xe000ed00
 8008588:	410fc271 	.word	0x410fc271
 800858c:	410fc270 	.word	0x410fc270
 8008590:	e000e400 	.word	0xe000e400
 8008594:	20000820 	.word	0x20000820
 8008598:	20000824 	.word	0x20000824
 800859c:	e000ed20 	.word	0xe000ed20
 80085a0:	20000020 	.word	0x20000020
 80085a4:	e000ef34 	.word	0xe000ef34

080085a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085ae:	4b37      	ldr	r3, [pc, #220]	; (800868c <vInitPrioGroupValue+0xe4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a37      	ldr	r2, [pc, #220]	; (8008690 <vInitPrioGroupValue+0xe8>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d10a      	bne.n	80085ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	613b      	str	r3, [r7, #16]
    }
 80085ca:	bf00      	nop
 80085cc:	e7fe      	b.n	80085cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085ce:	4b2f      	ldr	r3, [pc, #188]	; (800868c <vInitPrioGroupValue+0xe4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a30      	ldr	r2, [pc, #192]	; (8008694 <vInitPrioGroupValue+0xec>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d10a      	bne.n	80085ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	60fb      	str	r3, [r7, #12]
    }
 80085ea:	bf00      	nop
 80085ec:	e7fe      	b.n	80085ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085ee:	4b2a      	ldr	r3, [pc, #168]	; (8008698 <vInitPrioGroupValue+0xf0>)
 80085f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	22ff      	movs	r2, #255	; 0xff
 80085fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008610:	b2da      	uxtb	r2, r3
 8008612:	4b22      	ldr	r3, [pc, #136]	; (800869c <vInitPrioGroupValue+0xf4>)
 8008614:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008616:	4b22      	ldr	r3, [pc, #136]	; (80086a0 <vInitPrioGroupValue+0xf8>)
 8008618:	2207      	movs	r2, #7
 800861a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800861c:	e009      	b.n	8008632 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800861e:	4b20      	ldr	r3, [pc, #128]	; (80086a0 <vInitPrioGroupValue+0xf8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3b01      	subs	r3, #1
 8008624:	4a1e      	ldr	r2, [pc, #120]	; (80086a0 <vInitPrioGroupValue+0xf8>)
 8008626:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	b2db      	uxtb	r3, r3
 8008630:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d0ef      	beq.n	800861e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800863e:	4b18      	ldr	r3, [pc, #96]	; (80086a0 <vInitPrioGroupValue+0xf8>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f1c3 0307 	rsb	r3, r3, #7
 8008646:	2b04      	cmp	r3, #4
 8008648:	d00a      	beq.n	8008660 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	60bb      	str	r3, [r7, #8]
    }
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008660:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <vInitPrioGroupValue+0xf8>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	021b      	lsls	r3, r3, #8
 8008666:	4a0e      	ldr	r2, [pc, #56]	; (80086a0 <vInitPrioGroupValue+0xf8>)
 8008668:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800866a:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <vInitPrioGroupValue+0xf8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008672:	4a0b      	ldr	r2, [pc, #44]	; (80086a0 <vInitPrioGroupValue+0xf8>)
 8008674:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	b2da      	uxtb	r2, r3
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	e000ed00 	.word	0xe000ed00
 8008690:	410fc271 	.word	0x410fc271
 8008694:	410fc270 	.word	0x410fc270
 8008698:	e000e400 	.word	0xe000e400
 800869c:	20000820 	.word	0x20000820
 80086a0:	20000824 	.word	0x20000824

080086a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
        __asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	607b      	str	r3, [r7, #4]
    }
 80086bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <vPortEnterCritical+0x58>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3301      	adds	r3, #1
 80086c4:	4a0d      	ldr	r2, [pc, #52]	; (80086fc <vPortEnterCritical+0x58>)
 80086c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <vPortEnterCritical+0x58>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d10f      	bne.n	80086f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086d0:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <vPortEnterCritical+0x5c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	603b      	str	r3, [r7, #0]
    }
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <vPortEnterCritical+0x4a>
    }
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	20000020 	.word	0x20000020
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800870a:	4b12      	ldr	r3, [pc, #72]	; (8008754 <vPortExitCritical+0x50>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <vPortExitCritical+0x24>
        __asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	607b      	str	r3, [r7, #4]
    }
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008728:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <vPortExitCritical+0x50>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3b01      	subs	r3, #1
 800872e:	4a09      	ldr	r2, [pc, #36]	; (8008754 <vPortExitCritical+0x50>)
 8008730:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008732:	4b08      	ldr	r3, [pc, #32]	; (8008754 <vPortExitCritical+0x50>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <vPortExitCritical+0x42>
 800873a:	2300      	movs	r3, #0
 800873c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	f383 8811 	msr	BASEPRI, r3
    }
 8008744:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20000020 	.word	0x20000020
	...

08008760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008760:	f3ef 8009 	mrs	r0, PSP
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <pxCurrentTCBConst>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	f01e 0f10 	tst.w	lr, #16
 8008770:	bf08      	it	eq
 8008772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877a:	6010      	str	r0, [r2, #0]
 800877c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008784:	f380 8811 	msr	BASEPRI, r0
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f7fe fb0a 	bl	8006da8 <vTaskSwitchContext>
 8008794:	f04f 0000 	mov.w	r0, #0
 8008798:	f380 8811 	msr	BASEPRI, r0
 800879c:	bc09      	pop	{r0, r3}
 800879e:	6819      	ldr	r1, [r3, #0]
 80087a0:	6808      	ldr	r0, [r1, #0]
 80087a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a6:	f01e 0f10 	tst.w	lr, #16
 80087aa:	bf08      	it	eq
 80087ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087b0:	f380 8809 	msr	PSP, r0
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	f3af 8000 	nop.w

080087c0 <pxCurrentTCBConst>:
 80087c0:	20000640 	.word	0x20000640
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop

080087c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
        __asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	607b      	str	r3, [r7, #4]
    }
 80087e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80087e2:	f001 fd51 	bl	800a288 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80087e6:	f7fe f9c5 	bl	8006b74 <xTaskIncrementTick>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d006      	beq.n	80087fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80087f0:	f001 fda8 	bl	800a344 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087f4:	4b08      	ldr	r3, [pc, #32]	; (8008818 <SysTick_Handler+0x50>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	e001      	b.n	8008802 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80087fe:	f001 fd85 	bl	800a30c <SEGGER_SYSVIEW_RecordExitISR>
 8008802:	2300      	movs	r3, #0
 8008804:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	f383 8811 	msr	BASEPRI, r3
    }
 800880c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800880e:	bf00      	nop
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008820:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <vPortSetupTimerInterrupt+0x34>)
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <vPortSetupTimerInterrupt+0x38>)
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800882c:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <vPortSetupTimerInterrupt+0x3c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a0a      	ldr	r2, [pc, #40]	; (800885c <vPortSetupTimerInterrupt+0x40>)
 8008832:	fba2 2303 	umull	r2, r3, r2, r3
 8008836:	099b      	lsrs	r3, r3, #6
 8008838:	4a09      	ldr	r2, [pc, #36]	; (8008860 <vPortSetupTimerInterrupt+0x44>)
 800883a:	3b01      	subs	r3, #1
 800883c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800883e:	4b04      	ldr	r3, [pc, #16]	; (8008850 <vPortSetupTimerInterrupt+0x34>)
 8008840:	2207      	movs	r2, #7
 8008842:	601a      	str	r2, [r3, #0]
}
 8008844:	bf00      	nop
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	e000e010 	.word	0xe000e010
 8008854:	e000e018 	.word	0xe000e018
 8008858:	20000004 	.word	0x20000004
 800885c:	10624dd3 	.word	0x10624dd3
 8008860:	e000e014 	.word	0xe000e014

08008864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008874 <vPortEnableVFP+0x10>
 8008868:	6801      	ldr	r1, [r0, #0]
 800886a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800886e:	6001      	str	r1, [r0, #0]
 8008870:	4770      	bx	lr
 8008872:	0000      	.short	0x0000
 8008874:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008878:	bf00      	nop
 800887a:	bf00      	nop

0800887c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008882:	f3ef 8305 	mrs	r3, IPSR
 8008886:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b0f      	cmp	r3, #15
 800888c:	d914      	bls.n	80088b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800888e:	4a17      	ldr	r2, [pc, #92]	; (80088ec <vPortValidateInterruptPriority+0x70>)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008898:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <vPortValidateInterruptPriority+0x74>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	7afa      	ldrb	r2, [r7, #11]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d20a      	bcs.n	80088b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	607b      	str	r3, [r7, #4]
    }
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088b8:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <vPortValidateInterruptPriority+0x78>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088c0:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <vPortValidateInterruptPriority+0x7c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d90a      	bls.n	80088de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	603b      	str	r3, [r7, #0]
    }
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <vPortValidateInterruptPriority+0x60>
    }
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	e000e3f0 	.word	0xe000e3f0
 80088f0:	20000820 	.word	0x20000820
 80088f4:	e000ed0c 	.word	0xe000ed0c
 80088f8:	20000824 	.word	0x20000824

080088fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008904:	2300      	movs	r3, #0
 8008906:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008908:	f7fd ff24 	bl	8006754 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800890c:	4b53      	ldr	r3, [pc, #332]	; (8008a5c <pvPortMalloc+0x160>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008914:	f000 f908 	bl	8008b28 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d012      	beq.n	8008944 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800891e:	2208      	movs	r2, #8
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	3308      	adds	r3, #8
 800892a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	43db      	mvns	r3, r3
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	429a      	cmp	r2, r3
 8008934:	d804      	bhi.n	8008940 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	4413      	add	r3, r2
 800893c:	607b      	str	r3, [r7, #4]
 800893e:	e001      	b.n	8008944 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	db70      	blt.n	8008a2c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d06d      	beq.n	8008a2c <pvPortMalloc+0x130>
 8008950:	4b43      	ldr	r3, [pc, #268]	; (8008a60 <pvPortMalloc+0x164>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d868      	bhi.n	8008a2c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800895a:	4b42      	ldr	r3, [pc, #264]	; (8008a64 <pvPortMalloc+0x168>)
 800895c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800895e:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <pvPortMalloc+0x168>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008964:	e004      	b.n	8008970 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d903      	bls.n	8008982 <pvPortMalloc+0x86>
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f1      	bne.n	8008966 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008982:	4b36      	ldr	r3, [pc, #216]	; (8008a5c <pvPortMalloc+0x160>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008988:	429a      	cmp	r2, r3
 800898a:	d04f      	beq.n	8008a2c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2208      	movs	r2, #8
 8008992:	4413      	add	r3, r2
 8008994:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1ad2      	subs	r2, r2, r3
 80089a6:	2308      	movs	r3, #8
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d91f      	bls.n	80089ee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4413      	add	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00a      	beq.n	80089d6 <pvPortMalloc+0xda>
        __asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	613b      	str	r3, [r7, #16]
    }
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	1ad2      	subs	r2, r2, r3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089e8:	6978      	ldr	r0, [r7, #20]
 80089ea:	f000 f8f9 	bl	8008be0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089ee:	4b1c      	ldr	r3, [pc, #112]	; (8008a60 <pvPortMalloc+0x164>)
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	4a19      	ldr	r2, [pc, #100]	; (8008a60 <pvPortMalloc+0x164>)
 80089fa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089fc:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <pvPortMalloc+0x164>)
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	4b19      	ldr	r3, [pc, #100]	; (8008a68 <pvPortMalloc+0x16c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d203      	bcs.n	8008a10 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a08:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <pvPortMalloc+0x164>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a16      	ldr	r2, [pc, #88]	; (8008a68 <pvPortMalloc+0x16c>)
 8008a0e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <pvPortMalloc+0x170>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3301      	adds	r3, #1
 8008a28:	4a10      	ldr	r2, [pc, #64]	; (8008a6c <pvPortMalloc+0x170>)
 8008a2a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008a2c:	f7fd fea0 	bl	8006770 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <pvPortMalloc+0x154>
        __asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	60fb      	str	r3, [r7, #12]
    }
 8008a4c:	bf00      	nop
 8008a4e:	e7fe      	b.n	8008a4e <pvPortMalloc+0x152>
    return pvReturn;
 8008a50:	69fb      	ldr	r3, [r7, #28]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3728      	adds	r7, #40	; 0x28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20003030 	.word	0x20003030
 8008a60:	20003034 	.word	0x20003034
 8008a64:	20003028 	.word	0x20003028
 8008a68:	20003038 	.word	0x20003038
 8008a6c:	2000303c 	.word	0x2000303c

08008a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d049      	beq.n	8008b16 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008a82:	2308      	movs	r3, #8
 8008a84:	425b      	negs	r3, r3
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4413      	add	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	db0a      	blt.n	8008aae <vPortFree+0x3e>
        __asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	60fb      	str	r3, [r7, #12]
    }
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <vPortFree+0x5c>
        __asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	60bb      	str	r3, [r7, #8]
    }
 8008ac8:	bf00      	nop
 8008aca:	e7fe      	b.n	8008aca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	0fdb      	lsrs	r3, r3, #31
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d01c      	beq.n	8008b16 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d118      	bne.n	8008b16 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8008af0:	f7fd fe30 	bl	8006754 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <vPortFree+0xb0>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4413      	add	r3, r2
 8008afe:	4a08      	ldr	r2, [pc, #32]	; (8008b20 <vPortFree+0xb0>)
 8008b00:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b02:	6938      	ldr	r0, [r7, #16]
 8008b04:	f000 f86c 	bl	8008be0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008b08:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <vPortFree+0xb4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	4a05      	ldr	r2, [pc, #20]	; (8008b24 <vPortFree+0xb4>)
 8008b10:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008b12:	f7fd fe2d 	bl	8006770 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008b16:	bf00      	nop
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20003034 	.word	0x20003034
 8008b24:	20003040 	.word	0x20003040

08008b28 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008b32:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008b34:	4b25      	ldr	r3, [pc, #148]	; (8008bcc <prvHeapInit+0xa4>)
 8008b36:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f003 0307 	and.w	r3, r3, #7
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00c      	beq.n	8008b5c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3307      	adds	r3, #7
 8008b46:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0307 	bic.w	r3, r3, #7
 8008b4e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	4a1d      	ldr	r2, [pc, #116]	; (8008bcc <prvHeapInit+0xa4>)
 8008b58:	4413      	add	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b60:	4a1b      	ldr	r2, [pc, #108]	; (8008bd0 <prvHeapInit+0xa8>)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008b66:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <prvHeapInit+0xa8>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4413      	add	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008b74:	2208      	movs	r2, #8
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f023 0307 	bic.w	r3, r3, #7
 8008b82:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4a13      	ldr	r2, [pc, #76]	; (8008bd4 <prvHeapInit+0xac>)
 8008b88:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008b8a:	4b12      	ldr	r3, [pc, #72]	; (8008bd4 <prvHeapInit+0xac>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008b92:	4b10      	ldr	r3, [pc, #64]	; (8008bd4 <prvHeapInit+0xac>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <prvHeapInit+0xac>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <prvHeapInit+0xb0>)
 8008bb6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	4a07      	ldr	r2, [pc, #28]	; (8008bdc <prvHeapInit+0xb4>)
 8008bbe:	6013      	str	r3, [r2, #0]
}
 8008bc0:	bf00      	nop
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	20000828 	.word	0x20000828
 8008bd0:	20003028 	.word	0x20003028
 8008bd4:	20003030 	.word	0x20003030
 8008bd8:	20003038 	.word	0x20003038
 8008bdc:	20003034 	.word	0x20003034

08008be0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008be8:	4b28      	ldr	r3, [pc, #160]	; (8008c8c <prvInsertBlockIntoFreeList+0xac>)
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e002      	b.n	8008bf4 <prvInsertBlockIntoFreeList+0x14>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d8f7      	bhi.n	8008bee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	4413      	add	r3, r2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d108      	bne.n	8008c22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	441a      	add	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	441a      	add	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d118      	bne.n	8008c68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <prvInsertBlockIntoFreeList+0xb0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d00d      	beq.n	8008c5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	441a      	add	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	e008      	b.n	8008c70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <prvInsertBlockIntoFreeList+0xb0>)
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	e003      	b.n	8008c70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d002      	beq.n	8008c7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008c7e:	bf00      	nop
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	20003028 	.word	0x20003028
 8008c90:	20003030 	.word	0x20003030

08008c94 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008c98:	4803      	ldr	r0, [pc, #12]	; (8008ca8 <_cbSendSystemDesc+0x14>)
 8008c9a:	f001 fa9f 	bl	800a1dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008c9e:	4803      	ldr	r0, [pc, #12]	; (8008cac <_cbSendSystemDesc+0x18>)
 8008ca0:	f001 fa9c 	bl	800a1dc <SEGGER_SYSVIEW_SendSysDesc>
}
 8008ca4:	bf00      	nop
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	0800abe8 	.word	0x0800abe8
 8008cac:	0800ac24 	.word	0x0800ac24

08008cb0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008cb4:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <SEGGER_SYSVIEW_Conf+0x20>)
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <SEGGER_SYSVIEW_Conf+0x20>)
 8008cba:	6819      	ldr	r1, [r3, #0]
 8008cbc:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <SEGGER_SYSVIEW_Conf+0x24>)
 8008cbe:	4a06      	ldr	r2, [pc, #24]	; (8008cd8 <SEGGER_SYSVIEW_Conf+0x28>)
 8008cc0:	f000 fd5c 	bl	800977c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008cc4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008cc8:	f000 fd9c 	bl	8009804 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008ccc:	bf00      	nop
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20000004 	.word	0x20000004
 8008cd4:	08008c95 	.word	0x08008c95
 8008cd8:	0800acf0 	.word	0x0800acf0

08008cdc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	607b      	str	r3, [r7, #4]
 8008ce6:	e033      	b.n	8008d50 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008ce8:	491e      	ldr	r1, [pc, #120]	; (8008d64 <_cbSendTaskList+0x88>)
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	440b      	add	r3, r1
 8008cf6:	6818      	ldr	r0, [r3, #0]
 8008cf8:	491a      	ldr	r1, [pc, #104]	; (8008d64 <_cbSendTaskList+0x88>)
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	3304      	adds	r3, #4
 8008d08:	6819      	ldr	r1, [r3, #0]
 8008d0a:	4c16      	ldr	r4, [pc, #88]	; (8008d64 <_cbSendTaskList+0x88>)
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4423      	add	r3, r4
 8008d18:	3308      	adds	r3, #8
 8008d1a:	681c      	ldr	r4, [r3, #0]
 8008d1c:	4d11      	ldr	r5, [pc, #68]	; (8008d64 <_cbSendTaskList+0x88>)
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	4613      	mov	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	442b      	add	r3, r5
 8008d2a:	330c      	adds	r3, #12
 8008d2c:	681d      	ldr	r5, [r3, #0]
 8008d2e:	4e0d      	ldr	r6, [pc, #52]	; (8008d64 <_cbSendTaskList+0x88>)
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4433      	add	r3, r6
 8008d3c:	3310      	adds	r3, #16
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	462b      	mov	r3, r5
 8008d44:	4622      	mov	r2, r4
 8008d46:	f000 f8bd 	bl	8008ec4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	607b      	str	r3, [r7, #4]
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <_cbSendTaskList+0x8c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d3c6      	bcc.n	8008ce8 <_cbSendTaskList+0xc>
  }
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d64:	20003044 	.word	0x20003044
 8008d68:	200030e4 	.word	0x200030e4

08008d6c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008d74:	f7fd fe0c 	bl	8006990 <xTaskGetTickCountFromISR>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	469a      	mov	sl, r3
 8008d7e:	4693      	mov	fp, r2
 8008d80:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	f04f 0a00 	mov.w	sl, #0
 8008d90:	f04f 0b00 	mov.w	fp, #0
 8008d94:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008d98:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008d9c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008da0:	4652      	mov	r2, sl
 8008da2:	465b      	mov	r3, fp
 8008da4:	1a14      	subs	r4, r2, r0
 8008da6:	eb63 0501 	sbc.w	r5, r3, r1
 8008daa:	f04f 0200 	mov.w	r2, #0
 8008dae:	f04f 0300 	mov.w	r3, #0
 8008db2:	00ab      	lsls	r3, r5, #2
 8008db4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008db8:	00a2      	lsls	r2, r4, #2
 8008dba:	4614      	mov	r4, r2
 8008dbc:	461d      	mov	r5, r3
 8008dbe:	eb14 0800 	adds.w	r8, r4, r0
 8008dc2:	eb45 0901 	adc.w	r9, r5, r1
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dda:	4690      	mov	r8, r2
 8008ddc:	4699      	mov	r9, r3
 8008dde:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008de2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008de6:	4610      	mov	r0, r2
 8008de8:	4619      	mov	r1, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008df4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008e02:	2205      	movs	r2, #5
 8008e04:	492b      	ldr	r1, [pc, #172]	; (8008eb4 <SYSVIEW_AddTask+0xc0>)
 8008e06:	68b8      	ldr	r0, [r7, #8]
 8008e08:	f001 fcec 	bl	800a7e4 <memcmp>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d04b      	beq.n	8008eaa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008e12:	4b29      	ldr	r3, [pc, #164]	; (8008eb8 <SYSVIEW_AddTask+0xc4>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b07      	cmp	r3, #7
 8008e18:	d903      	bls.n	8008e22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008e1a:	4828      	ldr	r0, [pc, #160]	; (8008ebc <SYSVIEW_AddTask+0xc8>)
 8008e1c:	f001 fc86 	bl	800a72c <SEGGER_SYSVIEW_Warn>
    return;
 8008e20:	e044      	b.n	8008eac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008e22:	4b25      	ldr	r3, [pc, #148]	; (8008eb8 <SYSVIEW_AddTask+0xc4>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4926      	ldr	r1, [pc, #152]	; (8008ec0 <SYSVIEW_AddTask+0xcc>)
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008e36:	4b20      	ldr	r3, [pc, #128]	; (8008eb8 <SYSVIEW_AddTask+0xc4>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4921      	ldr	r1, [pc, #132]	; (8008ec0 <SYSVIEW_AddTask+0xcc>)
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	3304      	adds	r3, #4
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <SYSVIEW_AddTask+0xc4>)
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	491b      	ldr	r1, [pc, #108]	; (8008ec0 <SYSVIEW_AddTask+0xcc>)
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	440b      	add	r3, r1
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008e62:	4b15      	ldr	r3, [pc, #84]	; (8008eb8 <SYSVIEW_AddTask+0xc4>)
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	4916      	ldr	r1, [pc, #88]	; (8008ec0 <SYSVIEW_AddTask+0xcc>)
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	330c      	adds	r3, #12
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008e78:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <SYSVIEW_AddTask+0xc4>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	4910      	ldr	r1, [pc, #64]	; (8008ec0 <SYSVIEW_AddTask+0xcc>)
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	440b      	add	r3, r1
 8008e88:	3310      	adds	r3, #16
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8008e8e:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <SYSVIEW_AddTask+0xc4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3301      	adds	r3, #1
 8008e94:	4a08      	ldr	r2, [pc, #32]	; (8008eb8 <SYSVIEW_AddTask+0xc4>)
 8008e96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	68b9      	ldr	r1, [r7, #8]
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f80e 	bl	8008ec4 <SYSVIEW_SendTaskInfo>
 8008ea8:	e000      	b.n	8008eac <SYSVIEW_AddTask+0xb8>
    return;
 8008eaa:	bf00      	nop

}
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	0800ac34 	.word	0x0800ac34
 8008eb8:	200030e4 	.word	0x200030e4
 8008ebc:	0800ac3c 	.word	0x0800ac3c
 8008ec0:	20003044 	.word	0x20003044

08008ec4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	; 0x28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008ed2:	f107 0314 	add.w	r3, r7, #20
 8008ed6:	2214      	movs	r2, #20
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 fc92 	bl	800a804 <memset>
  TaskInfo.TaskID     = TaskID;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008ef4:	f107 0314 	add.w	r3, r7, #20
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f001 f877 	bl	8009fec <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008efe:	bf00      	nop
 8008f00:	3728      	adds	r7, #40	; 0x28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008f0e:	4b26      	ldr	r3, [pc, #152]	; (8008fa8 <_DoInit+0xa0>)
 8008f10:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8008f12:	22a8      	movs	r2, #168	; 0xa8
 8008f14:	2100      	movs	r1, #0
 8008f16:	6838      	ldr	r0, [r7, #0]
 8008f18:	f001 fc74 	bl	800a804 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	2203      	movs	r2, #3
 8008f20:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2203      	movs	r2, #3
 8008f26:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	4a20      	ldr	r2, [pc, #128]	; (8008fac <_DoInit+0xa4>)
 8008f2c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	4a1f      	ldr	r2, [pc, #124]	; (8008fb0 <_DoInit+0xa8>)
 8008f32:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f3a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2200      	movs	r2, #0
 8008f46:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	4a16      	ldr	r2, [pc, #88]	; (8008fac <_DoInit+0xa4>)
 8008f52:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	4a17      	ldr	r2, [pc, #92]	; (8008fb4 <_DoInit+0xac>)
 8008f58:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2210      	movs	r2, #16
 8008f5e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2200      	movs	r2, #0
 8008f64:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008f72:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008f76:	2300      	movs	r3, #0
 8008f78:	607b      	str	r3, [r7, #4]
 8008f7a:	e00c      	b.n	8008f96 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f1c3 030f 	rsb	r3, r3, #15
 8008f82:	4a0d      	ldr	r2, [pc, #52]	; (8008fb8 <_DoInit+0xb0>)
 8008f84:	5cd1      	ldrb	r1, [r2, r3]
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	460a      	mov	r2, r1
 8008f8e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3301      	adds	r3, #1
 8008f94:	607b      	str	r3, [r7, #4]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b0f      	cmp	r3, #15
 8008f9a:	d9ef      	bls.n	8008f7c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008f9c:	f3bf 8f5f 	dmb	sy
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	200030e8 	.word	0x200030e8
 8008fac:	0800ac8c 	.word	0x0800ac8c
 8008fb0:	20003190 	.word	0x20003190
 8008fb4:	20003590 	.word	0x20003590
 8008fb8:	0800acf8 	.word	0x0800acf8

08008fbc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08c      	sub	sp, #48	; 0x30
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008fc8:	4b3e      	ldr	r3, [pc, #248]	; (80090c4 <SEGGER_RTT_ReadNoLock+0x108>)
 8008fca:	623b      	str	r3, [r7, #32]
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b53      	cmp	r3, #83	; 0x53
 8008fd4:	d001      	beq.n	8008fda <SEGGER_RTT_ReadNoLock+0x1e>
 8008fd6:	f7ff ff97 	bl	8008f08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	4413      	add	r3, r2
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	3360      	adds	r3, #96	; 0x60
 8008fe6:	4a37      	ldr	r2, [pc, #220]	; (80090c4 <SEGGER_RTT_ReadNoLock+0x108>)
 8008fe8:	4413      	add	r3, r2
 8008fea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8009000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	429a      	cmp	r2, r3
 8009006:	d92b      	bls.n	8009060 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4293      	cmp	r3, r2
 8009018:	bf28      	it	cs
 800901a:	4613      	movcs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	4413      	add	r3, r2
 8009026:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	6939      	ldr	r1, [r7, #16]
 800902c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800902e:	f001 fc6d 	bl	800a90c <memcpy>
    NumBytesRead += NumBytesRem;
 8009032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	4413      	add	r3, r2
 8009038:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800903a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	4413      	add	r3, r2
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800904a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	4413      	add	r3, r2
 8009050:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009058:	429a      	cmp	r2, r3
 800905a:	d101      	bne.n	8009060 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800905c:	2300      	movs	r3, #0
 800905e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4293      	cmp	r3, r2
 800906e:	bf28      	it	cs
 8009070:	4613      	movcs	r3, r2
 8009072:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d019      	beq.n	80090ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	4413      	add	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	6939      	ldr	r1, [r7, #16]
 8009088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800908a:	f001 fc3f 	bl	800a90c <memcpy>
    NumBytesRead += NumBytesRem;
 800908e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	4413      	add	r3, r2
 8009094:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8009096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	4413      	add	r3, r2
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80090a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	4413      	add	r3, r2
 80090ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3730      	adds	r7, #48	; 0x30
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	200030e8 	.word	0x200030e8

080090c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80090d6:	4b3d      	ldr	r3, [pc, #244]	; (80091cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80090d8:	61bb      	str	r3, [r7, #24]
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b53      	cmp	r3, #83	; 0x53
 80090e2:	d001      	beq.n	80090e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80090e4:	f7ff ff10 	bl	8008f08 <_DoInit>
  SEGGER_RTT_LOCK();
 80090e8:	f3ef 8311 	mrs	r3, BASEPRI
 80090ec:	f04f 0120 	mov.w	r1, #32
 80090f0:	f381 8811 	msr	BASEPRI, r1
 80090f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80090f6:	4b35      	ldr	r3, [pc, #212]	; (80091cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80090f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80090fa:	2300      	movs	r3, #0
 80090fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80090fe:	6939      	ldr	r1, [r7, #16]
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	4613      	mov	r3, r2
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	4413      	add	r3, r2
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	440b      	add	r3, r1
 800910e:	3304      	adds	r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d008      	beq.n	8009128 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	3301      	adds	r3, #1
 800911a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	69fa      	ldr	r2, [r7, #28]
 8009122:	429a      	cmp	r2, r3
 8009124:	dbeb      	blt.n	80090fe <SEGGER_RTT_AllocUpBuffer+0x36>
 8009126:	e000      	b.n	800912a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8009128:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	69fa      	ldr	r2, [r7, #28]
 8009130:	429a      	cmp	r2, r3
 8009132:	da3f      	bge.n	80091b4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8009134:	6939      	ldr	r1, [r7, #16]
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	1c5a      	adds	r2, r3, #1
 800913a:	4613      	mov	r3, r2
 800913c:	005b      	lsls	r3, r3, #1
 800913e:	4413      	add	r3, r2
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	440b      	add	r3, r1
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8009148:	6939      	ldr	r1, [r7, #16]
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	4613      	mov	r3, r2
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	4413      	add	r3, r2
 8009154:	00db      	lsls	r3, r3, #3
 8009156:	440b      	add	r3, r1
 8009158:	3304      	adds	r3, #4
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800915e:	6939      	ldr	r1, [r7, #16]
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	4613      	mov	r3, r2
 8009164:	005b      	lsls	r3, r3, #1
 8009166:	4413      	add	r3, r2
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	440b      	add	r3, r1
 800916c:	3320      	adds	r3, #32
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8009172:	6939      	ldr	r1, [r7, #16]
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	4613      	mov	r3, r2
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	4413      	add	r3, r2
 800917c:	00db      	lsls	r3, r3, #3
 800917e:	440b      	add	r3, r1
 8009180:	3328      	adds	r3, #40	; 0x28
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8009186:	6939      	ldr	r1, [r7, #16]
 8009188:	69fa      	ldr	r2, [r7, #28]
 800918a:	4613      	mov	r3, r2
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	4413      	add	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	440b      	add	r3, r1
 8009194:	3324      	adds	r3, #36	; 0x24
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800919a:	6939      	ldr	r1, [r7, #16]
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	4613      	mov	r3, r2
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	4413      	add	r3, r2
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	440b      	add	r3, r1
 80091a8:	332c      	adds	r3, #44	; 0x2c
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80091ae:	f3bf 8f5f 	dmb	sy
 80091b2:	e002      	b.n	80091ba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80091b4:	f04f 33ff 	mov.w	r3, #4294967295
 80091b8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80091c0:	69fb      	ldr	r3, [r7, #28]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3720      	adds	r7, #32
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200030e8 	.word	0x200030e8

080091d0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08a      	sub	sp, #40	; 0x28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80091de:	4b21      	ldr	r3, [pc, #132]	; (8009264 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80091e0:	623b      	str	r3, [r7, #32]
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b53      	cmp	r3, #83	; 0x53
 80091ea:	d001      	beq.n	80091f0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80091ec:	f7ff fe8c 	bl	8008f08 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80091f0:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80091f2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d82c      	bhi.n	8009254 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80091fa:	f3ef 8311 	mrs	r3, BASEPRI
 80091fe:	f04f 0120 	mov.w	r1, #32
 8009202:	f381 8811 	msr	BASEPRI, r1
 8009206:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4613      	mov	r3, r2
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	4413      	add	r3, r2
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	3360      	adds	r3, #96	; 0x60
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	4413      	add	r3, r2
 8009218:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00e      	beq.n	800923e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2200      	movs	r2, #0
 8009236:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2200      	movs	r2, #0
 800923c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009242:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009244:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800924e:	2300      	movs	r3, #0
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
 8009252:	e002      	b.n	800925a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8009254:	f04f 33ff 	mov.w	r3, #4294967295
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800925c:	4618      	mov	r0, r3
 800925e:	3728      	adds	r7, #40	; 0x28
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	200030e8 	.word	0x200030e8

08009268 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	60fa      	str	r2, [r7, #12]
 800927e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b80      	cmp	r3, #128	; 0x80
 8009284:	d90a      	bls.n	800929c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8009286:	2380      	movs	r3, #128	; 0x80
 8009288:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800928a:	e007      	b.n	800929c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	1c53      	adds	r3, r2, #1
 8009290:	60bb      	str	r3, [r7, #8]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	1c59      	adds	r1, r3, #1
 8009296:	60f9      	str	r1, [r7, #12]
 8009298:	7812      	ldrb	r2, [r2, #0]
 800929a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	1e5a      	subs	r2, r3, #1
 80092a0:	607a      	str	r2, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <_EncodeStr+0x46>
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1ee      	bne.n	800928c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80092ba:	68fb      	ldr	r3, [r7, #12]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3307      	adds	r3, #7
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80092e6:	4b34      	ldr	r3, [pc, #208]	; (80093b8 <_HandleIncomingPacket+0xd8>)
 80092e8:	7e1b      	ldrb	r3, [r3, #24]
 80092ea:	4618      	mov	r0, r3
 80092ec:	1cfb      	adds	r3, r7, #3
 80092ee:	2201      	movs	r2, #1
 80092f0:	4619      	mov	r1, r3
 80092f2:	f7ff fe63 	bl	8008fbc <SEGGER_RTT_ReadNoLock>
 80092f6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d057      	beq.n	80093ae <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80092fe:	78fb      	ldrb	r3, [r7, #3]
 8009300:	2b80      	cmp	r3, #128	; 0x80
 8009302:	d031      	beq.n	8009368 <_HandleIncomingPacket+0x88>
 8009304:	2b80      	cmp	r3, #128	; 0x80
 8009306:	dc40      	bgt.n	800938a <_HandleIncomingPacket+0xaa>
 8009308:	2b07      	cmp	r3, #7
 800930a:	dc15      	bgt.n	8009338 <_HandleIncomingPacket+0x58>
 800930c:	2b00      	cmp	r3, #0
 800930e:	dd3c      	ble.n	800938a <_HandleIncomingPacket+0xaa>
 8009310:	3b01      	subs	r3, #1
 8009312:	2b06      	cmp	r3, #6
 8009314:	d839      	bhi.n	800938a <_HandleIncomingPacket+0xaa>
 8009316:	a201      	add	r2, pc, #4	; (adr r2, 800931c <_HandleIncomingPacket+0x3c>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	0800933f 	.word	0x0800933f
 8009320:	08009345 	.word	0x08009345
 8009324:	0800934b 	.word	0x0800934b
 8009328:	08009351 	.word	0x08009351
 800932c:	08009357 	.word	0x08009357
 8009330:	0800935d 	.word	0x0800935d
 8009334:	08009363 	.word	0x08009363
 8009338:	2b7f      	cmp	r3, #127	; 0x7f
 800933a:	d033      	beq.n	80093a4 <_HandleIncomingPacket+0xc4>
 800933c:	e025      	b.n	800938a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800933e:	f000 fcdb 	bl	8009cf8 <SEGGER_SYSVIEW_Start>
      break;
 8009342:	e034      	b.n	80093ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009344:	f000 fd92 	bl	8009e6c <SEGGER_SYSVIEW_Stop>
      break;
 8009348:	e031      	b.n	80093ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800934a:	f000 ff6b 	bl	800a224 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800934e:	e02e      	b.n	80093ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009350:	f000 ff30 	bl	800a1b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009354:	e02b      	b.n	80093ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8009356:	f000 fdaf 	bl	8009eb8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800935a:	e028      	b.n	80093ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800935c:	f001 f9a8 	bl	800a6b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009360:	e025      	b.n	80093ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8009362:	f001 f987 	bl	800a674 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8009366:	e022      	b.n	80093ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009368:	4b13      	ldr	r3, [pc, #76]	; (80093b8 <_HandleIncomingPacket+0xd8>)
 800936a:	7e1b      	ldrb	r3, [r3, #24]
 800936c:	4618      	mov	r0, r3
 800936e:	1cfb      	adds	r3, r7, #3
 8009370:	2201      	movs	r2, #1
 8009372:	4619      	mov	r1, r3
 8009374:	f7ff fe22 	bl	8008fbc <SEGGER_RTT_ReadNoLock>
 8009378:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d013      	beq.n	80093a8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	4618      	mov	r0, r3
 8009384:	f001 f8ec 	bl	800a560 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009388:	e00e      	b.n	80093a8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800938a:	78fb      	ldrb	r3, [r7, #3]
 800938c:	b25b      	sxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	da0c      	bge.n	80093ac <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <_HandleIncomingPacket+0xd8>)
 8009394:	7e1b      	ldrb	r3, [r3, #24]
 8009396:	4618      	mov	r0, r3
 8009398:	1cfb      	adds	r3, r7, #3
 800939a:	2201      	movs	r2, #1
 800939c:	4619      	mov	r1, r3
 800939e:	f7ff fe0d 	bl	8008fbc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80093a2:	e003      	b.n	80093ac <_HandleIncomingPacket+0xcc>
      break;
 80093a4:	bf00      	nop
 80093a6:	e002      	b.n	80093ae <_HandleIncomingPacket+0xce>
      break;
 80093a8:	bf00      	nop
 80093aa:	e000      	b.n	80093ae <_HandleIncomingPacket+0xce>
      break;
 80093ac:	bf00      	nop
    }
  }
}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200049a8 	.word	0x200049a8

080093bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08c      	sub	sp, #48	; 0x30
 80093c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80093c2:	2301      	movs	r3, #1
 80093c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80093c6:	1d3b      	adds	r3, r7, #4
 80093c8:	3301      	adds	r3, #1
 80093ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093d0:	4b31      	ldr	r3, [pc, #196]	; (8009498 <_TrySendOverflowPacket+0xdc>)
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d6:	e00b      	b.n	80093f0 <_TrySendOverflowPacket+0x34>
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	1c59      	adds	r1, r3, #1
 80093e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80093e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093e6:	b2d2      	uxtb	r2, r2
 80093e8:	701a      	strb	r2, [r3, #0]
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	09db      	lsrs	r3, r3, #7
 80093ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	2b7f      	cmp	r3, #127	; 0x7f
 80093f4:	d8f0      	bhi.n	80093d8 <_TrySendOverflowPacket+0x1c>
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009406:	4b25      	ldr	r3, [pc, #148]	; (800949c <_TrySendOverflowPacket+0xe0>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800940c:	4b22      	ldr	r3, [pc, #136]	; (8009498 <_TrySendOverflowPacket+0xdc>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	623b      	str	r3, [r7, #32]
 800941e:	e00b      	b.n	8009438 <_TrySendOverflowPacket+0x7c>
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	b2da      	uxtb	r2, r3
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	1c59      	adds	r1, r3, #1
 8009428:	6279      	str	r1, [r7, #36]	; 0x24
 800942a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800942e:	b2d2      	uxtb	r2, r2
 8009430:	701a      	strb	r2, [r3, #0]
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	09db      	lsrs	r3, r3, #7
 8009436:	623b      	str	r3, [r7, #32]
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	2b7f      	cmp	r3, #127	; 0x7f
 800943c:	d8f0      	bhi.n	8009420 <_TrySendOverflowPacket+0x64>
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	627a      	str	r2, [r7, #36]	; 0x24
 8009444:	6a3a      	ldr	r2, [r7, #32]
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <_TrySendOverflowPacket+0xdc>)
 8009450:	785b      	ldrb	r3, [r3, #1]
 8009452:	4618      	mov	r0, r3
 8009454:	1d3b      	adds	r3, r7, #4
 8009456:	69fa      	ldr	r2, [r7, #28]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	461a      	mov	r2, r3
 800945c:	1d3b      	adds	r3, r7, #4
 800945e:	4619      	mov	r1, r3
 8009460:	f7f6 feb6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009464:	4603      	mov	r3, r0
 8009466:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800946e:	4a0a      	ldr	r2, [pc, #40]	; (8009498 <_TrySendOverflowPacket+0xdc>)
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009474:	4b08      	ldr	r3, [pc, #32]	; (8009498 <_TrySendOverflowPacket+0xdc>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	3b01      	subs	r3, #1
 800947a:	b2da      	uxtb	r2, r3
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <_TrySendOverflowPacket+0xdc>)
 800947e:	701a      	strb	r2, [r3, #0]
 8009480:	e004      	b.n	800948c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <_TrySendOverflowPacket+0xdc>)
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	3301      	adds	r3, #1
 8009488:	4a03      	ldr	r2, [pc, #12]	; (8009498 <_TrySendOverflowPacket+0xdc>)
 800948a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800948c:	693b      	ldr	r3, [r7, #16]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3730      	adds	r7, #48	; 0x30
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	200049a8 	.word	0x200049a8
 800949c:	e0001004 	.word	0xe0001004

080094a0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08a      	sub	sp, #40	; 0x28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80094ac:	4b98      	ldr	r3, [pc, #608]	; (8009710 <_SendPacket+0x270>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d010      	beq.n	80094d6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80094b4:	4b96      	ldr	r3, [pc, #600]	; (8009710 <_SendPacket+0x270>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 812d 	beq.w	8009718 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80094be:	4b94      	ldr	r3, [pc, #592]	; (8009710 <_SendPacket+0x270>)
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d109      	bne.n	80094da <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80094c6:	f7ff ff79 	bl	80093bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80094ca:	4b91      	ldr	r3, [pc, #580]	; (8009710 <_SendPacket+0x270>)
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	f040 8124 	bne.w	800971c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80094d4:	e001      	b.n	80094da <_SendPacket+0x3a>
    goto Send;
 80094d6:	bf00      	nop
 80094d8:	e000      	b.n	80094dc <_SendPacket+0x3c>
Send:
 80094da:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b1f      	cmp	r3, #31
 80094e0:	d809      	bhi.n	80094f6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80094e2:	4b8b      	ldr	r3, [pc, #556]	; (8009710 <_SendPacket+0x270>)
 80094e4:	69da      	ldr	r2, [r3, #28]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	fa22 f303 	lsr.w	r3, r2, r3
 80094ec:	f003 0301 	and.w	r3, r3, #1
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f040 8115 	bne.w	8009720 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b17      	cmp	r3, #23
 80094fa:	d807      	bhi.n	800950c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3b01      	subs	r3, #1
 8009500:	60fb      	str	r3, [r7, #12]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	b2da      	uxtb	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	701a      	strb	r2, [r3, #0]
 800950a:	e0c4      	b.n	8009696 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	2b7f      	cmp	r3, #127	; 0x7f
 8009518:	d912      	bls.n	8009540 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	09da      	lsrs	r2, r3, #7
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3b01      	subs	r3, #1
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	b2d2      	uxtb	r2, r2
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	b2db      	uxtb	r3, r3
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	3a01      	subs	r2, #1
 8009532:	60fa      	str	r2, [r7, #12]
 8009534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009538:	b2da      	uxtb	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	701a      	strb	r2, [r3, #0]
 800953e:	e006      	b.n	800954e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3b01      	subs	r3, #1
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	b2da      	uxtb	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b7e      	cmp	r3, #126	; 0x7e
 8009552:	d807      	bhi.n	8009564 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3b01      	subs	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	b2da      	uxtb	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	e098      	b.n	8009696 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800956a:	d212      	bcs.n	8009592 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	09da      	lsrs	r2, r3, #7
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3b01      	subs	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]
 8009576:	b2d2      	uxtb	r2, r2
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	3a01      	subs	r2, #1
 8009584:	60fa      	str	r2, [r7, #12]
 8009586:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800958a:	b2da      	uxtb	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	701a      	strb	r2, [r3, #0]
 8009590:	e081      	b.n	8009696 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009598:	d21d      	bcs.n	80095d6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	0b9a      	lsrs	r2, r3, #14
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	b2d2      	uxtb	r2, r2
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	09db      	lsrs	r3, r3, #7
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	3a01      	subs	r2, #1
 80095b4:	60fa      	str	r2, [r7, #12]
 80095b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	3a01      	subs	r2, #1
 80095c8:	60fa      	str	r2, [r7, #12]
 80095ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	701a      	strb	r2, [r3, #0]
 80095d4:	e05f      	b.n	8009696 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095dc:	d228      	bcs.n	8009630 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	0d5a      	lsrs	r2, r3, #21
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	0b9b      	lsrs	r3, r3, #14
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	3a01      	subs	r2, #1
 80095f8:	60fa      	str	r2, [r7, #12]
 80095fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	09db      	lsrs	r3, r3, #7
 8009608:	b2db      	uxtb	r3, r3
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	3a01      	subs	r2, #1
 800960e:	60fa      	str	r2, [r7, #12]
 8009610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009614:	b2da      	uxtb	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	3a01      	subs	r2, #1
 8009622:	60fa      	str	r2, [r7, #12]
 8009624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009628:	b2da      	uxtb	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	701a      	strb	r2, [r3, #0]
 800962e:	e032      	b.n	8009696 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	0f1a      	lsrs	r2, r3, #28
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3b01      	subs	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	0d5b      	lsrs	r3, r3, #21
 8009644:	b2db      	uxtb	r3, r3
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	3a01      	subs	r2, #1
 800964a:	60fa      	str	r2, [r7, #12]
 800964c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009650:	b2da      	uxtb	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	0b9b      	lsrs	r3, r3, #14
 800965a:	b2db      	uxtb	r3, r3
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	3a01      	subs	r2, #1
 8009660:	60fa      	str	r2, [r7, #12]
 8009662:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009666:	b2da      	uxtb	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	09db      	lsrs	r3, r3, #7
 8009670:	b2db      	uxtb	r3, r3
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	3a01      	subs	r2, #1
 8009676:	60fa      	str	r2, [r7, #12]
 8009678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800967c:	b2da      	uxtb	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	3a01      	subs	r2, #1
 800968a:	60fa      	str	r2, [r7, #12]
 800968c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009690:	b2da      	uxtb	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009696:	4b1f      	ldr	r3, [pc, #124]	; (8009714 <_SendPacket+0x274>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800969c:	4b1c      	ldr	r3, [pc, #112]	; (8009710 <_SendPacket+0x270>)
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	623b      	str	r3, [r7, #32]
 80096ae:	e00b      	b.n	80096c8 <_SendPacket+0x228>
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	1c59      	adds	r1, r3, #1
 80096b8:	6279      	str	r1, [r7, #36]	; 0x24
 80096ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096be:	b2d2      	uxtb	r2, r2
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	09db      	lsrs	r3, r3, #7
 80096c6:	623b      	str	r3, [r7, #32]
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	2b7f      	cmp	r3, #127	; 0x7f
 80096cc:	d8f0      	bhi.n	80096b0 <_SendPacket+0x210>
 80096ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	627a      	str	r2, [r7, #36]	; 0x24
 80096d4:	6a3a      	ldr	r2, [r7, #32]
 80096d6:	b2d2      	uxtb	r2, r2
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80096de:	4b0c      	ldr	r3, [pc, #48]	; (8009710 <_SendPacket+0x270>)
 80096e0:	785b      	ldrb	r3, [r3, #1]
 80096e2:	4618      	mov	r0, r3
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	461a      	mov	r2, r3
 80096ec:	68f9      	ldr	r1, [r7, #12]
 80096ee:	f7f6 fd6f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80096f2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80096fa:	4a05      	ldr	r2, [pc, #20]	; (8009710 <_SendPacket+0x270>)
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	60d3      	str	r3, [r2, #12]
 8009700:	e00f      	b.n	8009722 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009702:	4b03      	ldr	r3, [pc, #12]	; (8009710 <_SendPacket+0x270>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	3301      	adds	r3, #1
 8009708:	b2da      	uxtb	r2, r3
 800970a:	4b01      	ldr	r3, [pc, #4]	; (8009710 <_SendPacket+0x270>)
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	e008      	b.n	8009722 <_SendPacket+0x282>
 8009710:	200049a8 	.word	0x200049a8
 8009714:	e0001004 	.word	0xe0001004
    goto SendDone;
 8009718:	bf00      	nop
 800971a:	e002      	b.n	8009722 <_SendPacket+0x282>
      goto SendDone;
 800971c:	bf00      	nop
 800971e:	e000      	b.n	8009722 <_SendPacket+0x282>
      goto SendDone;
 8009720:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8009722:	4b14      	ldr	r3, [pc, #80]	; (8009774 <_SendPacket+0x2d4>)
 8009724:	7e1b      	ldrb	r3, [r3, #24]
 8009726:	4619      	mov	r1, r3
 8009728:	4a13      	ldr	r2, [pc, #76]	; (8009778 <_SendPacket+0x2d8>)
 800972a:	460b      	mov	r3, r1
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	440b      	add	r3, r1
 8009730:	00db      	lsls	r3, r3, #3
 8009732:	4413      	add	r3, r2
 8009734:	336c      	adds	r3, #108	; 0x6c
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	4b0e      	ldr	r3, [pc, #56]	; (8009774 <_SendPacket+0x2d4>)
 800973a:	7e1b      	ldrb	r3, [r3, #24]
 800973c:	4618      	mov	r0, r3
 800973e:	490e      	ldr	r1, [pc, #56]	; (8009778 <_SendPacket+0x2d8>)
 8009740:	4603      	mov	r3, r0
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	4403      	add	r3, r0
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	440b      	add	r3, r1
 800974a:	3370      	adds	r3, #112	; 0x70
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d00b      	beq.n	800976a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009752:	4b08      	ldr	r3, [pc, #32]	; (8009774 <_SendPacket+0x2d4>)
 8009754:	789b      	ldrb	r3, [r3, #2]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d107      	bne.n	800976a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800975a:	4b06      	ldr	r3, [pc, #24]	; (8009774 <_SendPacket+0x2d4>)
 800975c:	2201      	movs	r2, #1
 800975e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009760:	f7ff fdbe 	bl	80092e0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009764:	4b03      	ldr	r3, [pc, #12]	; (8009774 <_SendPacket+0x2d4>)
 8009766:	2200      	movs	r2, #0
 8009768:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800976a:	bf00      	nop
 800976c:	3728      	adds	r7, #40	; 0x28
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200049a8 	.word	0x200049a8
 8009778:	200030e8 	.word	0x200030e8

0800977c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af02      	add	r7, sp, #8
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800978a:	2300      	movs	r3, #0
 800978c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009790:	4917      	ldr	r1, [pc, #92]	; (80097f0 <SEGGER_SYSVIEW_Init+0x74>)
 8009792:	4818      	ldr	r0, [pc, #96]	; (80097f4 <SEGGER_SYSVIEW_Init+0x78>)
 8009794:	f7ff fc98 	bl	80090c8 <SEGGER_RTT_AllocUpBuffer>
 8009798:	4603      	mov	r3, r0
 800979a:	b2da      	uxtb	r2, r3
 800979c:	4b16      	ldr	r3, [pc, #88]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 800979e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80097a0:	4b15      	ldr	r3, [pc, #84]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097a2:	785a      	ldrb	r2, [r3, #1]
 80097a4:	4b14      	ldr	r3, [pc, #80]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097a6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80097a8:	4b13      	ldr	r3, [pc, #76]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097aa:	7e1b      	ldrb	r3, [r3, #24]
 80097ac:	4618      	mov	r0, r3
 80097ae:	2300      	movs	r3, #0
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	2308      	movs	r3, #8
 80097b4:	4a11      	ldr	r2, [pc, #68]	; (80097fc <SEGGER_SYSVIEW_Init+0x80>)
 80097b6:	490f      	ldr	r1, [pc, #60]	; (80097f4 <SEGGER_SYSVIEW_Init+0x78>)
 80097b8:	f7ff fd0a 	bl	80091d0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80097bc:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097be:	2200      	movs	r2, #0
 80097c0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80097c2:	4b0f      	ldr	r3, [pc, #60]	; (8009800 <SEGGER_SYSVIEW_Init+0x84>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a0c      	ldr	r2, [pc, #48]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097c8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80097ca:	4a0b      	ldr	r2, [pc, #44]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80097d0:	4a09      	ldr	r2, [pc, #36]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80097d6:	4a08      	ldr	r2, [pc, #32]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80097dc:	4a06      	ldr	r2, [pc, #24]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80097e2:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <SEGGER_SYSVIEW_Init+0x7c>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80097e8:	bf00      	nop
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	200035a0 	.word	0x200035a0
 80097f4:	0800aca0 	.word	0x0800aca0
 80097f8:	200049a8 	.word	0x200049a8
 80097fc:	200049a0 	.word	0x200049a0
 8009800:	e0001004 	.word	0xe0001004

08009804 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800980c:	4a04      	ldr	r2, [pc, #16]	; (8009820 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6113      	str	r3, [r2, #16]
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	200049a8 	.word	0x200049a8

08009824 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800982c:	f3ef 8311 	mrs	r3, BASEPRI
 8009830:	f04f 0120 	mov.w	r1, #32
 8009834:	f381 8811 	msr	BASEPRI, r1
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	4808      	ldr	r0, [pc, #32]	; (800985c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800983c:	f7ff fd44 	bl	80092c8 <_PreparePacket>
 8009840:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	68b9      	ldr	r1, [r7, #8]
 8009846:	68b8      	ldr	r0, [r7, #8]
 8009848:	f7ff fe2a 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f383 8811 	msr	BASEPRI, r3
}
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	200049d8 	.word	0x200049d8

08009860 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800986a:	f3ef 8311 	mrs	r3, BASEPRI
 800986e:	f04f 0120 	mov.w	r1, #32
 8009872:	f381 8811 	msr	BASEPRI, r1
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	4816      	ldr	r0, [pc, #88]	; (80098d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800987a:	f7ff fd25 	bl	80092c8 <_PreparePacket>
 800987e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	61fb      	str	r3, [r7, #28]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	61bb      	str	r3, [r7, #24]
 800988c:	e00b      	b.n	80098a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	b2da      	uxtb	r2, r3
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	1c59      	adds	r1, r3, #1
 8009896:	61f9      	str	r1, [r7, #28]
 8009898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800989c:	b2d2      	uxtb	r2, r2
 800989e:	701a      	strb	r2, [r3, #0]
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	09db      	lsrs	r3, r3, #7
 80098a4:	61bb      	str	r3, [r7, #24]
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	2b7f      	cmp	r3, #127	; 0x7f
 80098aa:	d8f0      	bhi.n	800988e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	61fa      	str	r2, [r7, #28]
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	b2d2      	uxtb	r2, r2
 80098b6:	701a      	strb	r2, [r3, #0]
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68f9      	ldr	r1, [r7, #12]
 80098c0:	6938      	ldr	r0, [r7, #16]
 80098c2:	f7ff fded 	bl	80094a0 <_SendPacket>
  RECORD_END();
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f383 8811 	msr	BASEPRI, r3
}
 80098cc:	bf00      	nop
 80098ce:	3720      	adds	r7, #32
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	200049d8 	.word	0x200049d8

080098d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08c      	sub	sp, #48	; 0x30
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80098e4:	f3ef 8311 	mrs	r3, BASEPRI
 80098e8:	f04f 0120 	mov.w	r1, #32
 80098ec:	f381 8811 	msr	BASEPRI, r1
 80098f0:	61fb      	str	r3, [r7, #28]
 80098f2:	4825      	ldr	r0, [pc, #148]	; (8009988 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80098f4:	f7ff fce8 	bl	80092c8 <_PreparePacket>
 80098f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28
 8009906:	e00b      	b.n	8009920 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990a:	b2da      	uxtb	r2, r3
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	1c59      	adds	r1, r3, #1
 8009910:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009912:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	09db      	lsrs	r3, r3, #7
 800991e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	2b7f      	cmp	r3, #127	; 0x7f
 8009924:	d8f0      	bhi.n	8009908 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800992c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800992e:	b2d2      	uxtb	r2, r2
 8009930:	701a      	strb	r2, [r3, #0]
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	623b      	str	r3, [r7, #32]
 800993e:	e00b      	b.n	8009958 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	b2da      	uxtb	r2, r3
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	1c59      	adds	r1, r3, #1
 8009948:	6279      	str	r1, [r7, #36]	; 0x24
 800994a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	701a      	strb	r2, [r3, #0]
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	09db      	lsrs	r3, r3, #7
 8009956:	623b      	str	r3, [r7, #32]
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	2b7f      	cmp	r3, #127	; 0x7f
 800995c:	d8f0      	bhi.n	8009940 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	627a      	str	r2, [r7, #36]	; 0x24
 8009964:	6a3a      	ldr	r2, [r7, #32]
 8009966:	b2d2      	uxtb	r2, r2
 8009968:	701a      	strb	r2, [r3, #0]
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	6979      	ldr	r1, [r7, #20]
 8009972:	69b8      	ldr	r0, [r7, #24]
 8009974:	f7ff fd94 	bl	80094a0 <_SendPacket>
  RECORD_END();
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	f383 8811 	msr	BASEPRI, r3
}
 800997e:	bf00      	nop
 8009980:	3730      	adds	r7, #48	; 0x30
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	200049d8 	.word	0x200049d8

0800998c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b08e      	sub	sp, #56	; 0x38
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800999a:	f3ef 8311 	mrs	r3, BASEPRI
 800999e:	f04f 0120 	mov.w	r1, #32
 80099a2:	f381 8811 	msr	BASEPRI, r1
 80099a6:	61fb      	str	r3, [r7, #28]
 80099a8:	4832      	ldr	r0, [pc, #200]	; (8009a74 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80099aa:	f7ff fc8d 	bl	80092c8 <_PreparePacket>
 80099ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	637b      	str	r3, [r7, #52]	; 0x34
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	633b      	str	r3, [r7, #48]	; 0x30
 80099bc:	e00b      	b.n	80099d6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c4:	1c59      	adds	r1, r3, #1
 80099c6:	6379      	str	r1, [r7, #52]	; 0x34
 80099c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099cc:	b2d2      	uxtb	r2, r2
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	09db      	lsrs	r3, r3, #7
 80099d4:	633b      	str	r3, [r7, #48]	; 0x30
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	2b7f      	cmp	r3, #127	; 0x7f
 80099da:	d8f0      	bhi.n	80099be <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80099dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	637a      	str	r2, [r7, #52]	; 0x34
 80099e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	701a      	strb	r2, [r3, #0]
 80099e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f4:	e00b      	b.n	8009a0e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	1c59      	adds	r1, r3, #1
 80099fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a04:	b2d2      	uxtb	r2, r2
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	09db      	lsrs	r3, r3, #7
 8009a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	2b7f      	cmp	r3, #127	; 0x7f
 8009a12:	d8f0      	bhi.n	80099f6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	627b      	str	r3, [r7, #36]	; 0x24
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	623b      	str	r3, [r7, #32]
 8009a2c:	e00b      	b.n	8009a46 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	1c59      	adds	r1, r3, #1
 8009a36:	6279      	str	r1, [r7, #36]	; 0x24
 8009a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	6a3b      	ldr	r3, [r7, #32]
 8009a42:	09db      	lsrs	r3, r3, #7
 8009a44:	623b      	str	r3, [r7, #32]
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	2b7f      	cmp	r3, #127	; 0x7f
 8009a4a:	d8f0      	bhi.n	8009a2e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	627a      	str	r2, [r7, #36]	; 0x24
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	b2d2      	uxtb	r2, r2
 8009a56:	701a      	strb	r2, [r3, #0]
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	6979      	ldr	r1, [r7, #20]
 8009a60:	69b8      	ldr	r0, [r7, #24]
 8009a62:	f7ff fd1d 	bl	80094a0 <_SendPacket>
  RECORD_END();
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	f383 8811 	msr	BASEPRI, r3
}
 8009a6c:	bf00      	nop
 8009a6e:	3738      	adds	r7, #56	; 0x38
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	200049d8 	.word	0x200049d8

08009a78 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b090      	sub	sp, #64	; 0x40
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
 8009a84:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009a86:	f3ef 8311 	mrs	r3, BASEPRI
 8009a8a:	f04f 0120 	mov.w	r1, #32
 8009a8e:	f381 8811 	msr	BASEPRI, r1
 8009a92:	61fb      	str	r3, [r7, #28]
 8009a94:	4840      	ldr	r0, [pc, #256]	; (8009b98 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009a96:	f7ff fc17 	bl	80092c8 <_PreparePacket>
 8009a9a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009aa8:	e00b      	b.n	8009ac2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab0:	1c59      	adds	r1, r3, #1
 8009ab2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ab8:	b2d2      	uxtb	r2, r2
 8009aba:	701a      	strb	r2, [r3, #0]
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	09db      	lsrs	r3, r3, #7
 8009ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ac6:	d8f0      	bhi.n	8009aaa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ad0:	b2d2      	uxtb	r2, r2
 8009ad2:	701a      	strb	r2, [r3, #0]
 8009ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	637b      	str	r3, [r7, #52]	; 0x34
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	633b      	str	r3, [r7, #48]	; 0x30
 8009ae0:	e00b      	b.n	8009afa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae8:	1c59      	adds	r1, r3, #1
 8009aea:	6379      	str	r1, [r7, #52]	; 0x34
 8009aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009af0:	b2d2      	uxtb	r2, r2
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	09db      	lsrs	r3, r3, #7
 8009af8:	633b      	str	r3, [r7, #48]	; 0x30
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	2b7f      	cmp	r3, #127	; 0x7f
 8009afe:	d8f0      	bhi.n	8009ae2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	637a      	str	r2, [r7, #52]	; 0x34
 8009b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b08:	b2d2      	uxtb	r2, r2
 8009b0a:	701a      	strb	r2, [r3, #0]
 8009b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b18:	e00b      	b.n	8009b32 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	1c59      	adds	r1, r3, #1
 8009b22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	701a      	strb	r2, [r3, #0]
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	09db      	lsrs	r3, r3, #7
 8009b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b34:	2b7f      	cmp	r3, #127	; 0x7f
 8009b36:	d8f0      	bhi.n	8009b1a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8009b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	701a      	strb	r2, [r3, #0]
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b4e:	623b      	str	r3, [r7, #32]
 8009b50:	e00b      	b.n	8009b6a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	1c59      	adds	r1, r3, #1
 8009b5a:	6279      	str	r1, [r7, #36]	; 0x24
 8009b5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b60:	b2d2      	uxtb	r2, r2
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	09db      	lsrs	r3, r3, #7
 8009b68:	623b      	str	r3, [r7, #32]
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8009b6e:	d8f0      	bhi.n	8009b52 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	627a      	str	r2, [r7, #36]	; 0x24
 8009b76:	6a3a      	ldr	r2, [r7, #32]
 8009b78:	b2d2      	uxtb	r2, r2
 8009b7a:	701a      	strb	r2, [r3, #0]
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	6979      	ldr	r1, [r7, #20]
 8009b84:	69b8      	ldr	r0, [r7, #24]
 8009b86:	f7ff fc8b 	bl	80094a0 <_SendPacket>
  RECORD_END();
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	f383 8811 	msr	BASEPRI, r3
}
 8009b90:	bf00      	nop
 8009b92:	3740      	adds	r7, #64	; 0x40
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	200049d8 	.word	0x200049d8

08009b9c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b092      	sub	sp, #72	; 0x48
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8009baa:	f3ef 8311 	mrs	r3, BASEPRI
 8009bae:	f04f 0120 	mov.w	r1, #32
 8009bb2:	f381 8811 	msr	BASEPRI, r1
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	484e      	ldr	r0, [pc, #312]	; (8009cf4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8009bba:	f7ff fb85 	bl	80092c8 <_PreparePacket>
 8009bbe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	643b      	str	r3, [r7, #64]	; 0x40
 8009bcc:	e00b      	b.n	8009be6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8009bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bd0:	b2da      	uxtb	r2, r3
 8009bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd4:	1c59      	adds	r1, r3, #1
 8009bd6:	6479      	str	r1, [r7, #68]	; 0x44
 8009bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bdc:	b2d2      	uxtb	r2, r2
 8009bde:	701a      	strb	r2, [r3, #0]
 8009be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be2:	09db      	lsrs	r3, r3, #7
 8009be4:	643b      	str	r3, [r7, #64]	; 0x40
 8009be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be8:	2b7f      	cmp	r3, #127	; 0x7f
 8009bea:	d8f0      	bhi.n	8009bce <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8009bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	647a      	str	r2, [r7, #68]	; 0x44
 8009bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bf4:	b2d2      	uxtb	r2, r2
 8009bf6:	701a      	strb	r2, [r3, #0]
 8009bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bfa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c04:	e00b      	b.n	8009c1e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c0c:	1c59      	adds	r1, r3, #1
 8009c0e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c14:	b2d2      	uxtb	r2, r2
 8009c16:	701a      	strb	r2, [r3, #0]
 8009c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1a:	09db      	lsrs	r3, r3, #7
 8009c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c20:	2b7f      	cmp	r3, #127	; 0x7f
 8009c22:	d8f0      	bhi.n	8009c06 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8009c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c2c:	b2d2      	uxtb	r2, r2
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	637b      	str	r3, [r7, #52]	; 0x34
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8009c3c:	e00b      	b.n	8009c56 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c44:	1c59      	adds	r1, r3, #1
 8009c46:	6379      	str	r1, [r7, #52]	; 0x34
 8009c48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c4c:	b2d2      	uxtb	r2, r2
 8009c4e:	701a      	strb	r2, [r3, #0]
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	09db      	lsrs	r3, r3, #7
 8009c54:	633b      	str	r3, [r7, #48]	; 0x30
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	2b7f      	cmp	r3, #127	; 0x7f
 8009c5a:	d8f0      	bhi.n	8009c3e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	637a      	str	r2, [r7, #52]	; 0x34
 8009c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	701a      	strb	r2, [r3, #0]
 8009c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c74:	e00b      	b.n	8009c8e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	1c59      	adds	r1, r3, #1
 8009c7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009c80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c84:	b2d2      	uxtb	r2, r2
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	09db      	lsrs	r3, r3, #7
 8009c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	2b7f      	cmp	r3, #127	; 0x7f
 8009c92:	d8f0      	bhi.n	8009c76 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8009c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c9c:	b2d2      	uxtb	r2, r2
 8009c9e:	701a      	strb	r2, [r3, #0]
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009caa:	623b      	str	r3, [r7, #32]
 8009cac:	e00b      	b.n	8009cc6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb4:	1c59      	adds	r1, r3, #1
 8009cb6:	6279      	str	r1, [r7, #36]	; 0x24
 8009cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009cbc:	b2d2      	uxtb	r2, r2
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	09db      	lsrs	r3, r3, #7
 8009cc4:	623b      	str	r3, [r7, #32]
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8009cca:	d8f0      	bhi.n	8009cae <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8009cd2:	6a3a      	ldr	r2, [r7, #32]
 8009cd4:	b2d2      	uxtb	r2, r2
 8009cd6:	701a      	strb	r2, [r3, #0]
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	6979      	ldr	r1, [r7, #20]
 8009ce0:	69b8      	ldr	r0, [r7, #24]
 8009ce2:	f7ff fbdd 	bl	80094a0 <_SendPacket>
  RECORD_END();
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	f383 8811 	msr	BASEPRI, r3
}
 8009cec:	bf00      	nop
 8009cee:	3748      	adds	r7, #72	; 0x48
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	200049d8 	.word	0x200049d8

08009cf8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08c      	sub	sp, #48	; 0x30
 8009cfc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8009cfe:	4b58      	ldr	r3, [pc, #352]	; (8009e60 <SEGGER_SYSVIEW_Start+0x168>)
 8009d00:	2201      	movs	r2, #1
 8009d02:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009d04:	f3ef 8311 	mrs	r3, BASEPRI
 8009d08:	f04f 0120 	mov.w	r1, #32
 8009d0c:	f381 8811 	msr	BASEPRI, r1
 8009d10:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009d12:	4b53      	ldr	r3, [pc, #332]	; (8009e60 <SEGGER_SYSVIEW_Start+0x168>)
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	220a      	movs	r2, #10
 8009d18:	4952      	ldr	r1, [pc, #328]	; (8009e64 <SEGGER_SYSVIEW_Start+0x16c>)
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7f6 fa58 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009d26:	200a      	movs	r0, #10
 8009d28:	f7ff fd7c 	bl	8009824 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8009d30:	f04f 0120 	mov.w	r1, #32
 8009d34:	f381 8811 	msr	BASEPRI, r1
 8009d38:	60bb      	str	r3, [r7, #8]
 8009d3a:	484b      	ldr	r0, [pc, #300]	; (8009e68 <SEGGER_SYSVIEW_Start+0x170>)
 8009d3c:	f7ff fac4 	bl	80092c8 <_PreparePacket>
 8009d40:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d4a:	4b45      	ldr	r3, [pc, #276]	; (8009e60 <SEGGER_SYSVIEW_Start+0x168>)
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d50:	e00b      	b.n	8009d6a <SEGGER_SYSVIEW_Start+0x72>
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	1c59      	adds	r1, r3, #1
 8009d5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009d5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d60:	b2d2      	uxtb	r2, r2
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	09db      	lsrs	r3, r3, #7
 8009d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8009d6e:	d8f0      	bhi.n	8009d52 <SEGGER_SYSVIEW_Start+0x5a>
 8009d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d78:	b2d2      	uxtb	r2, r2
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24
 8009d84:	4b36      	ldr	r3, [pc, #216]	; (8009e60 <SEGGER_SYSVIEW_Start+0x168>)
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	623b      	str	r3, [r7, #32]
 8009d8a:	e00b      	b.n	8009da4 <SEGGER_SYSVIEW_Start+0xac>
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	1c59      	adds	r1, r3, #1
 8009d94:	6279      	str	r1, [r7, #36]	; 0x24
 8009d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d9a:	b2d2      	uxtb	r2, r2
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	09db      	lsrs	r3, r3, #7
 8009da2:	623b      	str	r3, [r7, #32]
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	2b7f      	cmp	r3, #127	; 0x7f
 8009da8:	d8f0      	bhi.n	8009d8c <SEGGER_SYSVIEW_Start+0x94>
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	1c5a      	adds	r2, r3, #1
 8009dae:	627a      	str	r2, [r7, #36]	; 0x24
 8009db0:	6a3a      	ldr	r2, [r7, #32]
 8009db2:	b2d2      	uxtb	r2, r2
 8009db4:	701a      	strb	r2, [r3, #0]
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	61fb      	str	r3, [r7, #28]
 8009dbe:	4b28      	ldr	r3, [pc, #160]	; (8009e60 <SEGGER_SYSVIEW_Start+0x168>)
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	61bb      	str	r3, [r7, #24]
 8009dc4:	e00b      	b.n	8009dde <SEGGER_SYSVIEW_Start+0xe6>
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	1c59      	adds	r1, r3, #1
 8009dce:	61f9      	str	r1, [r7, #28]
 8009dd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009dd4:	b2d2      	uxtb	r2, r2
 8009dd6:	701a      	strb	r2, [r3, #0]
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	09db      	lsrs	r3, r3, #7
 8009ddc:	61bb      	str	r3, [r7, #24]
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	2b7f      	cmp	r3, #127	; 0x7f
 8009de2:	d8f0      	bhi.n	8009dc6 <SEGGER_SYSVIEW_Start+0xce>
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	61fa      	str	r2, [r7, #28]
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	b2d2      	uxtb	r2, r2
 8009dee:	701a      	strb	r2, [r3, #0]
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	617b      	str	r3, [r7, #20]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	613b      	str	r3, [r7, #16]
 8009dfc:	e00b      	b.n	8009e16 <SEGGER_SYSVIEW_Start+0x11e>
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	1c59      	adds	r1, r3, #1
 8009e06:	6179      	str	r1, [r7, #20]
 8009e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e0c:	b2d2      	uxtb	r2, r2
 8009e0e:	701a      	strb	r2, [r3, #0]
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	09db      	lsrs	r3, r3, #7
 8009e14:	613b      	str	r3, [r7, #16]
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2b7f      	cmp	r3, #127	; 0x7f
 8009e1a:	d8f0      	bhi.n	8009dfe <SEGGER_SYSVIEW_Start+0x106>
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	617a      	str	r2, [r7, #20]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	b2d2      	uxtb	r2, r2
 8009e26:	701a      	strb	r2, [r3, #0]
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009e2c:	2218      	movs	r2, #24
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff fb35 	bl	80094a0 <_SendPacket>
      RECORD_END();
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009e3c:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <SEGGER_SYSVIEW_Start+0x168>)
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009e44:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <SEGGER_SYSVIEW_Start+0x168>)
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009e4a:	f000 f9eb 	bl	800a224 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009e4e:	f000 f9b1 	bl	800a1b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009e52:	f000 fc2d 	bl	800a6b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009e56:	bf00      	nop
 8009e58:	3730      	adds	r7, #48	; 0x30
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	200049a8 	.word	0x200049a8
 8009e64:	0800ad0c 	.word	0x0800ad0c
 8009e68:	200049d8 	.word	0x200049d8

08009e6c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009e72:	f3ef 8311 	mrs	r3, BASEPRI
 8009e76:	f04f 0120 	mov.w	r1, #32
 8009e7a:	f381 8811 	msr	BASEPRI, r1
 8009e7e:	607b      	str	r3, [r7, #4]
 8009e80:	480b      	ldr	r0, [pc, #44]	; (8009eb0 <SEGGER_SYSVIEW_Stop+0x44>)
 8009e82:	f7ff fa21 	bl	80092c8 <_PreparePacket>
 8009e86:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009e88:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <SEGGER_SYSVIEW_Stop+0x48>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d007      	beq.n	8009ea0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009e90:	220b      	movs	r2, #11
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6838      	ldr	r0, [r7, #0]
 8009e96:	f7ff fb03 	bl	80094a0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009e9a:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <SEGGER_SYSVIEW_Stop+0x48>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f383 8811 	msr	BASEPRI, r3
}
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	200049d8 	.word	0x200049d8
 8009eb4:	200049a8 	.word	0x200049a8

08009eb8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08c      	sub	sp, #48	; 0x30
 8009ebc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8009ec2:	f04f 0120 	mov.w	r1, #32
 8009ec6:	f381 8811 	msr	BASEPRI, r1
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	4845      	ldr	r0, [pc, #276]	; (8009fe4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009ece:	f7ff f9fb 	bl	80092c8 <_PreparePacket>
 8009ed2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009edc:	4b42      	ldr	r3, [pc, #264]	; (8009fe8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ee2:	e00b      	b.n	8009efc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	1c59      	adds	r1, r3, #1
 8009eec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009eee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ef2:	b2d2      	uxtb	r2, r2
 8009ef4:	701a      	strb	r2, [r3, #0]
 8009ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef8:	09db      	lsrs	r3, r3, #7
 8009efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	2b7f      	cmp	r3, #127	; 0x7f
 8009f00:	d8f0      	bhi.n	8009ee4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f0a:	b2d2      	uxtb	r2, r2
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	627b      	str	r3, [r7, #36]	; 0x24
 8009f16:	4b34      	ldr	r3, [pc, #208]	; (8009fe8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	623b      	str	r3, [r7, #32]
 8009f1c:	e00b      	b.n	8009f36 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f24:	1c59      	adds	r1, r3, #1
 8009f26:	6279      	str	r1, [r7, #36]	; 0x24
 8009f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f2c:	b2d2      	uxtb	r2, r2
 8009f2e:	701a      	strb	r2, [r3, #0]
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	09db      	lsrs	r3, r3, #7
 8009f34:	623b      	str	r3, [r7, #32]
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	2b7f      	cmp	r3, #127	; 0x7f
 8009f3a:	d8f0      	bhi.n	8009f1e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	627a      	str	r2, [r7, #36]	; 0x24
 8009f42:	6a3a      	ldr	r2, [r7, #32]
 8009f44:	b2d2      	uxtb	r2, r2
 8009f46:	701a      	strb	r2, [r3, #0]
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	61fb      	str	r3, [r7, #28]
 8009f50:	4b25      	ldr	r3, [pc, #148]	; (8009fe8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	61bb      	str	r3, [r7, #24]
 8009f56:	e00b      	b.n	8009f70 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	1c59      	adds	r1, r3, #1
 8009f60:	61f9      	str	r1, [r7, #28]
 8009f62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	701a      	strb	r2, [r3, #0]
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	09db      	lsrs	r3, r3, #7
 8009f6e:	61bb      	str	r3, [r7, #24]
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2b7f      	cmp	r3, #127	; 0x7f
 8009f74:	d8f0      	bhi.n	8009f58 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	61fa      	str	r2, [r7, #28]
 8009f7c:	69ba      	ldr	r2, [r7, #24]
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	613b      	str	r3, [r7, #16]
 8009f8e:	e00b      	b.n	8009fa8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	1c59      	adds	r1, r3, #1
 8009f98:	6179      	str	r1, [r7, #20]
 8009f9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	09db      	lsrs	r3, r3, #7
 8009fa6:	613b      	str	r3, [r7, #16]
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	2b7f      	cmp	r3, #127	; 0x7f
 8009fac:	d8f0      	bhi.n	8009f90 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	617a      	str	r2, [r7, #20]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	b2d2      	uxtb	r2, r2
 8009fb8:	701a      	strb	r2, [r3, #0]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009fbe:	2218      	movs	r2, #24
 8009fc0:	6879      	ldr	r1, [r7, #4]
 8009fc2:	68b8      	ldr	r0, [r7, #8]
 8009fc4:	f7ff fa6c 	bl	80094a0 <_SendPacket>
  RECORD_END();
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009fce:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009fd6:	4b04      	ldr	r3, [pc, #16]	; (8009fe8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	4798      	blx	r3
  }
}
 8009fdc:	bf00      	nop
 8009fde:	3730      	adds	r7, #48	; 0x30
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	200049d8 	.word	0x200049d8
 8009fe8:	200049a8 	.word	0x200049a8

08009fec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b092      	sub	sp, #72	; 0x48
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8009ff8:	f04f 0120 	mov.w	r1, #32
 8009ffc:	f381 8811 	msr	BASEPRI, r1
 800a000:	617b      	str	r3, [r7, #20]
 800a002:	486a      	ldr	r0, [pc, #424]	; (800a1ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a004:	f7ff f960 	bl	80092c8 <_PreparePacket>
 800a008:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	647b      	str	r3, [r7, #68]	; 0x44
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	4b66      	ldr	r3, [pc, #408]	; (800a1b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	643b      	str	r3, [r7, #64]	; 0x40
 800a01e:	e00b      	b.n	800a038 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a022:	b2da      	uxtb	r2, r3
 800a024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a026:	1c59      	adds	r1, r3, #1
 800a028:	6479      	str	r1, [r7, #68]	; 0x44
 800a02a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a02e:	b2d2      	uxtb	r2, r2
 800a030:	701a      	strb	r2, [r3, #0]
 800a032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a034:	09db      	lsrs	r3, r3, #7
 800a036:	643b      	str	r3, [r7, #64]	; 0x40
 800a038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a03a:	2b7f      	cmp	r3, #127	; 0x7f
 800a03c:	d8f0      	bhi.n	800a020 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a03e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	647a      	str	r2, [r7, #68]	; 0x44
 800a044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a04c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	63bb      	str	r3, [r7, #56]	; 0x38
 800a058:	e00b      	b.n	800a072 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a060:	1c59      	adds	r1, r3, #1
 800a062:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a068:	b2d2      	uxtb	r2, r2
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	09db      	lsrs	r3, r3, #7
 800a070:	63bb      	str	r3, [r7, #56]	; 0x38
 800a072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a074:	2b7f      	cmp	r3, #127	; 0x7f
 800a076:	d8f0      	bhi.n	800a05a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a07a:	1c5a      	adds	r2, r3, #1
 800a07c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a07e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a080:	b2d2      	uxtb	r2, r2
 800a082:	701a      	strb	r2, [r3, #0]
 800a084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a086:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	2220      	movs	r2, #32
 800a08e:	4619      	mov	r1, r3
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff f8e9 	bl	8009268 <_EncodeStr>
 800a096:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a098:	2209      	movs	r2, #9
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	6938      	ldr	r0, [r7, #16]
 800a09e:	f7ff f9ff 	bl	80094a0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	4b40      	ldr	r3, [pc, #256]	; (800a1b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	633b      	str	r3, [r7, #48]	; 0x30
 800a0b6:	e00b      	b.n	800a0d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0be:	1c59      	adds	r1, r3, #1
 800a0c0:	6379      	str	r1, [r7, #52]	; 0x34
 800a0c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a0c6:	b2d2      	uxtb	r2, r2
 800a0c8:	701a      	strb	r2, [r3, #0]
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	09db      	lsrs	r3, r3, #7
 800a0ce:	633b      	str	r3, [r7, #48]	; 0x30
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	2b7f      	cmp	r3, #127	; 0x7f
 800a0d4:	d8f0      	bhi.n	800a0b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	637a      	str	r2, [r7, #52]	; 0x34
 800a0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0de:	b2d2      	uxtb	r2, r2
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0f0:	e00b      	b.n	800a10a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	1c59      	adds	r1, r3, #1
 800a0fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a0fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a100:	b2d2      	uxtb	r2, r2
 800a102:	701a      	strb	r2, [r3, #0]
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	09db      	lsrs	r3, r3, #7
 800a108:	62bb      	str	r3, [r7, #40]	; 0x28
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	2b7f      	cmp	r3, #127	; 0x7f
 800a10e:	d8f0      	bhi.n	800a0f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a118:	b2d2      	uxtb	r2, r2
 800a11a:	701a      	strb	r2, [r3, #0]
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	623b      	str	r3, [r7, #32]
 800a12a:	e00b      	b.n	800a144 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	1c59      	adds	r1, r3, #1
 800a134:	6279      	str	r1, [r7, #36]	; 0x24
 800a136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	09db      	lsrs	r3, r3, #7
 800a142:	623b      	str	r3, [r7, #32]
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	2b7f      	cmp	r3, #127	; 0x7f
 800a148:	d8f0      	bhi.n	800a12c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	627a      	str	r2, [r7, #36]	; 0x24
 800a150:	6a3a      	ldr	r2, [r7, #32]
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	61fb      	str	r3, [r7, #28]
 800a15e:	2300      	movs	r3, #0
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	e00b      	b.n	800a17c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	b2da      	uxtb	r2, r3
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	1c59      	adds	r1, r3, #1
 800a16c:	61f9      	str	r1, [r7, #28]
 800a16e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	701a      	strb	r2, [r3, #0]
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	09db      	lsrs	r3, r3, #7
 800a17a:	61bb      	str	r3, [r7, #24]
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	2b7f      	cmp	r3, #127	; 0x7f
 800a180:	d8f0      	bhi.n	800a164 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	61fa      	str	r2, [r7, #28]
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	b2d2      	uxtb	r2, r2
 800a18c:	701a      	strb	r2, [r3, #0]
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a192:	2215      	movs	r2, #21
 800a194:	68f9      	ldr	r1, [r7, #12]
 800a196:	6938      	ldr	r0, [r7, #16]
 800a198:	f7ff f982 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	f383 8811 	msr	BASEPRI, r3
}
 800a1a2:	bf00      	nop
 800a1a4:	3748      	adds	r7, #72	; 0x48
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	200049d8 	.word	0x200049d8
 800a1b0:	200049a8 	.word	0x200049a8

0800a1b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a1b8:	4b07      	ldr	r3, [pc, #28]	; (800a1d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d008      	beq.n	800a1d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a1c0:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a1ca:	4b03      	ldr	r3, [pc, #12]	; (800a1d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	4798      	blx	r3
  }
}
 800a1d2:	bf00      	nop
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	200049a8 	.word	0x200049a8

0800a1dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a1e4:	f3ef 8311 	mrs	r3, BASEPRI
 800a1e8:	f04f 0120 	mov.w	r1, #32
 800a1ec:	f381 8811 	msr	BASEPRI, r1
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	480b      	ldr	r0, [pc, #44]	; (800a220 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a1f4:	f7ff f868 	bl	80092c8 <_PreparePacket>
 800a1f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a1fa:	2280      	movs	r2, #128	; 0x80
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	6938      	ldr	r0, [r7, #16]
 800a200:	f7ff f832 	bl	8009268 <_EncodeStr>
 800a204:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a206:	220e      	movs	r2, #14
 800a208:	68f9      	ldr	r1, [r7, #12]
 800a20a:	6938      	ldr	r0, [r7, #16]
 800a20c:	f7ff f948 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f383 8811 	msr	BASEPRI, r3
}
 800a216:	bf00      	nop
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	200049d8 	.word	0x200049d8

0800a224 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a224:	b590      	push	{r4, r7, lr}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a22a:	4b15      	ldr	r3, [pc, #84]	; (800a280 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d01a      	beq.n	800a268 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a232:	4b13      	ldr	r3, [pc, #76]	; (800a280 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d015      	beq.n	800a268 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a23c:	4b10      	ldr	r3, [pc, #64]	; (800a280 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4798      	blx	r3
 800a244:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a248:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a24a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a24e:	f04f 0200 	mov.w	r2, #0
 800a252:	f04f 0300 	mov.w	r3, #0
 800a256:	000a      	movs	r2, r1
 800a258:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a25a:	4613      	mov	r3, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	4621      	mov	r1, r4
 800a260:	200d      	movs	r0, #13
 800a262:	f7ff fb39 	bl	80098d8 <SEGGER_SYSVIEW_RecordU32x2>
 800a266:	e006      	b.n	800a276 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a268:	4b06      	ldr	r3, [pc, #24]	; (800a284 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4619      	mov	r1, r3
 800a26e:	200c      	movs	r0, #12
 800a270:	f7ff faf6 	bl	8009860 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd90      	pop	{r4, r7, pc}
 800a27e:	bf00      	nop
 800a280:	200049a8 	.word	0x200049a8
 800a284:	e0001004 	.word	0xe0001004

0800a288 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a28e:	f3ef 8311 	mrs	r3, BASEPRI
 800a292:	f04f 0120 	mov.w	r1, #32
 800a296:	f381 8811 	msr	BASEPRI, r1
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	4819      	ldr	r0, [pc, #100]	; (800a304 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800a29e:	f7ff f813 	bl	80092c8 <_PreparePacket>
 800a2a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800a2a8:	4b17      	ldr	r3, [pc, #92]	; (800a308 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	617b      	str	r3, [r7, #20]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	613b      	str	r3, [r7, #16]
 800a2ba:	e00b      	b.n	800a2d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	1c59      	adds	r1, r3, #1
 800a2c4:	6179      	str	r1, [r7, #20]
 800a2c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	09db      	lsrs	r3, r3, #7
 800a2d2:	613b      	str	r3, [r7, #16]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	2b7f      	cmp	r3, #127	; 0x7f
 800a2d8:	d8f0      	bhi.n	800a2bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	617a      	str	r2, [r7, #20]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	68b8      	ldr	r0, [r7, #8]
 800a2f0:	f7ff f8d6 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f383 8811 	msr	BASEPRI, r3
}
 800a2fa:	bf00      	nop
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	200049d8 	.word	0x200049d8
 800a308:	e000ed04 	.word	0xe000ed04

0800a30c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a312:	f3ef 8311 	mrs	r3, BASEPRI
 800a316:	f04f 0120 	mov.w	r1, #32
 800a31a:	f381 8811 	msr	BASEPRI, r1
 800a31e:	607b      	str	r3, [r7, #4]
 800a320:	4807      	ldr	r0, [pc, #28]	; (800a340 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a322:	f7fe ffd1 	bl	80092c8 <_PreparePacket>
 800a326:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a328:	2203      	movs	r2, #3
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6838      	ldr	r0, [r7, #0]
 800a32e:	f7ff f8b7 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f383 8811 	msr	BASEPRI, r3
}
 800a338:	bf00      	nop
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	200049d8 	.word	0x200049d8

0800a344 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a34a:	f3ef 8311 	mrs	r3, BASEPRI
 800a34e:	f04f 0120 	mov.w	r1, #32
 800a352:	f381 8811 	msr	BASEPRI, r1
 800a356:	607b      	str	r3, [r7, #4]
 800a358:	4807      	ldr	r0, [pc, #28]	; (800a378 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a35a:	f7fe ffb5 	bl	80092c8 <_PreparePacket>
 800a35e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a360:	2212      	movs	r2, #18
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6838      	ldr	r0, [r7, #0]
 800a366:	f7ff f89b 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f383 8811 	msr	BASEPRI, r3
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	200049d8 	.word	0x200049d8

0800a37c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a382:	f3ef 8311 	mrs	r3, BASEPRI
 800a386:	f04f 0120 	mov.w	r1, #32
 800a38a:	f381 8811 	msr	BASEPRI, r1
 800a38e:	607b      	str	r3, [r7, #4]
 800a390:	4807      	ldr	r0, [pc, #28]	; (800a3b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a392:	f7fe ff99 	bl	80092c8 <_PreparePacket>
 800a396:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a398:	2211      	movs	r2, #17
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6838      	ldr	r0, [r7, #0]
 800a39e:	f7ff f87f 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f383 8811 	msr	BASEPRI, r3
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	200049d8 	.word	0x200049d8

0800a3b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a3bc:	f3ef 8311 	mrs	r3, BASEPRI
 800a3c0:	f04f 0120 	mov.w	r1, #32
 800a3c4:	f381 8811 	msr	BASEPRI, r1
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	4819      	ldr	r0, [pc, #100]	; (800a430 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a3cc:	f7fe ff7c 	bl	80092c8 <_PreparePacket>
 800a3d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a3d6:	4b17      	ldr	r3, [pc, #92]	; (800a434 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	61fb      	str	r3, [r7, #28]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	61bb      	str	r3, [r7, #24]
 800a3e8:	e00b      	b.n	800a402 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	1c59      	adds	r1, r3, #1
 800a3f2:	61f9      	str	r1, [r7, #28]
 800a3f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	701a      	strb	r2, [r3, #0]
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	09db      	lsrs	r3, r3, #7
 800a400:	61bb      	str	r3, [r7, #24]
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	2b7f      	cmp	r3, #127	; 0x7f
 800a406:	d8f0      	bhi.n	800a3ea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	1c5a      	adds	r2, r3, #1
 800a40c:	61fa      	str	r2, [r7, #28]
 800a40e:	69ba      	ldr	r2, [r7, #24]
 800a410:	b2d2      	uxtb	r2, r2
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a418:	2208      	movs	r2, #8
 800a41a:	68f9      	ldr	r1, [r7, #12]
 800a41c:	6938      	ldr	r0, [r7, #16]
 800a41e:	f7ff f83f 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f383 8811 	msr	BASEPRI, r3
}
 800a428:	bf00      	nop
 800a42a:	3720      	adds	r7, #32
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	200049d8 	.word	0x200049d8
 800a434:	200049a8 	.word	0x200049a8

0800a438 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a440:	f3ef 8311 	mrs	r3, BASEPRI
 800a444:	f04f 0120 	mov.w	r1, #32
 800a448:	f381 8811 	msr	BASEPRI, r1
 800a44c:	617b      	str	r3, [r7, #20]
 800a44e:	4819      	ldr	r0, [pc, #100]	; (800a4b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a450:	f7fe ff3a 	bl	80092c8 <_PreparePacket>
 800a454:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a45a:	4b17      	ldr	r3, [pc, #92]	; (800a4b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	61fb      	str	r3, [r7, #28]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	61bb      	str	r3, [r7, #24]
 800a46c:	e00b      	b.n	800a486 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	b2da      	uxtb	r2, r3
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	1c59      	adds	r1, r3, #1
 800a476:	61f9      	str	r1, [r7, #28]
 800a478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a47c:	b2d2      	uxtb	r2, r2
 800a47e:	701a      	strb	r2, [r3, #0]
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	09db      	lsrs	r3, r3, #7
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2b7f      	cmp	r3, #127	; 0x7f
 800a48a:	d8f0      	bhi.n	800a46e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	61fa      	str	r2, [r7, #28]
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	b2d2      	uxtb	r2, r2
 800a496:	701a      	strb	r2, [r3, #0]
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a49c:	2204      	movs	r2, #4
 800a49e:	68f9      	ldr	r1, [r7, #12]
 800a4a0:	6938      	ldr	r0, [r7, #16]
 800a4a2:	f7fe fffd 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f383 8811 	msr	BASEPRI, r3
}
 800a4ac:	bf00      	nop
 800a4ae:	3720      	adds	r7, #32
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	200049d8 	.word	0x200049d8
 800a4b8:	200049a8 	.word	0x200049a8

0800a4bc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a4c4:	f3ef 8311 	mrs	r3, BASEPRI
 800a4c8:	f04f 0120 	mov.w	r1, #32
 800a4cc:	f381 8811 	msr	BASEPRI, r1
 800a4d0:	617b      	str	r3, [r7, #20]
 800a4d2:	4819      	ldr	r0, [pc, #100]	; (800a538 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a4d4:	f7fe fef8 	bl	80092c8 <_PreparePacket>
 800a4d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a4de:	4b17      	ldr	r3, [pc, #92]	; (800a53c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	61fb      	str	r3, [r7, #28]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	61bb      	str	r3, [r7, #24]
 800a4f0:	e00b      	b.n	800a50a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	1c59      	adds	r1, r3, #1
 800a4fa:	61f9      	str	r1, [r7, #28]
 800a4fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	701a      	strb	r2, [r3, #0]
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	09db      	lsrs	r3, r3, #7
 800a508:	61bb      	str	r3, [r7, #24]
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	2b7f      	cmp	r3, #127	; 0x7f
 800a50e:	d8f0      	bhi.n	800a4f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	61fa      	str	r2, [r7, #28]
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	b2d2      	uxtb	r2, r2
 800a51a:	701a      	strb	r2, [r3, #0]
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a520:	2206      	movs	r2, #6
 800a522:	68f9      	ldr	r1, [r7, #12]
 800a524:	6938      	ldr	r0, [r7, #16]
 800a526:	f7fe ffbb 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f383 8811 	msr	BASEPRI, r3
}
 800a530:	bf00      	nop
 800a532:	3720      	adds	r7, #32
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	200049d8 	.word	0x200049d8
 800a53c:	200049a8 	.word	0x200049a8

0800a540 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800a548:	4b04      	ldr	r3, [pc, #16]	; (800a55c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	1ad3      	subs	r3, r2, r3
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	200049a8 	.word	0x200049a8

0800a560 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a560:	b580      	push	{r7, lr}
 800a562:	b08c      	sub	sp, #48	; 0x30
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a56a:	4b40      	ldr	r3, [pc, #256]	; (800a66c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d077      	beq.n	800a662 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800a572:	4b3e      	ldr	r3, [pc, #248]	; (800a66c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a578:	2300      	movs	r3, #0
 800a57a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a57c:	e008      	b.n	800a590 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d007      	beq.n	800a59a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	3301      	adds	r3, #1
 800a58e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a594:	429a      	cmp	r2, r3
 800a596:	d3f2      	bcc.n	800a57e <SEGGER_SYSVIEW_SendModule+0x1e>
 800a598:	e000      	b.n	800a59c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a59a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d055      	beq.n	800a64e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a5a2:	f3ef 8311 	mrs	r3, BASEPRI
 800a5a6:	f04f 0120 	mov.w	r1, #32
 800a5aa:	f381 8811 	msr	BASEPRI, r1
 800a5ae:	617b      	str	r3, [r7, #20]
 800a5b0:	482f      	ldr	r0, [pc, #188]	; (800a670 <SEGGER_SYSVIEW_SendModule+0x110>)
 800a5b2:	f7fe fe89 	bl	80092c8 <_PreparePacket>
 800a5b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	623b      	str	r3, [r7, #32]
 800a5c4:	e00b      	b.n	800a5de <SEGGER_SYSVIEW_SendModule+0x7e>
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	1c59      	adds	r1, r3, #1
 800a5ce:	6279      	str	r1, [r7, #36]	; 0x24
 800a5d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	09db      	lsrs	r3, r3, #7
 800a5dc:	623b      	str	r3, [r7, #32]
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	2b7f      	cmp	r3, #127	; 0x7f
 800a5e2:	d8f0      	bhi.n	800a5c6 <SEGGER_SYSVIEW_SendModule+0x66>
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	627a      	str	r2, [r7, #36]	; 0x24
 800a5ea:	6a3a      	ldr	r2, [r7, #32]
 800a5ec:	b2d2      	uxtb	r2, r2
 800a5ee:	701a      	strb	r2, [r3, #0]
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	61bb      	str	r3, [r7, #24]
 800a5fe:	e00b      	b.n	800a618 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	b2da      	uxtb	r2, r3
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	1c59      	adds	r1, r3, #1
 800a608:	61f9      	str	r1, [r7, #28]
 800a60a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a60e:	b2d2      	uxtb	r2, r2
 800a610:	701a      	strb	r2, [r3, #0]
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	09db      	lsrs	r3, r3, #7
 800a616:	61bb      	str	r3, [r7, #24]
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	2b7f      	cmp	r3, #127	; 0x7f
 800a61c:	d8f0      	bhi.n	800a600 <SEGGER_SYSVIEW_SendModule+0xa0>
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	1c5a      	adds	r2, r3, #1
 800a622:	61fa      	str	r2, [r7, #28]
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2280      	movs	r2, #128	; 0x80
 800a634:	4619      	mov	r1, r3
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f7fe fe16 	bl	8009268 <_EncodeStr>
 800a63c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a63e:	2216      	movs	r2, #22
 800a640:	68f9      	ldr	r1, [r7, #12]
 800a642:	6938      	ldr	r0, [r7, #16]
 800a644:	f7fe ff2c 	bl	80094a0 <_SendPacket>
      RECORD_END();
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	2b00      	cmp	r3, #0
 800a652:	d006      	beq.n	800a662 <SEGGER_SYSVIEW_SendModule+0x102>
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	4798      	blx	r3
    }
  }
}
 800a662:	bf00      	nop
 800a664:	3730      	adds	r7, #48	; 0x30
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	200049d0 	.word	0x200049d0
 800a670:	200049d8 	.word	0x200049d8

0800a674 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a67a:	4b0c      	ldr	r3, [pc, #48]	; (800a6ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00f      	beq.n	800a6a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a682:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1f2      	bne.n	800a688 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	200049d0 	.word	0x200049d0

0800a6b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a6b6:	f3ef 8311 	mrs	r3, BASEPRI
 800a6ba:	f04f 0120 	mov.w	r1, #32
 800a6be:	f381 8811 	msr	BASEPRI, r1
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	4817      	ldr	r0, [pc, #92]	; (800a724 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a6c6:	f7fe fdff 	bl	80092c8 <_PreparePacket>
 800a6ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	617b      	str	r3, [r7, #20]
 800a6d4:	4b14      	ldr	r3, [pc, #80]	; (800a728 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	e00b      	b.n	800a6f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	1c59      	adds	r1, r3, #1
 800a6e4:	6179      	str	r1, [r7, #20]
 800a6e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a6ea:	b2d2      	uxtb	r2, r2
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	09db      	lsrs	r3, r3, #7
 800a6f2:	613b      	str	r3, [r7, #16]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a6f8:	d8f0      	bhi.n	800a6dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	617a      	str	r2, [r7, #20]
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a70a:	221b      	movs	r2, #27
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	68b8      	ldr	r0, [r7, #8]
 800a710:	f7fe fec6 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f383 8811 	msr	BASEPRI, r3
}
 800a71a:	bf00      	nop
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	200049d8 	.word	0x200049d8
 800a728:	200049d4 	.word	0x200049d4

0800a72c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08a      	sub	sp, #40	; 0x28
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a734:	f3ef 8311 	mrs	r3, BASEPRI
 800a738:	f04f 0120 	mov.w	r1, #32
 800a73c:	f381 8811 	msr	BASEPRI, r1
 800a740:	617b      	str	r3, [r7, #20]
 800a742:	4827      	ldr	r0, [pc, #156]	; (800a7e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a744:	f7fe fdc0 	bl	80092c8 <_PreparePacket>
 800a748:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a74a:	2280      	movs	r2, #128	; 0x80
 800a74c:	6879      	ldr	r1, [r7, #4]
 800a74e:	6938      	ldr	r0, [r7, #16]
 800a750:	f7fe fd8a 	bl	8009268 <_EncodeStr>
 800a754:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
 800a75a:	2301      	movs	r3, #1
 800a75c:	623b      	str	r3, [r7, #32]
 800a75e:	e00b      	b.n	800a778 <SEGGER_SYSVIEW_Warn+0x4c>
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	b2da      	uxtb	r2, r3
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	1c59      	adds	r1, r3, #1
 800a768:	6279      	str	r1, [r7, #36]	; 0x24
 800a76a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a76e:	b2d2      	uxtb	r2, r2
 800a770:	701a      	strb	r2, [r3, #0]
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	09db      	lsrs	r3, r3, #7
 800a776:	623b      	str	r3, [r7, #32]
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	2b7f      	cmp	r3, #127	; 0x7f
 800a77c:	d8f0      	bhi.n	800a760 <SEGGER_SYSVIEW_Warn+0x34>
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	1c5a      	adds	r2, r3, #1
 800a782:	627a      	str	r2, [r7, #36]	; 0x24
 800a784:	6a3a      	ldr	r2, [r7, #32]
 800a786:	b2d2      	uxtb	r2, r2
 800a788:	701a      	strb	r2, [r3, #0]
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	61fb      	str	r3, [r7, #28]
 800a792:	2300      	movs	r3, #0
 800a794:	61bb      	str	r3, [r7, #24]
 800a796:	e00b      	b.n	800a7b0 <SEGGER_SYSVIEW_Warn+0x84>
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	1c59      	adds	r1, r3, #1
 800a7a0:	61f9      	str	r1, [r7, #28]
 800a7a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	09db      	lsrs	r3, r3, #7
 800a7ae:	61bb      	str	r3, [r7, #24]
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	2b7f      	cmp	r3, #127	; 0x7f
 800a7b4:	d8f0      	bhi.n	800a798 <SEGGER_SYSVIEW_Warn+0x6c>
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	61fa      	str	r2, [r7, #28]
 800a7bc:	69ba      	ldr	r2, [r7, #24]
 800a7be:	b2d2      	uxtb	r2, r2
 800a7c0:	701a      	strb	r2, [r3, #0]
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a7c6:	221a      	movs	r2, #26
 800a7c8:	68f9      	ldr	r1, [r7, #12]
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f7fe fe68 	bl	80094a0 <_SendPacket>
  RECORD_END();
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f383 8811 	msr	BASEPRI, r3
}
 800a7d6:	bf00      	nop
 800a7d8:	3728      	adds	r7, #40	; 0x28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	200049d8 	.word	0x200049d8

0800a7e4 <memcmp>:
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	3901      	subs	r1, #1
 800a7e8:	4402      	add	r2, r0
 800a7ea:	4290      	cmp	r0, r2
 800a7ec:	d101      	bne.n	800a7f2 <memcmp+0xe>
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	e005      	b.n	800a7fe <memcmp+0x1a>
 800a7f2:	7803      	ldrb	r3, [r0, #0]
 800a7f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a7f8:	42a3      	cmp	r3, r4
 800a7fa:	d001      	beq.n	800a800 <memcmp+0x1c>
 800a7fc:	1b18      	subs	r0, r3, r4
 800a7fe:	bd10      	pop	{r4, pc}
 800a800:	3001      	adds	r0, #1
 800a802:	e7f2      	b.n	800a7ea <memcmp+0x6>

0800a804 <memset>:
 800a804:	4402      	add	r2, r0
 800a806:	4603      	mov	r3, r0
 800a808:	4293      	cmp	r3, r2
 800a80a:	d100      	bne.n	800a80e <memset+0xa>
 800a80c:	4770      	bx	lr
 800a80e:	f803 1b01 	strb.w	r1, [r3], #1
 800a812:	e7f9      	b.n	800a808 <memset+0x4>

0800a814 <_reclaim_reent>:
 800a814:	4b29      	ldr	r3, [pc, #164]	; (800a8bc <_reclaim_reent+0xa8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4283      	cmp	r3, r0
 800a81a:	b570      	push	{r4, r5, r6, lr}
 800a81c:	4604      	mov	r4, r0
 800a81e:	d04b      	beq.n	800a8b8 <_reclaim_reent+0xa4>
 800a820:	69c3      	ldr	r3, [r0, #28]
 800a822:	b143      	cbz	r3, 800a836 <_reclaim_reent+0x22>
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d144      	bne.n	800a8b4 <_reclaim_reent+0xa0>
 800a82a:	69e3      	ldr	r3, [r4, #28]
 800a82c:	6819      	ldr	r1, [r3, #0]
 800a82e:	b111      	cbz	r1, 800a836 <_reclaim_reent+0x22>
 800a830:	4620      	mov	r0, r4
 800a832:	f000 f879 	bl	800a928 <_free_r>
 800a836:	6961      	ldr	r1, [r4, #20]
 800a838:	b111      	cbz	r1, 800a840 <_reclaim_reent+0x2c>
 800a83a:	4620      	mov	r0, r4
 800a83c:	f000 f874 	bl	800a928 <_free_r>
 800a840:	69e1      	ldr	r1, [r4, #28]
 800a842:	b111      	cbz	r1, 800a84a <_reclaim_reent+0x36>
 800a844:	4620      	mov	r0, r4
 800a846:	f000 f86f 	bl	800a928 <_free_r>
 800a84a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a84c:	b111      	cbz	r1, 800a854 <_reclaim_reent+0x40>
 800a84e:	4620      	mov	r0, r4
 800a850:	f000 f86a 	bl	800a928 <_free_r>
 800a854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a856:	b111      	cbz	r1, 800a85e <_reclaim_reent+0x4a>
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 f865 	bl	800a928 <_free_r>
 800a85e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a860:	b111      	cbz	r1, 800a868 <_reclaim_reent+0x54>
 800a862:	4620      	mov	r0, r4
 800a864:	f000 f860 	bl	800a928 <_free_r>
 800a868:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a86a:	b111      	cbz	r1, 800a872 <_reclaim_reent+0x5e>
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 f85b 	bl	800a928 <_free_r>
 800a872:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a874:	b111      	cbz	r1, 800a87c <_reclaim_reent+0x68>
 800a876:	4620      	mov	r0, r4
 800a878:	f000 f856 	bl	800a928 <_free_r>
 800a87c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a87e:	b111      	cbz	r1, 800a886 <_reclaim_reent+0x72>
 800a880:	4620      	mov	r0, r4
 800a882:	f000 f851 	bl	800a928 <_free_r>
 800a886:	6a23      	ldr	r3, [r4, #32]
 800a888:	b1b3      	cbz	r3, 800a8b8 <_reclaim_reent+0xa4>
 800a88a:	4620      	mov	r0, r4
 800a88c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a890:	4718      	bx	r3
 800a892:	5949      	ldr	r1, [r1, r5]
 800a894:	b941      	cbnz	r1, 800a8a8 <_reclaim_reent+0x94>
 800a896:	3504      	adds	r5, #4
 800a898:	69e3      	ldr	r3, [r4, #28]
 800a89a:	2d80      	cmp	r5, #128	; 0x80
 800a89c:	68d9      	ldr	r1, [r3, #12]
 800a89e:	d1f8      	bne.n	800a892 <_reclaim_reent+0x7e>
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f000 f841 	bl	800a928 <_free_r>
 800a8a6:	e7c0      	b.n	800a82a <_reclaim_reent+0x16>
 800a8a8:	680e      	ldr	r6, [r1, #0]
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 f83c 	bl	800a928 <_free_r>
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	e7ef      	b.n	800a894 <_reclaim_reent+0x80>
 800a8b4:	2500      	movs	r5, #0
 800a8b6:	e7ef      	b.n	800a898 <_reclaim_reent+0x84>
 800a8b8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ba:	bf00      	nop
 800a8bc:	20000070 	.word	0x20000070

0800a8c0 <__libc_init_array>:
 800a8c0:	b570      	push	{r4, r5, r6, lr}
 800a8c2:	4d0d      	ldr	r5, [pc, #52]	; (800a8f8 <__libc_init_array+0x38>)
 800a8c4:	4c0d      	ldr	r4, [pc, #52]	; (800a8fc <__libc_init_array+0x3c>)
 800a8c6:	1b64      	subs	r4, r4, r5
 800a8c8:	10a4      	asrs	r4, r4, #2
 800a8ca:	2600      	movs	r6, #0
 800a8cc:	42a6      	cmp	r6, r4
 800a8ce:	d109      	bne.n	800a8e4 <__libc_init_array+0x24>
 800a8d0:	4d0b      	ldr	r5, [pc, #44]	; (800a900 <__libc_init_array+0x40>)
 800a8d2:	4c0c      	ldr	r4, [pc, #48]	; (800a904 <__libc_init_array+0x44>)
 800a8d4:	f000 f880 	bl	800a9d8 <_init>
 800a8d8:	1b64      	subs	r4, r4, r5
 800a8da:	10a4      	asrs	r4, r4, #2
 800a8dc:	2600      	movs	r6, #0
 800a8de:	42a6      	cmp	r6, r4
 800a8e0:	d105      	bne.n	800a8ee <__libc_init_array+0x2e>
 800a8e2:	bd70      	pop	{r4, r5, r6, pc}
 800a8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e8:	4798      	blx	r3
 800a8ea:	3601      	adds	r6, #1
 800a8ec:	e7ee      	b.n	800a8cc <__libc_init_array+0xc>
 800a8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8f2:	4798      	blx	r3
 800a8f4:	3601      	adds	r6, #1
 800a8f6:	e7f2      	b.n	800a8de <__libc_init_array+0x1e>
 800a8f8:	0800ad20 	.word	0x0800ad20
 800a8fc:	0800ad20 	.word	0x0800ad20
 800a900:	0800ad20 	.word	0x0800ad20
 800a904:	0800ad24 	.word	0x0800ad24

0800a908 <__retarget_lock_acquire_recursive>:
 800a908:	4770      	bx	lr

0800a90a <__retarget_lock_release_recursive>:
 800a90a:	4770      	bx	lr

0800a90c <memcpy>:
 800a90c:	440a      	add	r2, r1
 800a90e:	4291      	cmp	r1, r2
 800a910:	f100 33ff 	add.w	r3, r0, #4294967295
 800a914:	d100      	bne.n	800a918 <memcpy+0xc>
 800a916:	4770      	bx	lr
 800a918:	b510      	push	{r4, lr}
 800a91a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a91e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a922:	4291      	cmp	r1, r2
 800a924:	d1f9      	bne.n	800a91a <memcpy+0xe>
 800a926:	bd10      	pop	{r4, pc}

0800a928 <_free_r>:
 800a928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a92a:	2900      	cmp	r1, #0
 800a92c:	d044      	beq.n	800a9b8 <_free_r+0x90>
 800a92e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a932:	9001      	str	r0, [sp, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	f1a1 0404 	sub.w	r4, r1, #4
 800a93a:	bfb8      	it	lt
 800a93c:	18e4      	addlt	r4, r4, r3
 800a93e:	f000 f83f 	bl	800a9c0 <__malloc_lock>
 800a942:	4a1e      	ldr	r2, [pc, #120]	; (800a9bc <_free_r+0x94>)
 800a944:	9801      	ldr	r0, [sp, #4]
 800a946:	6813      	ldr	r3, [r2, #0]
 800a948:	b933      	cbnz	r3, 800a958 <_free_r+0x30>
 800a94a:	6063      	str	r3, [r4, #4]
 800a94c:	6014      	str	r4, [r2, #0]
 800a94e:	b003      	add	sp, #12
 800a950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a954:	f000 b83a 	b.w	800a9cc <__malloc_unlock>
 800a958:	42a3      	cmp	r3, r4
 800a95a:	d908      	bls.n	800a96e <_free_r+0x46>
 800a95c:	6825      	ldr	r5, [r4, #0]
 800a95e:	1961      	adds	r1, r4, r5
 800a960:	428b      	cmp	r3, r1
 800a962:	bf01      	itttt	eq
 800a964:	6819      	ldreq	r1, [r3, #0]
 800a966:	685b      	ldreq	r3, [r3, #4]
 800a968:	1949      	addeq	r1, r1, r5
 800a96a:	6021      	streq	r1, [r4, #0]
 800a96c:	e7ed      	b.n	800a94a <_free_r+0x22>
 800a96e:	461a      	mov	r2, r3
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	b10b      	cbz	r3, 800a978 <_free_r+0x50>
 800a974:	42a3      	cmp	r3, r4
 800a976:	d9fa      	bls.n	800a96e <_free_r+0x46>
 800a978:	6811      	ldr	r1, [r2, #0]
 800a97a:	1855      	adds	r5, r2, r1
 800a97c:	42a5      	cmp	r5, r4
 800a97e:	d10b      	bne.n	800a998 <_free_r+0x70>
 800a980:	6824      	ldr	r4, [r4, #0]
 800a982:	4421      	add	r1, r4
 800a984:	1854      	adds	r4, r2, r1
 800a986:	42a3      	cmp	r3, r4
 800a988:	6011      	str	r1, [r2, #0]
 800a98a:	d1e0      	bne.n	800a94e <_free_r+0x26>
 800a98c:	681c      	ldr	r4, [r3, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	6053      	str	r3, [r2, #4]
 800a992:	440c      	add	r4, r1
 800a994:	6014      	str	r4, [r2, #0]
 800a996:	e7da      	b.n	800a94e <_free_r+0x26>
 800a998:	d902      	bls.n	800a9a0 <_free_r+0x78>
 800a99a:	230c      	movs	r3, #12
 800a99c:	6003      	str	r3, [r0, #0]
 800a99e:	e7d6      	b.n	800a94e <_free_r+0x26>
 800a9a0:	6825      	ldr	r5, [r4, #0]
 800a9a2:	1961      	adds	r1, r4, r5
 800a9a4:	428b      	cmp	r3, r1
 800a9a6:	bf04      	itt	eq
 800a9a8:	6819      	ldreq	r1, [r3, #0]
 800a9aa:	685b      	ldreq	r3, [r3, #4]
 800a9ac:	6063      	str	r3, [r4, #4]
 800a9ae:	bf04      	itt	eq
 800a9b0:	1949      	addeq	r1, r1, r5
 800a9b2:	6021      	streq	r1, [r4, #0]
 800a9b4:	6054      	str	r4, [r2, #4]
 800a9b6:	e7ca      	b.n	800a94e <_free_r+0x26>
 800a9b8:	b003      	add	sp, #12
 800a9ba:	bd30      	pop	{r4, r5, pc}
 800a9bc:	20004bf8 	.word	0x20004bf8

0800a9c0 <__malloc_lock>:
 800a9c0:	4801      	ldr	r0, [pc, #4]	; (800a9c8 <__malloc_lock+0x8>)
 800a9c2:	f7ff bfa1 	b.w	800a908 <__retarget_lock_acquire_recursive>
 800a9c6:	bf00      	nop
 800a9c8:	20004bf4 	.word	0x20004bf4

0800a9cc <__malloc_unlock>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	; (800a9d4 <__malloc_unlock+0x8>)
 800a9ce:	f7ff bf9c 	b.w	800a90a <__retarget_lock_release_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	20004bf4 	.word	0x20004bf4

0800a9d8 <_init>:
 800a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9da:	bf00      	nop
 800a9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9de:	bc08      	pop	{r3}
 800a9e0:	469e      	mov	lr, r3
 800a9e2:	4770      	bx	lr

0800a9e4 <_fini>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	bf00      	nop
 800a9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ea:	bc08      	pop	{r3}
 800a9ec:	469e      	mov	lr, r3
 800a9ee:	4770      	bx	lr
